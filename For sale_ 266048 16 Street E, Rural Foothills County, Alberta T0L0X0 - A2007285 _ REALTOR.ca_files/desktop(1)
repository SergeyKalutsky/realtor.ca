/* Minification failed. Returning unminified contents.
(8506,317-324): run-time error JS1019: Can't have 'break' outside of loop: break a
 */
/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,a[t]=k.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,k="sizzle"+1*new Date,m=n.document,S=0,r=0,p=ue(),x=ue(),N=ue(),A=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==C&&T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!A[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&U.test(t)){(s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=k),o=(l=h(t)).length;while(o--)l[o]="#"+s+" "+xe(l[o]);c=l.join(","),f=ee.test(t)&&ye(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){A(t,!0)}finally{s===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),m!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===m&&y(m,e)?-1:t===C||t.ownerDocument===m&&y(m,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&E&&!A[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[S,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[S,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[k]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[S,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===S&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[k]&&(v=Ce(v)),y&&!y[k]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[k]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=N[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[k]?i.push(a):o.push(a);(a=N(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=S+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument===C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(S=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(S=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;var T=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,q=k(E);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(O[r]||k.uniqueSort(n),H.test(r)&&n.reverse()),this.pushStack(n)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},k.each(e.match(R)||[],function(e,t){n[t]=!0}),n):k.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){k.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return k.each(arguments,function(e,t){var n;while(-1<(n=k.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,M,s),l(u,o,I,s)):(u++,t.call(e,l(u,o,M,s),l(u,o,I,s),l(u,o,M,o.notifyWith))):(a!==M&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==I&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:M,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:M)),o[2][3].add(l(0,e,m(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},s={};return k.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=k.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)W(i[t],a(t),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&$.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var F=k.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return F.then(e)["catch"](function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(E,[k])}}),k.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(k.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;while(n--)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){J.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=k.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=E.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)k.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(be.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;k.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(xe=E.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ne(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function De(e,i,o){o?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(t);if(v){n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(R)||[""]).length;while(l--)d=g=(s=Ee.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(R)||[""]).length;while(l--)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||k.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=k.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){a=k.event.handlers.call(this,s,l),t=0;while((i=a[t++])&&!s.isPropagationStopped()){s.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!s.isImmediatePropagationStopped())s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){k.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=k.extend({},s),J.set(t,u))}}function Ie(n,r,i,o){r=g.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&Le.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Ie(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=k.map(ve(e,"script"),Pe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),s&&k.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Re),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Q.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(He,""),u,l))}return n}function We(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=k.style(e,t)),!y.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(s).appendChild(u);var e=C.getComputedStyle(u);n="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(s),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s=E.createElement("div"),u=E.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var Ue=["Webkit","Moz","ms"],Xe=E.createElement("div").style,Ve={};function Ge(e){var t=k.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[a]+"Width",!0,i))):(u+=k.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=k.css(e,"border"+re[a]+"Width",!0,i):s+=k.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,u,n):ue(e,Je,function(){return tt(e,u,n)})},set:function(e,t,n){var r,i=Fe(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),s=n?et(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-et(e,u,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),Ze(0,t,s)}}}),k.cssHooks.marginLeft=ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=Ze)}),k.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=k.css(e,t[a],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=nt.prototype.init,k.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(lt):C.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return C.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(o,e,t){var n,a,r=0,i=dt.prefilters.length,s=k.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=rt||ct(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:rt||ct(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=dt.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pt,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=k.isEmptyObject(t),o=k.speed(e,n,r),a=function(){var e=dt(this,k.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&ut.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(ft(r,!0),e,t,n)}}),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ot=E.createElement("input"),at=E.createElement("select").appendChild(E.createElement("option")),ot.type="checkbox",y.checkOn=""!==ot.value,y.optSelected=at.selected,(ot=E.createElement("input")).value="t",ot.type="radio",y.radioValue="t"===ot.value;var ht,gt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return _(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var a=gt[t]||k.find.attr;gt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=gt[o],gt[o]=r,r=null!=a(e,t,n)?o:null,gt[o]=i),r}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return _(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).addClass(t.call(this,e,xt(this)))});if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=k(this),r=bt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=xt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=k.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!Tt.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,Tt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&G(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Ct),k.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){k.event.simulate(r,e.target,k.event.fix(e))};k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Et=C.location,kt=Date.now(),St=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Nt.test(n)?i(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)qt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=E.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(R)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function _t(t,i,o,a){var s={},u=t===Wt;function l(e){var r;return s[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Et.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=k.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?k(y):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Pt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace(Mt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(R)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Ft.protocol+"//"+Ft.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),_t(It,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Rt.test(v.type),f=v.url.replace(Ht,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(St.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Ot,"$1"),o=(St.test(f)?"&":"?")+"_="+kt+++o),v.url=f+o),v.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+$t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=_t(Wt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();y.cors=!!Xt&&"withCredentials"in Xt,y.ajax=Xt=!!Xt,k.ajaxTransport(function(i){var o,a;if(y.cors||Xt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Ut[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||k.expando+"_"+kt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Vt=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===k.css(e,"position"))e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return _(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=ze(y.pixelPosition,function(e,t){if(t)return t=_e(e,n),$e.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(a,s){k.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},s,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=m,k.isWindow=x,k.camelCase=V,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var Qt=C.jQuery,Jt=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=Jt),e&&C.jQuery===k&&(C.jQuery=Qt),k},e||(C.jQuery=C.$=k),k});
;
/*! jQuery Migrate v3.0.1 | (c) jQuery Foundation and other contributors | jquery.org/license */

void 0 === jQuery.migrateMute && (jQuery.migrateMute = !0), function(e) {
    "function" == typeof define && define.amd ? define([ "jquery" ], window, e) : "object" == typeof module && module.exports ? module.exports = e(require("jquery"), window) : e(jQuery, window);
}(function(e, t) {
    "use strict";
    function r(r) {
        var n = t.console;
        o[r] || (o[r] = !0, e.migrateWarnings.push(r), n && n.warn && !e.migrateMute && (n.warn("JQMIGRATE: " + r), 
        e.migrateTrace && n.trace && n.trace()));
    }
    function n(e, t, n, a) {
        Object.defineProperty(e, t, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return r(a), n;
            },
            set: function(e) {
                r(a), n = e;
            }
        });
    }
    function a(e, t, n, a) {
        e[t] = function() {
            return r(a), n.apply(this, arguments);
        };
    }
    e.migrateVersion = "3.0.1", function() {
        var r = /^[12]\./;
        t.console && t.console.log && (e && !r.test(e.fn.jquery) || t.console.log("JQMIGRATE: jQuery 3.0.0+ REQUIRED"), 
        e.migrateWarnings && t.console.log("JQMIGRATE: Migrate plugin loaded multiple times"), 
        t.console.log("JQMIGRATE: Migrate is installed" + (e.migrateMute ? "" : " with logging active") + ", version " + e.migrateVersion));
    }();
    var o = {};
    e.migrateWarnings = [], void 0 === e.migrateTrace && (e.migrateTrace = !0), e.migrateReset = function() {
        o = {}, e.migrateWarnings.length = 0;
    }, "BackCompat" === t.document.compatMode && r("jQuery is not compatible with Quirks Mode");
    var i = e.fn.init, s = e.isNumeric, u = e.find, c = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/, l = /\[(\s*[-\w]+\s*)([~|^$*]?=)\s*([-\w#]*?#[-\w#]*)\s*\]/g;
    e.fn.init = function(e) {
        var t = Array.prototype.slice.call(arguments);
        return "string" == typeof e && "#" === e && (r("jQuery( '#' ) is not a valid selector"), 
        t[0] = []), i.apply(this, t);
    }, e.fn.init.prototype = e.fn, e.find = function(e) {
        var n = Array.prototype.slice.call(arguments);
        if ("string" == typeof e && c.test(e)) try {
            t.document.querySelector(e);
        } catch (a) {
            e = e.replace(l, function(e, t, r, n) {
                return "[" + t + r + '"' + n + '"]';
            });
            try {
                t.document.querySelector(e), r("Attribute selector with '#' must be quoted: " + n[0]), 
                n[0] = e;
            } catch (e) {
                r("Attribute selector with '#' was not fixed: " + n[0]);
            }
        }
        return u.apply(this, n);
    };
    var d;
    for (d in u) Object.prototype.hasOwnProperty.call(u, d) && (e.find[d] = u[d]);
    e.fn.size = function() {
        return r("jQuery.fn.size() is deprecated and removed; use the .length property"), 
        this.length;
    }, e.parseJSON = function() {
        return r("jQuery.parseJSON is deprecated; use JSON.parse"), JSON.parse.apply(null, arguments);
    }, e.isNumeric = function(t) {
        var n = s(t), a = function(t) {
            var r = t && t.toString();
            return !e.isArray(t) && r - parseFloat(r) + 1 >= 0;
        }(t);
        return n !== a && r("jQuery.isNumeric() should not be called on constructed objects"), 
        a;
    }, a(e, "holdReady", e.holdReady, "jQuery.holdReady is deprecated"), a(e, "unique", e.uniqueSort, "jQuery.unique is deprecated; use jQuery.uniqueSort"), 
    n(e.expr, "filters", e.expr.pseudos, "jQuery.expr.filters is deprecated; use jQuery.expr.pseudos"), 
    n(e.expr, ":", e.expr.pseudos, "jQuery.expr[':'] is deprecated; use jQuery.expr.pseudos");
    var p = e.ajax;
    e.ajax = function() {
        var e = p.apply(this, arguments);
        return e.promise && (a(e, "success", e.done, "jQXHR.success is deprecated and removed"), 
        a(e, "error", e.fail, "jQXHR.error is deprecated and removed"), a(e, "complete", e.always, "jQXHR.complete is deprecated and removed")), 
        e;
    };
    var f = e.fn.removeAttr, y = e.fn.toggleClass, m = /\S+/g;
    e.fn.removeAttr = function(t) {
        var n = this;
        return e.each(t.match(m), function(t, a) {
            e.expr.match.bool.test(a) && (r("jQuery.fn.removeAttr no longer sets boolean properties: " + a), 
            n.prop(a, !1));
        }), f.apply(this, arguments);
    }, e.fn.toggleClass = function(t) {
        return void 0 !== t && "boolean" != typeof t ? y.apply(this, arguments) : (r("jQuery.fn.toggleClass( boolean ) is deprecated"), 
        this.each(function() {
            var r = this.getAttribute && this.getAttribute("class") || "";
            r && e.data(this, "__className__", r), this.setAttribute && this.setAttribute("class", r || !1 === t ? "" : e.data(this, "__className__") || "");
        }));
    };
    var h = !1;
    e.swap && e.each([ "height", "width", "reliableMarginRight" ], function(t, r) {
        var n = e.cssHooks[r] && e.cssHooks[r].get;
        n && (e.cssHooks[r].get = function() {
            var e;
            return h = !0, e = n.apply(this, arguments), h = !1, e;
        });
    }), e.swap = function(e, t, n, a) {
        var o, i, s = {};
        h || r("jQuery.swap() is undocumented and deprecated");
        for (i in t) s[i] = e.style[i], e.style[i] = t[i];
        o = n.apply(e, a || []);
        for (i in t) e.style[i] = s[i];
        return o;
    };
    var g = e.data;
    e.data = function(t, n, a) {
        var o;
        if (n && "object" == typeof n && 2 === arguments.length) {
            o = e.hasData(t) && g.call(this, t);
            var i = {};
            for (var s in n) s !== e.camelCase(s) ? (r("jQuery.data() always sets/gets camelCased names: " + s), 
            o[s] = n[s]) : i[s] = n[s];
            return g.call(this, t, i), n;
        }
        return n && "string" == typeof n && n !== e.camelCase(n) && (o = e.hasData(t) && g.call(this, t)) && n in o ? (r("jQuery.data() always sets/gets camelCased names: " + n), 
        arguments.length > 2 && (o[n] = a), o[n]) : g.apply(this, arguments);
    };
    var v = e.Tween.prototype.run, j = function(e) {
        return e;
    };
    e.Tween.prototype.run = function() {
        e.easing[this.easing].length > 1 && (r("'jQuery.easing." + this.easing.toString() + "' should use only one argument"), 
        e.easing[this.easing] = j), v.apply(this, arguments);
    }, e.fx.interval = e.fx.interval || 13, t.requestAnimationFrame && n(e.fx, "interval", e.fx.interval, "jQuery.fx.interval is deprecated");
    var Q = e.fn.load, b = e.event.add, w = e.event.fix;
    e.event.props = [], e.event.fixHooks = {}, n(e.event.props, "concat", e.event.props.concat, "jQuery.event.props.concat() is deprecated and removed"), 
    e.event.fix = function(t) {
        var n, a = t.type, o = this.fixHooks[a], i = e.event.props;
        if (i.length) for (r("jQuery.event.props are deprecated and removed: " + i.join()); i.length; ) e.event.addProp(i.pop());
        if (o && !o._migrated_ && (o._migrated_ = !0, r("jQuery.event.fixHooks are deprecated and removed: " + a), 
        (i = o.props) && i.length)) for (;i.length; ) e.event.addProp(i.pop());
        return n = w.call(this, t), o && o.filter ? o.filter(n, t) : n;
    }, e.event.add = function(e, n) {
        return e === t && "load" === n && "complete" === t.document.readyState && r("jQuery(window).on('load'...) called after load event occurred"), 
        b.apply(this, arguments);
    }, e.each([ "load", "unload", "error" ], function(t, n) {
        e.fn[n] = function() {
            var e = Array.prototype.slice.call(arguments, 0);
            return "load" === n && "string" == typeof e[0] ? Q.apply(this, e) : (r("jQuery.fn." + n + "() is deprecated"), 
            e.splice(0, 0, n), arguments.length ? this.on.apply(this, e) : (this.triggerHandler.apply(this, e), 
            this));
        };
    }), e.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(t, n) {
        e.fn[n] = function(e, t) {
            return r("jQuery.fn." + n + "() event shorthand is deprecated"), arguments.length > 0 ? this.on(n, null, e, t) : this.trigger(n);
        };
    }), e(function() {
        e(t.document).triggerHandler("ready");
    }), e.event.special.ready = {
        setup: function() {
            this === t.document && r("'ready' event is deprecated");
        }
    }, e.fn.extend({
        bind: function(e, t, n) {
            return r("jQuery.fn.bind() is deprecated"), this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return r("jQuery.fn.unbind() is deprecated"), this.off(e, null, t);
        },
        delegate: function(e, t, n, a) {
            return r("jQuery.fn.delegate() is deprecated"), this.on(t, e, n, a);
        },
        undelegate: function(e, t, n) {
            return r("jQuery.fn.undelegate() is deprecated"), 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        },
        hover: function(e, t) {
            return r("jQuery.fn.hover() is deprecated"), this.on("mouseenter", e).on("mouseleave", t || e);
        }
    });
    var x = e.fn.offset;
    e.fn.offset = function() {
        var n, a = this[0], o = {
            top: 0,
            left: 0
        };
        return a && a.nodeType ? (n = (a.ownerDocument || t.document).documentElement, e.contains(n, a) ? x.apply(this, arguments) : (r("jQuery.fn.offset() requires an element connected to a document"), 
        o)) : (r("jQuery.fn.offset() requires a valid DOM element"), o);
    };
    var k = e.param;
    e.param = function(t, n) {
        var a = e.ajaxSettings && e.ajaxSettings.traditional;
        return void 0 === n && a && (r("jQuery.param() no longer uses jQuery.ajaxSettings.traditional"), 
        n = a), k.call(this, t, n);
    };
    var A = e.fn.andSelf || e.fn.addBack;
    e.fn.andSelf = function() {
        return r("jQuery.fn.andSelf() is deprecated and removed, use jQuery.fn.addBack()"), 
        A.apply(this, arguments);
    };
    var S = e.Deferred, q = [ [ "resolve", "done", e.Callbacks("once memory"), e.Callbacks("once memory"), "resolved" ], [ "reject", "fail", e.Callbacks("once memory"), e.Callbacks("once memory"), "rejected" ], [ "notify", "progress", e.Callbacks("memory"), e.Callbacks("memory") ] ];
    return e.Deferred = function(t) {
        var n = S(), a = n.promise();
        return n.pipe = a.pipe = function() {
            var t = arguments;
            return r("deferred.pipe() is deprecated"), e.Deferred(function(r) {
                e.each(q, function(o, i) {
                    var s = e.isFunction(t[o]) && t[o];
                    n[i[1]](function() {
                        var t = s && s.apply(this, arguments);
                        t && e.isFunction(t.promise) ? t.promise().done(r.resolve).fail(r.reject).progress(r.notify) : r[i[0] + "With"](this === a ? r.promise() : this, s ? [ t ] : arguments);
                    });
                }), t = null;
            }).promise();
        }, t && t.call(n, n), n;
    }, e.Deferred.exceptionHook = S.exceptionHook, e;
});;
/*! jQuery UI - v1.12.1 - 2020-02-20
* http://jqueryui.com
* Includes: widget.js, position.js, focusable.js, keycode.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/datepicker.js, widgets/menu.js, widgets/mouse.js, effect.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : t(jQuery) })(function (t) {
    function e(t) { for (var e = t.css("visibility"); "inherit" === e;)t = t.parent(), e = t.css("visibility"); return "hidden" !== e } function i(t) { for (var e, i; t.length && t[0] !== document;) { if (e = t.css("position"), ("absolute" === e || "relative" === e || "fixed" === e) && (i = parseInt(t.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i; t = t.parent() } return 0 } function s() { this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }, this._defaults = { showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: "c-10:c+10", showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1 }, t.extend(this._defaults, this.regional[""]), this.regional.en = t.extend(!0, {}, this.regional[""]), this.regional["en-US"] = t.extend(!0, {}, this.regional.en), this.dpDiv = n(t("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) } function n(e) { var i = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a"; return e.on("mouseout", i, function () { t(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).removeClass("ui-datepicker-next-hover") }).on("mouseover", i, o) } function o() { t.datepicker._isDisabledDatepicker(l.inline ? l.dpDiv.parent()[0] : l.input[0]) || (t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), t(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).addClass("ui-datepicker-next-hover")) } function a(e, i) { t.extend(e, i); for (var s in i) null == i[s] && (e[s] = i[s]); return e } t.ui = t.ui || {}, t.ui.version = "1.12.1"; var r = 0, h = Array.prototype.slice; t.cleanData = function (e) { return function (i) { var s, n, o; for (o = 0; null != (n = i[o]); o++)try { s = t._data(n, "events"), s && s.remove && t(n).triggerHandler("remove") } catch (a) { } e(i) } }(t.cleanData), t.widget = function (e, i, s) { var n, o, a, r = {}, h = e.split(".")[0]; e = e.split(".")[1]; var l = h + "-" + e; return s || (s = i, i = t.Widget), t.isArray(s) && (s = t.extend.apply(null, [{}].concat(s))), t.expr[":"][l.toLowerCase()] = function (e) { return !!t.data(e, l) }, t[h] = t[h] || {}, n = t[h][e], o = t[h][e] = function (t, e) { return this._createWidget ? (arguments.length && this._createWidget(t, e), void 0) : new o(t, e) }, t.extend(o, n, { version: s.version, _proto: t.extend({}, s), _childConstructors: [] }), a = new i, a.options = t.widget.extend({}, a.options), t.each(s, function (e, s) { return t.isFunction(s) ? (r[e] = function () { function t() { return i.prototype[e].apply(this, arguments) } function n(t) { return i.prototype[e].apply(this, t) } return function () { var e, i = this._super, o = this._superApply; return this._super = t, this._superApply = n, e = s.apply(this, arguments), this._super = i, this._superApply = o, e } }(), void 0) : (r[e] = s, void 0) }), o.prototype = t.widget.extend(a, { widgetEventPrefix: n ? a.widgetEventPrefix || e : e }, r, { constructor: o, namespace: h, widgetName: e, widgetFullName: l }), n ? (t.each(n._childConstructors, function (e, i) { var s = i.prototype; t.widget(s.namespace + "." + s.widgetName, o, i._proto) }), delete n._childConstructors) : i._childConstructors.push(o), t.widget.bridge(e, o), o }, t.widget.extend = function (e) { for (var i, s, n = h.call(arguments, 1), o = 0, a = n.length; a > o; o++)for (i in n[o]) s = n[o][i], n[o].hasOwnProperty(i) && void 0 !== s && (e[i] = t.isPlainObject(s) ? t.isPlainObject(e[i]) ? t.widget.extend({}, e[i], s) : t.widget.extend({}, s) : s); return e }, t.widget.bridge = function (e, i) { var s = i.prototype.widgetFullName || e; t.fn[e] = function (n) { var o = "string" == typeof n, a = h.call(arguments, 1), r = this; return o ? this.length || "instance" !== n ? this.each(function () { var i, o = t.data(this, s); return "instance" === n ? (r = o, !1) : o ? t.isFunction(o[n]) && "_" !== n.charAt(0) ? (i = o[n].apply(o, a), i !== o && void 0 !== i ? (r = i && i.jquery ? r.pushStack(i.get()) : i, !1) : void 0) : t.error("no such method '" + n + "' for " + e + " widget instance") : t.error("cannot call methods on " + e + " prior to initialization; " + "attempted to call method '" + n + "'") }) : r = void 0 : (a.length && (n = t.widget.extend.apply(null, [n].concat(a))), this.each(function () { var e = t.data(this, s); e ? (e.option(n || {}), e._init && e._init()) : t.data(this, s, new i(n, this)) })), r } }, t.Widget = function () { }, t.Widget._childConstructors = [], t.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { classes: {}, disabled: !1, create: null }, _createWidget: function (e, i) { i = t(i || this.defaultElement || this)[0], this.element = t(i), this.uuid = r++ , this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, i !== this && (t.data(i, this.widgetFullName, this), this._on(!0, this.element, { remove: function (t) { t.target === i && this.destroy() } }), this.document = t(i.style ? i.ownerDocument : i.document || i), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), e), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init() }, _getCreateOptions: function () { return {} }, _getCreateEventData: t.noop, _create: t.noop, _init: t.noop, destroy: function () { var e = this; this._destroy(), t.each(this.classesElementLookup, function (t, i) { e._removeClass(i, t) }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace) }, _destroy: t.noop, widget: function () { return this.element }, option: function (e, i) { var s, n, o, a = e; if (0 === arguments.length) return t.widget.extend({}, this.options); if ("string" == typeof e) if (a = {}, s = e.split("."), e = s.shift(), s.length) { for (n = a[e] = t.widget.extend({}, this.options[e]), o = 0; s.length - 1 > o; o++)n[s[o]] = n[s[o]] || {}, n = n[s[o]]; if (e = s.pop(), 1 === arguments.length) return void 0 === n[e] ? null : n[e]; n[e] = i } else { if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e]; a[e] = i } return this._setOptions(a), this }, _setOptions: function (t) { var e; for (e in t) this._setOption(e, t[e]); return this }, _setOption: function (t, e) { return "classes" === t && this._setOptionClasses(e), this.options[t] = e, "disabled" === t && this._setOptionDisabled(e), this }, _setOptionClasses: function (e) { var i, s, n; for (i in e) n = this.classesElementLookup[i], e[i] !== this.options.classes[i] && n && n.length && (s = t(n.get()), this._removeClass(n, i), s.addClass(this._classes({ element: s, keys: i, classes: e, add: !0 }))) }, _setOptionDisabled: function (t) { this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus")) }, enable: function () { return this._setOptions({ disabled: !1 }) }, disable: function () { return this._setOptions({ disabled: !0 }) }, _classes: function (e) { function i(i, o) { var a, r; for (r = 0; i.length > r; r++)a = n.classesElementLookup[i[r]] || t(), a = e.add ? t(t.unique(a.get().concat(e.element.get()))) : t(a.not(e.element).get()), n.classesElementLookup[i[r]] = a, s.push(i[r]), o && e.classes[i[r]] && s.push(e.classes[i[r]]) } var s = [], n = this; return e = t.extend({ element: this.element, classes: this.options.classes || {} }, e), this._on(e.element, { remove: "_untrackClassesElement" }), e.keys && i(e.keys.match(/\S+/g) || [], !0), e.extra && i(e.extra.match(/\S+/g) || []), s.join(" ") }, _untrackClassesElement: function (e) { var i = this; t.each(i.classesElementLookup, function (s, n) { -1 !== t.inArray(e.target, n) && (i.classesElementLookup[s] = t(n.not(e.target).get())) }) }, _removeClass: function (t, e, i) { return this._toggleClass(t, e, i, !1) }, _addClass: function (t, e, i) { return this._toggleClass(t, e, i, !0) }, _toggleClass: function (t, e, i, s) { s = "boolean" == typeof s ? s : i; var n = "string" == typeof t || null === t, o = { extra: n ? e : i, keys: n ? t : e, element: n ? this.element : t, add: s }; return o.element.toggleClass(this._classes(o), s), this }, _on: function (e, i, s) { var n, o = this; "boolean" != typeof e && (s = i, i = e, e = !1), s ? (i = n = t(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, n = this.widget()), t.each(s, function (s, a) { function r() { return e || o.options.disabled !== !0 && !t(this).hasClass("ui-state-disabled") ? ("string" == typeof a ? o[a] : a).apply(o, arguments) : void 0 } "string" != typeof a && (r.guid = a.guid = a.guid || r.guid || t.guid++); var h = s.match(/^([\w:-]*)\s*(.*)$/), l = h[1] + o.eventNamespace, c = h[2]; c ? n.on(l, c, r) : i.on(l, r) }) }, _off: function (e, i) { i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.off(i).off(i), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get()) }, _delay: function (t, e) { function i() { return ("string" == typeof t ? s[t] : t).apply(s, arguments) } var s = this; return setTimeout(i, e || 0) }, _hoverable: function (e) { this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter: function (e) { this._addClass(t(e.currentTarget), null, "ui-state-hover") }, mouseleave: function (e) { this._removeClass(t(e.currentTarget), null, "ui-state-hover") } }) }, _focusable: function (e) { this.focusable = this.focusable.add(e), this._on(e, { focusin: function (e) { this._addClass(t(e.currentTarget), null, "ui-state-focus") }, focusout: function (e) { this._removeClass(t(e.currentTarget), null, "ui-state-focus") } }) }, _trigger: function (e, i, s) { var n, o, a = this.options[e]; if (s = s || {}, i = t.Event(i), i.type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], o = i.originalEvent) for (n in o) n in i || (i[n] = o[n]); return this.element.trigger(i, s), !(t.isFunction(a) && a.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented()) } }, t.each({ show: "fadeIn", hide: "fadeOut" }, function (e, i) { t.Widget.prototype["_" + e] = function (s, n, o) { "string" == typeof n && (n = { effect: n }); var a, r = n ? n === !0 || "number" == typeof n ? i : n.effect || i : e; n = n || {}, "number" == typeof n && (n = { duration: n }), a = !t.isEmptyObject(n), n.complete = o, n.delay && s.delay(n.delay), a && t.effects && t.effects.effect[r] ? s[e](n) : r !== e && s[r] ? s[r](n.duration, n.easing, o) : s.queue(function (i) { t(this)[e](), o && o.call(s[0]), i() }) } }), t.widget, function () { function e(t, e, i) { return [parseFloat(t[0]) * (u.test(t[0]) ? e / 100 : 1), parseFloat(t[1]) * (u.test(t[1]) ? i / 100 : 1)] } function i(e, i) { return parseInt(t.css(e, i), 10) || 0 } function s(e) { var i = e[0]; return 9 === i.nodeType ? { width: e.width(), height: e.height(), offset: { top: 0, left: 0 } } : t.isWindow(i) ? { width: e.width(), height: e.height(), offset: { top: e.scrollTop(), left: e.scrollLeft() } } : i.preventDefault ? { width: 0, height: 0, offset: { top: i.pageY, left: i.pageX } } : { width: e.outerWidth(), height: e.outerHeight(), offset: e.offset() } } var n, o = Math.max, a = Math.abs, r = /left|center|right/, h = /top|center|bottom/, l = /[\+\-]\d+(\.[\d]+)?%?/, c = /^\w+/, u = /%$/, d = t.fn.position; t.position = { scrollbarWidth: function () { if (void 0 !== n) return n; var e, i, s = t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), o = s.children()[0]; return t("body").append(s), e = o.offsetWidth, s.css("overflow", "scroll"), i = o.offsetWidth, e === i && (i = s[0].clientWidth), s.remove(), n = e - i }, getScrollInfo: function (e) { var i = e.isWindow || e.isDocument ? "" : e.element.css("overflow-x"), s = e.isWindow || e.isDocument ? "" : e.element.css("overflow-y"), n = "scroll" === i || "auto" === i && e.width < e.element[0].scrollWidth, o = "scroll" === s || "auto" === s && e.height < e.element[0].scrollHeight; return { width: o ? t.position.scrollbarWidth() : 0, height: n ? t.position.scrollbarWidth() : 0 } }, getWithinInfo: function (e) { var i = t(e || window), s = t.isWindow(i[0]), n = !!i[0] && 9 === i[0].nodeType, o = !s && !n; return { element: i, isWindow: s, isDocument: n, offset: o ? t(e).offset() : { left: 0, top: 0 }, scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop(), width: i.outerWidth(), height: i.outerHeight() } } }, t.fn.position = function (n) { if (!n || !n.of) return d.apply(this, arguments); n = t.extend({}, n); var u, p, f, m, g, v, _ = t(n.of), b = t.position.getWithinInfo(n.within), y = t.position.getScrollInfo(b), w = (n.collision || "flip").split(" "), x = {}; return v = s(_), _[0].preventDefault && (n.at = "left top"), p = v.width, f = v.height, m = v.offset, g = t.extend({}, m), t.each(["my", "at"], function () { var t, e, i = (n[this] || "").split(" "); 1 === i.length && (i = r.test(i[0]) ? i.concat(["center"]) : h.test(i[0]) ? ["center"].concat(i) : ["center", "center"]), i[0] = r.test(i[0]) ? i[0] : "center", i[1] = h.test(i[1]) ? i[1] : "center", t = l.exec(i[0]), e = l.exec(i[1]), x[this] = [t ? t[0] : 0, e ? e[0] : 0], n[this] = [c.exec(i[0])[0], c.exec(i[1])[0]] }), 1 === w.length && (w[1] = w[0]), "right" === n.at[0] ? g.left += p : "center" === n.at[0] && (g.left += p / 2), "bottom" === n.at[1] ? g.top += f : "center" === n.at[1] && (g.top += f / 2), u = e(x.at, p, f), g.left += u[0], g.top += u[1], this.each(function () { var s, r, h = t(this), l = h.outerWidth(), c = h.outerHeight(), d = i(this, "marginLeft"), v = i(this, "marginTop"), k = l + d + i(this, "marginRight") + y.width, C = c + v + i(this, "marginBottom") + y.height, D = t.extend({}, g), T = e(x.my, h.outerWidth(), h.outerHeight()); "right" === n.my[0] ? D.left -= l : "center" === n.my[0] && (D.left -= l / 2), "bottom" === n.my[1] ? D.top -= c : "center" === n.my[1] && (D.top -= c / 2), D.left += T[0], D.top += T[1], s = { marginLeft: d, marginTop: v }, t.each(["left", "top"], function (e, i) { t.ui.position[w[e]] && t.ui.position[w[e]][i](D, { targetWidth: p, targetHeight: f, elemWidth: l, elemHeight: c, collisionPosition: s, collisionWidth: k, collisionHeight: C, offset: [u[0] + T[0], u[1] + T[1]], my: n.my, at: n.at, within: b, elem: h }) }), n.using && (r = function (t) { var e = m.left - D.left, i = e + p - l, s = m.top - D.top, r = s + f - c, u = { target: { element: _, left: m.left, top: m.top, width: p, height: f }, element: { element: h, left: D.left, top: D.top, width: l, height: c }, horizontal: 0 > i ? "left" : e > 0 ? "right" : "center", vertical: 0 > r ? "top" : s > 0 ? "bottom" : "middle" }; l > p && p > a(e + i) && (u.horizontal = "center"), c > f && f > a(s + r) && (u.vertical = "middle"), u.important = o(a(e), a(i)) > o(a(s), a(r)) ? "horizontal" : "vertical", n.using.call(this, t, u) }), h.offset(t.extend(D, { using: r })) }) }, t.ui.position = { fit: { left: function (t, e) { var i, s = e.within, n = s.isWindow ? s.scrollLeft : s.offset.left, a = s.width, r = t.left - e.collisionPosition.marginLeft, h = n - r, l = r + e.collisionWidth - a - n; e.collisionWidth > a ? h > 0 && 0 >= l ? (i = t.left + h + e.collisionWidth - a - n, t.left += h - i) : t.left = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionWidth : n : h > 0 ? t.left += h : l > 0 ? t.left -= l : t.left = o(t.left - r, t.left) }, top: function (t, e) { var i, s = e.within, n = s.isWindow ? s.scrollTop : s.offset.top, a = e.within.height, r = t.top - e.collisionPosition.marginTop, h = n - r, l = r + e.collisionHeight - a - n; e.collisionHeight > a ? h > 0 && 0 >= l ? (i = t.top + h + e.collisionHeight - a - n, t.top += h - i) : t.top = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionHeight : n : h > 0 ? t.top += h : l > 0 ? t.top -= l : t.top = o(t.top - r, t.top) } }, flip: { left: function (t, e) { var i, s, n = e.within, o = n.offset.left + n.scrollLeft, r = n.width, h = n.isWindow ? n.scrollLeft : n.offset.left, l = t.left - e.collisionPosition.marginLeft, c = l - h, u = l + e.collisionWidth - r - h, d = "left" === e.my[0] ? -e.elemWidth : "right" === e.my[0] ? e.elemWidth : 0, p = "left" === e.at[0] ? e.targetWidth : "right" === e.at[0] ? -e.targetWidth : 0, f = -2 * e.offset[0]; 0 > c ? (i = t.left + d + p + f + e.collisionWidth - r - o, (0 > i || a(c) > i) && (t.left += d + p + f)) : u > 0 && (s = t.left - e.collisionPosition.marginLeft + d + p + f - h, (s > 0 || u > a(s)) && (t.left += d + p + f)) }, top: function (t, e) { var i, s, n = e.within, o = n.offset.top + n.scrollTop, r = n.height, h = n.isWindow ? n.scrollTop : n.offset.top, l = t.top - e.collisionPosition.marginTop, c = l - h, u = l + e.collisionHeight - r - h, d = "top" === e.my[1], p = d ? -e.elemHeight : "bottom" === e.my[1] ? e.elemHeight : 0, f = "top" === e.at[1] ? e.targetHeight : "bottom" === e.at[1] ? -e.targetHeight : 0, m = -2 * e.offset[1]; 0 > c ? (s = t.top + p + f + m + e.collisionHeight - r - o, (0 > s || a(c) > s) && (t.top += p + f + m)) : u > 0 && (i = t.top - e.collisionPosition.marginTop + p + f + m - h, (i > 0 || u > a(i)) && (t.top += p + f + m)) } }, flipfit: { left: function () { t.ui.position.flip.left.apply(this, arguments), t.ui.position.fit.left.apply(this, arguments) }, top: function () { t.ui.position.flip.top.apply(this, arguments), t.ui.position.fit.top.apply(this, arguments) } } } }(), t.ui.position, t.ui.focusable = function (i, s) { var n, o, a, r, h, l = i.nodeName.toLowerCase(); return "area" === l ? (n = i.parentNode, o = n.name, i.href && o && "map" === n.nodeName.toLowerCase() ? (a = t("img[usemap='#" + o + "']"), a.length > 0 && a.is(":visible")) : !1) : (/^(input|select|textarea|button|object)$/.test(l) ? (r = !i.disabled, r && (h = t(i).closest("fieldset")[0], h && (r = !h.disabled))) : r = "a" === l ? i.href || s : s, r && t(i).is(":visible") && e(t(i))) }, t.extend(t.expr[":"], { focusable: function (e) { return t.ui.focusable(e, null != t.attr(e, "tabindex")) } }), t.ui.focusable, t.ui.keyCode = { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 }, t.fn.extend({ uniqueId: function () { var t = 0; return function () { return this.each(function () { this.id || (this.id = "ui-id-" + ++t) }) } }(), removeUniqueId: function () { return this.each(function () { /^ui-id-\d+$/.test(this.id) && t(this).removeAttr("id") }) } }), t.widget("ui.accordion", { version: "1.12.1", options: { active: 0, animate: {}, classes: { "ui-accordion-header": "ui-corner-top", "ui-accordion-header-collapsed": "ui-corner-all", "ui-accordion-content": "ui-corner-bottom" }, collapsible: !1, event: "click", header: "> li > :first-child, > :not(li):even", heightStyle: "auto", icons: { activeHeader: "ui-icon-triangle-1-s", header: "ui-icon-triangle-1-e" }, activate: null, beforeActivate: null }, hideProps: { borderTopWidth: "hide", borderBottomWidth: "hide", paddingTop: "hide", paddingBottom: "hide", height: "hide" }, showProps: { borderTopWidth: "show", borderBottomWidth: "show", paddingTop: "show", paddingBottom: "show", height: "show" }, _create: function () { var e = this.options; this.prevShow = this.prevHide = t(), this._addClass("ui-accordion", "ui-widget ui-helper-reset"), this.element.attr("role", "tablist"), e.collapsible || e.active !== !1 && null != e.active || (e.active = 0), this._processPanels(), 0 > e.active && (e.active += this.headers.length), this._refresh() }, _getCreateEventData: function () { return { header: this.active, panel: this.active.length ? this.active.next() : t() } }, _createIcons: function () { var e, i, s = this.options.icons; s && (e = t("<span>"), this._addClass(e, "ui-accordion-header-icon", "ui-icon " + s.header), e.prependTo(this.headers), i = this.active.children(".ui-accordion-header-icon"), this._removeClass(i, s.header)._addClass(i, null, s.activeHeader)._addClass(this.headers, "ui-accordion-icons")) }, _destroyIcons: function () { this._removeClass(this.headers, "ui-accordion-icons"), this.headers.children(".ui-accordion-header-icon").remove() }, _destroy: function () { var t; this.element.removeAttr("role"), this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(), this._destroyIcons(), t = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(), "content" !== this.options.heightStyle && t.css("height", "") }, _setOption: function (t, e) { return "active" === t ? (this._activate(e), void 0) : ("event" === t && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(e)), this._super(t, e), "collapsible" !== t || e || this.options.active !== !1 || this._activate(0), "icons" === t && (this._destroyIcons(), e && this._createIcons()), void 0) }, _setOptionDisabled: function (t) { this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t), this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!t) }, _keydown: function (e) { if (!e.altKey && !e.ctrlKey) { var i = t.ui.keyCode, s = this.headers.length, n = this.headers.index(e.target), o = !1; switch (e.keyCode) { case i.RIGHT: case i.DOWN: o = this.headers[(n + 1) % s]; break; case i.LEFT: case i.UP: o = this.headers[(n - 1 + s) % s]; break; case i.SPACE: case i.ENTER: this._eventHandler(e); break; case i.HOME: o = this.headers[0]; break; case i.END: o = this.headers[s - 1] }o && (t(e.target).attr("tabIndex", -1), t(o).attr("tabIndex", 0), t(o).trigger("focus"), e.preventDefault()) } }, _panelKeyDown: function (e) { e.keyCode === t.ui.keyCode.UP && e.ctrlKey && t(e.currentTarget).prev().trigger("focus") }, refresh: function () { var e = this.options; this._processPanels(), e.active === !1 && e.collapsible === !0 || !this.headers.length ? (e.active = !1, this.active = t()) : e.active === !1 ? this._activate(0) : this.active.length && !t.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (e.active = !1, this.active = t()) : this._activate(Math.max(0, e.active - 1)) : e.active = this.headers.index(this.active), this._destroyIcons(), this._refresh() }, _processPanels: function () { var t = this.headers, e = this.panels; this.headers = this.element.find(this.options.header), this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"), this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(), this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"), e && (this._off(t.not(this.headers)), this._off(e.not(this.panels))) }, _refresh: function () { var e, i = this.options, s = i.heightStyle, n = this.element.parent(); this.active = this._findActive(i.active), this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"), this._addClass(this.active.next(), "ui-accordion-content-active"), this.active.next().show(), this.headers.attr("role", "tab").each(function () { var e = t(this), i = e.uniqueId().attr("id"), s = e.next(), n = s.uniqueId().attr("id"); e.attr("aria-controls", n), s.attr("aria-labelledby", i) }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }).next().attr({ "aria-hidden": "true" }).hide(), this.active.length ? this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }).next().attr({ "aria-hidden": "false" }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(i.event), "fill" === s ? (e = n.height(), this.element.siblings(":visible").each(function () { var i = t(this), s = i.css("position"); "absolute" !== s && "fixed" !== s && (e -= i.outerHeight(!0)) }), this.headers.each(function () { e -= t(this).outerHeight(!0) }), this.headers.next().each(function () { t(this).height(Math.max(0, e - t(this).innerHeight() + t(this).height())) }).css("overflow", "auto")) : "auto" === s && (e = 0, this.headers.next().each(function () { var i = t(this).is(":visible"); i || t(this).show(), e = Math.max(e, t(this).css("height", "").height()), i || t(this).hide() }).height(e)) }, _activate: function (e) { var i = this._findActive(e)[0]; i !== this.active[0] && (i = i || this.active[0], this._eventHandler({ target: i, currentTarget: i, preventDefault: t.noop })) }, _findActive: function (e) { return "number" == typeof e ? this.headers.eq(e) : t() }, _setupEvents: function (e) { var i = { keydown: "_keydown" }; e && t.each(e.split(" "), function (t, e) { i[e] = "_eventHandler" }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, i), this._on(this.headers.next(), { keydown: "_panelKeyDown" }), this._hoverable(this.headers), this._focusable(this.headers) }, _eventHandler: function (e) { var i, s, n = this.options, o = this.active, a = t(e.currentTarget), r = a[0] === o[0], h = r && n.collapsible, l = h ? t() : a.next(), c = o.next(), u = { oldHeader: o, oldPanel: c, newHeader: h ? t() : a, newPanel: l }; e.preventDefault(), r && !n.collapsible || this._trigger("beforeActivate", e, u) === !1 || (n.active = h ? !1 : this.headers.index(a), this.active = r ? t() : a, this._toggle(u), this._removeClass(o, "ui-accordion-header-active", "ui-state-active"), n.icons && (i = o.children(".ui-accordion-header-icon"), this._removeClass(i, null, n.icons.activeHeader)._addClass(i, null, n.icons.header)), r || (this._removeClass(a, "ui-accordion-header-collapsed")._addClass(a, "ui-accordion-header-active", "ui-state-active"), n.icons && (s = a.children(".ui-accordion-header-icon"), this._removeClass(s, null, n.icons.header)._addClass(s, null, n.icons.activeHeader)), this._addClass(a.next(), "ui-accordion-content-active"))) }, _toggle: function (e) { var i = e.newPanel, s = this.prevShow.length ? this.prevShow : e.oldPanel; this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = s, this.options.animate ? this._animate(i, s, e) : (s.hide(), i.show(), this._toggleComplete(e)), s.attr({ "aria-hidden": "true" }), s.prev().attr({ "aria-selected": "false", "aria-expanded": "false" }), i.length && s.length ? s.prev().attr({ tabIndex: -1, "aria-expanded": "false" }) : i.length && this.headers.filter(function () { return 0 === parseInt(t(this).attr("tabIndex"), 10) }).attr("tabIndex", -1), i.attr("aria-hidden", "false").prev().attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }) }, _animate: function (t, e, i) { var s, n, o, a = this, r = 0, h = t.css("box-sizing"), l = t.length && (!e.length || t.index() < e.index()), c = this.options.animate || {}, u = l && c.down || c, d = function () { a._toggleComplete(i) }; return "number" == typeof u && (o = u), "string" == typeof u && (n = u), n = n || u.easing || c.easing, o = o || u.duration || c.duration, e.length ? t.length ? (s = t.show().outerHeight(), e.animate(this.hideProps, { duration: o, easing: n, step: function (t, e) { e.now = Math.round(t) } }), t.hide().animate(this.showProps, { duration: o, easing: n, complete: d, step: function (t, i) { i.now = Math.round(t), "height" !== i.prop ? "content-box" === h && (r += i.now) : "content" !== a.options.heightStyle && (i.now = Math.round(s - e.outerHeight() - r), r = 0) } }), void 0) : e.animate(this.hideProps, o, n, d) : t.animate(this.showProps, o, n, d) }, _toggleComplete: function (t) { var e = t.oldPanel, i = e.prev(); this._removeClass(e, "ui-accordion-content-active"), this._removeClass(i, "ui-accordion-header-active")._addClass(i, "ui-accordion-header-collapsed"), e.length && (e.parent()[0].className = e.parent()[0].className), this._trigger("activate", null, t) } }), t.ui.safeActiveElement = function (t) { var e; try { e = t.activeElement } catch (i) { e = t.body } return e || (e = t.body), e.nodeName || (e = t.body), e }, t.widget("ui.menu", {
        version: "1.12.1", defaultElement: "<ul>", delay: 300, options: { icons: { submenu: "ui-icon-caret-1-e" }, items: "> *", menus: "ul", position: { my: "left top", at: "right top" }, role: "menu", blur: null, focus: null, select: null }, _create: function () { this.activeMenu = this.element, this.mouseHandled = !1, this.element.uniqueId().attr({ role: this.options.role, tabIndex: 0 }), this._addClass("ui-menu", "ui-widget ui-widget-content"), this._on({ "mousedown .ui-menu-item": function (t) { t.preventDefault() }, "click .ui-menu-item": function (e) { var i = t(e.target), s = t(t.ui.safeActiveElement(this.document[0])); !this.mouseHandled && i.not(".ui-state-disabled").length && (this.select(e), e.isPropagationStopped() || (this.mouseHandled = !0), i.has(".ui-menu").length ? this.expand(e) : !this.element.is(":focus") && s.closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer))) }, "mouseenter .ui-menu-item": function (e) { if (!this.previousFilter) { var i = t(e.target).closest(".ui-menu-item"), s = t(e.currentTarget); i[0] === s[0] && (this._removeClass(s.siblings().children(".ui-state-active"), null, "ui-state-active"), this.focus(e, s)) } }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function (t, e) { var i = this.active || this.element.find(this.options.items).eq(0); e || this.focus(t, i) }, blur: function (e) { this._delay(function () { var i = !t.contains(this.element[0], t.ui.safeActiveElement(this.document[0])); i && this.collapseAll(e) }) }, keydown: "_keydown" }), this.refresh(), this._on(this.document, { click: function (t) { this._closeOnDocumentClick(t) && this.collapseAll(t), this.mouseHandled = !1 } }) }, _destroy: function () { var e = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"), i = e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup"); this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(), i.children().each(function () { var e = t(this); e.data("ui-menu-submenu-caret") && e.remove() }) }, _keydown: function (e) { var i, s, n, o, a = !0; switch (e.keyCode) { case t.ui.keyCode.PAGE_UP: this.previousPage(e); break; case t.ui.keyCode.PAGE_DOWN: this.nextPage(e); break; case t.ui.keyCode.HOME: this._move("first", "first", e); break; case t.ui.keyCode.END: this._move("last", "last", e); break; case t.ui.keyCode.UP: this.previous(e); break; case t.ui.keyCode.DOWN: this.next(e); break; case t.ui.keyCode.LEFT: this.collapse(e); break; case t.ui.keyCode.RIGHT: this.active && !this.active.is(".ui-state-disabled") && this.expand(e); break; case t.ui.keyCode.ENTER: case t.ui.keyCode.SPACE: this._activate(e); break; case t.ui.keyCode.ESCAPE: this.collapse(e); break; default: a = !1, s = this.previousFilter || "", o = !1, n = e.keyCode >= 96 && 105 >= e.keyCode ? "" + (e.keyCode - 96) : String.fromCharCode(e.keyCode), clearTimeout(this.filterTimer), n === s ? o = !0 : n = s + n, i = this._filterMenuItems(n), i = o && -1 !== i.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : i, i.length || (n = String.fromCharCode(e.keyCode), i = this._filterMenuItems(n)), i.length ? (this.focus(e, i), this.previousFilter = n, this.filterTimer = this._delay(function () { delete this.previousFilter }, 1e3)) : delete this.previousFilter }a && e.preventDefault() }, _activate: function (t) { this.active && !this.active.is(".ui-state-disabled") && (this.active.children("[aria-haspopup='true']").length ? this.expand(t) : this.select(t)) }, refresh: function () { var e, i, s, n, o, a = this, r = this.options.icons.submenu, h = this.element.find(this.options.menus); this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length), s = h.filter(":not(.ui-menu)").hide().attr({ role: this.options.role, "aria-hidden": "true", "aria-expanded": "false" }).each(function () { var e = t(this), i = e.prev(), s = t("<span>").data("ui-menu-submenu-caret", !0); a._addClass(s, "ui-menu-icon", "ui-icon " + r), i.attr("aria-haspopup", "true").prepend(s), e.attr("aria-labelledby", i.attr("id")) }), this._addClass(s, "ui-menu", "ui-widget ui-widget-content ui-front"), e = h.add(this.element), i = e.find(this.options.items), i.not(".ui-menu-item").each(function () { var e = t(this); a._isDivider(e) && a._addClass(e, "ui-menu-divider", "ui-widget-content") }), n = i.not(".ui-menu-item, .ui-menu-divider"), o = n.children().not(".ui-menu").uniqueId().attr({ tabIndex: -1, role: this._itemRole() }), this._addClass(n, "ui-menu-item")._addClass(o, "ui-menu-item-wrapper"), i.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !t.contains(this.element[0], this.active[0]) && this.blur() }, _itemRole: function () { return { menu: "menuitem", listbox: "option" }[this.options.role] }, _setOption: function (t, e) { if ("icons" === t) { var i = this.element.find(".ui-menu-icon"); this._removeClass(i, null, this.options.icons.submenu)._addClass(i, null, e.submenu) } this._super(t, e) }, _setOptionDisabled: function (t) { this._super(t), this.element.attr("aria-disabled", t + ""), this._toggleClass(null, "ui-state-disabled", !!t) }, focus: function (t, e) { var i, s, n; this.blur(t, t && "focus" === t.type), this._scrollIntoView(e), this.active = e.first(), s = this.active.children(".ui-menu-item-wrapper"), this._addClass(s, null, "ui-state-active"), this.options.role && this.element.attr("aria-activedescendant", s.attr("id")), n = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"), this._addClass(n, null, "ui-state-active"), t && "keydown" === t.type ? this._close() : this.timer = this._delay(function () { this._close() }, this.delay), i = e.children(".ui-menu"), i.length && t && /^mouse/.test(t.type) && this._startOpening(i), this.activeMenu = e.parent(), this._trigger("focus", t, { item: e }) }, _scrollIntoView: function (e) {
            var i, s, n, o, a, r;
            this._hasScroll() && (i = parseFloat(t.css(this.activeMenu[0], "borderTopWidth")) || 0, s = parseFloat(t.css(this.activeMenu[0], "paddingTop")) || 0, n = e.offset().top - this.activeMenu.offset().top - i - s, o = this.activeMenu.scrollTop(), a = this.activeMenu.height(), r = e.outerHeight(), 0 > n ? this.activeMenu.scrollTop(o + n) : n + r > a && this.activeMenu.scrollTop(o + n - a + r))
        }, blur: function (t, e) { e || clearTimeout(this.timer), this.active && (this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"), this._trigger("blur", t, { item: this.active }), this.active = null) }, _startOpening: function (t) { clearTimeout(this.timer), "true" === t.attr("aria-hidden") && (this.timer = this._delay(function () { this._close(), this._open(t) }, this.delay)) }, _open: function (e) { var i = t.extend({ of: this.active }, this.options.position); clearTimeout(this.timer), this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden", "true"), e.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i) }, collapseAll: function (e, i) { clearTimeout(this.timer), this.timer = this._delay(function () { var s = i ? this.element : t(e && e.target).closest(this.element.find(".ui-menu")); s.length || (s = this.element), this._close(s), this.blur(e), this._removeClass(s.find(".ui-state-active"), null, "ui-state-active"), this.activeMenu = s }, this.delay) }, _close: function (t) { t || (t = this.active ? this.active.parent() : this.element), t.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false") }, _closeOnDocumentClick: function (e) { return !t(e.target).closest(".ui-menu").length }, _isDivider: function (t) { return !/[^\-\u2014\u2013\s]/.test(t.text()) }, collapse: function (t) { var e = this.active && this.active.parent().closest(".ui-menu-item", this.element); e && e.length && (this._close(), this.focus(t, e)) }, expand: function (t) { var e = this.active && this.active.children(".ui-menu ").find(this.options.items).first(); e && e.length && (this._open(e.parent()), this._delay(function () { this.focus(t, e) })) }, next: function (t) { this._move("next", "first", t) }, previous: function (t) { this._move("prev", "last", t) }, isFirstItem: function () { return this.active && !this.active.prevAll(".ui-menu-item").length }, isLastItem: function () { return this.active && !this.active.nextAll(".ui-menu-item").length }, _move: function (t, e, i) { var s; this.active && (s = "first" === t || "last" === t ? this.active["first" === t ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[t + "All"](".ui-menu-item").eq(0)), s && s.length && this.active || (s = this.activeMenu.find(this.options.items)[e]()), this.focus(i, s) }, nextPage: function (e) { var i, s, n; return this.active ? (this.isLastItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () { return i = t(this), 0 > i.offset().top - s - n }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())), void 0) : (this.next(e), void 0) }, previousPage: function (e) { var i, s, n; return this.active ? (this.isFirstItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () { return i = t(this), i.offset().top - s + n > 0 }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items).first())), void 0) : (this.next(e), void 0) }, _hasScroll: function () { return this.element.outerHeight() < this.element.prop("scrollHeight") }, select: function (e) { this.active = this.active || t(e.target).closest(".ui-menu-item"); var i = { item: this.active }; this.active.has(".ui-menu").length || this.collapseAll(e, !0), this._trigger("select", e, i) }, _filterMenuItems: function (e) { var i = e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), s = RegExp("^" + i, "i"); return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () { return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text())) }) }
    }), t.widget("ui.autocomplete", { version: "1.12.1", defaultElement: "<input>", options: { appendTo: null, autoFocus: !1, delay: 300, minLength: 1, position: { my: "left top", at: "left bottom", collision: "none" }, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null }, requestIndex: 0, pending: 0, _create: function () { var e, i, s, n = this.element[0].nodeName.toLowerCase(), o = "textarea" === n, a = "input" === n; this.isMultiLine = o || !a && this._isContentEditable(this.element), this.valueMethod = this.element[o || a ? "val" : "text"], this.isNewMenu = !0, this._addClass("ui-autocomplete-input"), this.element.attr("autocomplete", "off"), this._on(this.element, { keydown: function (n) { if (this.element.prop("readOnly")) return e = !0, s = !0, i = !0, void 0; e = !1, s = !1, i = !1; var o = t.ui.keyCode; switch (n.keyCode) { case o.PAGE_UP: e = !0, this._move("previousPage", n); break; case o.PAGE_DOWN: e = !0, this._move("nextPage", n); break; case o.UP: e = !0, this._keyEvent("previous", n); break; case o.DOWN: e = !0, this._keyEvent("next", n); break; case o.ENTER: this.menu.active && (e = !0, n.preventDefault(), this.menu.select(n)); break; case o.TAB: this.menu.active && this.menu.select(n); break; case o.ESCAPE: this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), this.close(n), n.preventDefault()); break; default: i = !0, this._searchTimeout(n) } }, keypress: function (s) { if (e) return e = !1, (!this.isMultiLine || this.menu.element.is(":visible")) && s.preventDefault(), void 0; if (!i) { var n = t.ui.keyCode; switch (s.keyCode) { case n.PAGE_UP: this._move("previousPage", s); break; case n.PAGE_DOWN: this._move("nextPage", s); break; case n.UP: this._keyEvent("previous", s); break; case n.DOWN: this._keyEvent("next", s) } } }, input: function (t) { return s ? (s = !1, t.preventDefault(), void 0) : (this._searchTimeout(t), void 0) }, focus: function () { this.selectedItem = null, this.previous = this._value() }, blur: function (t) { return this.cancelBlur ? (delete this.cancelBlur, void 0) : (clearTimeout(this.searching), this.close(t), this._change(t), void 0) } }), this._initSource(), this.menu = t("<ul>").appendTo(this._appendTo()).menu({ role: null }).hide().menu("instance"), this._addClass(this.menu.element, "ui-autocomplete", "ui-front"), this._on(this.menu.element, { mousedown: function (e) { e.preventDefault(), this.cancelBlur = !0, this._delay(function () { delete this.cancelBlur, this.element[0] !== t.ui.safeActiveElement(this.document[0]) && this.element.trigger("focus") }) }, menufocus: function (e, i) { var s, n; return this.isNewMenu && (this.isNewMenu = !1, e.originalEvent && /^mouse/.test(e.originalEvent.type)) ? (this.menu.blur(), this.document.one("mousemove", function () { t(e.target).trigger(e.originalEvent) }), void 0) : (n = i.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", e, { item: n }) && e.originalEvent && /^key/.test(e.originalEvent.type) && this._value(n.value), s = i.item.attr("aria-label") || n.value, s && t.trim(s).length && (this.liveRegion.children().hide(), t("<div>").text(s).appendTo(this.liveRegion)), void 0) }, menuselect: function (e, i) { var s = i.item.data("ui-autocomplete-item"), n = this.previous; this.element[0] !== t.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), this.previous = n, this._delay(function () { this.previous = n, this.selectedItem = s })), !1 !== this._trigger("select", e, { item: s }) && this._value(s.value), this.term = this._value(), this.close(e), this.selectedItem = s } }), this.liveRegion = t("<div>", { role: "status", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this._on(this.window, { beforeunload: function () { this.element.removeAttr("autocomplete") } }) }, _destroy: function () { clearTimeout(this.searching), this.element.removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove() }, _setOption: function (t, e) { this._super(t, e), "source" === t && this._initSource(), "appendTo" === t && this.menu.element.appendTo(this._appendTo()), "disabled" === t && e && this.xhr && this.xhr.abort() }, _isEventTargetInWidget: function (e) { var i = this.menu.element[0]; return e.target === this.element[0] || e.target === i || t.contains(i, e.target) }, _closeOnClickOutside: function (t) { this._isEventTargetInWidget(t) || this.close() }, _appendTo: function () { var e = this.options.appendTo; return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e }, _initSource: function () { var e, i, s = this; t.isArray(this.options.source) ? (e = this.options.source, this.source = function (i, s) { s(t.ui.autocomplete.filter(e, i.term)) }) : "string" == typeof this.options.source ? (i = this.options.source, this.source = function (e, n) { s.xhr && s.xhr.abort(), s.xhr = t.ajax({ url: i, data: e, dataType: "json", success: function (t) { n(t) }, error: function () { n([]) } }) }) : this.source = this.options.source }, _searchTimeout: function (t) { clearTimeout(this.searching), this.searching = this._delay(function () { var e = this.term === this._value(), i = this.menu.element.is(":visible"), s = t.altKey || t.ctrlKey || t.metaKey || t.shiftKey; (!e || e && !i && !s) && (this.selectedItem = null, this.search(null, t)) }, this.options.delay) }, search: function (t, e) { return t = null != t ? t : this._value(), this.term = this._value(), t.length < this.options.minLength ? this.close(e) : this._trigger("search", e) !== !1 ? this._search(t) : void 0 }, _search: function (t) { this.pending++ , this._addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({ term: t }, this._response()) }, _response: function () { var e = ++this.requestIndex; return t.proxy(function (t) { e === this.requestIndex && this.__response(t), this.pending-- , this.pending || this._removeClass("ui-autocomplete-loading") }, this) }, __response: function (t) { t && (t = this._normalize(t)), this._trigger("response", null, { content: t }), !this.options.disabled && t && t.length && !this.cancelSearch ? (this._suggest(t), this._trigger("open")) : this._close() }, close: function (t) { this.cancelSearch = !0, this._close(t) }, _close: function (t) { this._off(this.document, "mousedown"), this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", t)) }, _change: function (t) { this.previous !== this._value() && this._trigger("change", t, { item: this.selectedItem }) }, _normalize: function (e) { return e.length && e[0].label && e[0].value ? e : t.map(e, function (e) { return "string" == typeof e ? { label: e, value: e } : t.extend({}, e, { label: e.label || e.value, value: e.value || e.label }) }) }, _suggest: function (e) { var i = this.menu.element.empty(); this._renderMenu(i, e), this.isNewMenu = !0, this.menu.refresh(), i.show(), this._resizeMenu(), i.position(t.extend({ of: this.element }, this.options.position)), this.options.autoFocus && this.menu.next(), this._on(this.document, { mousedown: "_closeOnClickOutside" }) }, _resizeMenu: function () { var t = this.menu.element; t.outerWidth(Math.max(t.width("").outerWidth() + 1, this.element.outerWidth())) }, _renderMenu: function (e, i) { var s = this; t.each(i, function (t, i) { s._renderItemData(e, i) }) }, _renderItemData: function (t, e) { return this._renderItem(t, e).data("ui-autocomplete-item", e) }, _renderItem: function (e, i) { return t("<li>").append(t("<div>").text(i.label)).appendTo(e) }, _move: function (t, e) { return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(t) || this.menu.isLastItem() && /^next/.test(t) ? (this.isMultiLine || this._value(this.term), this.menu.blur(), void 0) : (this.menu[t](e), void 0) : (this.search(null, e), void 0) }, widget: function () { return this.menu.element }, _value: function () { return this.valueMethod.apply(this.element, arguments) }, _keyEvent: function (t, e) { (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(t, e), e.preventDefault()) }, _isContentEditable: function (t) { if (!t.length) return !1; var e = t.prop("contentEditable"); return "inherit" === e ? this._isContentEditable(t.parent()) : "true" === e } }), t.extend(t.ui.autocomplete, { escapeRegex: function (t) { return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") }, filter: function (e, i) { var s = RegExp(t.ui.autocomplete.escapeRegex(i), "i"); return t.grep(e, function (t) { return s.test(t.label || t.value || t) }) } }), t.widget("ui.autocomplete", t.ui.autocomplete, { options: { messages: { noResults: "No search results.", results: function (t) { return t + (t > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate." } } }, __response: function (e) { var i; this._superApply(arguments), this.options.disabled || this.cancelSearch || (i = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.children().hide(), t("<div>").text(i).appendTo(this.liveRegion)) } }), t.ui.autocomplete, t.extend(t.ui, { datepicker: { version: "1.12.1" } }); var l; t.extend(s.prototype, {
        markerClassName: "hasDatepicker", maxRows: 4, _widgetDatepicker: function () { return this.dpDiv }, setDefaults: function (t) { return a(this._defaults, t || {}), this }, _attachDatepicker: function (e, i) { var s, n, o; s = e.nodeName.toLowerCase(), n = "div" === s || "span" === s, e.id || (this.uuid += 1, e.id = "dp" + this.uuid), o = this._newInst(t(e), n), o.settings = t.extend({}, i || {}), "input" === s ? this._connectDatepicker(e, o) : n && this._inlineDatepicker(e, o) }, _newInst: function (e, i) { var s = e[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); return { id: s, input: e, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: i, dpDiv: i ? n(t("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv } }, _connectDatepicker: function (e, i) { var s = t(e); i.append = t([]), i.trigger = t([]), s.hasClass(this.markerClassName) || (this._attachments(s, i), s.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp), this._autoSize(i), t.data(e, "datepicker", i), i.settings.disabled && this._disableDatepicker(e)) }, _attachments: function (e, i) { var s, n, o, a = this._get(i, "appendText"), r = this._get(i, "isRTL"); i.append && i.append.remove(), a && (i.append = t("<span class='" + this._appendClass + "'>" + a + "</span>"), e[r ? "before" : "after"](i.append)), e.off("focus", this._showDatepicker), i.trigger && i.trigger.remove(), s = this._get(i, "showOn"), ("focus" === s || "both" === s) && e.on("focus", this._showDatepicker), ("button" === s || "both" === s) && (n = this._get(i, "buttonText"), o = this._get(i, "buttonImage"), i.trigger = t(this._get(i, "buttonImageOnly") ? t("<img/>").addClass(this._triggerClass).attr({ src: o, alt: n, title: n }) : t("<button type='button'></button>").addClass(this._triggerClass).html(o ? t("<img/>").attr({ src: o, alt: n, title: n }) : n)), e[r ? "before" : "after"](i.trigger), i.trigger.on("click", function () { return t.datepicker._datepickerShowing && t.datepicker._lastInput === e[0] ? t.datepicker._hideDatepicker() : t.datepicker._datepickerShowing && t.datepicker._lastInput !== e[0] ? (t.datepicker._hideDatepicker(), t.datepicker._showDatepicker(e[0])) : t.datepicker._showDatepicker(e[0]), !1 })) }, _autoSize: function (t) { if (this._get(t, "autoSize") && !t.inline) { var e, i, s, n, o = new Date(2009, 11, 20), a = this._get(t, "dateFormat"); a.match(/[DM]/) && (e = function (t) { for (i = 0, s = 0, n = 0; t.length > n; n++)t[n].length > i && (i = t[n].length, s = n); return s }, o.setMonth(e(this._get(t, a.match(/MM/) ? "monthNames" : "monthNamesShort"))), o.setDate(e(this._get(t, a.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - o.getDay())), t.input.attr("size", this._formatDate(t, o).length) } }, _inlineDatepicker: function (e, i) { var s = t(e); s.hasClass(this.markerClassName) || (s.addClass(this.markerClassName).append(i.dpDiv), t.data(e, "datepicker", i), this._setDate(i, this._getDefaultDate(i), !0), this._updateDatepicker(i), this._updateAlternate(i), i.settings.disabled && this._disableDatepicker(e), i.dpDiv.css("display", "block")) }, _dialogDatepicker: function (e, i, s, n, o) { var r, h, l, c, u, d = this._dialogInst; return d || (this.uuid += 1, r = "dp" + this.uuid, this._dialogInput = t("<input type='text' id='" + r + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.on("keydown", this._doKeyDown), t("body").append(this._dialogInput), d = this._dialogInst = this._newInst(this._dialogInput, !1), d.settings = {}, t.data(this._dialogInput[0], "datepicker", d)), a(d.settings, n || {}), i = i && i.constructor === Date ? this._formatDate(d, i) : i, this._dialogInput.val(i), this._pos = o ? o.length ? o : [o.pageX, o.pageY] : null, this._pos || (h = document.documentElement.clientWidth, l = document.documentElement.clientHeight, c = document.documentElement.scrollLeft || document.body.scrollLeft, u = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [h / 2 - 100 + c, l / 2 - 150 + u]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), d.settings.onSelect = s, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), t.blockUI && t.blockUI(this.dpDiv), t.data(this._dialogInput[0], "datepicker", d), this }, _destroyDatepicker: function (e) { var i, s = t(e), n = t.data(e, "datepicker"); s.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), t.removeData(e, "datepicker"), "input" === i ? (n.append.remove(), n.trigger.remove(), s.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)) : ("div" === i || "span" === i) && s.removeClass(this.markerClassName).empty(), l === n && (l = null)) }, _enableDatepicker: function (e) { var i, s, n = t(e), o = t.data(e, "datepicker"); n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !1, o.trigger.filter("button").each(function () { this.disabled = !1 }).end().filter("img").css({ opacity: "1.0", cursor: "" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().removeClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = t.map(this._disabledInputs, function (t) { return t === e ? null : t })) }, _disableDatepicker: function (e) { var i, s, n = t(e), o = t.data(e, "datepicker"); n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !0, o.trigger.filter("button").each(function () { this.disabled = !0 }).end().filter("img").css({ opacity: "0.5", cursor: "default" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().addClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = t.map(this._disabledInputs, function (t) { return t === e ? null : t }), this._disabledInputs[this._disabledInputs.length] = e) }, _isDisabledDatepicker: function (t) { if (!t) return !1; for (var e = 0; this._disabledInputs.length > e; e++)if (this._disabledInputs[e] === t) return !0; return !1 }, _getInst: function (e) { try { return t.data(e, "datepicker") } catch (i) { throw "Missing instance data for this datepicker" } }, _optionDatepicker: function (e, i, s) { var n, o, r, h, l = this._getInst(e); return 2 === arguments.length && "string" == typeof i ? "defaults" === i ? t.extend({}, t.datepicker._defaults) : l ? "all" === i ? t.extend({}, l.settings) : this._get(l, i) : null : (n = i || {}, "string" == typeof i && (n = {}, n[i] = s), l && (this._curInst === l && this._hideDatepicker(), o = this._getDateDatepicker(e, !0), r = this._getMinMaxDate(l, "min"), h = this._getMinMaxDate(l, "max"), a(l.settings, n), null !== r && void 0 !== n.dateFormat && void 0 === n.minDate && (l.settings.minDate = this._formatDate(l, r)), null !== h && void 0 !== n.dateFormat && void 0 === n.maxDate && (l.settings.maxDate = this._formatDate(l, h)), "disabled" in n && (n.disabled ? this._disableDatepicker(e) : this._enableDatepicker(e)), this._attachments(t(e), l), this._autoSize(l), this._setDate(l, o), this._updateAlternate(l), this._updateDatepicker(l)), void 0) }, _changeDatepicker: function (t, e, i) { this._optionDatepicker(t, e, i) }, _refreshDatepicker: function (t) { var e = this._getInst(t); e && this._updateDatepicker(e) }, _setDateDatepicker: function (t, e) { var i = this._getInst(t); i && (this._setDate(i, e), this._updateDatepicker(i), this._updateAlternate(i)) }, _getDateDatepicker: function (t, e) { var i = this._getInst(t); return i && !i.inline && this._setDateFromField(i, e), i ? this._getDate(i) : null }, _doKeyDown: function (e) { var i, s, n, o = t.datepicker._getInst(e.target), a = !0, r = o.dpDiv.is(".ui-datepicker-rtl"); if (o._keyEvent = !0, t.datepicker._datepickerShowing) switch (e.keyCode) { case 9: t.datepicker._hideDatepicker(), a = !1; break; case 13: return n = t("td." + t.datepicker._dayOverClass + ":not(." + t.datepicker._currentClass + ")", o.dpDiv), n[0] && t.datepicker._selectDay(e.target, o.selectedMonth, o.selectedYear, n[0]), i = t.datepicker._get(o, "onSelect"), i ? (s = t.datepicker._formatDate(o), i.apply(o.input ? o.input[0] : null, [s, o])) : t.datepicker._hideDatepicker(), !1; case 27: t.datepicker._hideDatepicker(); break; case 33: t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M"); break; case 34: t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M"); break; case 35: (e.ctrlKey || e.metaKey) && t.datepicker._clearDate(e.target), a = e.ctrlKey || e.metaKey; break; case 36: (e.ctrlKey || e.metaKey) && t.datepicker._gotoToday(e.target), a = e.ctrlKey || e.metaKey; break; case 37: (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? 1 : -1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M"); break; case 38: (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, -7, "D"), a = e.ctrlKey || e.metaKey; break; case 39: (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? -1 : 1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M"); break; case 40: (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, 7, "D"), a = e.ctrlKey || e.metaKey; break; default: a = !1 } else 36 === e.keyCode && e.ctrlKey ? t.datepicker._showDatepicker(this) : a = !1; a && (e.preventDefault(), e.stopPropagation()) }, _doKeyPress: function (e) { var i, s, n = t.datepicker._getInst(e.target); return t.datepicker._get(n, "constrainInput") ? (i = t.datepicker._possibleChars(t.datepicker._get(n, "dateFormat")), s = String.fromCharCode(null == e.charCode ? e.keyCode : e.charCode), e.ctrlKey || e.metaKey || " " > s || !i || i.indexOf(s) > -1) : void 0 }, _doKeyUp: function (e) { var i, s = t.datepicker._getInst(e.target); if (s.input.val() !== s.lastVal) try { i = t.datepicker.parseDate(t.datepicker._get(s, "dateFormat"), s.input ? s.input.val() : null, t.datepicker._getFormatConfig(s)), i && (t.datepicker._setDateFromField(s), t.datepicker._updateAlternate(s), t.datepicker._updateDatepicker(s)) } catch (n) { } return !0 }, _showDatepicker: function (e) { if (e = e.target || e, "input" !== e.nodeName.toLowerCase() && (e = t("input", e.parentNode)[0]), !t.datepicker._isDisabledDatepicker(e) && t.datepicker._lastInput !== e) { var s, n, o, r, h, l, c; s = t.datepicker._getInst(e), t.datepicker._curInst && t.datepicker._curInst !== s && (t.datepicker._curInst.dpDiv.stop(!0, !0), s && t.datepicker._datepickerShowing && t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])), n = t.datepicker._get(s, "beforeShow"), o = n ? n.apply(e, [e, s]) : {}, o !== !1 && (a(s.settings, o), s.lastVal = null, t.datepicker._lastInput = e, t.datepicker._setDateFromField(s), t.datepicker._inDialog && (e.value = ""), t.datepicker._pos || (t.datepicker._pos = t.datepicker._findPos(e), t.datepicker._pos[1] += e.offsetHeight), r = !1, t(e).parents().each(function () { return r |= "fixed" === t(this).css("position"), !r }), h = { left: t.datepicker._pos[0], top: t.datepicker._pos[1] }, t.datepicker._pos = null, s.dpDiv.empty(), s.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" }), t.datepicker._updateDatepicker(s), h = t.datepicker._checkOffset(s, h, r), s.dpDiv.css({ position: t.datepicker._inDialog && t.blockUI ? "static" : r ? "fixed" : "absolute", display: "none", left: h.left + "px", top: h.top + "px" }), s.inline || (l = t.datepicker._get(s, "showAnim"), c = t.datepicker._get(s, "duration"), s.dpDiv.css("z-index", i(t(e)) + 1), t.datepicker._datepickerShowing = !0, t.effects && t.effects.effect[l] ? s.dpDiv.show(l, t.datepicker._get(s, "showOptions"), c) : s.dpDiv[l || "show"](l ? c : null), t.datepicker._shouldFocusInput(s) && s.input.trigger("focus"), t.datepicker._curInst = s)) } }, _updateDatepicker: function (e) { this.maxRows = 4, l = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e); var i, s = this._getNumberOfMonths(e), n = s[1], a = 17, r = e.dpDiv.find("." + this._dayOverClass + " a"); r.length > 0 && o.apply(r.get(0)), e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), n > 1 && e.dpDiv.addClass("ui-datepicker-multi-" + n).css("width", a * n + "em"), e.dpDiv[(1 !== s[0] || 1 !== s[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), e.dpDiv[(this._get(e, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), e === t.datepicker._curInst && t.datepicker._datepickerShowing && t.datepicker._shouldFocusInput(e) && e.input.trigger("focus"), e.yearshtml && (i = e.yearshtml, setTimeout(function () { i === e.yearshtml && e.yearshtml && e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml), i = e.yearshtml = null }, 0)) }, _shouldFocusInput: function (t) { return t.input && t.input.is(":visible") && !t.input.is(":disabled") && !t.input.is(":focus") }, _checkOffset: function (e, i, s) { var n = e.dpDiv.outerWidth(), o = e.dpDiv.outerHeight(), a = e.input ? e.input.outerWidth() : 0, r = e.input ? e.input.outerHeight() : 0, h = document.documentElement.clientWidth + (s ? 0 : t(document).scrollLeft()), l = document.documentElement.clientHeight + (s ? 0 : t(document).scrollTop()); return i.left -= this._get(e, "isRTL") ? n - a : 0, i.left -= s && i.left === e.input.offset().left ? t(document).scrollLeft() : 0, i.top -= s && i.top === e.input.offset().top + r ? t(document).scrollTop() : 0, i.left -= Math.min(i.left, i.left + n > h && h > n ? Math.abs(i.left + n - h) : 0), i.top -= Math.min(i.top, i.top + o > l && l > o ? Math.abs(o + r) : 0), i }, _findPos: function (e) { for (var i, s = this._getInst(e), n = this._get(s, "isRTL"); e && ("hidden" === e.type || 1 !== e.nodeType || t.expr.filters.hidden(e));)e = e[n ? "previousSibling" : "nextSibling"]; return i = t(e).offset(), [i.left, i.top] }, _hideDatepicker: function (e) { var i, s, n, o, a = this._curInst; !a || e && a !== t.data(e, "datepicker") || this._datepickerShowing && (i = this._get(a, "showAnim"), s = this._get(a, "duration"), n = function () { t.datepicker._tidyDialog(a) }, t.effects && (t.effects.effect[i] || t.effects[i]) ? a.dpDiv.hide(i, t.datepicker._get(a, "showOptions"), s, n) : a.dpDiv["slideDown" === i ? "slideUp" : "fadeIn" === i ? "fadeOut" : "hide"](i ? s : null, n), i || n(), this._datepickerShowing = !1, o = this._get(a, "onClose"), o && o.apply(a.input ? a.input[0] : null, [a.input ? a.input.val() : "", a]), this._lastInput = null, this._inDialog && (this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" }), t.blockUI && (t.unblockUI(), t("body").append(this.dpDiv))), this._inDialog = !1) }, _tidyDialog: function (t) { t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar") }, _checkExternalClick: function (e) { if (t.datepicker._curInst) { var i = t(e.target), s = t.datepicker._getInst(i[0]); (i[0].id !== t.datepicker._mainDivId && 0 === i.parents("#" + t.datepicker._mainDivId).length && !i.hasClass(t.datepicker.markerClassName) && !i.closest("." + t.datepicker._triggerClass).length && t.datepicker._datepickerShowing && (!t.datepicker._inDialog || !t.blockUI) || i.hasClass(t.datepicker.markerClassName) && t.datepicker._curInst !== s) && t.datepicker._hideDatepicker() } }, _adjustDate: function (e, i, s) { var n = t(e), o = this._getInst(n[0]); this._isDisabledDatepicker(n[0]) || (this._adjustInstDate(o, i + ("M" === s ? this._get(o, "showCurrentAtPos") : 0), s), this._updateDatepicker(o)) }, _gotoToday: function (e) { var i, s = t(e), n = this._getInst(s[0]); this._get(n, "gotoCurrent") && n.currentDay ? (n.selectedDay = n.currentDay, n.drawMonth = n.selectedMonth = n.currentMonth, n.drawYear = n.selectedYear = n.currentYear) : (i = new Date, n.selectedDay = i.getDate(), n.drawMonth = n.selectedMonth = i.getMonth(), n.drawYear = n.selectedYear = i.getFullYear()), this._notifyChange(n), this._adjustDate(s) }, _selectMonthYear: function (e, i, s) { var n = t(e), o = this._getInst(n[0]); o["selected" + ("M" === s ? "Month" : "Year")] = o["draw" + ("M" === s ? "Month" : "Year")] = parseInt(i.options[i.selectedIndex].value, 10), this._notifyChange(o), this._adjustDate(n) }, _selectDay: function (e, i, s, n) { var o, a = t(e); t(n).hasClass(this._unselectableClass) || this._isDisabledDatepicker(a[0]) || (o = this._getInst(a[0]), o.selectedDay = o.currentDay = t("a", n).html(), o.selectedMonth = o.currentMonth = i, o.selectedYear = o.currentYear = s, this._selectDate(e, this._formatDate(o, o.currentDay, o.currentMonth, o.currentYear))) }, _clearDate: function (e) { var i = t(e); this._selectDate(i, "") }, _selectDate: function (e, i) { var s, n = t(e), o = this._getInst(n[0]); i = null != i ? i : this._formatDate(o), o.input && o.input.val(i), this._updateAlternate(o), s = this._get(o, "onSelect"), s ? s.apply(o.input ? o.input[0] : null, [i, o]) : o.input && o.input.trigger("change"), o.inline ? this._updateDatepicker(o) : (this._hideDatepicker(), this._lastInput = o.input[0], "object" != typeof o.input[0] && o.input.trigger("focus"), this._lastInput = null) }, _updateAlternate: function (e) { var i, s, n, o = this._get(e, "altField"); o && (i = this._get(e, "altFormat") || this._get(e, "dateFormat"), s = this._getDate(e), n = this.formatDate(i, s, this._getFormatConfig(e)), t(o).val(n)) }, noWeekends: function (t) { var e = t.getDay(); return [e > 0 && 6 > e, ""] }, iso8601Week: function (t) { var e, i = new Date(t.getTime()); return i.setDate(i.getDate() + 4 - (i.getDay() || 7)), e = i.getTime(), i.setMonth(0), i.setDate(1), Math.floor(Math.round((e - i) / 864e5) / 7) + 1 }, parseDate: function (e, i, s) { if (null == e || null == i) throw "Invalid arguments"; if (i = "object" == typeof i ? "" + i : i + "", "" === i) return null; var n, o, a, r, h = 0, l = (s ? s.shortYearCutoff : null) || this._defaults.shortYearCutoff, c = "string" != typeof l ? l : (new Date).getFullYear() % 100 + parseInt(l, 10), u = (s ? s.dayNamesShort : null) || this._defaults.dayNamesShort, d = (s ? s.dayNames : null) || this._defaults.dayNames, p = (s ? s.monthNamesShort : null) || this._defaults.monthNamesShort, f = (s ? s.monthNames : null) || this._defaults.monthNames, m = -1, g = -1, v = -1, _ = -1, b = !1, y = function (t) { var i = e.length > n + 1 && e.charAt(n + 1) === t; return i && n++ , i }, w = function (t) { var e = y(t), s = "@" === t ? 14 : "!" === t ? 20 : "y" === t && e ? 4 : "o" === t ? 3 : 2, n = "y" === t ? s : 1, o = RegExp("^\\d{" + n + "," + s + "}"), a = i.substring(h).match(o); if (!a) throw "Missing number at position " + h; return h += a[0].length, parseInt(a[0], 10) }, x = function (e, s, n) { var o = -1, a = t.map(y(e) ? n : s, function (t, e) { return [[e, t]] }).sort(function (t, e) { return -(t[1].length - e[1].length) }); if (t.each(a, function (t, e) { var s = e[1]; return i.substr(h, s.length).toLowerCase() === s.toLowerCase() ? (o = e[0], h += s.length, !1) : void 0 }), -1 !== o) return o + 1; throw "Unknown name at position " + h }, k = function () { if (i.charAt(h) !== e.charAt(n)) throw "Unexpected literal at position " + h; h++ }; for (n = 0; e.length > n; n++)if (b) "'" !== e.charAt(n) || y("'") ? k() : b = !1; else switch (e.charAt(n)) { case "d": v = w("d"); break; case "D": x("D", u, d); break; case "o": _ = w("o"); break; case "m": g = w("m"); break; case "M": g = x("M", p, f); break; case "y": m = w("y"); break; case "@": r = new Date(w("@")), m = r.getFullYear(), g = r.getMonth() + 1, v = r.getDate(); break; case "!": r = new Date((w("!") - this._ticksTo1970) / 1e4), m = r.getFullYear(), g = r.getMonth() + 1, v = r.getDate(); break; case "'": y("'") ? k() : b = !0; break; default: k() }if (i.length > h && (a = i.substr(h), !/^\s+/.test(a))) throw "Extra/unparsed characters found in date: " + a; if (-1 === m ? m = (new Date).getFullYear() : 100 > m && (m += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (c >= m ? 0 : -100)), _ > -1) for (g = 1, v = _; ;) { if (o = this._getDaysInMonth(m, g - 1), o >= v) break; g++ , v -= o } if (r = this._daylightSavingAdjust(new Date(m, g - 1, v)), r.getFullYear() !== m || r.getMonth() + 1 !== g || r.getDate() !== v) throw "Invalid date"; return r }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)), formatDate: function (t, e, i) { if (!e) return ""; var s, n = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort, o = (i ? i.dayNames : null) || this._defaults.dayNames, a = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort, r = (i ? i.monthNames : null) || this._defaults.monthNames, h = function (e) { var i = t.length > s + 1 && t.charAt(s + 1) === e; return i && s++ , i }, l = function (t, e, i) { var s = "" + e; if (h(t)) for (; i > s.length;)s = "0" + s; return s }, c = function (t, e, i, s) { return h(t) ? s[e] : i[e] }, u = "", d = !1; if (e) for (s = 0; t.length > s; s++)if (d) "'" !== t.charAt(s) || h("'") ? u += t.charAt(s) : d = !1; else switch (t.charAt(s)) { case "d": u += l("d", e.getDate(), 2); break; case "D": u += c("D", e.getDay(), n, o); break; case "o": u += l("o", Math.round((new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() - new Date(e.getFullYear(), 0, 0).getTime()) / 864e5), 3); break; case "m": u += l("m", e.getMonth() + 1, 2); break; case "M": u += c("M", e.getMonth(), a, r); break; case "y": u += h("y") ? e.getFullYear() : (10 > e.getFullYear() % 100 ? "0" : "") + e.getFullYear() % 100; break; case "@": u += e.getTime(); break; case "!": u += 1e4 * e.getTime() + this._ticksTo1970; break; case "'": h("'") ? u += "'" : d = !0; break; default: u += t.charAt(s) }return u }, _possibleChars: function (t) {
            var e, i = "", s = !1, n = function (i) { var s = t.length > e + 1 && t.charAt(e + 1) === i; return s && e++ , s }; for (e = 0; t.length > e; e++)if (s) "'" !== t.charAt(e) || n("'") ? i += t.charAt(e) : s = !1;
            else switch (t.charAt(e)) { case "d": case "m": case "y": case "@": i += "0123456789"; break; case "D": case "M": return null; case "'": n("'") ? i += "'" : s = !0; break; default: i += t.charAt(e) }return i
        }, _get: function (t, e) { return void 0 !== t.settings[e] ? t.settings[e] : this._defaults[e] }, _setDateFromField: function (t, e) { if (t.input.val() !== t.lastVal) { var i = this._get(t, "dateFormat"), s = t.lastVal = t.input ? t.input.val() : null, n = this._getDefaultDate(t), o = n, a = this._getFormatConfig(t); try { o = this.parseDate(i, s, a) || n } catch (r) { s = e ? "" : s } t.selectedDay = o.getDate(), t.drawMonth = t.selectedMonth = o.getMonth(), t.drawYear = t.selectedYear = o.getFullYear(), t.currentDay = s ? o.getDate() : 0, t.currentMonth = s ? o.getMonth() : 0, t.currentYear = s ? o.getFullYear() : 0, this._adjustInstDate(t) } }, _getDefaultDate: function (t) { return this._restrictMinMax(t, this._determineDate(t, this._get(t, "defaultDate"), new Date)) }, _determineDate: function (e, i, s) { var n = function (t) { var e = new Date; return e.setDate(e.getDate() + t), e }, o = function (i) { try { return t.datepicker.parseDate(t.datepicker._get(e, "dateFormat"), i, t.datepicker._getFormatConfig(e)) } catch (s) { } for (var n = (i.toLowerCase().match(/^c/) ? t.datepicker._getDate(e) : null) || new Date, o = n.getFullYear(), a = n.getMonth(), r = n.getDate(), h = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = h.exec(i); l;) { switch (l[2] || "d") { case "d": case "D": r += parseInt(l[1], 10); break; case "w": case "W": r += 7 * parseInt(l[1], 10); break; case "m": case "M": a += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a)); break; case "y": case "Y": o += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a)) }l = h.exec(i) } return new Date(o, a, r) }, a = null == i || "" === i ? s : "string" == typeof i ? o(i) : "number" == typeof i ? isNaN(i) ? s : n(i) : new Date(i.getTime()); return a = a && "Invalid Date" == "" + a ? s : a, a && (a.setHours(0), a.setMinutes(0), a.setSeconds(0), a.setMilliseconds(0)), this._daylightSavingAdjust(a) }, _daylightSavingAdjust: function (t) { return t ? (t.setHours(t.getHours() > 12 ? t.getHours() + 2 : 0), t) : null }, _setDate: function (t, e, i) { var s = !e, n = t.selectedMonth, o = t.selectedYear, a = this._restrictMinMax(t, this._determineDate(t, e, new Date)); t.selectedDay = t.currentDay = a.getDate(), t.drawMonth = t.selectedMonth = t.currentMonth = a.getMonth(), t.drawYear = t.selectedYear = t.currentYear = a.getFullYear(), n === t.selectedMonth && o === t.selectedYear || i || this._notifyChange(t), this._adjustInstDate(t), t.input && t.input.val(s ? "" : this._formatDate(t)) }, _getDate: function (t) { var e = !t.currentYear || t.input && "" === t.input.val() ? null : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay)); return e }, _attachHandlers: function (e) { var i = this._get(e, "stepMonths"), s = "#" + e.id.replace(/\\\\/g, "\\"); e.dpDiv.find("[data-handler]").map(function () { var e = { prev: function () { t.datepicker._adjustDate(s, -i, "M") }, next: function () { t.datepicker._adjustDate(s, +i, "M") }, hide: function () { t.datepicker._hideDatepicker() }, today: function () { t.datepicker._gotoToday(s) }, selectDay: function () { return t.datepicker._selectDay(s, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1 }, selectMonth: function () { return t.datepicker._selectMonthYear(s, this, "M"), !1 }, selectYear: function () { return t.datepicker._selectMonthYear(s, this, "Y"), !1 } }; t(this).on(this.getAttribute("data-event"), e[this.getAttribute("data-handler")]) }) }, _generateHTML: function (t) { var e, i, s, n, o, a, r, h, l, c, u, d, p, f, m, g, v, _, b, y, w, x, k, C, D, T, I, P, M, S, H, N, z, A, O, E, W, F, L, R = new Date, B = this._daylightSavingAdjust(new Date(R.getFullYear(), R.getMonth(), R.getDate())), Y = this._get(t, "isRTL"), j = this._get(t, "showButtonPanel"), q = this._get(t, "hideIfNoPrevNext"), K = this._get(t, "navigationAsDateFormat"), U = this._getNumberOfMonths(t), V = this._get(t, "showCurrentAtPos"), X = this._get(t, "stepMonths"), $ = 1 !== U[0] || 1 !== U[1], G = this._daylightSavingAdjust(t.currentDay ? new Date(t.currentYear, t.currentMonth, t.currentDay) : new Date(9999, 9, 9)), Q = this._getMinMaxDate(t, "min"), J = this._getMinMaxDate(t, "max"), Z = t.drawMonth - V, te = t.drawYear; if (0 > Z && (Z += 12, te--), J) for (e = this._daylightSavingAdjust(new Date(J.getFullYear(), J.getMonth() - U[0] * U[1] + 1, J.getDate())), e = Q && Q > e ? Q : e; this._daylightSavingAdjust(new Date(te, Z, 1)) > e;)Z-- , 0 > Z && (Z = 11, te--); for (t.drawMonth = Z, t.drawYear = te, i = this._get(t, "prevText"), i = K ? this.formatDate(i, this._daylightSavingAdjust(new Date(te, Z - X, 1)), this._getFormatConfig(t)) : i, s = this._canAdjustMonth(t, -1, te, Z) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>" : q ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>", n = this._get(t, "nextText"), n = K ? this.formatDate(n, this._daylightSavingAdjust(new Date(te, Z + X, 1)), this._getFormatConfig(t)) : n, o = this._canAdjustMonth(t, 1, te, Z) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>" : q ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>", a = this._get(t, "currentText"), r = this._get(t, "gotoCurrent") && t.currentDay ? G : B, a = K ? this.formatDate(a, r, this._getFormatConfig(t)) : a, h = t.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(t, "closeText") + "</button>", l = j ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (Y ? h : "") + (this._isInRange(t, r) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + a + "</button>" : "") + (Y ? "" : h) + "</div>" : "", c = parseInt(this._get(t, "firstDay"), 10), c = isNaN(c) ? 0 : c, u = this._get(t, "showWeek"), d = this._get(t, "dayNames"), p = this._get(t, "dayNamesMin"), f = this._get(t, "monthNames"), m = this._get(t, "monthNamesShort"), g = this._get(t, "beforeShowDay"), v = this._get(t, "showOtherMonths"), _ = this._get(t, "selectOtherMonths"), b = this._getDefaultDate(t), y = "", x = 0; U[0] > x; x++) { for (k = "", this.maxRows = 4, C = 0; U[1] > C; C++) { if (D = this._daylightSavingAdjust(new Date(te, Z, t.selectedDay)), T = " ui-corner-all", I = "", $) { if (I += "<div class='ui-datepicker-group", U[1] > 1) switch (C) { case 0: I += " ui-datepicker-group-first", T = " ui-corner-" + (Y ? "right" : "left"); break; case U[1] - 1: I += " ui-datepicker-group-last", T = " ui-corner-" + (Y ? "left" : "right"); break; default: I += " ui-datepicker-group-middle", T = "" }I += "'>" } for (I += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + T + "'>" + (/all|left/.test(T) && 0 === x ? Y ? o : s : "") + (/all|right/.test(T) && 0 === x ? Y ? s : o : "") + this._generateMonthYearHeader(t, Z, te, Q, J, x > 0 || C > 0, f, m) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>", P = u ? "<th class='ui-datepicker-week-col'>" + this._get(t, "weekHeader") + "</th>" : "", w = 0; 7 > w; w++)M = (w + c) % 7, P += "<th scope='col'" + ((w + c + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + d[M] + "'>" + p[M] + "</span></th>"; for (I += P + "</tr></thead><tbody>", S = this._getDaysInMonth(te, Z), te === t.selectedYear && Z === t.selectedMonth && (t.selectedDay = Math.min(t.selectedDay, S)), H = (this._getFirstDayOfMonth(te, Z) - c + 7) % 7, N = Math.ceil((H + S) / 7), z = $ ? this.maxRows > N ? this.maxRows : N : N, this.maxRows = z, A = this._daylightSavingAdjust(new Date(te, Z, 1 - H)), O = 0; z > O; O++) { for (I += "<tr>", E = u ? "<td class='ui-datepicker-week-col'>" + this._get(t, "calculateWeek")(A) + "</td>" : "", w = 0; 7 > w; w++)W = g ? g.apply(t.input ? t.input[0] : null, [A]) : [!0, ""], F = A.getMonth() !== Z, L = F && !_ || !W[0] || Q && Q > A || J && A > J, E += "<td class='" + ((w + c + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (F ? " ui-datepicker-other-month" : "") + (A.getTime() === D.getTime() && Z === t.selectedMonth && t._keyEvent || b.getTime() === A.getTime() && b.getTime() === D.getTime() ? " " + this._dayOverClass : "") + (L ? " " + this._unselectableClass + " ui-state-disabled" : "") + (F && !v ? "" : " " + W[1] + (A.getTime() === G.getTime() ? " " + this._currentClass : "") + (A.getTime() === B.getTime() ? " ui-datepicker-today" : "")) + "'" + (F && !v || !W[2] ? "" : " title='" + W[2].replace(/'/g, "&#39;") + "'") + (L ? "" : " data-handler='selectDay' data-event='click' data-month='" + A.getMonth() + "' data-year='" + A.getFullYear() + "'") + ">" + (F && !v ? "&#xa0;" : L ? "<span class='ui-state-default'>" + A.getDate() + "</span>" : "<a class='ui-state-default" + (A.getTime() === B.getTime() ? " ui-state-highlight" : "") + (A.getTime() === G.getTime() ? " ui-state-active" : "") + (F ? " ui-priority-secondary" : "") + "' href='#'>" + A.getDate() + "</a>") + "</td>", A.setDate(A.getDate() + 1), A = this._daylightSavingAdjust(A); I += E + "</tr>" } Z++ , Z > 11 && (Z = 0, te++), I += "</tbody></table>" + ($ ? "</div>" + (U[0] > 0 && C === U[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), k += I } y += k } return y += l, t._keyEvent = !1, y }, _generateMonthYearHeader: function (t, e, i, s, n, o, a, r) { var h, l, c, u, d, p, f, m, g = this._get(t, "changeMonth"), v = this._get(t, "changeYear"), _ = this._get(t, "showMonthAfterYear"), b = "<div class='ui-datepicker-title'>", y = ""; if (o || !g) y += "<span class='ui-datepicker-month'>" + a[e] + "</span>"; else { for (h = s && s.getFullYear() === i, l = n && n.getFullYear() === i, y += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", c = 0; 12 > c; c++)(!h || c >= s.getMonth()) && (!l || n.getMonth() >= c) && (y += "<option value='" + c + "'" + (c === e ? " selected='selected'" : "") + ">" + r[c] + "</option>"); y += "</select>" } if (_ || (b += y + (!o && g && v ? "" : "&#xa0;")), !t.yearshtml) if (t.yearshtml = "", o || !v) b += "<span class='ui-datepicker-year'>" + i + "</span>"; else { for (u = this._get(t, "yearRange").split(":"), d = (new Date).getFullYear(), p = function (t) { var e = t.match(/c[+\-].*/) ? i + parseInt(t.substring(1), 10) : t.match(/[+\-].*/) ? d + parseInt(t, 10) : parseInt(t, 10); return isNaN(e) ? d : e }, f = p(u[0]), m = Math.max(f, p(u[1] || "")), f = s ? Math.max(f, s.getFullYear()) : f, m = n ? Math.min(m, n.getFullYear()) : m, t.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; m >= f; f++)t.yearshtml += "<option value='" + f + "'" + (f === i ? " selected='selected'" : "") + ">" + f + "</option>"; t.yearshtml += "</select>", b += t.yearshtml, t.yearshtml = null } return b += this._get(t, "yearSuffix"), _ && (b += (!o && g && v ? "" : "&#xa0;") + y), b += "</div>" }, _adjustInstDate: function (t, e, i) { var s = t.selectedYear + ("Y" === i ? e : 0), n = t.selectedMonth + ("M" === i ? e : 0), o = Math.min(t.selectedDay, this._getDaysInMonth(s, n)) + ("D" === i ? e : 0), a = this._restrictMinMax(t, this._daylightSavingAdjust(new Date(s, n, o))); t.selectedDay = a.getDate(), t.drawMonth = t.selectedMonth = a.getMonth(), t.drawYear = t.selectedYear = a.getFullYear(), ("M" === i || "Y" === i) && this._notifyChange(t) }, _restrictMinMax: function (t, e) { var i = this._getMinMaxDate(t, "min"), s = this._getMinMaxDate(t, "max"), n = i && i > e ? i : e; return s && n > s ? s : n }, _notifyChange: function (t) { var e = this._get(t, "onChangeMonthYear"); e && e.apply(t.input ? t.input[0] : null, [t.selectedYear, t.selectedMonth + 1, t]) }, _getNumberOfMonths: function (t) { var e = this._get(t, "numberOfMonths"); return null == e ? [1, 1] : "number" == typeof e ? [1, e] : e }, _getMinMaxDate: function (t, e) { return this._determineDate(t, this._get(t, e + "Date"), null) }, _getDaysInMonth: function (t, e) { return 32 - this._daylightSavingAdjust(new Date(t, e, 32)).getDate() }, _getFirstDayOfMonth: function (t, e) { return new Date(t, e, 1).getDay() }, _canAdjustMonth: function (t, e, i, s) { var n = this._getNumberOfMonths(t), o = this._daylightSavingAdjust(new Date(i, s + (0 > e ? e : n[0] * n[1]), 1)); return 0 > e && o.setDate(this._getDaysInMonth(o.getFullYear(), o.getMonth())), this._isInRange(t, o) }, _isInRange: function (t, e) { var i, s, n = this._getMinMaxDate(t, "min"), o = this._getMinMaxDate(t, "max"), a = null, r = null, h = this._get(t, "yearRange"); return h && (i = h.split(":"), s = (new Date).getFullYear(), a = parseInt(i[0], 10), r = parseInt(i[1], 10), i[0].match(/[+\-].*/) && (a += s), i[1].match(/[+\-].*/) && (r += s)), (!n || e.getTime() >= n.getTime()) && (!o || e.getTime() <= o.getTime()) && (!a || e.getFullYear() >= a) && (!r || r >= e.getFullYear()) }, _getFormatConfig: function (t) { var e = this._get(t, "shortYearCutoff"); return e = "string" != typeof e ? e : (new Date).getFullYear() % 100 + parseInt(e, 10), { shortYearCutoff: e, dayNamesShort: this._get(t, "dayNamesShort"), dayNames: this._get(t, "dayNames"), monthNamesShort: this._get(t, "monthNamesShort"), monthNames: this._get(t, "monthNames") } }, _formatDate: function (t, e, i, s) { e || (t.currentDay = t.selectedDay, t.currentMonth = t.selectedMonth, t.currentYear = t.selectedYear); var n = e ? "object" == typeof e ? e : this._daylightSavingAdjust(new Date(s, i, e)) : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay)); return this.formatDate(this._get(t, "dateFormat"), n, this._getFormatConfig(t)) }
    }), t.fn.datepicker = function (e) { if (!this.length) return this; t.datepicker.initialized || (t(document).on("mousedown", t.datepicker._checkExternalClick), t.datepicker.initialized = !0), 0 === t("#" + t.datepicker._mainDivId).length && t("body").append(t.datepicker.dpDiv); var i = Array.prototype.slice.call(arguments, 1); return "string" != typeof e || "isDisabled" !== e && "getDate" !== e && "widget" !== e ? "option" === e && 2 === arguments.length && "string" == typeof arguments[1] ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i)) : this.each(function () { "string" == typeof e ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this].concat(i)) : t.datepicker._attachDatepicker(this, e) }) : t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i)) }, t.datepicker = new s, t.datepicker.initialized = !1, t.datepicker.uuid = (new Date).getTime(), t.datepicker.version = "1.12.1", t.datepicker, t.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()); var c = !1; t(document).on("mouseup", function () { c = !1 }), t.widget("ui.mouse", { version: "1.12.1", options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 }, _mouseInit: function () { var e = this; this.element.on("mousedown." + this.widgetName, function (t) { return e._mouseDown(t) }).on("click." + this.widgetName, function (i) { return !0 === t.data(i.target, e.widgetName + ".preventClickEvent") ? (t.removeData(i.target, e.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : void 0 }), this.started = !1 }, _mouseDestroy: function () { this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate) }, _mouseDown: function (e) { if (!c) { this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e; var i = this, s = 1 === e.which, n = "string" == typeof this.options.cancel && e.target.nodeName ? t(e.target).closest(this.options.cancel).length : !1; return s && !n && this._mouseCapture(e) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () { i.mouseDelayMet = !0 }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(e) !== !1, !this._mouseStarted) ? (e.preventDefault(), !0) : (!0 === t.data(e.target, this.widgetName + ".preventClickEvent") && t.removeData(e.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (t) { return i._mouseMove(t) }, this._mouseUpDelegate = function (t) { return i._mouseUp(t) }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), e.preventDefault(), c = !0, !0)) : !0 } }, _mouseMove: function (e) { if (this._mouseMoved) { if (t.ui.ie && (!document.documentMode || 9 > document.documentMode) && !e.button) return this._mouseUp(e); if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0; else if (!this.ignoreMissingWhich) return this._mouseUp(e) } return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, e) !== !1, this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted) }, _mouseUp: function (e) { this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && t.data(e.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, c = !1, e.preventDefault() }, _mouseDistanceMet: function (t) { return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance }, _mouseDelayMet: function () { return this.mouseDelayMet }, _mouseStart: function () { }, _mouseDrag: function () { }, _mouseStop: function () { }, _mouseCapture: function () { return !0 } }); var u = "ui-effects-", d = "ui-effects-style", p = "ui-effects-animated", f = t; t.effects = { effect: {} }, function (t, e) { function i(t, e, i) { var s = u[e.type] || {}; return null == t ? i || !e.def ? null : e.def : (t = s.floor ? ~~t : parseFloat(t), isNaN(t) ? e.def : s.mod ? (t + s.mod) % s.mod : 0 > t ? 0 : t > s.max ? s.max : t) } function s(i) { var s = l(), n = s._rgba = []; return i = i.toLowerCase(), f(h, function (t, o) { var a, r = o.re.exec(i), h = r && o.parse(r), l = o.space || "rgba"; return h ? (a = s[l](h), s[c[l].cache] = a[c[l].cache], n = s._rgba = a._rgba, !1) : e }), n.length ? ("0,0,0,0" === n.join() && t.extend(n, o.transparent), s) : o[i] } function n(t, e, i) { return i = (i + 1) % 1, 1 > 6 * i ? t + 6 * (e - t) * i : 1 > 2 * i ? e : 2 > 3 * i ? t + 6 * (e - t) * (2 / 3 - i) : t } var o, a = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", r = /^([\-+])=\s*(\d+\.?\d*)/, h = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (t) { return [t[1], t[2], t[3], t[4]] } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function (t) { return [2.55 * t[1], 2.55 * t[2], 2.55 * t[3], t[4]] } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function (t) { return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)] } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function (t) { return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)] } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function (t) { return [t[1], t[2] / 100, t[3] / 100, t[4]] } }], l = t.Color = function (e, i, s, n) { return new t.Color.fn.parse(e, i, s, n) }, c = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } }, u = { "byte": { floor: !0, max: 255 }, percent: { max: 1 }, degrees: { mod: 360, floor: !0 } }, d = l.support = {}, p = t("<p>")[0], f = t.each; p.style.cssText = "background-color:rgba(1,1,1,.5)", d.rgba = p.style.backgroundColor.indexOf("rgba") > -1, f(c, function (t, e) { e.cache = "_" + t, e.props.alpha = { idx: 3, type: "percent", def: 1 } }), l.fn = t.extend(l.prototype, { parse: function (n, a, r, h) { if (n === e) return this._rgba = [null, null, null, null], this; (n.jquery || n.nodeType) && (n = t(n).css(a), a = e); var u = this, d = t.type(n), p = this._rgba = []; return a !== e && (n = [n, a, r, h], d = "array"), "string" === d ? this.parse(s(n) || o._default) : "array" === d ? (f(c.rgba.props, function (t, e) { p[e.idx] = i(n[e.idx], e) }), this) : "object" === d ? (n instanceof l ? f(c, function (t, e) { n[e.cache] && (u[e.cache] = n[e.cache].slice()) }) : f(c, function (e, s) { var o = s.cache; f(s.props, function (t, e) { if (!u[o] && s.to) { if ("alpha" === t || null == n[t]) return; u[o] = s.to(u._rgba) } u[o][e.idx] = i(n[t], e, !0) }), u[o] && 0 > t.inArray(null, u[o].slice(0, 3)) && (u[o][3] = 1, s.from && (u._rgba = s.from(u[o]))) }), this) : e }, is: function (t) { var i = l(t), s = !0, n = this; return f(c, function (t, o) { var a, r = i[o.cache]; return r && (a = n[o.cache] || o.to && o.to(n._rgba) || [], f(o.props, function (t, i) { return null != r[i.idx] ? s = r[i.idx] === a[i.idx] : e })), s }), s }, _space: function () { var t = [], e = this; return f(c, function (i, s) { e[s.cache] && t.push(i) }), t.pop() }, transition: function (t, e) { var s = l(t), n = s._space(), o = c[n], a = 0 === this.alpha() ? l("transparent") : this, r = a[o.cache] || o.to(a._rgba), h = r.slice(); return s = s[o.cache], f(o.props, function (t, n) { var o = n.idx, a = r[o], l = s[o], c = u[n.type] || {}; null !== l && (null === a ? h[o] = l : (c.mod && (l - a > c.mod / 2 ? a += c.mod : a - l > c.mod / 2 && (a -= c.mod)), h[o] = i((l - a) * e + a, n))) }), this[n](h) }, blend: function (e) { if (1 === this._rgba[3]) return this; var i = this._rgba.slice(), s = i.pop(), n = l(e)._rgba; return l(t.map(i, function (t, e) { return (1 - s) * n[e] + s * t })) }, toRgbaString: function () { var e = "rgba(", i = t.map(this._rgba, function (t, e) { return null == t ? e > 2 ? 1 : 0 : t }); return 1 === i[3] && (i.pop(), e = "rgb("), e + i.join() + ")" }, toHslaString: function () { var e = "hsla(", i = t.map(this.hsla(), function (t, e) { return null == t && (t = e > 2 ? 1 : 0), e && 3 > e && (t = Math.round(100 * t) + "%"), t }); return 1 === i[3] && (i.pop(), e = "hsl("), e + i.join() + ")" }, toHexString: function (e) { var i = this._rgba.slice(), s = i.pop(); return e && i.push(~~(255 * s)), "#" + t.map(i, function (t) { return t = (t || 0).toString(16), 1 === t.length ? "0" + t : t }).join("") }, toString: function () { return 0 === this._rgba[3] ? "transparent" : this.toRgbaString() } }), l.fn.parse.prototype = l.fn, c.hsla.to = function (t) { if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]]; var e, i, s = t[0] / 255, n = t[1] / 255, o = t[2] / 255, a = t[3], r = Math.max(s, n, o), h = Math.min(s, n, o), l = r - h, c = r + h, u = .5 * c; return e = h === r ? 0 : s === r ? 60 * (n - o) / l + 360 : n === r ? 60 * (o - s) / l + 120 : 60 * (s - n) / l + 240, i = 0 === l ? 0 : .5 >= u ? l / c : l / (2 - c), [Math.round(e) % 360, i, u, null == a ? 1 : a] }, c.hsla.from = function (t) { if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]]; var e = t[0] / 360, i = t[1], s = t[2], o = t[3], a = .5 >= s ? s * (1 + i) : s + i - s * i, r = 2 * s - a; return [Math.round(255 * n(r, a, e + 1 / 3)), Math.round(255 * n(r, a, e)), Math.round(255 * n(r, a, e - 1 / 3)), o] }, f(c, function (s, n) { var o = n.props, a = n.cache, h = n.to, c = n.from; l.fn[s] = function (s) { if (h && !this[a] && (this[a] = h(this._rgba)), s === e) return this[a].slice(); var n, r = t.type(s), u = "array" === r || "object" === r ? s : arguments, d = this[a].slice(); return f(o, function (t, e) { var s = u["object" === r ? t : e.idx]; null == s && (s = d[e.idx]), d[e.idx] = i(s, e) }), c ? (n = l(c(d)), n[a] = d, n) : l(d) }, f(o, function (e, i) { l.fn[e] || (l.fn[e] = function (n) { var o, a = t.type(n), h = "alpha" === e ? this._hsla ? "hsla" : "rgba" : s, l = this[h](), c = l[i.idx]; return "undefined" === a ? c : ("function" === a && (n = n.call(this, c), a = t.type(n)), null == n && i.empty ? this : ("string" === a && (o = r.exec(n), o && (n = c + parseFloat(o[2]) * ("+" === o[1] ? 1 : -1))), l[i.idx] = n, this[h](l))) }) }) }), l.hook = function (e) { var i = e.split(" "); f(i, function (e, i) { t.cssHooks[i] = { set: function (e, n) { var o, a, r = ""; if ("transparent" !== n && ("string" !== t.type(n) || (o = s(n)))) { if (n = l(o || n), !d.rgba && 1 !== n._rgba[3]) { for (a = "backgroundColor" === i ? e.parentNode : e; ("" === r || "transparent" === r) && a && a.style;)try { r = t.css(a, "backgroundColor"), a = a.parentNode } catch (h) { } n = n.blend(r && "transparent" !== r ? r : "_default") } n = n.toRgbaString() } try { e.style[i] = n } catch (h) { } } }, t.fx.step[i] = function (e) { e.colorInit || (e.start = l(e.elem, i), e.end = l(e.end), e.colorInit = !0), t.cssHooks[i].set(e.elem, e.start.transition(e.end, e.pos)) } }) }, l.hook(a), t.cssHooks.borderColor = { expand: function (t) { var e = {}; return f(["Top", "Right", "Bottom", "Left"], function (i, s) { e["border" + s + "Color"] = t }), e } }, o = t.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" } }(f), function () { function e(e) { var i, s, n = e.ownerDocument.defaultView ? e.ownerDocument.defaultView.getComputedStyle(e, null) : e.currentStyle, o = {}; if (n && n.length && n[0] && n[n[0]]) for (s = n.length; s--;)i = n[s], "string" == typeof n[i] && (o[t.camelCase(i)] = n[i]); else for (i in n) "string" == typeof n[i] && (o[i] = n[i]); return o } function i(e, i) { var s, o, a = {}; for (s in i) o = i[s], e[s] !== o && (n[s] || (t.fx.step[s] || !isNaN(parseFloat(o))) && (a[s] = o)); return a } var s = ["add", "remove", "toggle"], n = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 }; t.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (e, i) { t.fx.step[i] = function (t) { ("none" !== t.end && !t.setAttr || 1 === t.pos && !t.setAttr) && (f.style(t.elem, i, t.end), t.setAttr = !0) } }), t.fn.addBack || (t.fn.addBack = function (t) { return this.add(null == t ? this.prevObject : this.prevObject.filter(t)) }), t.effects.animateClass = function (n, o, a, r) { var h = t.speed(o, a, r); return this.queue(function () { var o, a = t(this), r = a.attr("class") || "", l = h.children ? a.find("*").addBack() : a; l = l.map(function () { var i = t(this); return { el: i, start: e(this) } }), o = function () { t.each(s, function (t, e) { n[e] && a[e + "Class"](n[e]) }) }, o(), l = l.map(function () { return this.end = e(this.el[0]), this.diff = i(this.start, this.end), this }), a.attr("class", r), l = l.map(function () { var e = this, i = t.Deferred(), s = t.extend({}, h, { queue: !1, complete: function () { i.resolve(e) } }); return this.el.animate(this.diff, s), i.promise() }), t.when.apply(t, l.get()).done(function () { o(), t.each(arguments, function () { var e = this.el; t.each(this.diff, function (t) { e.css(t, "") }) }), h.complete.call(a[0]) }) }) }, t.fn.extend({ addClass: function (e) { return function (i, s, n, o) { return s ? t.effects.animateClass.call(this, { add: i }, s, n, o) : e.apply(this, arguments) } }(t.fn.addClass), removeClass: function (e) { return function (i, s, n, o) { return arguments.length > 1 ? t.effects.animateClass.call(this, { remove: i }, s, n, o) : e.apply(this, arguments) } }(t.fn.removeClass), toggleClass: function (e) { return function (i, s, n, o, a) { return "boolean" == typeof s || void 0 === s ? n ? t.effects.animateClass.call(this, s ? { add: i } : { remove: i }, n, o, a) : e.apply(this, arguments) : t.effects.animateClass.call(this, { toggle: i }, s, n, o) } }(t.fn.toggleClass), switchClass: function (e, i, s, n, o) { return t.effects.animateClass.call(this, { add: i, remove: e }, s, n, o) } }) }(), function () {
        function e(e, i, s, n) { return t.isPlainObject(e) && (i = e, e = e.effect), e = { effect: e }, null == i && (i = {}), t.isFunction(i) && (n = i, s = null, i = {}), ("number" == typeof i || t.fx.speeds[i]) && (n = s, s = i, i = {}), t.isFunction(s) && (n = s, s = null), i && t.extend(e, i), s = s || i.duration, e.duration = t.fx.off ? 0 : "number" == typeof s ? s : s in t.fx.speeds ? t.fx.speeds[s] : t.fx.speeds._default, e.complete = n || i.complete, e } function i(e) { return !e || "number" == typeof e || t.fx.speeds[e] ? !0 : "string" != typeof e || t.effects.effect[e] ? t.isFunction(e) ? !0 : "object" != typeof e || e.effect ? !1 : !0 : !0 } function s(t, e) { var i = e.outerWidth(), s = e.outerHeight(), n = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/, o = n.exec(t) || ["", 0, i, s, 0]; return { top: parseFloat(o[1]) || 0, right: "auto" === o[2] ? i : parseFloat(o[2]), bottom: "auto" === o[3] ? s : parseFloat(o[3]), left: parseFloat(o[4]) || 0 } } t.expr && t.expr.filters && t.expr.filters.animated && (t.expr.filters.animated = function (e) { return function (i) { return !!t(i).data(p) || e(i) } }(t.expr.filters.animated)), t.uiBackCompat !== !1 && t.extend(t.effects, { save: function (t, e) { for (var i = 0, s = e.length; s > i; i++)null !== e[i] && t.data(u + e[i], t[0].style[e[i]]) }, restore: function (t, e) { for (var i, s = 0, n = e.length; n > s; s++)null !== e[s] && (i = t.data(u + e[s]), t.css(e[s], i)) }, setMode: function (t, e) { return "toggle" === e && (e = t.is(":hidden") ? "show" : "hide"), e }, createWrapper: function (e) { if (e.parent().is(".ui-effects-wrapper")) return e.parent(); var i = { width: e.outerWidth(!0), height: e.outerHeight(!0), "float": e.css("float") }, s = t("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }), n = { width: e.width(), height: e.height() }, o = document.activeElement; try { o.id } catch (a) { o = document.body } return e.wrap(s), (e[0] === o || t.contains(e[0], o)) && t(o).trigger("focus"), s = e.parent(), "static" === e.css("position") ? (s.css({ position: "relative" }), e.css({ position: "relative" })) : (t.extend(i, { position: e.css("position"), zIndex: e.css("z-index") }), t.each(["top", "left", "bottom", "right"], function (t, s) { i[s] = e.css(s), isNaN(parseInt(i[s], 10)) && (i[s] = "auto") }), e.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" })), e.css(n), s.css(i).show() }, removeWrapper: function (e) { var i = document.activeElement; return e.parent().is(".ui-effects-wrapper") && (e.parent().replaceWith(e), (e[0] === i || t.contains(e[0], i)) && t(i).trigger("focus")), e } }), t.extend(t.effects, { version: "1.12.1", define: function (e, i, s) { return s || (s = i, i = "effect"), t.effects.effect[e] = s, t.effects.effect[e].mode = i, s }, scaledDimensions: function (t, e, i) { if (0 === e) return { height: 0, width: 0, outerHeight: 0, outerWidth: 0 }; var s = "horizontal" !== i ? (e || 100) / 100 : 1, n = "vertical" !== i ? (e || 100) / 100 : 1; return { height: t.height() * n, width: t.width() * s, outerHeight: t.outerHeight() * n, outerWidth: t.outerWidth() * s } }, clipToBox: function (t) { return { width: t.clip.right - t.clip.left, height: t.clip.bottom - t.clip.top, left: t.clip.left, top: t.clip.top } }, unshift: function (t, e, i) { var s = t.queue(); e > 1 && s.splice.apply(s, [1, 0].concat(s.splice(e, i))), t.dequeue() }, saveStyle: function (t) { t.data(d, t[0].style.cssText) }, restoreStyle: function (t) { t[0].style.cssText = t.data(d) || "", t.removeData(d) }, mode: function (t, e) { var i = t.is(":hidden"); return "toggle" === e && (e = i ? "show" : "hide"), (i ? "hide" === e : "show" === e) && (e = "none"), e }, getBaseline: function (t, e) { var i, s; switch (t[0]) { case "top": i = 0; break; case "middle": i = .5; break; case "bottom": i = 1; break; default: i = t[0] / e.height }switch (t[1]) { case "left": s = 0; break; case "center": s = .5; break; case "right": s = 1; break; default: s = t[1] / e.width }return { x: s, y: i } }, createPlaceholder: function (e) { var i, s = e.css("position"), n = e.position(); return e.css({ marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()), /^(static|relative)/.test(s) && (s = "absolute", i = t("<" + e[0].nodeName + ">").insertAfter(e).css({ display: /^(inline|ruby)/.test(e.css("display")) ? "inline-block" : "block", visibility: "hidden", marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight"), "float": e.css("float") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"), e.data(u + "placeholder", i)), e.css({ position: s, left: n.left, top: n.top }), i }, removePlaceholder: function (t) { var e = u + "placeholder", i = t.data(e); i && (i.remove(), t.removeData(e)) }, cleanUp: function (e) { t.effects.restoreStyle(e), t.effects.removePlaceholder(e) }, setTransition: function (e, i, s, n) { return n = n || {}, t.each(i, function (t, i) { var o = e.cssUnit(i); o[0] > 0 && (n[i] = o[0] * s + o[1]) }), n } }), t.fn.extend({ effect: function () { function i(e) { function i() { r.removeData(p), t.effects.cleanUp(r), "hide" === s.mode && r.hide(), a() } function a() { t.isFunction(h) && h.call(r[0]), t.isFunction(e) && e() } var r = t(this); s.mode = c.shift(), t.uiBackCompat === !1 || o ? "none" === s.mode ? (r[l](), a()) : n.call(r[0], s, i) : (r.is(":hidden") ? "hide" === l : "show" === l) ? (r[l](), a()) : n.call(r[0], s, a) } var s = e.apply(this, arguments), n = t.effects.effect[s.effect], o = n.mode, a = s.queue, r = a || "fx", h = s.complete, l = s.mode, c = [], u = function (e) { var i = t(this), s = t.effects.mode(i, l) || o; i.data(p, !0), c.push(s), o && ("show" === s || s === o && "hide" === s) && i.show(), o && "none" === s || t.effects.saveStyle(i), t.isFunction(e) && e() }; return t.fx.off || !n ? l ? this[l](s.duration, h) : this.each(function () { h && h.call(this) }) : a === !1 ? this.each(u).each(i) : this.queue(r, u).queue(r, i) }, show: function (t) { return function (s) { if (i(s)) return t.apply(this, arguments); var n = e.apply(this, arguments); return n.mode = "show", this.effect.call(this, n) } }(t.fn.show), hide: function (t) { return function (s) { if (i(s)) return t.apply(this, arguments); var n = e.apply(this, arguments); return n.mode = "hide", this.effect.call(this, n) } }(t.fn.hide), toggle: function (t) { return function (s) { if (i(s) || "boolean" == typeof s) return t.apply(this, arguments); var n = e.apply(this, arguments); return n.mode = "toggle", this.effect.call(this, n) } }(t.fn.toggle), cssUnit: function (e) { var i = this.css(e), s = []; return t.each(["em", "px", "%", "pt"], function (t, e) { i.indexOf(e) > 0 && (s = [parseFloat(i), e]) }), s }, cssClip: function (t) { return t ? this.css("clip", "rect(" + t.top + "px " + t.right + "px " + t.bottom + "px " + t.left + "px)") : s(this.css("clip"), this) }, transfer: function (e, i) { var s = t(this), n = t(e.to), o = "fixed" === n.css("position"), a = t("body"), r = o ? a.scrollTop() : 0, h = o ? a.scrollLeft() : 0, l = n.offset(), c = { top: l.top - r, left: l.left - h, height: n.innerHeight(), width: n.innerWidth() }, u = s.offset(), d = t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({ top: u.top - r, left: u.left - h, height: s.innerHeight(), width: s.innerWidth(), position: o ? "fixed" : "absolute" }).animate(c, e.duration, e.easing, function () { d.remove(), t.isFunction(i) && i() }) } }), t.fx.step.clip = function (e) {
        e.clipInit || (e.start = t(e.elem).cssClip(), "string" == typeof e.end && (e.end = s(e.end, e.elem)), e.clipInit = !0), t(e.elem).cssClip({ top: e.pos * (e.end.top - e.start.top) + e.start.top, right: e.pos * (e.end.right - e.start.right) + e.start.right, bottom: e.pos * (e.end.bottom - e.start.bottom) + e.start.bottom, left: e.pos * (e.end.left - e.start.left) + e.start.left })
        }
    }(), function () { var e = {}; t.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (t, i) { e[i] = function (e) { return Math.pow(e, t + 2) } }), t.extend(e, { Sine: function (t) { return 1 - Math.cos(t * Math.PI / 2) }, Circ: function (t) { return 1 - Math.sqrt(1 - t * t) }, Elastic: function (t) { return 0 === t || 1 === t ? t : -Math.pow(2, 8 * (t - 1)) * Math.sin((80 * (t - 1) - 7.5) * Math.PI / 15) }, Back: function (t) { return t * t * (3 * t - 2) }, Bounce: function (t) { for (var e, i = 4; ((e = Math.pow(2, --i)) - 1) / 11 > t;); return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * e - 2) / 22 - t, 2) } }), t.each(e, function (e, i) { t.easing["easeIn" + e] = i, t.easing["easeOut" + e] = function (t) { return 1 - i(1 - t) }, t.easing["easeInOut" + e] = function (t) { return .5 > t ? i(2 * t) / 2 : 1 - i(-2 * t + 2) / 2 } }) }(), t.effects
});;
/**
 * This work is licensed under the Creative Commons Attribution-Share Alike 3.0
 * United States License. To view a copy of this license,
 * visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter
 * to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
 *
 * Modified by: Jill Elaine
 * Email: jillelaine01@gmail.com
 *
 * Configurable idle (no activity) timer and logout redirect for jQuery.
 * Works across multiple windows and tabs from the same domain.
 *
 * Dependencies: JQuery v1.7+, JQuery UI, store.js from https://github.com/marcuswestin/store.js - v1.3.4+
 *
 * version 1.0.10
 **/
/*global jQuery: false, document: false, store: false, clearInterval: false, setInterval: false, setTimeout: false, clearTimeout: false, window: false, alert: false*/
/*jslint indent: 2, sloppy: true, plusplus: true*/
/*Modified by Radion 2015 August - use localStorage instead of store.js*/
(function ($) {
    $.fn.idleTimeout = function (userRuntimeConfig) {
        //##############################
        //## Public Configuration Variables
        //##############################
        var defaultConfig = {
            redirectUrl: '/logout',
            // idle settings
            idleTimeLimit: 1200,
            idleCheckHeartbeat: 2,
            // optional custom callback to perform before logout
            customCallback: false,
            // customCallback:    function () {    // define optional custom js function
            // perform custom action before logout
            // },
            // configure which activity events to detect
            // http://www.quirksmode.org/dom/events/
            // https://developer.mozilla.org/en-US/docs/Web/Reference/Events
            activityEvents: 'click keypress scroll wheel mousewheel mousemove',
            // warning dialog box configuration
            enableDialog: true,
            dialogDisplayLimit: 180,
            dialogTitle: 'Session Expiration Warning',
            dialogText: 'Because you have been inactive, your session is about to expire.',
            dialogTimeRemaining: 'Time remaining',
            dialogStayLoggedInButton: 'Stay Logged In',
            dialogLogOutNowButton: 'Log Out Now',
            // error message if localStorage not enabled
            errorAlertMessage: 'Please disable "Private Mode", or upgrade to a modern browser.',
            // server-side session keep-alive timer
            sessionKeepAliveTimer: 600,
            sessionKeepAliveUrl: window.location.href // set URL to ping - does not apply if sessionKeepAliveTimer: false
        }, 
        //##############################
        //## Private Variables
        //##############################
        currentConfig = $.extend(defaultConfig, userRuntimeConfig), // merge default and user runtime configuration
        origTitle = document.title, // save original browser title
        activityDetector, startKeepSessionAlive, stopKeepSessionAlive, keepSession, keepAlivePing, // session keep alive
        idleTimer, remainingTimer, checkIdleTimeout, checkIdleTimeoutLoop, startIdleTimer, stopIdleTimer, // idle timer
        openWarningDialog, dialogTimer, checkDialogTimeout, startDialogTimer, stopDialogTimer, isDialogOpen, destroyWarningDialog, countdownDisplay, // warning dialog
        logoutUser;
        //##############################
        //## Public Functions
        //##############################
        // trigger a manual user logout
        // use this code snippet on your site's Logout button: $.fn.idleTimeout().logout();
        this.logout = function () {
            //store.set('idleTimerLoggedOut', true);
            localStorage['idleTimerLoggedOut'] = true;
            localStorage['Realtor_lastLogout'] = $.now();
        };
        //##############################
        //## Private Functions
        //##############################
        //----------- KEEP SESSION ALIVE FUNCTIONS --------------//
        startKeepSessionAlive = function () {
            keepSession = function () {
                $.get(currentConfig.sessionKeepAliveUrl);
                startKeepSessionAlive();
            };
            keepAlivePing = setTimeout(keepSession, (currentConfig.sessionKeepAliveTimer * 1000));
        };
        stopKeepSessionAlive = function () {
            clearTimeout(keepAlivePing);
        };
        //----------- ACTIVITY DETECTION FUNCTION --------------//
        activityDetector = function () {
            $('body').on(currentConfig.activityEvents, function () {
                if (!currentConfig.enableDialog || (currentConfig.enableDialog && isDialogOpen() !== true)) {
                    startIdleTimer();
                }
            });
        };
        //----------- IDLE TIMER FUNCTIONS --------------//
        checkIdleTimeout = function () {
            //var timeIdleTimeout = (store.get('idleTimerLastActivity') + (currentConfig.idleTimeLimit * 1000));
            var timeIdleTimeout = (parseInt(localStorage['idleTimerLastActivity']) + (currentConfig.idleTimeLimit * 1000));
            if ($.now() > timeIdleTimeout) {
                if (!currentConfig.enableDialog) {
                    logoutUser(); // immediately log out user when user is idle for idleTimeLimit
                }
                else if (currentConfig.enableDialog && isDialogOpen() !== true) {
                    openWarningDialog();
                    startDialogTimer(); // start timing the warning dialog
                }
            }
            else if (localStorage['idleTimerLoggedOut'] === true) {
                logoutUser();
            }
            else {
                if (currentConfig.enableDialog && isDialogOpen() === true) {
                    destroyWarningDialog();
                    stopDialogTimer();
                }
            }
        };
        startIdleTimer = function () {
            stopIdleTimer();
            //store.set('idleTimerLastActivity', $.now());
            localStorage['idleTimerLastActivity'] = $.now();
            checkIdleTimeoutLoop();
        };
        checkIdleTimeoutLoop = function () {
            if (localStorage['idleTimerLoggedOut'] == "false") {
                checkIdleTimeout();
                idleTimer = setTimeout(checkIdleTimeoutLoop, (currentConfig.idleCheckHeartbeat * 1000));
            }
        };
        stopIdleTimer = function () {
            clearTimeout(idleTimer);
        };
        //----------- WARNING DIALOG FUNCTIONS --------------//
        openWarningDialog = function () {
            var dialogContent = "<div id='idletimer_warning_dialog'><p>" + currentConfig.dialogText + "</p><p style='display:inline'>" + currentConfig.dialogTimeRemaining + ": <div style='display:inline' id='countdownDisplay'></div></p></div>";
            $(dialogContent).dialog({
                buttons: [{
                        text: currentConfig.dialogStayLoggedInButton,
                        click: function () {
                            destroyWarningDialog();
                            stopDialogTimer();
                            startIdleTimer();
                        }
                    },
                    {
                        text: currentConfig.dialogLogOutNowButton,
                        click: function () {
                            logoutUser();
                        }
                    }
                ],
                closeOnEscape: false,
                modal: true,
                title: currentConfig.dialogTitle,
                open: function () {
                    $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close').hide();
                }
            });
            countdownDisplay();
            document.title = currentConfig.dialogTitle;
            if (currentConfig.sessionKeepAliveTimer) {
                stopKeepSessionAlive();
            }
        };
        checkDialogTimeout = function () {
            var timeDialogTimeout = (parseInt(localStorage['idleTimerLastActivity']) + (currentConfig.idleTimeLimit * 1000) + (currentConfig.dialogDisplayLimit * 1000));
            if (($.now() > timeDialogTimeout) || (localStorage['idleTimerLoggedOut'] === true)) {
                logoutUser();
            }
        };
        startDialogTimer = function () {
            dialogTimer = setInterval(checkDialogTimeout, (currentConfig.idleCheckHeartbeat * 1000));
        };
        stopDialogTimer = function () {
            clearInterval(dialogTimer);
            clearInterval(remainingTimer);
        };
        isDialogOpen = function () {
            var dialogOpen = $("#idletimer_warning_dialog").is(":visible");
            if (dialogOpen === true) {
                return true;
            }
            return false;
        };
        destroyWarningDialog = function () {
            $("#idletimer_warning_dialog").dialog('destroy').remove();
            document.title = origTitle;
            if (currentConfig.sessionKeepAliveTimer) {
                startKeepSessionAlive();
            }
        };
        countdownDisplay = function () {
            var dialogDisplaySeconds = currentConfig.dialogDisplayLimit, mins, secs;
            remainingTimer = setInterval(function () {
                mins = Math.floor(dialogDisplaySeconds / 60); // minutes
                if (mins < 10) {
                    mins = '0' + mins;
                }
                secs = dialogDisplaySeconds - (mins * 60); // seconds
                if (secs < 10) {
                    secs = '0' + secs;
                }
                $('#countdownDisplay').html(mins + ':' + secs);
                dialogDisplaySeconds -= 1;
            }, 1000);
        };
        //----------- LOGOUT USER FUNCTION --------------//
        logoutUser = function () {
            stopIdleTimer();
            //store.set('idleTimerLoggedOut', true);
            localStorage['idleTimerLoggedOut'] = true;
            if (currentConfig.sessionKeepAliveTimer) {
                stopKeepSessionAlive();
            }
            if (currentConfig.customCallback) {
                currentConfig.customCallback();
            }
            if (currentConfig.redirectUrl) {
                window.location.href = currentConfig.redirectUrl;
            }
        };
        //###############################
        // Build & Return the instance of the item as a plugin
        // This is your construct.
        //###############################
        return this.each(function () {
            if (localStorage) {
                localStorage['idleTimerLastActivity'] = $.now();
                localStorage['idleTimerLoggedOut'] = false;
                activityDetector();
                if (currentConfig.sessionKeepAliveTimer) {
                    startKeepSessionAlive();
                }
                startIdleTimer();
            }
            else {
                alert(currentConfig.errorAlertMessage);
            }
        });
    };
}(jQuery));
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map 
//# sourceMappingURL=jquery-idleTimeout.js.map;
/*
* $ lightbox_me
* By: Buck Wilson
* Version : 2.3
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

var activeLightBoxCount = 0;

(function ($) {

    $.fn.lightbox_me = function (options) {

        return this.each(function () {

            var
                opts = $.extend({}, $.fn.lightbox_me.defaults, options),
                $overlay = $(),
                $self = $(this),
                $iframe = $('<iframe id="foo" style="z-index: ' + (opts.zIndex + 1) + ';border: none; margin: 0; min-width:2000px; padding: 0; position: fixed; width: 100%; height: 100%; top: 0; left: 0; filter: mask();"/>'),
                ie6 = false;

            if (opts.showOverlay) {
                //check if there's an existing overlay, if so, make subequent ones clear
                var $currentOverlays = $(".js_lb_overlay:visible");
                activeLightBoxCount++;
                opts.index = activeLightBoxCount;

                $(".js_lb_overlay:visible").each(function () {
                    //$(this).css('z-index', $(this).zIndex() - 1);
                    $(this).css('z-index', $(this).css("z-index") - 1);                    
                });

                $overlay = $('<div class="' + opts.classPrefix + '_overlay js_lb_overlay"/>');

            }

            /*----------------------------------------------------
               DOM Building
            ---------------------------------------------------- */
            if (ie6) {
                var src = /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank';
                $iframe.attr('src', src);
                $('body').append($iframe);
            } // iframe shim for ie6, to hide select elements

            $('body').append($self.hide()).append($overlay);



            /*----------------------------------------------------
               Overlay CSS stuffs
            ---------------------------------------------------- */

            // set css of the overlay
            if (opts.showOverlay) {
                setOverlayHeight(); // pulled this into a function because it is called on window resize.
                $overlay.css({
                    position: 'fixed', width: '100%', top: 0, left: 0, right: 0, bottom: 0, zIndex: (opts.zIndex + 2), display: 'none'
                });
                if (!$overlay.hasClass('lb_overlay_clear')) {
                    $overlay.css(opts.overlayCSS);
                }
            }

            /*----------------------------------------------------
               Animate it in.
            ---------------------------------------------------- */
            //
            if (opts.showOverlay) {
                $overlay.fadeIn(opts.overlaySpeed, function () {
                    setSelfPosition();
                    $self[opts.appearEffect](opts.lightboxSpeed, function () {
                        setOverlayHeight(); setSelfPosition(); opts.onLoad($self); $.fn.lightbox_me.defaultOpen($self)
                            ;
                    });
                });
            } else {
                setSelfPosition();
                $self[opts.appearEffect](opts.lightboxSpeed, function () {
                    opts.onLoad(); $.fn.lightbox_me.defaultOpen($self);
                });
            }

            /*----------------------------------------------------
               Hide parent if parent specified (parentLightbox should be jquery reference to any parent lightbox)
            ---------------------------------------------------- */
            if (opts.parentLightbox) {
                opts.parentLightbox.fadeOut(100);
            }


            /*----------------------------------------------------
               Bind Events
            ---------------------------------------------------- */

            $(window).resize(setOverlayHeight)
                .resize(setSelfPosition)
                .scroll(setSelfPosition);

            $(window).bind('keyup.lightbox_me', observeKeyPress);

            if (opts.closeClick) {
                $overlay.click(function (e) {
                    closeLightbox(); e.preventDefault;
                });
            }
            $self.delegate(opts.closeSelector, "click", function (e) {
                closeLightbox(); e.preventDefault();
            });
            //Just calling c;
            $self.bind('close', closeLightbox);

            //$self.bind('close', function () {
            //    alert('fireclose');
            //    var e = jQuery.Event("keyup"); // or keypress/keydown
            //    e.keyCode = 27; // for Esc
            //    $(window).trigger(e); // trigger it on document
            //});
            $self.bind('reposition', setSelfPosition);

            $self[0].focus();

            /*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */


            /*----------------------------------------------------
               Private Functions
            ---------------------------------------------------- */

            /* Remove or hide all elements */
            function closeLightbox() {

                if (opts.index == activeLightBoxCount) {
                    var s = $self[0].style;
                    if (opts.destroyOnClose) {
                        $self.add($overlay).remove();
                    } else {
                        //$self.add($overlay).hide();
                        $overlay.remove();
                        $self.hide();
                        $self.unbind('close');
                    }

                    //show the hidden parent lightbox
                    if (opts.parentLightbox) {
                        opts.parentLightbox.fadeIn(100);
                    }

                    $iframe.remove();


                    //if (opts.isSecondLightbox) {
                    //    $('.d_base').filter(function () {
                    //        return $(this).css('z-index') == 1001;
                    //    }).each(function () {
                    //        $(this).css('z-index', 1002);
                    //    });
                    //}

                    $(".js_lb_overlay:visible").each(function () {
                        //$(this).css('z-index', $(this).zIndex() + 1);
                        $(this).css('z-index', $(this).css('z-index') + 1);
                    });


                    if (activeLightBoxCount == 1) {
                        // clean up events.
                        $self.undelegate(opts.closeSelector, "click");

                        $(window).unbind('reposition', setOverlayHeight);
                        $(window).unbind('reposition', setSelfPosition);
                        $(window).unbind('scroll', setSelfPosition);
                        $(window).unbind('keyup.lightbox_me');
                    }

                    if (ie6)
                        s.removeExpression('top');
                    opts.onClose();
                    $.fn.lightbox_me.defaultClose($self);

                    activeLightBoxCount--;
                }

            }


            /* Function to bind to the window to observe the escape/enter key press */
            function observeKeyPress(e) {
                if ((e.keyCode == 27 || (e.DOM_VK_ESCAPE == 27 && e.which == 0)) && opts.closeEsc) {
                    closeLightbox();
                }
                //} else {
                //    e.preventDefault();
                //}
            }


            /* Set the height of the overlay
                    : if the document height is taller than the window, then set the overlay height to the document height.
                    : otherwise, just set overlay height: 100%
            */
            function setOverlayHeight() {
                if ($(window).height() < $(document).height()) {
                    $overlay.css({
                        height: $(document).height() + 'px'
                    });
                    $iframe.css({
                        height: $(document).height() + 'px'
                    });
                } else {
                    $overlay.css({
                        height: '100%'
                    });
                    if (ie6) {
                        $('html,body').css('height', '100%');
                        $iframe.css('height', '100%');
                    } // ie6 hack for height: 100%; TODO: handle this in IE7
                }
            }


            /* Set the position of the modal'd window ($self)
                    : if $self is taller than the window, then make it absolutely positioned
                    : otherwise fixed
            */
            function setSelfPosition() {
                var s = $self[0].style;

                // reset CSS so width is re-calculated for margin-left CSS
                $self.css({
                    left: '50%', marginLeft: ($self.outerWidth() / 2) * -1, zIndex: (opts.zIndex + 3)
                });


                /* we have to get a little fancy when dealing with height, because lightbox_me
                    is just so fancy.
                 */

                // if the height of $self is bigger than the window and self isn't already position absolute
                if (($self.height() + 80 >= $(window).height()) && ($self.css('position') != 'absolute' || ie6)) {

                    // we are going to make it positioned where the user can see it, but they can still scroll
                    // so the top offset is based on the user's scroll position.
                    var topOffset = $(document).scrollTop() + 40;
                    $self.css({
                        position: 'absolute', top: topOffset + 'px', marginTop: 0
                    })
                    if (ie6) {
                        s.removeExpression('top');
                    }
                } else if ($self.height() + 80 < $(window).height()) {
                    //if the height is less than the window height, then we're gonna make this thing position: fixed.
                    // in ie6 we're gonna fake it.
                    if (ie6) {
                        s.position = 'absolute';
                        if (opts.centered) {
                            s.setExpression('top', '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"')
                            s.marginTop = 0;
                        } else {
                            var top = (opts.modalCSS && opts.modalCSS.top) ? parseInt(opts.modalCSS.top) : 0;
                            s.setExpression('top', '((blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + ' + top + ') + "px"')
                        }
                    } else {
                        if (opts.centered) {
                            $self.css({
                                position: 'fixed', top: '50%', marginTop: ($self.outerHeight() / 2) * -1
                            })
                        } else {
                            $self.css({
                                position: 'fixed'
                            }).css(opts.modalCSS);
                        }

                    }
                }
            }

        });



    };

    $.fn.lightbox_me.defaultClose = function () {
        try {
            $('.qtip').show();
            if (prevFocusedElement) {
                prevFocusedElement.focus();
            }
        } catch (ex) {
        }
    };

    $.fn.lightbox_me.defaultOpen = function (self) {
        prevFocusedElement = $(':focus');
        if (self) {
            $('.qtip').hide();
            var overlayId = self[0].id;
            var lastFocusable = $('#' + overlayId + ' :focusable').last();
            var firstFocusable = $('#' + overlayId + ' :focusable').first();
            var firstFocusableOnLoad = $('#' + overlayId + ' :focusable').not('.b_close,.initFocusSkip').first();

            firstFocusableOnLoad.focus();
            lastFocusable.keydown(function (e) {
                if (e.which == 9 && !e.shiftKey) {
                    firstFocusable.focus(); e.preventDefault();
                }
            });
            firstFocusable.keydown(function (e) {
                if (e.which === 9 && e.shiftKey) {
                    lastFocusable.focus(); e.preventDefault();
                }
            });
        }
    };

    $.fn.lightbox_me.defaults = {

        // animation
        appearEffect: "fadeIn",
        appearEase: "",
        overlaySpeed: 0,
        lightboxSpeed: 0,

        // close
        closeSelector: ".close",
        closeClick: false,
        closeEsc: true,

        // behavior
        destroyOnClose: false,
        showOverlay: true,
        parentLightbox: false,
        prevFocusedElement: null,
        // callbacks
        onLoad: function (self) {

        },
        onClose: function () {


        },

        // style
        classPrefix: 'lb',
        zIndex: 999,
        centered: false,
        modalCSS: {
            top: '40px'
        },
        overlayCSS: {
            background: 'black', opacity: .3
        }
    }
})(jQuery);;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
; (function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend() {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[i];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode(s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init(converter) {
		function api() { }

		function set(key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) { }

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get(key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) { }
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) { }
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () { });
}));;
/**
 * Swiper 6.5.7
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://com
 *
 * Copyright 2014-2021 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: April 16, 2021
 */

!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).Swiper = t() }(this, (function () { "use strict"; function e(e, t) { for (var a = 0; a < t.length; a++) { var i = t[a]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } } function t() { return (t = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) { var a = arguments[t]; for (var i in a) Object.prototype.hasOwnProperty.call(a, i) && (e[i] = a[i]) } return e }).apply(this, arguments) } function a(e) { return null !== e && "object" == typeof e && "constructor" in e && e.constructor === Object } function i(e, t) { void 0 === e && (e = {}), void 0 === t && (t = {}), Object.keys(t).forEach((function (s) { void 0 === e[s] ? e[s] = t[s] : a(t[s]) && a(e[s]) && Object.keys(t[s]).length > 0 && i(e[s], t[s]) })) } var s = { body: {}, addEventListener: function () { }, removeEventListener: function () { }, activeElement: { blur: function () { }, nodeName: "" }, querySelector: function () { return null }, querySelectorAll: function () { return [] }, getElementById: function () { return null }, createEvent: function () { return { initEvent: function () { } } }, createElement: function () { return { children: [], childNodes: [], style: {}, setAttribute: function () { }, getElementsByTagName: function () { return [] } } }, createElementNS: function () { return {} }, importNode: function () { return null }, location: { hash: "", host: "", hostname: "", href: "", origin: "", pathname: "", protocol: "", search: "" } }; function r() { var e = "undefined" != typeof document ? document : {}; return i(e, s), e } var n = { document: s, navigator: { userAgent: "" }, location: { hash: "", host: "", hostname: "", href: "", origin: "", pathname: "", protocol: "", search: "" }, history: { replaceState: function () { }, pushState: function () { }, go: function () { }, back: function () { } }, CustomEvent: function () { return this }, addEventListener: function () { }, removeEventListener: function () { }, getComputedStyle: function () { return { getPropertyValue: function () { return "" } } }, Image: function () { }, Date: function () { }, screen: {}, setTimeout: function () { }, clearTimeout: function () { }, matchMedia: function () { return {} }, requestAnimationFrame: function (e) { return "undefined" == typeof setTimeout ? (e(), null) : setTimeout(e, 0) }, cancelAnimationFrame: function (e) { "undefined" != typeof setTimeout && clearTimeout(e) } }; function o() { var e = "undefined" != typeof window ? window : {}; return i(e, n), e } function l(e) { return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) { return e.__proto__ || Object.getPrototypeOf(e) })(e) } function d(e, t) { return (d = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e })(e, t) } function p() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Date.prototype.toString.call(Reflect.construct(Date, [], (function () { }))), !0 } catch (e) { return !1 } } function c(e, t, a) { return (c = p() ? Reflect.construct : function (e, t, a) { var i = [null]; i.push.apply(i, t); var s = new (Function.bind.apply(e, i)); return a && d(s, a.prototype), s }).apply(null, arguments) } function u(e) { var t = "function" == typeof Map ? new Map : void 0; return (u = function (e) { if (null === e || (a = e, -1 === Function.toString.call(a).indexOf("[native code]"))) return e; var a; if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== t) { if (t.has(e)) return t.get(e); t.set(e, i) } function i() { return c(e, arguments, l(this).constructor) } return i.prototype = Object.create(e.prototype, { constructor: { value: i, enumerable: !1, writable: !0, configurable: !0 } }), d(i, e) })(e) } var h = function (e) { var t, a; function i(t) { var a, i, s; return a = e.call.apply(e, [this].concat(t)) || this, i = function (e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e }(a), s = i.__proto__, Object.defineProperty(i, "__proto__", { get: function () { return s }, set: function (e) { s.__proto__ = e } }), a } return a = e, (t = i).prototype = Object.create(a.prototype), t.prototype.constructor = t, t.__proto__ = a, i }(u(Array)); function v(e) { void 0 === e && (e = []); var t = []; return e.forEach((function (e) { Array.isArray(e) ? t.push.apply(t, v(e)) : t.push(e) })), t } function f(e, t) { return Array.prototype.filter.call(e, t) } function m(e, t) { var a = o(), i = r(), s = []; if (!t && e instanceof h) return e; if (!e) return new h(s); if ("string" == typeof e) { var n = e.trim(); if (n.indexOf("<") >= 0 && n.indexOf(">") >= 0) { var l = "div"; 0 === n.indexOf("<li") && (l = "ul"), 0 === n.indexOf("<tr") && (l = "tbody"), 0 !== n.indexOf("<td") && 0 !== n.indexOf("<th") || (l = "tr"), 0 === n.indexOf("<tbody") && (l = "table"), 0 === n.indexOf("<option") && (l = "select"); var d = i.createElement(l); d.innerHTML = n; for (var p = 0; p < d.childNodes.length; p += 1)s.push(d.childNodes[p]) } else s = function (e, t) { if ("string" != typeof e) return [e]; for (var a = [], i = t.querySelectorAll(e), s = 0; s < i.length; s += 1)a.push(i[s]); return a }(e.trim(), t || i) } else if (e.nodeType || e === a || e === i) s.push(e); else if (Array.isArray(e)) { if (e instanceof h) return e; s = e } return new h(function (e) { for (var t = [], a = 0; a < e.length; a += 1)-1 === t.indexOf(e[a]) && t.push(e[a]); return t }(s)) } m.fn = h.prototype; var g, b, w, y = { addClass: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = v(t.map((function (e) { return e.split(" ") }))); return this.forEach((function (e) { var t; (t = e.classList).add.apply(t, i) })), this }, removeClass: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = v(t.map((function (e) { return e.split(" ") }))); return this.forEach((function (e) { var t; (t = e.classList).remove.apply(t, i) })), this }, hasClass: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = v(t.map((function (e) { return e.split(" ") }))); return f(this, (function (e) { return i.filter((function (t) { return e.classList.contains(t) })).length > 0 })).length > 0 }, toggleClass: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = v(t.map((function (e) { return e.split(" ") }))); this.forEach((function (e) { i.forEach((function (t) { e.classList.toggle(t) })) })) }, attr: function (e, t) { if (1 === arguments.length && "string" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0; for (var a = 0; a < this.length; a += 1)if (2 === arguments.length) this[a].setAttribute(e, t); else for (var i in e) this[a][i] = e[i], this[a].setAttribute(i, e[i]); return this }, removeAttr: function (e) { for (var t = 0; t < this.length; t += 1)this[t].removeAttribute(e); return this }, transform: function (e) { for (var t = 0; t < this.length; t += 1)this[t].style.transform = e; return this }, transition: function (e) { for (var t = 0; t < this.length; t += 1)this[t].style.transitionDuration = "string" != typeof e ? e + "ms" : e; return this }, on: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = t[0], s = t[1], r = t[2], n = t[3]; function o(e) { var t = e.target; if (t) { var a = e.target.dom7EventData || []; if (a.indexOf(e) < 0 && a.unshift(e), m(t).is(s)) r.apply(t, a); else for (var i = m(t).parents(), n = 0; n < i.length; n += 1)m(i[n]).is(s) && r.apply(i[n], a) } } function l(e) { var t = e && e.target && e.target.dom7EventData || []; t.indexOf(e) < 0 && t.unshift(e), r.apply(this, t) } "function" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var d, p = i.split(" "), c = 0; c < this.length; c += 1) { var u = this[c]; if (s) for (d = 0; d < p.length; d += 1) { var h = p[d]; u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[h] || (u.dom7LiveListeners[h] = []), u.dom7LiveListeners[h].push({ listener: r, proxyListener: o }), u.addEventListener(h, o, n) } else for (d = 0; d < p.length; d += 1) { var v = p[d]; u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({ listener: r, proxyListener: l }), u.addEventListener(v, l, n) } } return this }, off: function () { for (var e = arguments.length, t = new Array(e), a = 0; a < e; a++)t[a] = arguments[a]; var i = t[0], s = t[1], r = t[2], n = t[3]; "function" == typeof t[1] && (i = t[0], r = t[1], n = t[2], s = void 0), n || (n = !1); for (var o = i.split(" "), l = 0; l < o.length; l += 1)for (var d = o[l], p = 0; p < this.length; p += 1) { var c = this[p], u = void 0; if (!s && c.dom7Listeners ? u = c.dom7Listeners[d] : s && c.dom7LiveListeners && (u = c.dom7LiveListeners[d]), u && u.length) for (var h = u.length - 1; h >= 0; h -= 1) { var v = u[h]; r && v.listener === r || r && v.listener && v.listener.dom7proxy && v.listener.dom7proxy === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r || (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) } } return this }, trigger: function () { for (var e = o(), t = arguments.length, a = new Array(t), i = 0; i < t; i++)a[i] = arguments[i]; for (var s = a[0].split(" "), r = a[1], n = 0; n < s.length; n += 1)for (var l = s[n], d = 0; d < this.length; d += 1) { var p = this[d]; if (e.CustomEvent) { var c = new e.CustomEvent(l, { detail: r, bubbles: !0, cancelable: !0 }); p.dom7EventData = a.filter((function (e, t) { return t > 0 })), p.dispatchEvent(c), p.dom7EventData = [], delete p.dom7EventData } } return this }, transitionEnd: function (e) { var t = this; return e && t.on("transitionend", (function a(i) { i.target === this && (e.call(this, i), t.off("transitionend", a)) })), this }, outerWidth: function (e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetWidth + parseFloat(t.getPropertyValue("margin-right")) + parseFloat(t.getPropertyValue("margin-left")) } return this[0].offsetWidth } return null }, outerHeight: function (e) { if (this.length > 0) { if (e) { var t = this.styles(); return this[0].offsetHeight + parseFloat(t.getPropertyValue("margin-top")) + parseFloat(t.getPropertyValue("margin-bottom")) } return this[0].offsetHeight } return null }, styles: function () { var e = o(); return this[0] ? e.getComputedStyle(this[0], null) : {} }, offset: function () { if (this.length > 0) { var e = o(), t = r(), a = this[0], i = a.getBoundingClientRect(), s = t.body, n = a.clientTop || s.clientTop || 0, l = a.clientLeft || s.clientLeft || 0, d = a === e ? e.scrollY : a.scrollTop, p = a === e ? e.scrollX : a.scrollLeft; return { top: i.top + d - n, left: i.left + p - l } } return null }, css: function (e, t) { var a, i = o(); if (1 === arguments.length) { if ("string" != typeof e) { for (a = 0; a < this.length; a += 1)for (var s in e) this[a].style[s] = e[s]; return this } if (this[0]) return i.getComputedStyle(this[0], null).getPropertyValue(e) } if (2 === arguments.length && "string" == typeof e) { for (a = 0; a < this.length; a += 1)this[a].style[e] = t; return this } return this }, each: function (e) { return e ? (this.forEach((function (t, a) { e.apply(t, [t, a]) })), this) : this }, html: function (e) { if (void 0 === e) return this[0] ? this[0].innerHTML : null; for (var t = 0; t < this.length; t += 1)this[t].innerHTML = e; return this }, text: function (e) { if (void 0 === e) return this[0] ? this[0].textContent.trim() : null; for (var t = 0; t < this.length; t += 1)this[t].textContent = e; return this }, is: function (e) { var t, a, i = o(), s = r(), n = this[0]; if (!n || void 0 === e) return !1; if ("string" == typeof e) { if (n.matches) return n.matches(e); if (n.webkitMatchesSelector) return n.webkitMatchesSelector(e); if (n.msMatchesSelector) return n.msMatchesSelector(e); for (t = m(e), a = 0; a < t.length; a += 1)if (t[a] === n) return !0; return !1 } if (e === s) return n === s; if (e === i) return n === i; if (e.nodeType || e instanceof h) { for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1)if (t[a] === n) return !0; return !1 } return !1 }, index: function () { var e, t = this[0]; if (t) { for (e = 0; null !== (t = t.previousSibling);)1 === t.nodeType && (e += 1); return e } }, eq: function (e) { if (void 0 === e) return this; var t = this.length; if (e > t - 1) return m([]); if (e < 0) { var a = t + e; return m(a < 0 ? [] : [this[a]]) } return m([this[e]]) }, append: function () { for (var e, t = r(), a = 0; a < arguments.length; a += 1) { e = a < 0 || arguments.length <= a ? void 0 : arguments[a]; for (var i = 0; i < this.length; i += 1)if ("string" == typeof e) { var s = t.createElement("div"); for (s.innerHTML = e; s.firstChild;)this[i].appendChild(s.firstChild) } else if (e instanceof h) for (var n = 0; n < e.length; n += 1)this[i].appendChild(e[n]); else this[i].appendChild(e) } return this }, prepend: function (e) { var t, a, i = r(); for (t = 0; t < this.length; t += 1)if ("string" == typeof e) { var s = i.createElement("div"); for (s.innerHTML = e, a = s.childNodes.length - 1; a >= 0; a -= 1)this[t].insertBefore(s.childNodes[a], this[t].childNodes[0]) } else if (e instanceof h) for (a = 0; a < e.length; a += 1)this[t].insertBefore(e[a], this[t].childNodes[0]); else this[t].insertBefore(e, this[t].childNodes[0]); return this }, next: function (e) { return this.length > 0 ? e ? this[0].nextElementSibling && m(this[0].nextElementSibling).is(e) ? m([this[0].nextElementSibling]) : m([]) : this[0].nextElementSibling ? m([this[0].nextElementSibling]) : m([]) : m([]) }, nextAll: function (e) { var t = [], a = this[0]; if (!a) return m([]); for (; a.nextElementSibling;) { var i = a.nextElementSibling; e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, prev: function (e) { if (this.length > 0) { var t = this[0]; return e ? t.previousElementSibling && m(t.previousElementSibling).is(e) ? m([t.previousElementSibling]) : m([]) : t.previousElementSibling ? m([t.previousElementSibling]) : m([]) } return m([]) }, prevAll: function (e) { var t = [], a = this[0]; if (!a) return m([]); for (; a.previousElementSibling;) { var i = a.previousElementSibling; e ? m(i).is(e) && t.push(i) : t.push(i), a = i } return m(t) }, parent: function (e) { for (var t = [], a = 0; a < this.length; a += 1)null !== this[a].parentNode && (e ? m(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode)); return m(t) }, parents: function (e) { for (var t = [], a = 0; a < this.length; a += 1)for (var i = this[a].parentNode; i;)e ? m(i).is(e) && t.push(i) : t.push(i), i = i.parentNode; return m(t) }, closest: function (e) { var t = this; return void 0 === e ? m([]) : (t.is(e) || (t = t.parents(e).eq(0)), t) }, find: function (e) { for (var t = [], a = 0; a < this.length; a += 1) { try { var i = this[a].querySelectorAll(e) } catch (t) { console.log(e) } for (var s = 0; s < i.length; s += 1)t.push(i[s]) } return m(t) }, children: function (e) { for (var t = [], a = 0; a < this.length; a += 1)for (var i = this[a].children, s = 0; s < i.length; s += 1)e && !m(i[s]).is(e) || t.push(i[s]); return m(t) }, filter: function (e) { return m(f(this, e)) }, remove: function () { for (var e = 0; e < this.length; e += 1)this[e].parentNode && this[e].parentNode.removeChild(this[e]); return this } }; function E(e, t) { return void 0 === t && (t = 0), setTimeout(e, t) } function x() { return Date.now() } function T(e, t) { void 0 === t && (t = "x"); var a, i, s, r = o(), n = function (e) { var t, a = o(); return a.getComputedStyle && (t = a.getComputedStyle(e, null)), !t && e.currentStyle && (t = e.currentStyle), t || (t = e.style), t }(e); return r.WebKitCSSMatrix ? ((i = n.transform || n.webkitTransform).split(",").length > 6 && (i = i.split(", ").map((function (e) { return e.replace(",", ".") })).join(", ")), s = new r.WebKitCSSMatrix("none" === i ? "" : i)) : a = (s = n.MozTransform || n.OTransform || n.MsTransform || n.msTransform || n.transform || n.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")).toString().split(","), "x" === t && (i = r.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = r.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0 } function S(e) { return "object" == typeof e && null !== e && e.constructor && "Object" === Object.prototype.toString.call(e).slice(8, -1) } function C() { for (var e = Object(arguments.length <= 0 ? void 0 : arguments[0]), t = ["__proto__", "constructor", "prototype"], a = 1; a < arguments.length; a += 1) { var i = a < 0 || arguments.length <= a ? void 0 : arguments[a]; if (null != i) for (var s = Object.keys(Object(i)).filter((function (e) { return t.indexOf(e) < 0 })), r = 0, n = s.length; r < n; r += 1) { var o = s[r], l = Object.getOwnPropertyDescriptor(i, o); void 0 !== l && l.enumerable && (S(e[o]) && S(i[o]) ? i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o]) : !S(e[o]) && S(i[o]) ? (e[o] = {}, i[o].__swiper__ ? e[o] = i[o] : C(e[o], i[o])) : e[o] = i[o]) } } return e } function M(e, t) { Object.keys(t).forEach((function (a) { S(t[a]) && Object.keys(t[a]).forEach((function (i) { "function" == typeof t[a][i] && (t[a][i] = t[a][i].bind(e)) })), e[a] = t[a] })) } function z(e) { return void 0 === e && (e = ""), "." + e.trim().replace(/([\.:\/])/g, "\\$1").replace(/ /g, ".") } function P() { return g || (g = function () { var e = o(), t = r(); return { touch: !!("ontouchstart" in e || e.DocumentTouch && t instanceof e.DocumentTouch), pointerEvents: !!e.PointerEvent && "maxTouchPoints" in e.navigator && e.navigator.maxTouchPoints >= 0, observer: "MutationObserver" in e || "WebkitMutationObserver" in e, passiveListener: function () { var t = !1; try { var a = Object.defineProperty({}, "passive", { get: function () { t = !0 } }); e.addEventListener("testPassiveListener", null, a) } catch (e) { } return t }(), gestures: "ongesturestart" in e } }()), g } function k(e) { return void 0 === e && (e = {}), b || (b = function (e) { var t = (void 0 === e ? {} : e).userAgent, a = P(), i = o(), s = i.navigator.platform, r = t || i.navigator.userAgent, n = { ios: !1, android: !1 }, l = i.screen.width, d = i.screen.height, p = r.match(/(Android);?[\s\/]+([\d.]+)?/), c = r.match(/(iPad).*OS\s([\d_]+)/), u = r.match(/(iPod)(.*OS\s([\d_]+))?/), h = !c && r.match(/(iPhone\sOS|iOS)\s([\d_]+)/), v = "Win32" === s, f = "MacIntel" === s; return !c && f && a.touch && ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"].indexOf(l + "x" + d) >= 0 && ((c = r.match(/(Version)\/([\d.]+)/)) || (c = [0, 1, "13_0_0"]), f = !1), p && !v && (n.os = "android", n.android = !0), (c || h || u) && (n.os = "ios", n.ios = !0), n }(e)), b } function L() { return w || (w = function () { var e, t = o(); return { isEdge: !!t.navigator.userAgent.match(/Edge/g), isSafari: (e = t.navigator.userAgent.toLowerCase(), e.indexOf("safari") >= 0 && e.indexOf("chrome") < 0 && e.indexOf("android") < 0), isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent) } }()), w } Object.keys(y).forEach((function (e) { Object.defineProperty(m.fn, e, { value: y[e], writable: !0 }) })); var $ = { name: "resize", create: function () { var e = this; C(e, { resize: { observer: null, createObserver: function () { e && !e.destroyed && e.initialized && (e.resize.observer = new ResizeObserver((function (t) { var a = e.width, i = e.height, s = a, r = i; t.forEach((function (t) { var a = t.contentBoxSize, i = t.contentRect, n = t.target; n && n !== e.el || (s = i ? i.width : (a[0] || a).inlineSize, r = i ? i.height : (a[0] || a).blockSize) })), s === a && r === i || e.resize.resizeHandler() })), e.resize.observer.observe(e.el)) }, removeObserver: function () { e.resize.observer && e.resize.observer.unobserve && e.el && (e.resize.observer.unobserve(e.el), e.resize.observer = null) }, resizeHandler: function () { e && !e.destroyed && e.initialized && (e.emit("beforeResize"), e.emit("resize")) }, orientationChangeHandler: function () { e && !e.destroyed && e.initialized && e.emit("orientationchange") } } }) }, on: { init: function (e) { var t = o(); e.params.resizeObserver && void 0 !== o().ResizeObserver ? e.resize.createObserver() : (t.addEventListener("resize", e.resize.resizeHandler), t.addEventListener("orientationchange", e.resize.orientationChangeHandler)) }, destroy: function (e) { var t = o(); e.resize.removeObserver(), t.removeEventListener("resize", e.resize.resizeHandler), t.removeEventListener("orientationchange", e.resize.orientationChangeHandler) } } }, I = { attach: function (e, t) { void 0 === t && (t = {}); var a = o(), i = this, s = new (a.MutationObserver || a.WebkitMutationObserver)((function (e) { if (1 !== e.length) { var t = function () { i.emit("observerUpdate", e[0]) }; a.requestAnimationFrame ? a.requestAnimationFrame(t) : a.setTimeout(t, 0) } else i.emit("observerUpdate", e[0]) })); s.observe(e, { attributes: void 0 === t.attributes || t.attributes, childList: void 0 === t.childList || t.childList, characterData: void 0 === t.characterData || t.characterData }), i.observer.observers.push(s) }, init: function () { var e = this; if (e.support.observer && e.params.observer) { if (e.params.observeParents) for (var t = e.$el.parents(), a = 0; a < t.length; a += 1)e.observer.attach(t[a]); e.observer.attach(e.$el[0], { childList: e.params.observeSlideChildren }), e.observer.attach(e.$wrapperEl[0], { attributes: !1 }) } }, destroy: function () { this.observer.observers.forEach((function (e) { e.disconnect() })), this.observer.observers = [] } }, O = { name: "observer", params: { observer: !1, observeParents: !1, observeSlideChildren: !1 }, create: function () { M(this, { observer: t({}, I, { observers: [] }) }) }, on: { init: function (e) { e.observer.init() }, destroy: function (e) { e.observer.destroy() } } }; function A(e) { var t = this, a = r(), i = o(), s = t.touchEventsData, n = t.params, l = t.touches; if (!t.animating || !n.preventInteractionOnTransition) { var d = e; d.originalEvent && (d = d.originalEvent); var p = m(d.target); if ("wrapper" !== n.touchEventsTarget || p.closest(t.wrapperEl).length) if (s.isTouchEvent = "touchstart" === d.type, s.isTouchEvent || !("which" in d) || 3 !== d.which) if (!(!s.isTouchEvent && "button" in d && d.button > 0)) if (!s.isTouched || !s.isMoved) if (!!n.noSwipingClass && "" !== n.noSwipingClass && d.target && d.target.shadowRoot && e.path && e.path[0] && (p = m(e.path[0])), n.noSwiping && p.closest(n.noSwipingSelector ? n.noSwipingSelector : "." + n.noSwipingClass)[0]) t.allowClick = !0; else if (!n.swipeHandler || p.closest(n.swipeHandler)[0]) { l.currentX = "touchstart" === d.type ? d.targetTouches[0].pageX : d.pageX, l.currentY = "touchstart" === d.type ? d.targetTouches[0].pageY : d.pageY; var c = l.currentX, u = l.currentY, h = n.edgeSwipeDetection || n.iOSEdgeSwipeDetection, v = n.edgeSwipeThreshold || n.iOSEdgeSwipeThreshold; if (h && (c <= v || c >= i.innerWidth - v)) { if ("prevent" !== h) return; e.preventDefault() } if (C(s, { isTouched: !0, isMoved: !1, allowTouchCallbacks: !0, isScrolling: void 0, startMoving: void 0 }), l.startX = c, l.startY = u, s.touchStartTime = x(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, n.threshold > 0 && (s.allowThresholdMove = !1), "touchstart" !== d.type) { var f = !0; p.is(s.formElements) && (f = !1), a.activeElement && m(a.activeElement).is(s.formElements) && a.activeElement !== p[0] && a.activeElement.blur(); var g = f && t.allowTouchMove && n.touchStartPreventDefault; !n.touchStartForcePreventDefault && !g || p[0].isContentEditable || d.preventDefault() } t.emit("touchStart", d) } } } function D(e) { var t = r(), a = this, i = a.touchEventsData, s = a.params, n = a.touches, o = a.rtlTranslate, l = e; if (l.originalEvent && (l = l.originalEvent), i.isTouched) { if (!i.isTouchEvent || "touchmove" === l.type) { var d = "touchmove" === l.type && l.targetTouches && (l.targetTouches[0] || l.changedTouches[0]), p = "touchmove" === l.type ? d.pageX : l.pageX, c = "touchmove" === l.type ? d.pageY : l.pageY; if (l.preventedByNestedSwiper) return n.startX = p, void (n.startY = c); if (!a.allowTouchMove) return a.allowClick = !1, void (i.isTouched && (C(n, { startX: p, startY: c, currentX: p, currentY: c }), i.touchStartTime = x())); if (i.isTouchEvent && s.touchReleaseOnEdges && !s.loop) if (a.isVertical()) { if (c < n.startY && a.translate <= a.maxTranslate() || c > n.startY && a.translate >= a.minTranslate()) return i.isTouched = !1, void (i.isMoved = !1) } else if (p < n.startX && a.translate <= a.maxTranslate() || p > n.startX && a.translate >= a.minTranslate()) return; if (i.isTouchEvent && t.activeElement && l.target === t.activeElement && m(l.target).is(i.formElements)) return i.isMoved = !0, void (a.allowClick = !1); if (i.allowTouchCallbacks && a.emit("touchMove", l), !(l.targetTouches && l.targetTouches.length > 1)) { n.currentX = p, n.currentY = c; var u = n.currentX - n.startX, h = n.currentY - n.startY; if (!(a.params.threshold && Math.sqrt(Math.pow(u, 2) + Math.pow(h, 2)) < a.params.threshold)) { var v; if (void 0 === i.isScrolling) a.isHorizontal() && n.currentY === n.startY || a.isVertical() && n.currentX === n.startX ? i.isScrolling = !1 : u * u + h * h >= 25 && (v = 180 * Math.atan2(Math.abs(h), Math.abs(u)) / Math.PI, i.isScrolling = a.isHorizontal() ? v > s.touchAngle : 90 - v > s.touchAngle); if (i.isScrolling && a.emit("touchMoveOpposite", l), void 0 === i.startMoving && (n.currentX === n.startX && n.currentY === n.startY || (i.startMoving = !0)), i.isScrolling) i.isTouched = !1; else if (i.startMoving) { a.allowClick = !1, !s.cssMode && l.cancelable && l.preventDefault(), s.touchMoveStopPropagation && !s.nested && l.stopPropagation(), i.isMoved || (s.loop && a.loopFix(), i.startTranslate = a.getTranslate(), a.setTransition(0), a.animating && a.$wrapperEl.trigger("webkitTransitionEnd transitionend"), i.allowMomentumBounce = !1, !s.grabCursor || !0 !== a.allowSlideNext && !0 !== a.allowSlidePrev || a.setGrabCursor(!0), a.emit("sliderFirstMove", l)), a.emit("sliderMove", l), i.isMoved = !0; var f = a.isHorizontal() ? u : h; n.diff = f, f *= s.touchRatio, o && (f = -f), a.swipeDirection = f > 0 ? "prev" : "next", i.currentTranslate = f + i.startTranslate; var g = !0, b = s.resistanceRatio; if (s.touchReleaseOnEdges && (b = 0), f > 0 && i.currentTranslate > a.minTranslate() ? (g = !1, s.resistance && (i.currentTranslate = a.minTranslate() - 1 + Math.pow(-a.minTranslate() + i.startTranslate + f, b))) : f < 0 && i.currentTranslate < a.maxTranslate() && (g = !1, s.resistance && (i.currentTranslate = a.maxTranslate() + 1 - Math.pow(a.maxTranslate() - i.startTranslate - f, b))), g && (l.preventedByNestedSwiper = !0), !a.allowSlideNext && "next" === a.swipeDirection && i.currentTranslate < i.startTranslate && (i.currentTranslate = i.startTranslate), !a.allowSlidePrev && "prev" === a.swipeDirection && i.currentTranslate > i.startTranslate && (i.currentTranslate = i.startTranslate), a.allowSlidePrev || a.allowSlideNext || (i.currentTranslate = i.startTranslate), s.threshold > 0) { if (!(Math.abs(f) > s.threshold || i.allowThresholdMove)) return void (i.currentTranslate = i.startTranslate); if (!i.allowThresholdMove) return i.allowThresholdMove = !0, n.startX = n.currentX, n.startY = n.currentY, i.currentTranslate = i.startTranslate, void (n.diff = a.isHorizontal() ? n.currentX - n.startX : n.currentY - n.startY) } s.followFinger && !s.cssMode && ((s.freeMode || s.watchSlidesProgress || s.watchSlidesVisibility) && (a.updateActiveIndex(), a.updateSlidesClasses()), s.freeMode && (0 === i.velocities.length && i.velocities.push({ position: n[a.isHorizontal() ? "startX" : "startY"], time: i.touchStartTime }), i.velocities.push({ position: n[a.isHorizontal() ? "currentX" : "currentY"], time: x() })), a.updateProgress(i.currentTranslate), a.setTranslate(i.currentTranslate)) } } } } } else i.startMoving && i.isScrolling && a.emit("touchMoveOpposite", l) } function N(e) { var t = this, a = t.touchEventsData, i = t.params, s = t.touches, r = t.rtlTranslate, n = t.$wrapperEl, o = t.slidesGrid, l = t.snapGrid, d = e; if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit("touchEnd", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void (a.startMoving = !1); i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1); var p, c = x(), u = c - a.touchStartTime; if (t.allowClick && (t.updateClickedSlide(d), t.emit("tap click", d), u < 300 && c - a.lastClickTime < 300 && t.emit("doubleTap doubleClick", d)), a.lastClickTime = x(), E((function () { t.destroyed || (t.allowClick = !0) })), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void (a.startMoving = !1); if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, !i.cssMode) if (i.freeMode) { if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex); if (p > -t.maxTranslate()) return void (t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1)); if (i.freeModeMomentum) { if (a.velocities.length > 1) { var h = a.velocities.pop(), v = a.velocities.pop(), f = h.position - v.position, m = h.time - v.time; t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (m > 150 || x() - h.time > 300) && (t.velocity = 0) } else t.velocity = 0; t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0; var g = 1e3 * i.freeModeMomentumRatio, b = t.velocity * g, w = t.translate + b; r && (w = -w); var y, T, S = !1, C = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio; if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -C && (w = t.maxTranslate() - C), y = t.maxTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (T = !0); else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > C && (w = t.minTranslate() + C), y = t.minTranslate(), S = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (T = !0); else if (i.freeModeSticky) { for (var M, z = 0; z < l.length; z += 1)if (l[z] > -w) { M = z; break } w = -(w = Math.abs(l[M] - w) < Math.abs(l[M - 1] - w) || "next" === t.swipeDirection ? l[M] : l[M - 1]) } if (T && t.once("transitionEnd", (function () { t.loopFix() })), 0 !== t.velocity) { if (g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity), i.freeModeSticky) { var P = Math.abs((r ? -w : w) - t.translate), k = t.slidesSizesGrid[t.activeIndex]; g = P < k ? i.speed : P < 2 * k ? 1.5 * i.speed : 2.5 * i.speed } } else if (i.freeModeSticky) return void t.slideToClosest(); i.freeModeMomentumBounce && S ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd((function () { t && !t.destroyed && a.allowMomentumBounce && (t.emit("momentumBounce"), t.setTransition(i.speed), setTimeout((function () { t.setTranslate(y), n.transitionEnd((function () { t && !t.destroyed && t.transitionEnd() })) }), 0)) }))) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd((function () { t && !t.destroyed && t.transitionEnd() })))) : (t.emit("_freeModeNoMomentumRelease"), t.updateProgress(w)), t.updateActiveIndex(), t.updateSlidesClasses() } else { if (i.freeModeSticky) return void t.slideToClosest(); i.freeMode && t.emit("_freeModeNoMomentumRelease") } (!i.freeModeMomentum || u >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses()) } else { for (var L = 0, $ = t.slidesSizesGrid[0], I = 0; I < o.length; I += I < i.slidesPerGroupSkip ? 1 : i.slidesPerGroup) { var O = I < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup; void 0 !== o[I + O] ? p >= o[I] && p < o[I + O] && (L = I, $ = o[I + O] - o[I]) : p >= o[I] && (L = I, $ = o[o.length - 1] - o[o.length - 2]) } var A = (p - o[L]) / $, D = L < i.slidesPerGroupSkip - 1 ? 1 : i.slidesPerGroup; if (u > i.longSwipesMs) { if (!i.longSwipes) return void t.slideTo(t.activeIndex); "next" === t.swipeDirection && (A >= i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)), "prev" === t.swipeDirection && (A > 1 - i.longSwipesRatio ? t.slideTo(L + D) : t.slideTo(L)) } else { if (!i.shortSwipes) return void t.slideTo(t.activeIndex); t.navigation && (d.target === t.navigation.nextEl || d.target === t.navigation.prevEl) ? d.target === t.navigation.nextEl ? t.slideTo(L + D) : t.slideTo(L) : ("next" === t.swipeDirection && t.slideTo(L + D), "prev" === t.swipeDirection && t.slideTo(L)) } } } function G() { var e = this, t = e.params, a = e.el; if (!a || 0 !== a.offsetWidth) { t.breakpoints && e.setBreakpoint(); var i = e.allowSlideNext, s = e.allowSlidePrev, r = e.snapGrid; e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), e.updateSlidesClasses(), ("auto" === t.slidesPerView || t.slidesPerView > 1) && e.isEnd && !e.isBeginning && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0), e.autoplay && e.autoplay.running && e.autoplay.paused && e.autoplay.run(), e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow() } } function B(e) { var t = this; t.allowClick || (t.params.preventClicks && e.preventDefault(), t.params.preventClicksPropagation && t.animating && (e.stopPropagation(), e.stopImmediatePropagation())) } function H() { var e = this, t = e.wrapperEl, a = e.rtlTranslate; e.previousTranslate = e.translate, e.isHorizontal() ? e.translate = a ? t.scrollWidth - t.offsetWidth - t.scrollLeft : -t.scrollLeft : e.translate = -t.scrollTop, -0 === e.translate && (e.translate = 0), e.updateActiveIndex(), e.updateSlidesClasses(); var i = e.maxTranslate() - e.minTranslate(); (0 === i ? 0 : (e.translate - e.minTranslate()) / i) !== e.progress && e.updateProgress(a ? -e.translate : e.translate), e.emit("setTranslate", e.translate, !1) } var X = !1; function Y() { } var R = { init: !0, direction: "horizontal", touchEventsTarget: "container", initialSlide: 0, speed: 300, cssMode: !1, updateOnWindowResize: !0, resizeObserver: !1, nested: !1, width: null, height: null, preventInteractionOnTransition: !1, userAgent: null, url: null, edgeSwipeDetection: !1, edgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: "slide", breakpoints: void 0, breakpointsBase: "window", spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: "column", slidesPerGroup: 1, slidesPerGroupSkip: 0, centeredSlides: !1, centeredSlidesBounds: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, normalizeSlideIndex: !0, centerInsufficientSlides: !1, watchOverflow: !1, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, allowTouchMove: !0, threshold: 0, touchMoveStopPropagation: !1, touchStartPreventDefault: !0, touchStartForcePreventDefault: !1, touchReleaseOnEdges: !1, uniqueNavElements: !0, resistance: !0, resistanceRatio: .85, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, loopFillGroupWithBlank: !1, loopPreventsSlide: !0, allowSlidePrev: !0, allowSlideNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: "swiper-no-swiping", noSwipingSelector: null, passiveListeners: !0, containerModifierClass: "swiper-container-", slideClass: "swiper-slide", slideBlankClass: "swiper-slide-invisible-blank", slideActiveClass: "swiper-slide-active", slideDuplicateActiveClass: "swiper-slide-duplicate-active", slideVisibleClass: "swiper-slide-visible", slideDuplicateClass: "swiper-slide-duplicate", slideNextClass: "swiper-slide-next", slideDuplicateNextClass: "swiper-slide-duplicate-next", slidePrevClass: "swiper-slide-prev", slideDuplicatePrevClass: "swiper-slide-duplicate-prev", wrapperClass: "swiper-wrapper", runCallbacksOnInit: !0, _emitClasses: !1 }, V = { modular: { useParams: function (e) { var t = this; t.modules && Object.keys(t.modules).forEach((function (a) { var i = t.modules[a]; i.params && C(e, i.params) })) }, useModules: function (e) { void 0 === e && (e = {}); var t = this; t.modules && Object.keys(t.modules).forEach((function (a) { var i = t.modules[a], s = e[a] || {}; i.on && t.on && Object.keys(i.on).forEach((function (e) { t.on(e, i.on[e]) })), i.create && i.create.bind(t)(s) })) } }, eventsEmitter: { on: function (e, t, a) { var i = this; if ("function" != typeof t) return i; var s = a ? "unshift" : "push"; return e.split(" ").forEach((function (e) { i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t) })), i }, once: function (e, t, a) { var i = this; if ("function" != typeof t) return i; function s() { i.off(e, s), s.__emitterProxy && delete s.__emitterProxy; for (var a = arguments.length, r = new Array(a), n = 0; n < a; n++)r[n] = arguments[n]; t.apply(i, r) } return s.__emitterProxy = t, i.on(e, s, a) }, onAny: function (e, t) { var a = this; if ("function" != typeof e) return a; var i = t ? "unshift" : "push"; return a.eventsAnyListeners.indexOf(e) < 0 && a.eventsAnyListeners[i](e), a }, offAny: function (e) { var t = this; if (!t.eventsAnyListeners) return t; var a = t.eventsAnyListeners.indexOf(e); return a >= 0 && t.eventsAnyListeners.splice(a, 1), t }, off: function (e, t) { var a = this; return a.eventsListeners ? (e.split(" ").forEach((function (e) { void 0 === t ? a.eventsListeners[e] = [] : a.eventsListeners[e] && a.eventsListeners[e].forEach((function (i, s) { (i === t || i.__emitterProxy && i.__emitterProxy === t) && a.eventsListeners[e].splice(s, 1) })) })), a) : a }, emit: function () { var e, t, a, i = this; if (!i.eventsListeners) return i; for (var s = arguments.length, r = new Array(s), n = 0; n < s; n++)r[n] = arguments[n]; "string" == typeof r[0] || Array.isArray(r[0]) ? (e = r[0], t = r.slice(1, r.length), a = i) : (e = r[0].events, t = r[0].data, a = r[0].context || i), t.unshift(a); var o = Array.isArray(e) ? e : e.split(" "); return o.forEach((function (e) { i.eventsAnyListeners && i.eventsAnyListeners.length && i.eventsAnyListeners.forEach((function (i) { i.apply(a, [e].concat(t)) })), i.eventsListeners && i.eventsListeners[e] && i.eventsListeners[e].forEach((function (e) { e.apply(a, t) })) })), i } }, update: { updateSize: function () { var e, t, a = this, i = a.$el; e = void 0 !== a.params.width && null !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height && null !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css("padding-left") || 0, 10) - parseInt(i.css("padding-right") || 0, 10), t = t - parseInt(i.css("padding-top") || 0, 10) - parseInt(i.css("padding-bottom") || 0, 10), Number.isNaN(e) && (e = 0), Number.isNaN(t) && (t = 0), C(a, { width: e, height: t, size: a.isHorizontal() ? e : t })) }, updateSlides: function () { var e = this, t = function (t) { return e.isHorizontal() ? t : { width: "height", "margin-top": "margin-left", "margin-bottom ": "margin-right", "margin-left": "margin-top", "margin-right": "margin-bottom", "padding-left": "padding-top", "padding-right": "padding-bottom", marginRight: "marginBottom" }[t] }, a = function (e, a) { return parseFloat(e.getPropertyValue(t(a)) || 0) }, i = e.params, s = e.$wrapperEl, r = e.size, n = e.rtlTranslate, o = e.wrongRTL, l = e.virtual && i.virtual.enabled, d = l ? e.virtual.slides.length : e.slides.length, p = s.children("." + e.params.slideClass), c = l ? e.virtual.slides.length : p.length, u = [], h = [], v = [], f = i.slidesOffsetBefore; "function" == typeof f && (f = i.slidesOffsetBefore.call(e)); var m = i.slidesOffsetAfter; "function" == typeof m && (m = i.slidesOffsetAfter.call(e)); var g = e.snapGrid.length, b = e.slidesGrid.length, w = i.spaceBetween, y = -f, E = 0, x = 0; if (void 0 !== r) { var T, S; "string" == typeof w && w.indexOf("%") >= 0 && (w = parseFloat(w.replace("%", "")) / 100 * r), e.virtualSize = -w, n ? p.css({ marginLeft: "", marginTop: "" }) : p.css({ marginRight: "", marginBottom: "" }), i.slidesPerColumn > 1 && (T = Math.floor(c / i.slidesPerColumn) === c / e.params.slidesPerColumn ? c : Math.ceil(c / i.slidesPerColumn) * i.slidesPerColumn, "auto" !== i.slidesPerView && "row" === i.slidesPerColumnFill && (T = Math.max(T, i.slidesPerView * i.slidesPerColumn))); for (var M, z, P, k = i.slidesPerColumn, L = T / k, $ = Math.floor(c / i.slidesPerColumn), I = 0; I < c; I += 1) { S = 0; var O = p.eq(I); if (i.slidesPerColumn > 1) { var A = void 0, D = void 0, N = void 0; if ("row" === i.slidesPerColumnFill && i.slidesPerGroup > 1) { var G = Math.floor(I / (i.slidesPerGroup * i.slidesPerColumn)), B = I - i.slidesPerColumn * i.slidesPerGroup * G, H = 0 === G ? i.slidesPerGroup : Math.min(Math.ceil((c - G * k * i.slidesPerGroup) / k), i.slidesPerGroup); A = (D = B - (N = Math.floor(B / H)) * H + G * i.slidesPerGroup) + N * T / k, O.css({ "-webkit-box-ordinal-group": A, "-moz-box-ordinal-group": A, "-ms-flex-order": A, "-webkit-order": A, order: A }) } else "column" === i.slidesPerColumnFill ? (N = I - (D = Math.floor(I / k)) * k, (D > $ || D === $ && N === k - 1) && (N += 1) >= k && (N = 0, D += 1)) : D = I - (N = Math.floor(I / L)) * L; O.css(t("margin-top"), 0 !== N && i.spaceBetween && i.spaceBetween + "px") } if ("none" !== O.css("display")) { if ("auto" === i.slidesPerView) { var X = getComputedStyle(O[0]), Y = O[0].style.transform, R = O[0].style.webkitTransform; if (Y && (O[0].style.transform = "none"), R && (O[0].style.webkitTransform = "none"), i.roundLengths) S = e.isHorizontal() ? O.outerWidth(!0) : O.outerHeight(!0); else { var V = a(X, "width"), W = a(X, "padding-left"), F = a(X, "padding-right"), _ = a(X, "margin-left"), q = a(X, "margin-right"), j = X.getPropertyValue("box-sizing"); if (j && "border-box" === j) S = V + _ + q; else { var U = O[0], K = U.clientWidth; S = V + W + F + _ + q + (U.offsetWidth - K) } } Y && (O[0].style.transform = Y), R && (O[0].style.webkitTransform = R), i.roundLengths && (S = Math.floor(S)) } else S = (r - (i.slidesPerView - 1) * w) / i.slidesPerView, i.roundLengths && (S = Math.floor(S)), p[I] && (p[I].style[t("width")] = S + "px"); p[I] && (p[I].swiperSlideSize = S), v.push(S), i.centeredSlides ? (y = y + S / 2 + E / 2 + w, 0 === E && 0 !== I && (y = y - r / 2 - w), 0 === I && (y = y - r / 2 - w), Math.abs(y) < .001 && (y = 0), i.roundLengths && (y = Math.floor(y)), x % i.slidesPerGroup == 0 && u.push(y), h.push(y)) : (i.roundLengths && (y = Math.floor(y)), (x - Math.min(e.params.slidesPerGroupSkip, x)) % e.params.slidesPerGroup == 0 && u.push(y), h.push(y), y = y + S + w), e.virtualSize += S + w, E = S, x += 1 } } if (e.virtualSize = Math.max(e.virtualSize, r) + m, n && o && ("slide" === i.effect || "coverflow" === i.effect) && s.css({ width: e.virtualSize + i.spaceBetween + "px" }), i.setWrapperSize) s.css(((z = {})[t("width")] = e.virtualSize + i.spaceBetween + "px", z)); if (i.slidesPerColumn > 1) if (e.virtualSize = (S + i.spaceBetween) * T, e.virtualSize = Math.ceil(e.virtualSize / i.slidesPerColumn) - i.spaceBetween, s.css(((P = {})[t("width")] = e.virtualSize + i.spaceBetween + "px", P)), i.centeredSlides) { M = []; for (var Z = 0; Z < u.length; Z += 1) { var J = u[Z]; i.roundLengths && (J = Math.floor(J)), u[Z] < e.virtualSize + u[0] && M.push(J) } u = M } if (!i.centeredSlides) { M = []; for (var Q = 0; Q < u.length; Q += 1) { var ee = u[Q]; i.roundLengths && (ee = Math.floor(ee)), u[Q] <= e.virtualSize - r && M.push(ee) } u = M, Math.floor(e.virtualSize - r) - Math.floor(u[u.length - 1]) > 1 && u.push(e.virtualSize - r) } if (0 === u.length && (u = [0]), 0 !== i.spaceBetween) { var te, ae = e.isHorizontal() && n ? "marginLeft" : t("marginRight"); p.filter((function (e, t) { return !i.cssMode || t !== p.length - 1 })).css(((te = {})[ae] = w + "px", te)) } if (i.centeredSlides && i.centeredSlidesBounds) { var ie = 0; v.forEach((function (e) { ie += e + (i.spaceBetween ? i.spaceBetween : 0) })); var se = (ie -= i.spaceBetween) - r; u = u.map((function (e) { return e < 0 ? -f : e > se ? se + m : e })) } if (i.centerInsufficientSlides) { var re = 0; if (v.forEach((function (e) { re += e + (i.spaceBetween ? i.spaceBetween : 0) })), (re -= i.spaceBetween) < r) { var ne = (r - re) / 2; u.forEach((function (e, t) { u[t] = e - ne })), h.forEach((function (e, t) { h[t] = e + ne })) } } C(e, { slides: p, snapGrid: u, slidesGrid: h, slidesSizesGrid: v }), c !== d && e.emit("slidesLengthChange"), u.length !== g && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), h.length !== b && e.emit("slidesGridLengthChange"), (i.watchSlidesProgress || i.watchSlidesVisibility) && e.updateSlidesOffset() } }, updateAutoHeight: function (e) { var t, a = this, i = [], s = 0; if ("number" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed), "auto" !== a.params.slidesPerView && a.params.slidesPerView > 1) if (a.params.centeredSlides) a.visibleSlides.each((function (e) { i.push(e) })); else for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) { var r = a.activeIndex + t; if (r > a.slides.length) break; i.push(a.slides.eq(r)[0]) } else i.push(a.slides.eq(a.activeIndex)[0]); for (t = 0; t < i.length; t += 1)if (void 0 !== i[t]) { var n = i[t].offsetHeight; s = n > s ? n : s } s && a.$wrapperEl.css("height", s + "px") }, updateSlidesOffset: function () { for (var e = this.slides, t = 0; t < e.length; t += 1)e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop }, updateSlidesProgress: function (e) { void 0 === e && (e = this && this.translate || 0); var t = this, a = t.params, i = t.slides, s = t.rtlTranslate; if (0 !== i.length) { void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset(); var r = -e; s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = []; for (var n = 0; n < i.length; n += 1) { var o = i[n], l = (r + (a.centeredSlides ? t.minTranslate() : 0) - o.swiperSlideOffset) / (o.swiperSlideSize + a.spaceBetween); if (a.watchSlidesVisibility || a.centeredSlides && a.autoHeight) { var d = -(r - o.swiperSlideOffset), p = d + t.slidesSizesGrid[n]; (d >= 0 && d < t.size - 1 || p > 1 && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass)) } o.progress = s ? -l : l } t.visibleSlides = m(t.visibleSlides) } }, updateProgress: function (e) { var t = this; if (void 0 === e) { var a = t.rtlTranslate ? -1 : 1; e = t && t.translate && t.translate * a || 0 } var i = t.params, s = t.maxTranslate() - t.minTranslate(), r = t.progress, n = t.isBeginning, o = t.isEnd, l = n, d = o; 0 === s ? (r = 0, n = !0, o = !0) : (n = (r = (e - t.minTranslate()) / s) <= 0, o = r >= 1), C(t, { progress: r, isBeginning: n, isEnd: o }), (i.watchSlidesProgress || i.watchSlidesVisibility || i.centeredSlides && i.autoHeight) && t.updateSlidesProgress(e), n && !l && t.emit("reachBeginning toEdge"), o && !d && t.emit("reachEnd toEdge"), (l && !n || d && !o) && t.emit("fromEdge"), t.emit("progress", r) }, updateSlidesClasses: function () { var e, t = this, a = t.slides, i = t.params, s = t.$wrapperEl, r = t.activeIndex, n = t.realIndex, o = t.virtual && i.virtual.enabled; a.removeClass(i.slideActiveClass + " " + i.slideNextClass + " " + i.slidePrevClass + " " + i.slideDuplicateActiveClass + " " + i.slideDuplicateNextClass + " " + i.slideDuplicatePrevClass), (e = o ? t.$wrapperEl.find("." + i.slideClass + '[data-swiper-slide-index="' + r + '"]') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass)); var l = e.nextAll("." + i.slideClass).eq(0).addClass(i.slideNextClass); i.loop && 0 === l.length && (l = a.eq(0)).addClass(i.slideNextClass); var d = e.prevAll("." + i.slideClass).eq(0).addClass(i.slidePrevClass); i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass)), t.emitSlidesClasses() }, updateActiveIndex: function (e) { var t, a = this, i = a.rtlTranslate ? a.translate : -a.translate, s = a.slidesGrid, r = a.snapGrid, n = a.params, o = a.activeIndex, l = a.realIndex, d = a.snapIndex, p = e; if (void 0 === p) { for (var c = 0; c < s.length; c += 1)void 0 !== s[c + 1] ? i >= s[c] && i < s[c + 1] - (s[c + 1] - s[c]) / 2 ? p = c : i >= s[c] && i < s[c + 1] && (p = c + 1) : i >= s[c] && (p = c); n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0) } if (r.indexOf(i) >= 0) t = r.indexOf(i); else { var u = Math.min(n.slidesPerGroupSkip, p); t = u + Math.floor((p - u) / n.slidesPerGroup) } if (t >= r.length && (t = r.length - 1), p !== o) { var h = parseInt(a.slides.eq(p).attr("data-swiper-slide-index") || p, 10); C(a, { snapIndex: t, realIndex: h, previousIndex: o, activeIndex: p }), a.emit("activeIndexChange"), a.emit("snapIndexChange"), l !== h && a.emit("realIndexChange"), (a.initialized || a.params.runCallbacksOnInit) && a.emit("slideChange") } else t !== d && (a.snapIndex = t, a.emit("snapIndexChange")) }, updateClickedSlide: function (e) { var t, a = this, i = a.params, s = m(e.target).closest("." + i.slideClass)[0], r = !1; if (s) for (var n = 0; n < a.slides.length; n += 1)if (a.slides[n] === s) { r = !0, t = n; break } if (!s || !r) return a.clickedSlide = void 0, void (a.clickedIndex = void 0); a.clickedSlide = s, a.virtual && a.params.virtual.enabled ? a.clickedIndex = parseInt(m(s).attr("data-swiper-slide-index"), 10) : a.clickedIndex = t, i.slideToClickedSlide && void 0 !== a.clickedIndex && a.clickedIndex !== a.activeIndex && a.slideToClickedSlide() } }, translate: { getTranslate: function (e) { void 0 === e && (e = this.isHorizontal() ? "x" : "y"); var t = this, a = t.params, i = t.rtlTranslate, s = t.translate, r = t.$wrapperEl; if (a.virtualTranslate) return i ? -s : s; if (a.cssMode) return s; var n = T(r[0], e); return i && (n = -n), n || 0 }, setTranslate: function (e, t) { var a = this, i = a.rtlTranslate, s = a.params, r = a.$wrapperEl, n = a.wrapperEl, o = a.progress, l = 0, d = 0; a.isHorizontal() ? l = i ? -e : e : d = e, s.roundLengths && (l = Math.floor(l), d = Math.floor(d)), s.cssMode ? n[a.isHorizontal() ? "scrollLeft" : "scrollTop"] = a.isHorizontal() ? -l : -d : s.virtualTranslate || r.transform("translate3d(" + l + "px, " + d + "px, 0px)"), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? l : d; var p = a.maxTranslate() - a.minTranslate(); (0 === p ? 0 : (e - a.minTranslate()) / p) !== o && a.updateProgress(e), a.emit("setTranslate", a.translate, t) }, minTranslate: function () { return -this.snapGrid[0] }, maxTranslate: function () { return -this.snapGrid[this.snapGrid.length - 1] }, translateTo: function (e, t, a, i, s) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), void 0 === i && (i = !0); var r = this, n = r.params, o = r.wrapperEl; if (r.animating && n.preventInteractionOnTransition) return !1; var l, d = r.minTranslate(), p = r.maxTranslate(); if (l = i && e > d ? d : i && e < p ? p : e, r.updateProgress(l), n.cssMode) { var c, u = r.isHorizontal(); if (0 === t) o[u ? "scrollLeft" : "scrollTop"] = -l; else if (o.scrollTo) o.scrollTo(((c = {})[u ? "left" : "top"] = -l, c.behavior = "smooth", c)); else o[u ? "scrollLeft" : "scrollTop"] = -l; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(l), a && (r.emit("beforeTransitionStart", t, s), r.emit("transitionEnd"))) : (r.setTransition(t), r.setTranslate(l), a && (r.emit("beforeTransitionStart", t, s), r.emit("transitionStart")), r.animating || (r.animating = !0, r.onTranslateToWrapperTransitionEnd || (r.onTranslateToWrapperTransitionEnd = function (e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd), r.onTranslateToWrapperTransitionEnd = null, delete r.onTranslateToWrapperTransitionEnd, a && r.emit("transitionEnd")) }), r.$wrapperEl[0].addEventListener("transitionend", r.onTranslateToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener("webkitTransitionEnd", r.onTranslateToWrapperTransitionEnd))), !0 } }, transition: { setTransition: function (e, t) { var a = this; a.params.cssMode || a.$wrapperEl.transition(e), a.emit("setTransition", e, t) }, transitionStart: function (e, t) { void 0 === e && (e = !0); var a = this, i = a.activeIndex, s = a.params, r = a.previousIndex; if (!s.cssMode) { s.autoHeight && a.updateAutoHeight(); var n = t; if (n || (n = i > r ? "next" : i < r ? "prev" : "reset"), a.emit("transitionStart"), e && i !== r) { if ("reset" === n) return void a.emit("slideResetTransitionStart"); a.emit("slideChangeTransitionStart"), "next" === n ? a.emit("slideNextTransitionStart") : a.emit("slidePrevTransitionStart") } } }, transitionEnd: function (e, t) { void 0 === e && (e = !0); var a = this, i = a.activeIndex, s = a.previousIndex, r = a.params; if (a.animating = !1, !r.cssMode) { a.setTransition(0); var n = t; if (n || (n = i > s ? "next" : i < s ? "prev" : "reset"), a.emit("transitionEnd"), e && i !== s) { if ("reset" === n) return void a.emit("slideResetTransitionEnd"); a.emit("slideChangeTransitionEnd"), "next" === n ? a.emit("slideNextTransitionEnd") : a.emit("slidePrevTransitionEnd") } } } }, slide: { slideTo: function (e, t, a, i) { if (void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0), "number" != typeof e && "string" != typeof e) throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + typeof e + "] given."); if ("string" == typeof e) { var s = parseInt(e, 10); if (!isFinite(s)) throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + e + "] given."); e = s } var r = this, n = e; n < 0 && (n = 0); var o = r.params, l = r.snapGrid, d = r.slidesGrid, p = r.previousIndex, c = r.activeIndex, u = r.rtlTranslate, h = r.wrapperEl; if (r.animating && o.preventInteractionOnTransition) return !1; var v = Math.min(r.params.slidesPerGroupSkip, n), f = v + Math.floor((n - v) / r.params.slidesPerGroup); f >= l.length && (f = l.length - 1), (c || o.initialSlide || 0) === (p || 0) && a && r.emit("beforeSlideChangeStart"); var m, g = -l[f]; if (r.updateProgress(g), o.normalizeSlideIndex) for (var b = 0; b < d.length; b += 1) { var w = -Math.floor(100 * g), y = Math.floor(100 * d[b]), E = Math.floor(100 * d[b + 1]); void 0 !== d[b + 1] ? w >= y && w < E - (E - y) / 2 ? n = b : w >= y && w < E && (n = b + 1) : w >= y && (n = b) } if (r.initialized && n !== c) { if (!r.allowSlideNext && g < r.translate && g < r.minTranslate()) return !1; if (!r.allowSlidePrev && g > r.translate && g > r.maxTranslate() && (c || 0) !== n) return !1 } if (m = n > c ? "next" : n < c ? "prev" : "reset", u && -g === r.translate || !u && g === r.translate) return r.updateActiveIndex(n), o.autoHeight && r.updateAutoHeight(), r.updateSlidesClasses(), "slide" !== o.effect && r.setTranslate(g), "reset" !== m && (r.transitionStart(a, m), r.transitionEnd(a, m)), !1; if (o.cssMode) { var x, T = r.isHorizontal(), S = -g; if (u && (S = h.scrollWidth - h.offsetWidth - S), 0 === t) h[T ? "scrollLeft" : "scrollTop"] = S; else if (h.scrollTo) h.scrollTo(((x = {})[T ? "left" : "top"] = S, x.behavior = "smooth", x)); else h[T ? "scrollLeft" : "scrollTop"] = S; return !0 } return 0 === t ? (r.setTransition(0), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit("beforeTransitionStart", t, i), r.transitionStart(a, m), r.transitionEnd(a, m)) : (r.setTransition(t), r.setTranslate(g), r.updateActiveIndex(n), r.updateSlidesClasses(), r.emit("beforeTransitionStart", t, i), r.transitionStart(a, m), r.animating || (r.animating = !0, r.onSlideToWrapperTransitionEnd || (r.onSlideToWrapperTransitionEnd = function (e) { r && !r.destroyed && e.target === this && (r.$wrapperEl[0].removeEventListener("transitionend", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].removeEventListener("webkitTransitionEnd", r.onSlideToWrapperTransitionEnd), r.onSlideToWrapperTransitionEnd = null, delete r.onSlideToWrapperTransitionEnd, r.transitionEnd(a, m)) }), r.$wrapperEl[0].addEventListener("transitionend", r.onSlideToWrapperTransitionEnd), r.$wrapperEl[0].addEventListener("webkitTransitionEnd", r.onSlideToWrapperTransitionEnd))), !0 }, slideToLoop: function (e, t, a, i) { void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0); var s = this, r = e; return s.params.loop && (r += s.loopedSlides), s.slideTo(r, t, a, i) }, slideNext: function (e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this, s = i.params, r = i.animating, n = i.activeIndex < s.slidesPerGroupSkip ? 1 : s.slidesPerGroup; if (s.loop) { if (r && s.loopPreventsSlide) return !1; i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft } return i.slideTo(i.activeIndex + n, e, t, a) }, slidePrev: function (e, t, a) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0); var i = this, s = i.params, r = i.animating, n = i.snapGrid, o = i.slidesGrid, l = i.rtlTranslate; if (s.loop) { if (r && s.loopPreventsSlide) return !1; i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft } function d(e) { return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e) } var p = d(l ? i.translate : -i.translate), c = n.map((function (e) { return d(e) })); n[c.indexOf(p)]; var u, h = n[c.indexOf(p) - 1]; return void 0 === h && s.cssMode && n.forEach((function (e) { !h && p >= e && (h = e) })), void 0 !== h && (u = o.indexOf(h)) < 0 && (u = i.activeIndex - 1), i.slideTo(u, e, t, a) }, slideReset: function (e, t, a) { return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a) }, slideToClosest: function (e, t, a, i) { void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), void 0 === i && (i = .5); var s = this, r = s.activeIndex, n = Math.min(s.params.slidesPerGroupSkip, r), o = n + Math.floor((r - n) / s.params.slidesPerGroup), l = s.rtlTranslate ? s.translate : -s.translate; if (l >= s.snapGrid[o]) { var d = s.snapGrid[o]; l - d > (s.snapGrid[o + 1] - d) * i && (r += s.params.slidesPerGroup) } else { var p = s.snapGrid[o - 1]; l - p <= (s.snapGrid[o] - p) * i && (r -= s.params.slidesPerGroup) } return r = Math.max(r, 0), r = Math.min(r, s.slidesGrid.length - 1), s.slideTo(r, e, t, a) }, slideToClickedSlide: function () { var e, t = this, a = t.params, i = t.$wrapperEl, s = "auto" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView, r = t.clickedIndex; if (a.loop) { if (t.animating) return; e = parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), E((function () { t.slideTo(r) }))) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), E((function () { t.slideTo(r) }))) : t.slideTo(r) } else t.slideTo(r) } }, loop: { loopCreate: function () { var e = this, t = r(), a = e.params, i = e.$wrapperEl; i.children("." + a.slideClass + "." + a.slideDuplicateClass).remove(); var s = i.children("." + a.slideClass); if (a.loopFillGroupWithBlank) { var n = a.slidesPerGroup - s.length % a.slidesPerGroup; if (n !== a.slidesPerGroup) { for (var o = 0; o < n; o += 1) { var l = m(t.createElement("div")).addClass(a.slideClass + " " + a.slideBlankClass); i.append(l) } s = i.children("." + a.slideClass) } } "auto" !== a.slidesPerView || a.loopedSlides || (a.loopedSlides = s.length), e.loopedSlides = Math.ceil(parseFloat(a.loopedSlides || a.slidesPerView, 10)), e.loopedSlides += a.loopAdditionalSlides, e.loopedSlides > s.length && (e.loopedSlides = s.length); var d = [], p = []; s.each((function (t, a) { var i = m(t); a < e.loopedSlides && p.push(t), a < s.length && a >= s.length - e.loopedSlides && d.push(t), i.attr("data-swiper-slide-index", a) })); for (var c = 0; c < p.length; c += 1)i.append(m(p[c].cloneNode(!0)).addClass(a.slideDuplicateClass)); for (var u = d.length - 1; u >= 0; u -= 1)i.prepend(m(d[u].cloneNode(!0)).addClass(a.slideDuplicateClass)) }, loopFix: function () { var e = this; e.emit("beforeLoopFix"); var t, a = e.activeIndex, i = e.slides, s = e.loopedSlides, r = e.allowSlidePrev, n = e.allowSlideNext, o = e.snapGrid, l = e.rtlTranslate; e.allowSlidePrev = !0, e.allowSlideNext = !0; var d = -o[a] - e.getTranslate(); if (a < s) t = i.length - 3 * s + a, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d); else if (a >= i.length - s) { t = -i.length + a + s, t += s, e.slideTo(t, 0, !1, !0) && 0 !== d && e.setTranslate((l ? -e.translate : e.translate) - d) } e.allowSlidePrev = r, e.allowSlideNext = n, e.emit("loopFix") }, loopDestroy: function () { var e = this, t = e.$wrapperEl, a = e.params, i = e.slides; t.children("." + a.slideClass + "." + a.slideDuplicateClass + ",." + a.slideClass + "." + a.slideBlankClass).remove(), i.removeAttr("data-swiper-slide-index") } }, grabCursor: { setGrabCursor: function (e) { var t = this; if (!(t.support.touch || !t.params.simulateTouch || t.params.watchOverflow && t.isLocked || t.params.cssMode)) { var a = t.el; a.style.cursor = "move", a.style.cursor = e ? "-webkit-grabbing" : "-webkit-grab", a.style.cursor = e ? "-moz-grabbin" : "-moz-grab", a.style.cursor = e ? "grabbing" : "grab" } }, unsetGrabCursor: function () { var e = this; e.support.touch || e.params.watchOverflow && e.isLocked || e.params.cssMode || (e.el.style.cursor = "") } }, manipulation: { appendSlide: function (e) { var t = this, a = t.$wrapperEl, i = t.params; if (i.loop && t.loopDestroy(), "object" == typeof e && "length" in e) for (var s = 0; s < e.length; s += 1)e[s] && a.append(e[s]); else a.append(e); i.loop && t.loopCreate(), i.observer && t.support.observer || t.update() }, prependSlide: function (e) { var t = this, a = t.params, i = t.$wrapperEl, s = t.activeIndex; a.loop && t.loopDestroy(); var r = s + 1; if ("object" == typeof e && "length" in e) { for (var n = 0; n < e.length; n += 1)e[n] && i.prepend(e[n]); r = s + e.length } else i.prepend(e); a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), t.slideTo(r, 0, !1) }, addSlide: function (e, t) { var a = this, i = a.$wrapperEl, s = a.params, r = a.activeIndex; s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children("." + s.slideClass)); var n = a.slides.length; if (e <= 0) a.prependSlide(t); else if (e >= n) a.appendSlide(t); else { for (var o = r > e ? r + 1 : r, l = [], d = n - 1; d >= e; d -= 1) { var p = a.slides.eq(d); p.remove(), l.unshift(p) } if ("object" == typeof t && "length" in t) { for (var c = 0; c < t.length; c += 1)t[c] && i.append(t[c]); o = r > e ? r + t.length : r } else i.append(t); for (var u = 0; u < l.length; u += 1)i.append(l[u]); s.loop && a.loopCreate(), s.observer && a.support.observer || a.update(), s.loop ? a.slideTo(o + a.loopedSlides, 0, !1) : a.slideTo(o, 0, !1) } }, removeSlide: function (e) { var t = this, a = t.params, i = t.$wrapperEl, s = t.activeIndex; a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children("." + a.slideClass)); var r, n = s; if ("object" == typeof e && "length" in e) { for (var o = 0; o < e.length; o += 1)r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1); n = Math.max(n, 0) } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0); a.loop && t.loopCreate(), a.observer && t.support.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1) }, removeAllSlides: function () { for (var e = [], t = 0; t < this.slides.length; t += 1)e.push(t); this.removeSlide(e) } }, events: { attachEvents: function () { var e = this, t = r(), a = e.params, i = e.touchEvents, s = e.el, n = e.wrapperEl, o = e.device, l = e.support; e.onTouchStart = A.bind(e), e.onTouchMove = D.bind(e), e.onTouchEnd = N.bind(e), a.cssMode && (e.onScroll = H.bind(e)), e.onClick = B.bind(e); var d = !!a.nested; if (!l.touch && l.pointerEvents) s.addEventListener(i.start, e.onTouchStart, !1), t.addEventListener(i.move, e.onTouchMove, d), t.addEventListener(i.end, e.onTouchEnd, !1); else { if (l.touch) { var p = !("touchstart" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 }; s.addEventListener(i.start, e.onTouchStart, p), s.addEventListener(i.move, e.onTouchMove, l.passiveListener ? { passive: !1, capture: d } : d), s.addEventListener(i.end, e.onTouchEnd, p), i.cancel && s.addEventListener(i.cancel, e.onTouchEnd, p), X || (t.addEventListener("touchstart", Y), X = !0) } (a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.addEventListener("mousedown", e.onTouchStart, !1), t.addEventListener("mousemove", e.onTouchMove, d), t.addEventListener("mouseup", e.onTouchEnd, !1)) } (a.preventClicks || a.preventClicksPropagation) && s.addEventListener("click", e.onClick, !0), a.cssMode && n.addEventListener("scroll", e.onScroll), a.updateOnWindowResize ? e.on(o.ios || o.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", G, !0) : e.on("observerUpdate", G, !0) }, detachEvents: function () { var e = this, t = r(), a = e.params, i = e.touchEvents, s = e.el, n = e.wrapperEl, o = e.device, l = e.support, d = !!a.nested; if (!l.touch && l.pointerEvents) s.removeEventListener(i.start, e.onTouchStart, !1), t.removeEventListener(i.move, e.onTouchMove, d), t.removeEventListener(i.end, e.onTouchEnd, !1); else { if (l.touch) { var p = !("onTouchStart" !== i.start || !l.passiveListener || !a.passiveListeners) && { passive: !0, capture: !1 }; s.removeEventListener(i.start, e.onTouchStart, p), s.removeEventListener(i.move, e.onTouchMove, d), s.removeEventListener(i.end, e.onTouchEnd, p), i.cancel && s.removeEventListener(i.cancel, e.onTouchEnd, p) } (a.simulateTouch && !o.ios && !o.android || a.simulateTouch && !l.touch && o.ios) && (s.removeEventListener("mousedown", e.onTouchStart, !1), t.removeEventListener("mousemove", e.onTouchMove, d), t.removeEventListener("mouseup", e.onTouchEnd, !1)) } (a.preventClicks || a.preventClicksPropagation) && s.removeEventListener("click", e.onClick, !0), a.cssMode && n.removeEventListener("scroll", e.onScroll), e.off(o.ios || o.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", G) } }, breakpoints: { setBreakpoint: function () { var e = this, t = e.activeIndex, a = e.initialized, i = e.loopedSlides, s = void 0 === i ? 0 : i, r = e.params, n = e.$el, o = r.breakpoints; if (o && (!o || 0 !== Object.keys(o).length)) { var l = e.getBreakpoint(o, e.params.breakpointsBase, e.el); if (l && e.currentBreakpoint !== l) { var d = l in o ? o[l] : void 0; d && ["slidesPerView", "spaceBetween", "slidesPerGroup", "slidesPerGroupSkip", "slidesPerColumn"].forEach((function (e) { var t = d[e]; void 0 !== t && (d[e] = "slidesPerView" !== e || "AUTO" !== t && "auto" !== t ? "slidesPerView" === e ? parseFloat(t) : parseInt(t, 10) : "auto") })); var p = d || e.originalParams, c = r.slidesPerColumn > 1, u = p.slidesPerColumn > 1; c && !u ? (n.removeClass(r.containerModifierClass + "multirow " + r.containerModifierClass + "multirow-column"), e.emitContainerClasses()) : !c && u && (n.addClass(r.containerModifierClass + "multirow"), "column" === p.slidesPerColumnFill && n.addClass(r.containerModifierClass + "multirow-column"), e.emitContainerClasses()); var h = p.direction && p.direction !== r.direction, v = r.loop && (p.slidesPerView !== r.slidesPerView || h); h && a && e.changeDirection(), C(e.params, p), C(e, { allowTouchMove: e.params.allowTouchMove, allowSlideNext: e.params.allowSlideNext, allowSlidePrev: e.params.allowSlidePrev }), e.currentBreakpoint = l, e.emit("_beforeBreakpoint", p), v && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - s + e.loopedSlides, 0, !1)), e.emit("breakpoint", p) } } }, getBreakpoint: function (e, t, a) { if (void 0 === t && (t = "window"), e && ("container" !== t || a)) { var i = !1, s = o(), r = "window" === t ? s.innerWidth : a.clientWidth, n = "window" === t ? s.innerHeight : a.clientHeight, l = Object.keys(e).map((function (e) { if ("string" == typeof e && 0 === e.indexOf("@")) { var t = parseFloat(e.substr(1)); return { value: n * t, point: e } } return { value: e, point: e } })); l.sort((function (e, t) { return parseInt(e.value, 10) - parseInt(t.value, 10) })); for (var d = 0; d < l.length; d += 1) { var p = l[d], c = p.point; p.value <= r && (i = c) } return i || "max" } } }, checkOverflow: { checkOverflow: function () { var e = this, t = e.params, a = e.isLocked, i = e.slides.length > 0 && t.slidesOffsetBefore + t.spaceBetween * (e.slides.length - 1) + e.slides[0].offsetWidth * e.slides.length; t.slidesOffsetBefore && t.slidesOffsetAfter && i ? e.isLocked = i <= e.size : e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, a !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock"), a && a !== e.isLocked && (e.isEnd = !1, e.navigation && e.navigation.update()) } }, classes: { addClasses: function () { var e, t, a, i = this, s = i.classNames, r = i.params, n = i.rtl, o = i.$el, l = i.device, d = i.support, p = (e = ["initialized", r.direction, { "pointer-events": d.pointerEvents && !d.touch }, { "free-mode": r.freeMode }, { autoheight: r.autoHeight }, { rtl: n }, { multirow: r.slidesPerColumn > 1 }, { "multirow-column": r.slidesPerColumn > 1 && "column" === r.slidesPerColumnFill }, { android: l.android }, { ios: l.ios }, { "css-mode": r.cssMode }], t = r.containerModifierClass, a = [], e.forEach((function (e) { "object" == typeof e ? Object.keys(e).forEach((function (i) { e[i] && a.push(t + i) })) : "string" == typeof e && a.push(t + e) })), a); s.push.apply(s, p), o.addClass([].concat(s).join(" ")), i.emitContainerClasses() }, removeClasses: function () { var e = this, t = e.$el, a = e.classNames; t.removeClass(a.join(" ")), e.emitContainerClasses() } }, images: { loadImage: function (e, t, a, i, s, r) { var n, l = o(); function d() { r && r() } m(e).parent("picture")[0] || e.complete && s ? d() : t ? ((n = new l.Image).onload = d, n.onerror = d, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : d() }, preloadImages: function () { var e = this; function t() { null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit("imagesReady"))) } e.imagesToLoad = e.$el.find("img"); for (var a = 0; a < e.imagesToLoad.length; a += 1) { var i = e.imagesToLoad[a]; e.loadImage(i, i.currentSrc || i.getAttribute("src"), i.srcset || i.getAttribute("srcset"), i.sizes || i.getAttribute("sizes"), !0, t) } } } }, W = {}, F = function () { function t() { for (var e, a, i = arguments.length, s = new Array(i), r = 0; r < i; r++)s[r] = arguments[r]; if (1 === s.length && s[0].constructor && "Object" === Object.prototype.toString.call(s[0]).slice(8, -1) ? a = s[0] : (e = s[0], a = s[1]), a || (a = {}), a = C({}, a), e && !a.el && (a.el = e), a.el && m(a.el).length > 1) { var n = []; return m(a.el).each((function (e) { var i = C({}, a, { el: e }); n.push(new t(i)) })), n } var o = this; o.__swiper__ = !0, o.support = P(), o.device = k({ userAgent: a.userAgent }), o.browser = L(), o.eventsListeners = {}, o.eventsAnyListeners = [], void 0 === o.modules && (o.modules = {}), Object.keys(o.modules).forEach((function (e) { var t = o.modules[e]; if (t.params) { var i = Object.keys(t.params)[0], s = t.params[i]; if ("object" != typeof s || null === s) return; if (!(i in a) || !("enabled" in s)) return; !0 === a[i] && (a[i] = { enabled: !0 }), "object" != typeof a[i] || "enabled" in a[i] || (a[i].enabled = !0), a[i] || (a[i] = { enabled: !1 }) } })); var l, d, p = C({}, R); return o.useParams(p), o.params = C({}, p, W, a), o.originalParams = C({}, o.params), o.passedParams = C({}, a), o.params && o.params.on && Object.keys(o.params.on).forEach((function (e) { o.on(e, o.params.on[e]) })), o.params && o.params.onAny && o.onAny(o.params.onAny), o.$ = m, C(o, { el: e, classNames: [], slides: m(), slidesGrid: [], snapGrid: [], slidesSizesGrid: [], isHorizontal: function () { return "horizontal" === o.params.direction }, isVertical: function () { return "vertical" === o.params.direction }, activeIndex: 0, realIndex: 0, isBeginning: !0, isEnd: !1, translate: 0, previousTranslate: 0, progress: 0, velocity: 0, animating: !1, allowSlideNext: o.params.allowSlideNext, allowSlidePrev: o.params.allowSlidePrev, touchEvents: (l = ["touchstart", "touchmove", "touchend", "touchcancel"], d = ["mousedown", "mousemove", "mouseup"], o.support.pointerEvents && (d = ["pointerdown", "pointermove", "pointerup"]), o.touchEventsTouch = { start: l[0], move: l[1], end: l[2], cancel: l[3] }, o.touchEventsDesktop = { start: d[0], move: d[1], end: d[2] }, o.support.touch || !o.params.simulateTouch ? o.touchEventsTouch : o.touchEventsDesktop), touchEventsData: { isTouched: void 0, isMoved: void 0, allowTouchCallbacks: void 0, touchStartTime: void 0, isScrolling: void 0, currentTranslate: void 0, startTranslate: void 0, allowThresholdMove: void 0, formElements: "input, select, option, textarea, button, video, label", lastClickTime: x(), clickTimeout: void 0, velocities: [], allowMomentumBounce: void 0, isTouchEvent: void 0, startMoving: void 0 }, allowClick: !0, allowTouchMove: o.params.allowTouchMove, touches: { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 }, imagesToLoad: [], imagesLoaded: 0 }), o.useModules(), o.emit("_swiper"), o.params.init && o.init(), o } var a, i, s, r = t.prototype; return r.setProgress = function (e, t) { var a = this; e = Math.min(Math.max(e, 0), 1); var i = a.minTranslate(), s = (a.maxTranslate() - i) * e + i; a.translateTo(s, void 0 === t ? 0 : t), a.updateActiveIndex(), a.updateSlidesClasses() }, r.emitContainerClasses = function () { var e = this; if (e.params._emitClasses && e.el) { var t = e.el.className.split(" ").filter((function (t) { return 0 === t.indexOf("swiper-container") || 0 === t.indexOf(e.params.containerModifierClass) })); e.emit("_containerClasses", t.join(" ")) } }, r.getSlideClasses = function (e) { var t = this; return e.className.split(" ").filter((function (e) { return 0 === e.indexOf("swiper-slide") || 0 === e.indexOf(t.params.slideClass) })).join(" ") }, r.emitSlidesClasses = function () { var e = this; if (e.params._emitClasses && e.el) { var t = []; e.slides.each((function (a) { var i = e.getSlideClasses(a); t.push({ slideEl: a, classNames: i }), e.emit("_slideClass", a, i) })), e.emit("_slideClasses", t) } }, r.slidesPerViewDynamic = function () { var e = this, t = e.params, a = e.slides, i = e.slidesGrid, s = e.size, r = e.activeIndex, n = 1; if (t.centeredSlides) { for (var o, l = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1)a[d] && !o && (n += 1, (l += a[d].swiperSlideSize) > s && (o = !0)); for (var p = r - 1; p >= 0; p -= 1)a[p] && !o && (n += 1, (l += a[p].swiperSlideSize) > s && (o = !0)) } else for (var c = r + 1; c < a.length; c += 1)i[c] - i[r] < s && (n += 1); return n }, r.update = function () { var e = this; if (e && !e.destroyed) { var t = e.snapGrid, a = e.params; a.breakpoints && e.setBreakpoint(), e.updateSize(), e.updateSlides(), e.updateProgress(), e.updateSlidesClasses(), e.params.freeMode ? (i(), e.params.autoHeight && e.updateAutoHeight()) : (("auto" === e.params.slidesPerView || e.params.slidesPerView > 1) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0)) || i(), a.watchOverflow && t !== e.snapGrid && e.checkOverflow(), e.emit("update") } function i() { var t = e.rtlTranslate ? -1 * e.translate : e.translate, a = Math.min(Math.max(t, e.maxTranslate()), e.minTranslate()); e.setTranslate(a), e.updateActiveIndex(), e.updateSlidesClasses() } }, r.changeDirection = function (e, t) { void 0 === t && (t = !0); var a = this, i = a.params.direction; return e || (e = "horizontal" === i ? "vertical" : "horizontal"), e === i || "horizontal" !== e && "vertical" !== e || (a.$el.removeClass("" + a.params.containerModifierClass + i).addClass("" + a.params.containerModifierClass + e), a.emitContainerClasses(), a.params.direction = e, a.slides.each((function (t) { "vertical" === e ? t.style.width = "" : t.style.height = "" })), a.emit("changeDirection"), t && a.update()), a }, r.mount = function (e) { var t = this; if (t.mounted) return !0; var a, i = m(e || t.params.el); return !!(e = i[0]) && (e.swiper = t, e && e.shadowRoot && e.shadowRoot.querySelector ? (a = m(e.shadowRoot.querySelector("." + t.params.wrapperClass))).children = function (e) { return i.children(e) } : a = i.children("." + t.params.wrapperClass), C(t, { $el: i, el: e, $wrapperEl: a, wrapperEl: a[0], mounted: !0, rtl: "rtl" === e.dir.toLowerCase() || "rtl" === i.css("direction"), rtlTranslate: "horizontal" === t.params.direction && ("rtl" === e.dir.toLowerCase() || "rtl" === i.css("direction")), wrongRTL: "-webkit-box" === a.css("display") }), !0) }, r.init = function (e) { var t = this; return t.initialized || !1 === t.mount(e) || (t.emit("beforeInit"), t.params.breakpoints && t.setBreakpoint(), t.addClasses(), t.params.loop && t.loopCreate(), t.updateSize(), t.updateSlides(), t.params.watchOverflow && t.checkOverflow(), t.params.grabCursor && t.setGrabCursor(), t.params.preloadImages && t.preloadImages(), t.params.loop ? t.slideTo(t.params.initialSlide + t.loopedSlides, 0, t.params.runCallbacksOnInit) : t.slideTo(t.params.initialSlide, 0, t.params.runCallbacksOnInit), t.attachEvents(), t.initialized = !0, t.emit("init"), t.emit("afterInit")), t }, r.destroy = function (e, t) { void 0 === e && (e = !0), void 0 === t && (t = !0); var a, i = this, s = i.params, r = i.$el, n = i.$wrapperEl, o = i.slides; return void 0 === i.params || i.destroyed || (i.emit("beforeDestroy"), i.initialized = !1, i.detachEvents(), s.loop && i.loopDestroy(), t && (i.removeClasses(), r.removeAttr("style"), n.removeAttr("style"), o && o.length && o.removeClass([s.slideVisibleClass, s.slideActiveClass, s.slideNextClass, s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")), i.emit("destroy"), Object.keys(i.eventsListeners).forEach((function (e) { i.off(e) })), !1 !== e && (i.$el[0].swiper = null, a = i, Object.keys(a).forEach((function (e) { try { a[e] = null } catch (e) { } try { delete a[e] } catch (e) { } }))), i.destroyed = !0), null }, t.extendDefaults = function (e) { C(W, e) }, t.installModule = function (e) { t.prototype.modules || (t.prototype.modules = {}); var a = e.name || Object.keys(t.prototype.modules).length + "_" + x(); t.prototype.modules[a] = e }, t.use = function (e) { return Array.isArray(e) ? (e.forEach((function (e) { return t.installModule(e) })), t) : (t.installModule(e), t) }, a = t, s = [{ key: "extendedDefaults", get: function () { return W } }, { key: "defaults", get: function () { return R } }], (i = null) && e(a.prototype, i), s && e(a, s), t }(); Object.keys(V).forEach((function (e) { Object.keys(V[e]).forEach((function (t) { F.prototype[t] = V[e][t] })) })), F.use([$, O]); var _ = { update: function (e) { var t = this, a = t.params, i = a.slidesPerView, s = a.slidesPerGroup, r = a.centeredSlides, n = t.params.virtual, o = n.addSlidesBefore, l = n.addSlidesAfter, d = t.virtual, p = d.from, c = d.to, u = d.slides, h = d.slidesGrid, v = d.renderSlide, f = d.offset; t.updateActiveIndex(); var m, g, b, w = t.activeIndex || 0; m = t.rtlTranslate ? "right" : t.isHorizontal() ? "left" : "top", r ? (g = Math.floor(i / 2) + s + l, b = Math.floor(i / 2) + s + o) : (g = i + (s - 1) + l, b = s + o); var y = Math.max((w || 0) - b, 0), E = Math.min((w || 0) + g, u.length - 1), x = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0); function T() { t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load() } if (C(t.virtual, { from: y, to: E, offset: x, slidesGrid: t.slidesGrid }), p === y && c === E && !e) return t.slidesGrid !== h && x !== f && t.slides.css(m, x + "px"), void t.updateProgress(); if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, { offset: x, from: y, to: E, slides: function () { for (var e = [], t = y; t <= E; t += 1)e.push(u[t]); return e }() }), void (t.params.virtual.renderExternalUpdate && T()); var S = [], M = []; if (e) t.$wrapperEl.find("." + t.params.slideClass).remove(); else for (var z = p; z <= c; z += 1)(z < y || z > E) && t.$wrapperEl.find("." + t.params.slideClass + '[data-swiper-slide-index="' + z + '"]').remove(); for (var P = 0; P < u.length; P += 1)P >= y && P <= E && (void 0 === c || e ? M.push(P) : (P > c && M.push(P), P < p && S.push(P))); M.forEach((function (e) { t.$wrapperEl.append(v(u[e], e)) })), S.sort((function (e, t) { return t - e })).forEach((function (e) { t.$wrapperEl.prepend(v(u[e], e)) })), t.$wrapperEl.children(".swiper-slide").css(m, x + "px"), T() }, renderSlide: function (e, t) { var a = this, i = a.params.virtual; if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t]; var s = i.renderSlide ? m(i.renderSlide.call(a, e, t)) : m('<div class="' + a.params.slideClass + '" data-swiper-slide-index="' + t + '">' + e + "</div>"); return s.attr("data-swiper-slide-index") || s.attr("data-swiper-slide-index", t), i.cache && (a.virtual.cache[t] = s), s }, appendSlide: function (e) { var t = this; if ("object" == typeof e && "length" in e) for (var a = 0; a < e.length; a += 1)e[a] && t.virtual.slides.push(e[a]); else t.virtual.slides.push(e); t.virtual.update(!0) }, prependSlide: function (e) { var t = this, a = t.activeIndex, i = a + 1, s = 1; if (Array.isArray(e)) { for (var r = 0; r < e.length; r += 1)e[r] && t.virtual.slides.unshift(e[r]); i = a + e.length, s = e.length } else t.virtual.slides.unshift(e); if (t.params.virtual.cache) { var n = t.virtual.cache, o = {}; Object.keys(n).forEach((function (e) { var t = n[e], a = t.attr("data-swiper-slide-index"); a && t.attr("data-swiper-slide-index", parseInt(a, 10) + 1), o[parseInt(e, 10) + s] = t })), t.virtual.cache = o } t.virtual.update(!0), t.slideTo(i, 0) }, removeSlide: function (e) { var t = this; if (null != e) { var a = t.activeIndex; if (Array.isArray(e)) for (var i = e.length - 1; i >= 0; i -= 1)t.virtual.slides.splice(e[i], 1), t.params.virtual.cache && delete t.virtual.cache[e[i]], e[i] < a && (a -= 1), a = Math.max(a, 0); else t.virtual.slides.splice(e, 1), t.params.virtual.cache && delete t.virtual.cache[e], e < a && (a -= 1), a = Math.max(a, 0); t.virtual.update(!0), t.slideTo(a, 0) } }, removeAllSlides: function () { var e = this; e.virtual.slides = [], e.params.virtual.cache && (e.virtual.cache = {}), e.virtual.update(!0), e.slideTo(0, 0) } }, q = { name: "virtual", params: { virtual: { enabled: !1, slides: [], cache: !0, renderSlide: null, renderExternal: null, renderExternalUpdate: !0, addSlidesBefore: 0, addSlidesAfter: 0 } }, create: function () { M(this, { virtual: t({}, _, { slides: this.params.virtual.slides, cache: {} }) }) }, on: { beforeInit: function (e) { if (e.params.virtual.enabled) { e.classNames.push(e.params.containerModifierClass + "virtual"); var t = { watchSlidesProgress: !0 }; C(e.params, t), C(e.originalParams, t), e.params.initialSlide || e.virtual.update() } }, setTranslate: function (e) { e.params.virtual.enabled && e.virtual.update() } } }, j = { handle: function (e) { var t = this, a = o(), i = r(), s = t.rtlTranslate, n = e; n.originalEvent && (n = n.originalEvent); var l = n.keyCode || n.charCode, d = t.params.keyboard.pageUpDown, p = d && 33 === l, c = d && 34 === l, u = 37 === l, h = 39 === l, v = 38 === l, f = 40 === l; if (!t.allowSlideNext && (t.isHorizontal() && h || t.isVertical() && f || c)) return !1; if (!t.allowSlidePrev && (t.isHorizontal() && u || t.isVertical() && v || p)) return !1; if (!(n.shiftKey || n.altKey || n.ctrlKey || n.metaKey || i.activeElement && i.activeElement.nodeName && ("input" === i.activeElement.nodeName.toLowerCase() || "textarea" === i.activeElement.nodeName.toLowerCase()))) { if (t.params.keyboard.onlyInViewport && (p || c || u || h || v || f)) { var m = !1; if (t.$el.parents("." + t.params.slideClass).length > 0 && 0 === t.$el.parents("." + t.params.slideActiveClass).length) return; var g = t.$el, b = g[0].clientWidth, w = g[0].clientHeight, y = a.innerWidth, E = a.innerHeight, x = t.$el.offset(); s && (x.left -= t.$el[0].scrollLeft); for (var T = [[x.left, x.top], [x.left + b, x.top], [x.left, x.top + w], [x.left + b, x.top + w]], S = 0; S < T.length; S += 1) { var C = T[S]; if (C[0] >= 0 && C[0] <= y && C[1] >= 0 && C[1] <= E) { if (0 === C[0] && 0 === C[1]) continue; m = !0 } } if (!m) return } t.isHorizontal() ? ((p || c || u || h) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), ((c || h) && !s || (p || u) && s) && t.slideNext(), ((p || u) && !s || (c || h) && s) && t.slidePrev()) : ((p || c || v || f) && (n.preventDefault ? n.preventDefault() : n.returnValue = !1), (c || f) && t.slideNext(), (p || v) && t.slidePrev()), t.emit("keyPress", l) } }, enable: function () { var e = this, t = r(); e.keyboard.enabled || (m(t).on("keydown", e.keyboard.handle), e.keyboard.enabled = !0) }, disable: function () { var e = this, t = r(); e.keyboard.enabled && (m(t).off("keydown", e.keyboard.handle), e.keyboard.enabled = !1) } }, U = { name: "keyboard", params: { keyboard: { enabled: !1, onlyInViewport: !0, pageUpDown: !0 } }, create: function () { M(this, { keyboard: t({ enabled: !1 }, j) }) }, on: { init: function (e) { e.params.keyboard.enabled && e.keyboard.enable() }, destroy: function (e) { e.keyboard.enabled && e.keyboard.disable() } } }; var K = { lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], event: function () { return o().navigator.userAgent.indexOf("firefox") > -1 ? "DOMMouseScroll" : function () { var e = r(), t = "onwheel", a = t in e; if (!a) { var i = e.createElement("div"); i.setAttribute(t, "return;"), a = "function" == typeof i.onwheel } return !a && e.implementation && e.implementation.hasFeature && !0 !== e.implementation.hasFeature("", "") && (a = e.implementation.hasFeature("Events.wheel", "3.0")), a }() ? "wheel" : "mousewheel" }, normalize: function (e) { var t = 0, a = 0, i = 0, s = 0; return "detail" in e && (a = e.detail), "wheelDelta" in e && (a = -e.wheelDelta / 120), "wheelDeltaY" in e && (a = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, "deltaY" in e && (s = e.deltaY), "deltaX" in e && (i = e.deltaX), e.shiftKey && !i && (i = s, s = 0), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), { spinX: t, spinY: a, pixelX: i, pixelY: s } }, handleMouseEnter: function () { this.mouseEntered = !0 }, handleMouseLeave: function () { this.mouseEntered = !1 }, handle: function (e) { var t = e, a = this, i = a.params.mousewheel; a.params.cssMode && t.preventDefault(); var s = a.$el; if ("container" !== a.params.mousewheel.eventsTarget && (s = m(a.params.mousewheel.eventsTarget)), !a.mouseEntered && !s[0].contains(t.target) && !i.releaseOnEdges) return !0; t.originalEvent && (t = t.originalEvent); var r = 0, n = a.rtlTranslate ? -1 : 1, o = K.normalize(t); if (i.forceToAxis) if (a.isHorizontal()) { if (!(Math.abs(o.pixelX) > Math.abs(o.pixelY))) return !0; r = -o.pixelX * n } else { if (!(Math.abs(o.pixelY) > Math.abs(o.pixelX))) return !0; r = -o.pixelY } else r = Math.abs(o.pixelX) > Math.abs(o.pixelY) ? -o.pixelX * n : -o.pixelY; if (0 === r) return !0; i.invert && (r = -r); var l = a.getTranslate() + r * i.sensitivity; if (l >= a.minTranslate() && (l = a.minTranslate()), l <= a.maxTranslate() && (l = a.maxTranslate()), (!!a.params.loop || !(l === a.minTranslate() || l === a.maxTranslate())) && a.params.nested && t.stopPropagation(), a.params.freeMode) { var d = { time: x(), delta: Math.abs(r), direction: Math.sign(r) }, p = a.mousewheel.lastEventBeforeSnap, c = p && d.time < p.time + 500 && d.delta <= p.delta && d.direction === p.direction; if (!c) { a.mousewheel.lastEventBeforeSnap = void 0, a.params.loop && a.loopFix(); var u = a.getTranslate() + r * i.sensitivity, h = a.isBeginning, v = a.isEnd; if (u >= a.minTranslate() && (u = a.minTranslate()), u <= a.maxTranslate() && (u = a.maxTranslate()), a.setTransition(0), a.setTranslate(u), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!h && a.isBeginning || !v && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky) { clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = void 0; var f = a.mousewheel.recentWheelEvents; f.length >= 15 && f.shift(); var g = f.length ? f[f.length - 1] : void 0, b = f[0]; if (f.push(d), g && (d.delta > g.delta || d.direction !== g.direction)) f.splice(0); else if (f.length >= 15 && d.time - b.time < 500 && b.delta - d.delta >= 1 && d.delta <= 6) { var w = r > 0 ? .8 : .2; a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.mousewheel.timeout = E((function () { a.slideToClosest(a.params.speed, !0, void 0, w) }), 0) } a.mousewheel.timeout || (a.mousewheel.timeout = E((function () { a.mousewheel.lastEventBeforeSnap = d, f.splice(0), a.slideToClosest(a.params.speed, !0, void 0, .5) }), 500)) } if (c || a.emit("scroll", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), u === a.minTranslate() || u === a.maxTranslate()) return !0 } } else { var y = { time: x(), delta: Math.abs(r), direction: Math.sign(r), raw: e }, T = a.mousewheel.recentWheelEvents; T.length >= 2 && T.shift(); var S = T.length ? T[T.length - 1] : void 0; if (T.push(y), S ? (y.direction !== S.direction || y.delta > S.delta || y.time > S.time + 150) && a.mousewheel.animateSlider(y) : a.mousewheel.animateSlider(y), a.mousewheel.releaseScroll(y)) return !0 } return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1 }, animateSlider: function (e) { var t = this, a = o(); return !(this.params.mousewheel.thresholdDelta && e.delta < this.params.mousewheel.thresholdDelta) && (!(this.params.mousewheel.thresholdTime && x() - t.mousewheel.lastScrollTime < this.params.mousewheel.thresholdTime) && (e.delta >= 6 && x() - t.mousewheel.lastScrollTime < 60 || (e.direction < 0 ? t.isEnd && !t.params.loop || t.animating || (t.slideNext(), t.emit("scroll", e.raw)) : t.isBeginning && !t.params.loop || t.animating || (t.slidePrev(), t.emit("scroll", e.raw)), t.mousewheel.lastScrollTime = (new a.Date).getTime(), !1))) }, releaseScroll: function (e) { var t = this, a = t.params.mousewheel; if (e.direction < 0) { if (t.isEnd && !t.params.loop && a.releaseOnEdges) return !0 } else if (t.isBeginning && !t.params.loop && a.releaseOnEdges) return !0; return !1 }, enable: function () { var e = this, t = K.event(); if (e.params.cssMode) return e.wrapperEl.removeEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (e.mousewheel.enabled) return !1; var a = e.$el; return "container" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.on("mouseenter", e.mousewheel.handleMouseEnter), a.on("mouseleave", e.mousewheel.handleMouseLeave), a.on(t, e.mousewheel.handle), e.mousewheel.enabled = !0, !0 }, disable: function () { var e = this, t = K.event(); if (e.params.cssMode) return e.wrapperEl.addEventListener(t, e.mousewheel.handle), !0; if (!t) return !1; if (!e.mousewheel.enabled) return !1; var a = e.$el; return "container" !== e.params.mousewheel.eventsTarget && (a = m(e.params.mousewheel.eventsTarget)), a.off(t, e.mousewheel.handle), e.mousewheel.enabled = !1, !0 } }, Z = { toggleEl: function (e, t) { e[t ? "addClass" : "removeClass"](this.params.navigation.disabledClass), e[0] && "BUTTON" === e[0].tagName && (e[0].disabled = t) }, update: function () { var e = this, t = e.params.navigation, a = e.navigation.toggleEl; if (!e.params.loop) { var i = e.navigation, s = i.$nextEl, r = i.$prevEl; r && r.length > 0 && (e.isBeginning ? a(r, !0) : a(r, !1), r[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass)), s && s.length > 0 && (e.isEnd ? a(s, !0) : a(s, !1), s[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass)) } }, onPrevClick: function (e) { var t = this; e.preventDefault(), t.isBeginning && !t.params.loop || t.slidePrev() }, onNextClick: function (e) { var t = this; e.preventDefault(), t.isEnd && !t.params.loop || t.slideNext() }, init: function () { var e, t, a = this, i = a.params.navigation; (i.nextEl || i.prevEl) && (i.nextEl && (e = m(i.nextEl), a.params.uniqueNavElements && "string" == typeof i.nextEl && e.length > 1 && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = m(i.prevEl), a.params.uniqueNavElements && "string" == typeof i.prevEl && t.length > 1 && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && e.length > 0 && e.on("click", a.navigation.onNextClick), t && t.length > 0 && t.on("click", a.navigation.onPrevClick), C(a.navigation, { $nextEl: e, nextEl: e && e[0], $prevEl: t, prevEl: t && t[0] })) }, destroy: function () { var e = this, t = e.navigation, a = t.$nextEl, i = t.$prevEl; a && a.length && (a.off("click", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off("click", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass)) } }, J = { update: function () { var e = this, t = e.rtl, a = e.params.pagination; if (a.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var i, s = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length, r = e.pagination.$el, n = e.params.loop ? Math.ceil((s - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length; if (e.params.loop ? ((i = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > s - 1 - 2 * e.loopedSlides && (i -= s - 2 * e.loopedSlides), i > n - 1 && (i -= n), i < 0 && "bullets" !== e.params.paginationType && (i = n + i)) : i = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, "bullets" === a.type && e.pagination.bullets && e.pagination.bullets.length > 0) { var o, l, d, p = e.pagination.bullets; if (a.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? "outerWidth" : "outerHeight"](!0), r.css(e.isHorizontal() ? "width" : "height", e.pagination.bulletSize * (a.dynamicMainBullets + 4) + "px"), a.dynamicMainBullets > 1 && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += i - e.previousIndex, e.pagination.dynamicBulletIndex > a.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = a.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = i - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, a.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(a.bulletActiveClass + " " + a.bulletActiveClass + "-next " + a.bulletActiveClass + "-next-next " + a.bulletActiveClass + "-prev " + a.bulletActiveClass + "-prev-prev " + a.bulletActiveClass + "-main"), r.length > 1) p.each((function (e) { var t = m(e), s = t.index(); s === i && t.addClass(a.bulletActiveClass), a.dynamicBullets && (s >= o && s <= l && t.addClass(a.bulletActiveClass + "-main"), s === o && t.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), s === l && t.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next")) })); else { var c = p.eq(i), u = c.index(); if (c.addClass(a.bulletActiveClass), a.dynamicBullets) { for (var h = p.eq(o), v = p.eq(l), f = o; f <= l; f += 1)p.eq(f).addClass(a.bulletActiveClass + "-main"); if (e.params.loop) if (u >= p.length - a.dynamicMainBullets) { for (var g = a.dynamicMainBullets; g >= 0; g -= 1)p.eq(p.length - g).addClass(a.bulletActiveClass + "-main"); p.eq(p.length - a.dynamicMainBullets - 1).addClass(a.bulletActiveClass + "-prev") } else h.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), v.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next"); else h.prev().addClass(a.bulletActiveClass + "-prev").prev().addClass(a.bulletActiveClass + "-prev-prev"), v.next().addClass(a.bulletActiveClass + "-next").next().addClass(a.bulletActiveClass + "-next-next") } } if (a.dynamicBullets) { var b = Math.min(p.length, a.dynamicMainBullets + 4), w = (e.pagination.bulletSize * b - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize, y = t ? "right" : "left"; p.css(e.isHorizontal() ? y : "top", w + "px") } } if ("fraction" === a.type && (r.find(z(a.currentClass)).text(a.formatFractionCurrent(i + 1)), r.find(z(a.totalClass)).text(a.formatFractionTotal(n))), "progressbar" === a.type) { var E; E = a.progressbarOpposite ? e.isHorizontal() ? "vertical" : "horizontal" : e.isHorizontal() ? "horizontal" : "vertical"; var x = (i + 1) / n, T = 1, S = 1; "horizontal" === E ? T = x : S = x, r.find(z(a.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + T + ") scaleY(" + S + ")").transition(e.params.speed) } "custom" === a.type && a.renderCustom ? (r.html(a.renderCustom(e, i + 1, n)), e.emit("paginationRender", r[0])) : e.emit("paginationUpdate", r[0]), r[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](a.lockClass) } }, render: function () { var e = this, t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length, i = e.pagination.$el, s = ""; if ("bullets" === t.type) { var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length; e.params.freeMode && !e.params.loop && r > a && (r = a); for (var n = 0; n < r; n += 1)t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += "<" + t.bulletElement + ' class="' + t.bulletClass + '"></' + t.bulletElement + ">"; i.html(s), e.pagination.bullets = i.find(z(t.bulletClass)) } "fraction" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class="' + t.currentClass + '"></span> / <span class="' + t.totalClass + '"></span>', i.html(s)), "progressbar" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class="' + t.progressbarFillClass + '"></span>', i.html(s)), "custom" !== t.type && e.emit("paginationRender", e.pagination.$el[0]) } }, init: function () { var e = this, t = e.params.pagination; if (t.el) { var a = m(t.el); 0 !== a.length && (e.params.uniqueNavElements && "string" == typeof t.el && a.length > 1 && (a = e.$el.find(t.el)), "bullets" === t.type && t.clickable && a.addClass(t.clickableClass), a.addClass(t.modifierClass + t.type), "bullets" === t.type && t.dynamicBullets && (a.addClass("" + t.modifierClass + t.type + "-dynamic"), e.pagination.dynamicBulletIndex = 0, t.dynamicMainBullets < 1 && (t.dynamicMainBullets = 1)), "progressbar" === t.type && t.progressbarOpposite && a.addClass(t.progressbarOppositeClass), t.clickable && a.on("click", z(t.bulletClass), (function (t) { t.preventDefault(); var a = m(this).index() * e.params.slidesPerGroup; e.params.loop && (a += e.loopedSlides), e.slideTo(a) })), C(e.pagination, { $el: a, el: a[0] })) } }, destroy: function () { var e = this, t = e.params.pagination; if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) { var a = e.pagination.$el; a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off("click", z(t.bulletClass)) } } }, Q = { setTranslate: function () { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar, a = e.rtlTranslate, i = e.progress, s = t.dragSize, r = t.trackSize, n = t.$dragEl, o = t.$el, l = e.params.scrollbar, d = s, p = (r - s) * i; a ? (p = -p) > 0 ? (d = s - p, p = 0) : -p + s > r && (d = r + p) : p < 0 ? (d = s + p, p = 0) : p + s > r && (d = r - p), e.isHorizontal() ? (n.transform("translate3d(" + p + "px, 0, 0)"), n[0].style.width = d + "px") : (n.transform("translate3d(0px, " + p + "px, 0)"), n[0].style.height = d + "px"), l.hide && (clearTimeout(e.scrollbar.timeout), o[0].style.opacity = 1, e.scrollbar.timeout = setTimeout((function () { o[0].style.opacity = 0, o.transition(400) }), 1e3)) } }, setTransition: function (e) { var t = this; t.params.scrollbar.el && t.scrollbar.el && t.scrollbar.$dragEl.transition(e) }, updateSize: function () { var e = this; if (e.params.scrollbar.el && e.scrollbar.el) { var t = e.scrollbar, a = t.$dragEl, i = t.$el; a[0].style.width = "", a[0].style.height = ""; var s, r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight, n = e.size / e.virtualSize, o = n * (r / e.size); s = "auto" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + "px" : a[0].style.height = s + "px", i[0].style.display = n >= 1 ? "none" : "", e.params.scrollbar.hide && (i[0].style.opacity = 0), C(t, { trackSize: r, divider: n, moveDivider: o, dragSize: s }), t.$el[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](e.params.scrollbar.lockClass) } }, getPointerPosition: function (e) { return this.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientX : e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].clientY : e.clientY }, setDragPosition: function (e) { var t, a = this, i = a.scrollbar, s = a.rtlTranslate, r = i.$el, n = i.dragSize, o = i.trackSize, l = i.dragStartPos; t = (i.getPointerPosition(e) - r.offset()[a.isHorizontal() ? "left" : "top"] - (null !== l ? l : n / 2)) / (o - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t); var d = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t; a.updateProgress(d), a.setTranslate(d), a.updateActiveIndex(), a.updateSlidesClasses() }, onDragStart: function (e) { var t = this, a = t.params.scrollbar, i = t.scrollbar, s = t.$wrapperEl, r = i.$el, n = i.$dragEl; t.scrollbar.isTouched = !0, t.scrollbar.dragStartPos = e.target === n[0] || e.target === n ? i.getPointerPosition(e) - e.target.getBoundingClientRect()[t.isHorizontal() ? "left" : "top"] : null, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css("opacity", 1), t.params.cssMode && t.$wrapperEl.css("scroll-snap-type", "none"), t.emit("scrollbarDragStart", e) }, onDragMove: function (e) { var t = this, a = t.scrollbar, i = t.$wrapperEl, s = a.$el, r = a.$dragEl; t.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, a.setDragPosition(e), i.transition(0), s.transition(0), r.transition(0), t.emit("scrollbarDragMove", e)) }, onDragEnd: function (e) { var t = this, a = t.params.scrollbar, i = t.scrollbar, s = t.$wrapperEl, r = i.$el; t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, t.params.cssMode && (t.$wrapperEl.css("scroll-snap-type", ""), s.transition("")), a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = E((function () { r.css("opacity", 0), r.transition(400) }), 1e3)), t.emit("scrollbarDragEnd", e), a.snapOnRelease && t.slideToClosest()) }, enableDraggable: function () { var e = this; if (e.params.scrollbar.el) { var t = r(), a = e.scrollbar, i = e.touchEventsTouch, s = e.touchEventsDesktop, n = e.params, o = e.support, l = a.$el[0], d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 }, p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 }; l && (o.touch ? (l.addEventListener(i.start, e.scrollbar.onDragStart, d), l.addEventListener(i.move, e.scrollbar.onDragMove, d), l.addEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.addEventListener(s.start, e.scrollbar.onDragStart, d), t.addEventListener(s.move, e.scrollbar.onDragMove, d), t.addEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, disableDraggable: function () { var e = this; if (e.params.scrollbar.el) { var t = r(), a = e.scrollbar, i = e.touchEventsTouch, s = e.touchEventsDesktop, n = e.params, o = e.support, l = a.$el[0], d = !(!o.passiveListener || !n.passiveListeners) && { passive: !1, capture: !1 }, p = !(!o.passiveListener || !n.passiveListeners) && { passive: !0, capture: !1 }; l && (o.touch ? (l.removeEventListener(i.start, e.scrollbar.onDragStart, d), l.removeEventListener(i.move, e.scrollbar.onDragMove, d), l.removeEventListener(i.end, e.scrollbar.onDragEnd, p)) : (l.removeEventListener(s.start, e.scrollbar.onDragStart, d), t.removeEventListener(s.move, e.scrollbar.onDragMove, d), t.removeEventListener(s.end, e.scrollbar.onDragEnd, p))) } }, init: function () { var e = this; if (e.params.scrollbar.el) { var t = e.scrollbar, a = e.$el, i = e.params.scrollbar, s = m(i.el); e.params.uniqueNavElements && "string" == typeof i.el && s.length > 1 && 1 === a.find(i.el).length && (s = a.find(i.el)); var r = s.find("." + e.params.scrollbar.dragClass); 0 === r.length && (r = m('<div class="' + e.params.scrollbar.dragClass + '"></div>'), s.append(r)), C(t, { $el: s, el: s[0], $dragEl: r, dragEl: r[0] }), i.draggable && t.enableDraggable() } }, destroy: function () { this.scrollbar.disableDraggable() } }, ee = { setTransform: function (e, t) { var a = this.rtl, i = m(e), s = a ? -1 : 1, r = i.attr("data-swiper-parallax") || "0", n = i.attr("data-swiper-parallax-x"), o = i.attr("data-swiper-parallax-y"), l = i.attr("data-swiper-parallax-scale"), d = i.attr("data-swiper-parallax-opacity"); if (n || o ? (n = n || "0", o = o || "0") : this.isHorizontal() ? (n = r, o = "0") : (o = r, n = "0"), n = n.indexOf("%") >= 0 ? parseInt(n, 10) * t * s + "%" : n * t * s + "px", o = o.indexOf("%") >= 0 ? parseInt(o, 10) * t + "%" : o * t + "px", null != d) { var p = d - (d - 1) * (1 - Math.abs(t)); i[0].style.opacity = p } if (null == l) i.transform("translate3d(" + n + ", " + o + ", 0px)"); else { var c = l - (l - 1) * (1 - Math.abs(t)); i.transform("translate3d(" + n + ", " + o + ", 0px) scale(" + c + ")") } }, setTranslate: function () { var e = this, t = e.$el, a = e.slides, i = e.progress, s = e.snapGrid; t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function (t) { e.parallax.setTransform(t, i) })), a.each((function (t, a) { var r = t.progress; e.params.slidesPerGroup > 1 && "auto" !== e.params.slidesPerView && (r += Math.ceil(a / 2) - i * (s.length - 1)), r = Math.min(Math.max(r, -1), 1), m(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function (t) { e.parallax.setTransform(t, r) })) })) }, setTransition: function (e) { void 0 === e && (e = this.params.speed); this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function (t) { var a = m(t), i = parseInt(a.attr("data-swiper-parallax-duration"), 10) || e; 0 === e && (i = 0), a.transition(i) })) } }, te = { getDistanceBetweenTouches: function (e) { if (e.targetTouches.length < 2) return 1; var t = e.targetTouches[0].pageX, a = e.targetTouches[0].pageY, i = e.targetTouches[1].pageX, s = e.targetTouches[1].pageY; return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2)) }, onGestureStart: function (e) { var t = this, a = t.support, i = t.params.zoom, s = t.zoom, r = s.gesture; if (s.fakeGestureTouched = !1, s.fakeGestureMoved = !1, !a.gestures) { if ("touchstart" !== e.type || "touchstart" === e.type && e.targetTouches.length < 2) return; s.fakeGestureTouched = !0, r.scaleStart = te.getDistanceBetweenTouches(e) } r.$slideEl && r.$slideEl.length || (r.$slideEl = m(e.target).closest("." + t.params.slideClass), 0 === r.$slideEl.length && (r.$slideEl = t.slides.eq(t.activeIndex)), r.$imageEl = r.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), r.$imageWrapEl = r.$imageEl.parent("." + i.containerClass), r.maxRatio = r.$imageWrapEl.attr("data-swiper-zoom") || i.maxRatio, 0 !== r.$imageWrapEl.length) ? (r.$imageEl && r.$imageEl.transition(0), t.zoom.isScaling = !0) : r.$imageEl = void 0 }, onGestureChange: function (e) { var t = this, a = t.support, i = t.params.zoom, s = t.zoom, r = s.gesture; if (!a.gestures) { if ("touchmove" !== e.type || "touchmove" === e.type && e.targetTouches.length < 2) return; s.fakeGestureMoved = !0, r.scaleMove = te.getDistanceBetweenTouches(e) } r.$imageEl && 0 !== r.$imageEl.length ? (a.gestures ? s.scale = e.scale * s.currentScale : s.scale = r.scaleMove / r.scaleStart * s.currentScale, s.scale > r.maxRatio && (s.scale = r.maxRatio - 1 + Math.pow(s.scale - r.maxRatio + 1, .5)), s.scale < i.minRatio && (s.scale = i.minRatio + 1 - Math.pow(i.minRatio - s.scale + 1, .5)), r.$imageEl.transform("translate3d(0,0,0) scale(" + s.scale + ")")) : "gesturechange" === e.type && s.onGestureStart(e) }, onGestureEnd: function (e) { var t = this, a = t.device, i = t.support, s = t.params.zoom, r = t.zoom, n = r.gesture; if (!i.gestures) { if (!r.fakeGestureTouched || !r.fakeGestureMoved) return; if ("touchend" !== e.type || "touchend" === e.type && e.changedTouches.length < 2 && !a.android) return; r.fakeGestureTouched = !1, r.fakeGestureMoved = !1 } n.$imageEl && 0 !== n.$imageEl.length && (r.scale = Math.max(Math.min(r.scale, n.maxRatio), s.minRatio), n.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale(" + r.scale + ")"), r.currentScale = r.scale, r.isScaling = !1, 1 === r.scale && (n.$slideEl = void 0)) }, onTouchStart: function (e) { var t = this.device, a = this.zoom, i = a.gesture, s = a.image; i.$imageEl && 0 !== i.$imageEl.length && (s.isTouched || (t.android && e.cancelable && e.preventDefault(), s.isTouched = !0, s.touchesStart.x = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesStart.y = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY)) }, onTouchMove: function (e) { var t = this, a = t.zoom, i = a.gesture, s = a.image, r = a.velocity; if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) { s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = T(i.$imageWrapEl[0], "x") || 0, s.startY = T(i.$imageWrapEl[0], "y") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), t.rtl && (s.startX = -s.startX, s.startY = -s.startY)); var n = s.width * a.scale, o = s.height * a.scale; if (!(n < i.slideWidth && o < i.slideHeight)) { if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - o / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) { if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1); if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1) } e.cancelable && e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform("translate3d(" + s.currentX + "px, " + s.currentY + "px,0)") } } }, onTouchEnd: function () { var e = this.zoom, t = e.gesture, a = e.image, i = e.velocity; if (t.$imageEl && 0 !== t.$imageEl.length) { if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void (a.isMoved = !1); a.isTouched = !1, a.isMoved = !1; var s = 300, r = 300, n = i.x * s, o = a.currentX + n, l = i.y * r, d = a.currentY + l; 0 !== i.x && (s = Math.abs((o - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y)); var p = Math.max(s, r); a.currentX = o, a.currentY = d; var c = a.width * e.scale, u = a.height * e.scale; a.minX = Math.min(t.slideWidth / 2 - c / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - u / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform("translate3d(" + a.currentX + "px, " + a.currentY + "px,0)") } }, onTransitionEnd: function () { var e = this, t = e.zoom, a = t.gesture; a.$slideEl && e.previousIndex !== e.activeIndex && (a.$imageEl && a.$imageEl.transform("translate3d(0,0,0) scale(1)"), a.$imageWrapEl && a.$imageWrapEl.transform("translate3d(0,0,0)"), t.scale = 1, t.currentScale = 1, a.$slideEl = void 0, a.$imageEl = void 0, a.$imageWrapEl = void 0) }, toggle: function (e) { var t = this.zoom; t.scale && 1 !== t.scale ? t.out() : t.in(e) }, in: function (e) { var t, a, i, s, r, n, l, d, p, c, u, h, v, f, m, g, b = this, w = o(), y = b.zoom, E = b.params.zoom, x = y.gesture, T = y.image; (x.$slideEl || (b.params.virtual && b.params.virtual.enabled && b.virtual ? x.$slideEl = b.$wrapperEl.children("." + b.params.slideActiveClass) : x.$slideEl = b.slides.eq(b.activeIndex), x.$imageEl = x.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), x.$imageWrapEl = x.$imageEl.parent("." + E.containerClass)), x.$imageEl && 0 !== x.$imageEl.length) && (x.$slideEl.addClass("" + E.zoomedSlideClass), void 0 === T.touchesStart.x && e ? (t = "touchend" === e.type ? e.changedTouches[0].pageX : e.pageX, a = "touchend" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = T.touchesStart.x, a = T.touchesStart.y), y.scale = x.$imageWrapEl.attr("data-swiper-zoom") || E.maxRatio, y.currentScale = x.$imageWrapEl.attr("data-swiper-zoom") || E.maxRatio, e ? (m = x.$slideEl[0].offsetWidth, g = x.$slideEl[0].offsetHeight, i = x.$slideEl.offset().left + w.scrollX + m / 2 - t, s = x.$slideEl.offset().top + w.scrollY + g / 2 - a, l = x.$imageEl[0].offsetWidth, d = x.$imageEl[0].offsetHeight, p = l * y.scale, c = d * y.scale, v = -(u = Math.min(m / 2 - p / 2, 0)), f = -(h = Math.min(g / 2 - c / 2, 0)), (r = i * y.scale) < u && (r = u), r > v && (r = v), (n = s * y.scale) < h && (n = h), n > f && (n = f)) : (r = 0, n = 0), x.$imageWrapEl.transition(300).transform("translate3d(" + r + "px, " + n + "px,0)"), x.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + y.scale + ")")) }, out: function () { var e = this, t = e.zoom, a = e.params.zoom, i = t.gesture; i.$slideEl || (e.params.virtual && e.params.virtual.enabled && e.virtual ? i.$slideEl = e.$wrapperEl.children("." + e.params.slideActiveClass) : i.$slideEl = e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"), i.$imageWrapEl = i.$imageEl.parent("." + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"), i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"), i.$slideEl.removeClass("" + a.zoomedSlideClass), i.$slideEl = void 0) }, toggleGestures: function (e) { var t = this, a = t.zoom, i = a.slideSelector, s = a.passiveListener; t.$wrapperEl[e]("gesturestart", i, a.onGestureStart, s), t.$wrapperEl[e]("gesturechange", i, a.onGestureChange, s), t.$wrapperEl[e]("gestureend", i, a.onGestureEnd, s) }, enableGestures: function () { this.zoom.gesturesEnabled || (this.zoom.gesturesEnabled = !0, this.zoom.toggleGestures("on")) }, disableGestures: function () { this.zoom.gesturesEnabled && (this.zoom.gesturesEnabled = !1, this.zoom.toggleGestures("off")) }, enable: function () { var e = this, t = e.support, a = e.zoom; if (!a.enabled) { a.enabled = !0; var i = !("touchstart" !== e.touchEvents.start || !t.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 }, s = !t.passiveListener || { passive: !1, capture: !0 }, r = "." + e.params.slideClass; e.zoom.passiveListener = i, e.zoom.slideSelector = r, t.gestures ? (e.$wrapperEl.on(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.on(e.touchEvents.end, e.zoom.disableGestures, i)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, r, a.onGestureStart, i), e.$wrapperEl.on(e.touchEvents.move, r, a.onGestureChange, s), e.$wrapperEl.on(e.touchEvents.end, r, a.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.on(e.touchEvents.cancel, r, a.onGestureEnd, i)), e.$wrapperEl.on(e.touchEvents.move, "." + e.params.zoom.containerClass, a.onTouchMove, s) } }, disable: function () { var e = this, t = e.zoom; if (t.enabled) { var a = e.support; e.zoom.enabled = !1; var i = !("touchstart" !== e.touchEvents.start || !a.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 }, s = !a.passiveListener || { passive: !1, capture: !0 }, r = "." + e.params.slideClass; a.gestures ? (e.$wrapperEl.off(e.touchEvents.start, e.zoom.enableGestures, i), e.$wrapperEl.off(e.touchEvents.end, e.zoom.disableGestures, i)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, r, t.onGestureStart, i), e.$wrapperEl.off(e.touchEvents.move, r, t.onGestureChange, s), e.$wrapperEl.off(e.touchEvents.end, r, t.onGestureEnd, i), e.touchEvents.cancel && e.$wrapperEl.off(e.touchEvents.cancel, r, t.onGestureEnd, i)), e.$wrapperEl.off(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove, s) } } }, ae = { loadInSlide: function (e, t) { void 0 === t && (t = !0); var a = this, i = a.params.lazy; if (void 0 !== e && 0 !== a.slides.length) { var s = a.virtual && a.params.virtual.enabled ? a.$wrapperEl.children("." + a.params.slideClass + '[data-swiper-slide-index="' + e + '"]') : a.slides.eq(e), r = s.find("." + i.elementClass + ":not(." + i.loadedClass + "):not(." + i.loadingClass + ")"); !s.hasClass(i.elementClass) || s.hasClass(i.loadedClass) || s.hasClass(i.loadingClass) || r.push(s[0]), 0 !== r.length && r.each((function (e) { var r = m(e); r.addClass(i.loadingClass); var n = r.attr("data-background"), o = r.attr("data-src"), l = r.attr("data-srcset"), d = r.attr("data-sizes"), p = r.parent("picture"); a.loadImage(r[0], o || n, l, d, !1, (function () { if (null != a && a && (!a || a.params) && !a.destroyed) { if (n ? (r.css("background-image", 'url("' + n + '")'), r.removeAttr("data-background")) : (l && (r.attr("srcset", l), r.removeAttr("data-srcset")), d && (r.attr("sizes", d), r.removeAttr("data-sizes")), p.length && p.children("source").each((function (e) { var t = m(e); t.attr("data-srcset") && (t.attr("srcset", t.attr("data-srcset")), t.removeAttr("data-srcset")) })), o && (r.attr("src", o), r.removeAttr("data-src"))), r.addClass(i.loadedClass).removeClass(i.loadingClass), s.find("." + i.preloaderClass).remove(), a.params.loop && t) { var e = s.attr("data-swiper-slide-index"); if (s.hasClass(a.params.slideDuplicateClass)) { var c = a.$wrapperEl.children('[data-swiper-slide-index="' + e + '"]:not(.' + a.params.slideDuplicateClass + ")"); a.lazy.loadInSlide(c.index(), !1) } else { var u = a.$wrapperEl.children("." + a.params.slideDuplicateClass + '[data-swiper-slide-index="' + e + '"]'); a.lazy.loadInSlide(u.index(), !1) } } a.emit("lazyImageReady", s[0], r[0]), a.params.autoHeight && a.updateAutoHeight() } })), a.emit("lazyImageLoad", s[0], r[0]) })) } }, load: function () { var e = this, t = e.$wrapperEl, a = e.params, i = e.slides, s = e.activeIndex, r = e.virtual && a.virtual.enabled, n = a.lazy, o = a.slidesPerView; function l(e) { if (r) { if (t.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]').length) return !0 } else if (i[e]) return !0; return !1 } function d(e) { return r ? m(e).attr("data-swiper-slide-index") : m(e).index() } if ("auto" === o && (o = 0), e.lazy.initialImageLoaded || (e.lazy.initialImageLoaded = !0), e.params.watchSlidesVisibility) t.children("." + a.slideVisibleClass).each((function (t) { var a = r ? m(t).attr("data-swiper-slide-index") : m(t).index(); e.lazy.loadInSlide(a) })); else if (o > 1) for (var p = s; p < s + o; p += 1)l(p) && e.lazy.loadInSlide(p); else e.lazy.loadInSlide(s); if (n.loadPrevNext) if (o > 1 || n.loadPrevNextAmount && n.loadPrevNextAmount > 1) { for (var c = n.loadPrevNextAmount, u = o, h = Math.min(s + u + Math.max(c, u), i.length), v = Math.max(s - Math.max(u, c), 0), f = s + o; f < h; f += 1)l(f) && e.lazy.loadInSlide(f); for (var g = v; g < s; g += 1)l(g) && e.lazy.loadInSlide(g) } else { var b = t.children("." + a.slideNextClass); b.length > 0 && e.lazy.loadInSlide(d(b)); var w = t.children("." + a.slidePrevClass); w.length > 0 && e.lazy.loadInSlide(d(w)) } }, checkInViewOnLoad: function () { var e = o(), t = this; if (t && !t.destroyed) { var a = t.params.lazy.scrollingElement ? m(t.params.lazy.scrollingElement) : m(e), i = a[0] === e, s = i ? e.innerWidth : a[0].offsetWidth, r = i ? e.innerHeight : a[0].offsetHeight, n = t.$el.offset(), l = !1; t.rtlTranslate && (n.left -= t.$el[0].scrollLeft); for (var d = [[n.left, n.top], [n.left + t.width, n.top], [n.left, n.top + t.height], [n.left + t.width, n.top + t.height]], p = 0; p < d.length; p += 1) { var c = d[p]; if (c[0] >= 0 && c[0] <= s && c[1] >= 0 && c[1] <= r) { if (0 === c[0] && 0 === c[1]) continue; l = !0 } } l ? (t.lazy.load(), a.off("scroll", t.lazy.checkInViewOnLoad)) : t.lazy.scrollHandlerAttached || (t.lazy.scrollHandlerAttached = !0, a.on("scroll", t.lazy.checkInViewOnLoad)) } } }, ie = { LinearSpline: function (e, t) { var a, i, s, r, n, o = function (e, t) { for (i = -1, a = e.length; a - i > 1;)e[s = a + i >> 1] <= t ? i = s : a = s; return a }; return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) { return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0 }, this }, getInterpolateFunction: function (e) { var t = this; t.controller.spline || (t.controller.spline = t.params.loop ? new ie.LinearSpline(t.slidesGrid, e.slidesGrid) : new ie.LinearSpline(t.snapGrid, e.snapGrid)) }, setTranslate: function (e, t) { var a, i, s = this, r = s.controller.control, n = s.constructor; function o(e) { var t = s.rtlTranslate ? -s.translate : s.translate; "slide" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && "container" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses() } if (Array.isArray(r)) for (var l = 0; l < r.length; l += 1)r[l] !== t && r[l] instanceof n && o(r[l]); else r instanceof n && t !== r && o(r) }, setTransition: function (e, t) { var a, i = this, s = i.constructor, r = i.controller.control; function n(t) { t.setTransition(e, i), 0 !== e && (t.transitionStart(), t.params.autoHeight && E((function () { t.updateAutoHeight() })), t.$wrapperEl.transitionEnd((function () { r && (t.params.loop && "slide" === i.params.controller.by && t.loopFix(), t.transitionEnd()) }))) } if (Array.isArray(r)) for (a = 0; a < r.length; a += 1)r[a] !== t && r[a] instanceof s && n(r[a]); else r instanceof s && t !== r && n(r) } }, se = { getRandomNumber: function (e) { void 0 === e && (e = 16); return "x".repeat(e).replace(/x/g, (function () { return Math.round(16 * Math.random()).toString(16) })) }, makeElFocusable: function (e) { return e.attr("tabIndex", "0"), e }, makeElNotFocusable: function (e) { return e.attr("tabIndex", "-1"), e }, addElRole: function (e, t) { return e.attr("role", t), e }, addElRoleDescription: function (e, t) { return e.attr("aria-roledescription", t), e }, addElControls: function (e, t) { return e.attr("aria-controls", t), e }, addElLabel: function (e, t) { return e.attr("aria-label", t), e }, addElId: function (e, t) { return e.attr("id", t), e }, addElLive: function (e, t) { return e.attr("aria-live", t), e }, disableEl: function (e) { return e.attr("aria-disabled", !0), e }, enableEl: function (e) { return e.attr("aria-disabled", !1), e }, onEnterOrSpaceKey: function (e) { if (13 === e.keyCode || 32 === e.keyCode) { var t = this, a = t.params.a11y, i = m(e.target); t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is(z(t.params.pagination.bulletClass)) && i[0].click() } }, notify: function (e) { var t = this.a11y.liveRegion; 0 !== t.length && (t.html(""), t.html(e)) }, updateNavigation: function () { var e = this; if (!e.params.loop && e.navigation) { var t = e.navigation, a = t.$nextEl, i = t.$prevEl; i && i.length > 0 && (e.isBeginning ? (e.a11y.disableEl(i), e.a11y.makeElNotFocusable(i)) : (e.a11y.enableEl(i), e.a11y.makeElFocusable(i))), a && a.length > 0 && (e.isEnd ? (e.a11y.disableEl(a), e.a11y.makeElNotFocusable(a)) : (e.a11y.enableEl(a), e.a11y.makeElFocusable(a))) } }, updatePagination: function () { var e = this, t = e.params.a11y; e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.bullets.each((function (a) { var i = m(a); e.a11y.makeElFocusable(i), e.params.pagination.renderBullet || (e.a11y.addElRole(i, "button"), e.a11y.addElLabel(i, t.paginationBulletMessage.replace(/\{\{index\}\}/, i.index() + 1))) })) }, init: function () { var e = this, t = e.params.a11y; e.$el.append(e.a11y.liveRegion); var a = e.$el; t.containerRoleDescriptionMessage && e.a11y.addElRoleDescription(a, t.containerRoleDescriptionMessage), t.containerMessage && e.a11y.addElLabel(a, t.containerMessage); var i, s, r, n = e.$wrapperEl, o = n.attr("id") || "swiper-wrapper-" + e.a11y.getRandomNumber(16); e.a11y.addElId(n, o), i = e.params.autoplay && e.params.autoplay.enabled ? "off" : "polite", e.a11y.addElLive(n, i), t.itemRoleDescriptionMessage && e.a11y.addElRoleDescription(m(e.slides), t.itemRoleDescriptionMessage), e.a11y.addElRole(m(e.slides), "group"), e.slides.each((function (a) { var i = m(a), s = t.slideLabelMessage.replace(/\{\{index\}\}/, i.index() + 1).replace(/\{\{slidesLength\}\}/, e.slides.length); e.a11y.addElLabel(i, s) })), e.navigation && e.navigation.$nextEl && (s = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (r = e.navigation.$prevEl), s && s.length && (e.a11y.makeElFocusable(s), "BUTTON" !== s[0].tagName && (e.a11y.addElRole(s, "button"), s.on("keydown", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(s, t.nextSlideMessage), e.a11y.addElControls(s, o)), r && r.length && (e.a11y.makeElFocusable(r), "BUTTON" !== r[0].tagName && (e.a11y.addElRole(r, "button"), r.on("keydown", e.a11y.onEnterOrSpaceKey)), e.a11y.addElLabel(r, t.prevSlideMessage), e.a11y.addElControls(r, o)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on("keydown", z(e.params.pagination.bulletClass), e.a11y.onEnterOrSpaceKey) }, destroy: function () { var e, t, a = this; a.a11y.liveRegion && a.a11y.liveRegion.length > 0 && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off("keydown", a.a11y.onEnterOrSpaceKey), t && t.off("keydown", a.a11y.onEnterOrSpaceKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off("keydown", z(a.params.pagination.bulletClass), a.a11y.onEnterOrSpaceKey) } }, re = { init: function () { var e = this, t = o(); if (e.params.history) { if (!t.history || !t.history.pushState) return e.params.history.enabled = !1, void (e.params.hashNavigation.enabled = !0); var a = e.history; a.initialized = !0, a.paths = re.getPathValues(e.params.url), (a.paths.key || a.paths.value) && (a.scrollToSlide(0, a.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || t.addEventListener("popstate", e.history.setHistoryPopState)) } }, destroy: function () { var e = o(); this.params.history.replaceState || e.removeEventListener("popstate", this.history.setHistoryPopState) }, setHistoryPopState: function () { var e = this; e.history.paths = re.getPathValues(e.params.url), e.history.scrollToSlide(e.params.speed, e.history.paths.value, !1) }, getPathValues: function (e) { var t = o(), a = (e ? new URL(e) : t.location).pathname.slice(1).split("/").filter((function (e) { return "" !== e })), i = a.length; return { key: a[i - 2], value: a[i - 1] } }, setHistory: function (e, t) { var a = this, i = o(); if (a.history.initialized && a.params.history.enabled) { var s; s = a.params.url ? new URL(a.params.url) : i.location; var r = a.slides.eq(t), n = re.slugify(r.attr("data-history")); s.pathname.includes(e) || (n = e + "/" + n); var l = i.history.state; l && l.value === n || (a.params.history.replaceState ? i.history.replaceState({ value: n }, null, n) : i.history.pushState({ value: n }, null, n)) } }, slugify: function (e) { return e.toString().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "") }, scrollToSlide: function (e, t, a) { var i = this; if (t) for (var s = 0, r = i.slides.length; s < r; s += 1) { var n = i.slides.eq(s); if (re.slugify(n.attr("data-history")) === t && !n.hasClass(i.params.slideDuplicateClass)) { var o = n.index(); i.slideTo(o, e, a) } } else i.slideTo(0, e, a) } }, ne = { onHashCange: function () { var e = this, t = r(); e.emit("hashChange"); var a = t.location.hash.replace("#", ""); if (a !== e.slides.eq(e.activeIndex).attr("data-hash")) { var i = e.$wrapperEl.children("." + e.params.slideClass + '[data-hash="' + a + '"]').index(); if (void 0 === i) return; e.slideTo(i) } }, setHash: function () { var e = this, t = o(), a = r(); if (e.hashNavigation.initialized && e.params.hashNavigation.enabled) if (e.params.hashNavigation.replaceState && t.history && t.history.replaceState) t.history.replaceState(null, null, "#" + e.slides.eq(e.activeIndex).attr("data-hash") || ""), e.emit("hashSet"); else { var i = e.slides.eq(e.activeIndex), s = i.attr("data-hash") || i.attr("data-history"); a.location.hash = s || "", e.emit("hashSet") } }, init: function () { var e = this, t = r(), a = o(); if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) { e.hashNavigation.initialized = !0; var i = t.location.hash.replace("#", ""); if (i) for (var s = 0, n = e.slides.length; s < n; s += 1) { var l = e.slides.eq(s); if ((l.attr("data-hash") || l.attr("data-history")) === i && !l.hasClass(e.params.slideDuplicateClass)) { var d = l.index(); e.slideTo(d, 0, e.params.runCallbacksOnInit, !0) } } e.params.hashNavigation.watchState && m(a).on("hashchange", e.hashNavigation.onHashCange) } }, destroy: function () { var e = o(); this.params.hashNavigation.watchState && m(e).off("hashchange", this.hashNavigation.onHashCange) } }, oe = { run: function () { var e = this, t = e.slides.eq(e.activeIndex), a = e.params.autoplay.delay; t.attr("data-swiper-autoplay") && (a = t.attr("data-swiper-autoplay") || e.params.autoplay.delay), clearTimeout(e.autoplay.timeout), e.autoplay.timeout = E((function () { var t; e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), t = e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit("autoplay")) : (t = e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.params.loop ? (e.loopFix(), t = e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (t = e.slideTo(0, e.params.speed, !0, !0), e.emit("autoplay")) : (t = e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")), (e.params.cssMode && e.autoplay.running || !1 === t) && e.autoplay.run() }), a) }, start: function () { var e = this; return void 0 === e.autoplay.timeout && (!e.autoplay.running && (e.autoplay.running = !0, e.emit("autoplayStart"), e.autoplay.run(), !0)) }, stop: function () { var e = this; return !!e.autoplay.running && (void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit("autoplayStop"), !0)) }, pause: function (e) { var t = this; t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run()))) }, onVisibilityChange: function () { var e = this, t = r(); "hidden" === t.visibilityState && e.autoplay.running && e.autoplay.pause(), "visible" === t.visibilityState && e.autoplay.paused && (e.autoplay.run(), e.autoplay.paused = !1) }, onTransitionEnd: function (e) { var t = this; t && !t.destroyed && t.$wrapperEl && e.target === t.$wrapperEl[0] && (t.$wrapperEl[0].removeEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop()) } }, le = { setTranslate: function () { for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) { var i = e.slides.eq(a), s = -i[0].swiperSlideOffset; e.params.virtualTranslate || (s -= e.translate); var r = 0; e.isHorizontal() || (r = s, s = 0); var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0); i.css({ opacity: n }).transform("translate3d(" + s + "px, " + r + "px, 0px)") } }, setTransition: function (e) { var t = this, a = t.slides, i = t.$wrapperEl; if (a.transition(e), t.params.virtualTranslate && 0 !== e) { var s = !1; a.transitionEnd((function () { if (!s && t && !t.destroyed) { s = !0, t.animating = !1; for (var e = ["webkitTransitionEnd", "transitionend"], a = 0; a < e.length; a += 1)i.trigger(e[a]) } })) } } }, de = { setTranslate: function () { var e, t = this, a = t.$el, i = t.$wrapperEl, s = t.slides, r = t.width, n = t.height, o = t.rtlTranslate, l = t.size, d = t.browser, p = t.params.cubeEffect, c = t.isHorizontal(), u = t.virtual && t.params.virtual.enabled, h = 0; p.shadow && (c ? (0 === (e = i.find(".swiper-cube-shadow")).length && (e = m('<div class="swiper-cube-shadow"></div>'), i.append(e)), e.css({ height: r + "px" })) : 0 === (e = a.find(".swiper-cube-shadow")).length && (e = m('<div class="swiper-cube-shadow"></div>'), a.append(e))); for (var v = 0; v < s.length; v += 1) { var f = s.eq(v), g = v; u && (g = parseInt(f.attr("data-swiper-slide-index"), 10)); var b = 90 * g, w = Math.floor(b / 360); o && (b = -b, w = Math.floor(-b / 360)); var y = Math.max(Math.min(f[0].progress, 1), -1), E = 0, x = 0, T = 0; g % 4 == 0 ? (E = 4 * -w * l, T = 0) : (g - 1) % 4 == 0 ? (E = 0, T = 4 * -w * l) : (g - 2) % 4 == 0 ? (E = l + 4 * w * l, T = l) : (g - 3) % 4 == 0 && (E = -l, T = 3 * l + 4 * l * w), o && (E = -E), c || (x = E, E = 0); var S = "rotateX(" + (c ? 0 : -b) + "deg) rotateY(" + (c ? b : 0) + "deg) translate3d(" + E + "px, " + x + "px, " + T + "px)"; if (y <= 1 && y > -1 && (h = 90 * g + 90 * y, o && (h = 90 * -g - 90 * y)), f.transform(S), p.slideShadows) { var C = c ? f.find(".swiper-slide-shadow-left") : f.find(".swiper-slide-shadow-top"), M = c ? f.find(".swiper-slide-shadow-right") : f.find(".swiper-slide-shadow-bottom"); 0 === C.length && (C = m('<div class="swiper-slide-shadow-' + (c ? "left" : "top") + '"></div>'), f.append(C)), 0 === M.length && (M = m('<div class="swiper-slide-shadow-' + (c ? "right" : "bottom") + '"></div>'), f.append(M)), C.length && (C[0].style.opacity = Math.max(-y, 0)), M.length && (M[0].style.opacity = Math.max(y, 0)) } } if (i.css({ "-webkit-transform-origin": "50% 50% -" + l / 2 + "px", "-moz-transform-origin": "50% 50% -" + l / 2 + "px", "-ms-transform-origin": "50% 50% -" + l / 2 + "px", "transform-origin": "50% 50% -" + l / 2 + "px" }), p.shadow) if (c) e.transform("translate3d(0px, " + (r / 2 + p.shadowOffset) + "px, " + -r / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + p.shadowScale + ")"); else { var z = Math.abs(h) - 90 * Math.floor(Math.abs(h) / 90), P = 1.5 - (Math.sin(2 * z * Math.PI / 360) / 2 + Math.cos(2 * z * Math.PI / 360) / 2), k = p.shadowScale, L = p.shadowScale / P, $ = p.shadowOffset; e.transform("scale3d(" + k + ", 1, " + L + ") translate3d(0px, " + (n / 2 + $) + "px, " + -n / 2 / L + "px) rotateX(-90deg)") } var I = d.isSafari || d.isWebView ? -l / 2 : 0; i.transform("translate3d(0px,0," + I + "px) rotateX(" + (t.isHorizontal() ? 0 : h) + "deg) rotateY(" + (t.isHorizontal() ? -h : 0) + "deg)") }, setTransition: function (e) { var t = this, a = t.$el; t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), t.params.cubeEffect.shadow && !t.isHorizontal() && a.find(".swiper-cube-shadow").transition(e) } }, pe = { setTranslate: function () { for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) { var s = t.eq(i), r = s[0].progress; e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1)); var n = -180 * r, o = 0, l = -s[0].swiperSlideOffset, d = 0; if (e.isHorizontal() ? a && (n = -n) : (d = l, l = 0, o = -n, n = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) { var p = e.isHorizontal() ? s.find(".swiper-slide-shadow-left") : s.find(".swiper-slide-shadow-top"), c = e.isHorizontal() ? s.find(".swiper-slide-shadow-right") : s.find(".swiper-slide-shadow-bottom"); 0 === p.length && (p = m('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "left" : "top") + '"></div>'), s.append(p)), 0 === c.length && (c = m('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "right" : "bottom") + '"></div>'), s.append(c)), p.length && (p[0].style.opacity = Math.max(-r, 0)), c.length && (c[0].style.opacity = Math.max(r, 0)) } s.transform("translate3d(" + l + "px, " + d + "px, 0px) rotateX(" + o + "deg) rotateY(" + n + "deg)") } }, setTransition: function (e) { var t = this, a = t.slides, i = t.activeIndex, s = t.$wrapperEl; if (a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), t.params.virtualTranslate && 0 !== e) { var r = !1; a.eq(i).transitionEnd((function () { if (!r && t && !t.destroyed) { r = !0, t.animating = !1; for (var e = ["webkitTransitionEnd", "transitionend"], a = 0; a < e.length; a += 1)s.trigger(e[a]) } })) } } }, ce = { setTranslate: function () { for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.slidesSizesGrid, r = e.params.coverflowEffect, n = e.isHorizontal(), o = e.translate, l = n ? t / 2 - o : a / 2 - o, d = n ? r.rotate : -r.rotate, p = r.depth, c = 0, u = i.length; c < u; c += 1) { var h = i.eq(c), v = s[c], f = (l - h[0].swiperSlideOffset - v / 2) / v * r.modifier, g = n ? d * f : 0, b = n ? 0 : d * f, w = -p * Math.abs(f), y = r.stretch; "string" == typeof y && -1 !== y.indexOf("%") && (y = parseFloat(r.stretch) / 100 * v); var E = n ? 0 : y * f, x = n ? y * f : 0, T = 1 - (1 - r.scale) * Math.abs(f); Math.abs(x) < .001 && (x = 0), Math.abs(E) < .001 && (E = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0), Math.abs(T) < .001 && (T = 0); var S = "translate3d(" + x + "px," + E + "px," + w + "px)  rotateX(" + b + "deg) rotateY(" + g + "deg) scale(" + T + ")"; if (h.transform(S), h[0].style.zIndex = 1 - Math.abs(Math.round(f)), r.slideShadows) { var C = n ? h.find(".swiper-slide-shadow-left") : h.find(".swiper-slide-shadow-top"), M = n ? h.find(".swiper-slide-shadow-right") : h.find(".swiper-slide-shadow-bottom"); 0 === C.length && (C = m('<div class="swiper-slide-shadow-' + (n ? "left" : "top") + '"></div>'), h.append(C)), 0 === M.length && (M = m('<div class="swiper-slide-shadow-' + (n ? "right" : "bottom") + '"></div>'), h.append(M)), C.length && (C[0].style.opacity = f > 0 ? f : 0), M.length && (M[0].style.opacity = -f > 0 ? -f : 0) } } }, setTransition: function (e) { this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e) } }, ue = { init: function () { var e = this, t = e.params.thumbs; if (e.thumbs.initialized) return !1; e.thumbs.initialized = !0; var a = e.constructor; return t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, C(e.thumbs.swiper.originalParams, { watchSlidesProgress: !0, slideToClickedSlide: !1 }), C(e.thumbs.swiper.params, { watchSlidesProgress: !0, slideToClickedSlide: !1 })) : S(t.swiper) && (e.thumbs.swiper = new a(C({}, t.swiper, { watchSlidesVisibility: !0, watchSlidesProgress: !0, slideToClickedSlide: !1 })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on("tap", e.thumbs.onThumbClick), !0 }, onThumbClick: function () { var e = this, t = e.thumbs.swiper; if (t) { var a = t.clickedIndex, i = t.clickedSlide; if (!(i && m(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) { var s; if (s = t.params.loop ? parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"), 10) : a, e.params.loop) { var r = e.activeIndex; e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex); var n = e.slides.eq(r).prevAll('[data-swiper-slide-index="' + s + '"]').eq(0).index(), o = e.slides.eq(r).nextAll('[data-swiper-slide-index="' + s + '"]').eq(0).index(); s = void 0 === n ? o : void 0 === o ? n : o - r < r - n ? o : n } e.slideTo(s) } } }, update: function (e) { var t = this, a = t.thumbs.swiper; if (a) { var i = "auto" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView, s = t.params.thumbs.autoScrollOffset, r = s && !a.params.loop; if (t.realIndex !== a.realIndex || r) { var n, o, l = a.activeIndex; if (a.params.loop) { a.slides.eq(l).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, l = a.activeIndex); var d = a.slides.eq(l).prevAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index(), p = a.slides.eq(l).nextAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index(); n = void 0 === d ? p : void 0 === p ? d : p - l == l - d ? l : p - l < l - d ? p : d, o = t.activeIndex > t.previousIndex ? "next" : "prev" } else o = (n = t.realIndex) > t.previousIndex ? "next" : "prev"; r && (n += "next" === o ? s : -1 * s), a.visibleSlidesIndexes && a.visibleSlidesIndexes.indexOf(n) < 0 && (a.params.centeredSlides ? n = n > l ? n - Math.floor(i / 2) + 1 : n + Math.floor(i / 2) - 1 : n > l && (n = n - i + 1), a.slideTo(n, e ? 0 : void 0)) } var c = 1, u = t.params.thumbs.slideThumbActiveClass; if (t.params.slidesPerView > 1 && !t.params.centeredSlides && (c = t.params.slidesPerView), t.params.thumbs.multipleActiveThumbs || (c = 1), c = Math.floor(c), a.slides.removeClass(u), a.params.loop || a.params.virtual && a.params.virtual.enabled) for (var h = 0; h < c; h += 1)a.$wrapperEl.children('[data-swiper-slide-index="' + (t.realIndex + h) + '"]').addClass(u); else for (var v = 0; v < c; v += 1)a.slides.eq(t.realIndex + v).addClass(u) } } }, he = [q, U, { name: "mousewheel", params: { mousewheel: { enabled: !1, releaseOnEdges: !1, invert: !1, forceToAxis: !1, sensitivity: 1, eventsTarget: "container", thresholdDelta: null, thresholdTime: null } }, create: function () { M(this, { mousewheel: { enabled: !1, lastScrollTime: x(), lastEventBeforeSnap: void 0, recentWheelEvents: [], enable: K.enable, disable: K.disable, handle: K.handle, handleMouseEnter: K.handleMouseEnter, handleMouseLeave: K.handleMouseLeave, animateSlider: K.animateSlider, releaseScroll: K.releaseScroll } }) }, on: { init: function (e) { !e.params.mousewheel.enabled && e.params.cssMode && e.mousewheel.disable(), e.params.mousewheel.enabled && e.mousewheel.enable() }, destroy: function (e) { e.params.cssMode && e.mousewheel.enable(), e.mousewheel.enabled && e.mousewheel.disable() } } }, { name: "navigation", params: { navigation: { nextEl: null, prevEl: null, hideOnClick: !1, disabledClass: "swiper-button-disabled", hiddenClass: "swiper-button-hidden", lockClass: "swiper-button-lock" } }, create: function () { M(this, { navigation: t({}, Z) }) }, on: { init: function (e) { e.navigation.init(), e.navigation.update() }, toEdge: function (e) { e.navigation.update() }, fromEdge: function (e) { e.navigation.update() }, destroy: function (e) { e.navigation.destroy() }, click: function (e, t) { var a = e.navigation, i = a.$nextEl, s = a.$prevEl, r = t.target; if (e.params.navigation.hideOnClick && !m(r).is(s) && !m(r).is(i)) { if (e.pagination && e.params.pagination && e.params.pagination.clickable && (e.pagination.el === r || e.pagination.el.contains(r))) return; var n; i ? n = i.hasClass(e.params.navigation.hiddenClass) : s && (n = s.hasClass(e.params.navigation.hiddenClass)), !0 === n ? e.emit("navigationShow") : e.emit("navigationHide"), i && i.toggleClass(e.params.navigation.hiddenClass), s && s.toggleClass(e.params.navigation.hiddenClass) } } } }, { name: "pagination", params: { pagination: { el: null, bulletElement: "span", clickable: !1, hideOnClick: !1, renderBullet: null, renderProgressbar: null, renderFraction: null, renderCustom: null, progressbarOpposite: !1, type: "bullets", dynamicBullets: !1, dynamicMainBullets: 1, formatFractionCurrent: function (e) { return e }, formatFractionTotal: function (e) { return e }, bulletClass: "swiper-pagination-bullet", bulletActiveClass: "swiper-pagination-bullet-active", modifierClass: "swiper-pagination-", currentClass: "swiper-pagination-current", totalClass: "swiper-pagination-total", hiddenClass: "swiper-pagination-hidden", progressbarFillClass: "swiper-pagination-progressbar-fill", progressbarOppositeClass: "swiper-pagination-progressbar-opposite", clickableClass: "swiper-pagination-clickable", lockClass: "swiper-pagination-lock" } }, create: function () { M(this, { pagination: t({ dynamicBulletIndex: 0 }, J) }) }, on: { init: function (e) { e.pagination.init(), e.pagination.render(), e.pagination.update() }, activeIndexChange: function (e) { (e.params.loop || void 0 === e.snapIndex) && e.pagination.update() }, snapIndexChange: function (e) { e.params.loop || e.pagination.update() }, slidesLengthChange: function (e) { e.params.loop && (e.pagination.render(), e.pagination.update()) }, snapGridLengthChange: function (e) { e.params.loop || (e.pagination.render(), e.pagination.update()) }, destroy: function (e) { e.pagination.destroy() }, click: function (e, t) { var a = t.target; if (e.params.pagination.el && e.params.pagination.hideOnClick && e.pagination.$el.length > 0 && !m(a).hasClass(e.params.pagination.bulletClass)) { if (e.navigation && (e.navigation.nextEl && a === e.navigation.nextEl || e.navigation.prevEl && a === e.navigation.prevEl)) return; !0 === e.pagination.$el.hasClass(e.params.pagination.hiddenClass) ? e.emit("paginationShow") : e.emit("paginationHide"), e.pagination.$el.toggleClass(e.params.pagination.hiddenClass) } } } }, { name: "scrollbar", params: { scrollbar: { el: null, dragSize: "auto", hide: !1, draggable: !1, snapOnRelease: !0, lockClass: "swiper-scrollbar-lock", dragClass: "swiper-scrollbar-drag" } }, create: function () { M(this, { scrollbar: t({ isTouched: !1, timeout: null, dragTimeout: null }, Q) }) }, on: { init: function (e) { e.scrollbar.init(), e.scrollbar.updateSize(), e.scrollbar.setTranslate() }, update: function (e) { e.scrollbar.updateSize() }, resize: function (e) { e.scrollbar.updateSize() }, observerUpdate: function (e) { e.scrollbar.updateSize() }, setTranslate: function (e) { e.scrollbar.setTranslate() }, setTransition: function (e, t) { e.scrollbar.setTransition(t) }, destroy: function (e) { e.scrollbar.destroy() } } }, { name: "parallax", params: { parallax: { enabled: !1 } }, create: function () { M(this, { parallax: t({}, ee) }) }, on: { beforeInit: function (e) { e.params.parallax.enabled && (e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, init: function (e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTranslate: function (e) { e.params.parallax.enabled && e.parallax.setTranslate() }, setTransition: function (e, t) { e.params.parallax.enabled && e.parallax.setTransition(t) } } }, { name: "zoom", params: { zoom: { enabled: !1, maxRatio: 3, minRatio: 1, toggle: !0, containerClass: "swiper-zoom-container", zoomedSlideClass: "swiper-slide-zoomed" } }, create: function () { var e = this; M(e, { zoom: t({ enabled: !1, scale: 1, currentScale: 1, isScaling: !1, gesture: { $slideEl: void 0, slideWidth: void 0, slideHeight: void 0, $imageEl: void 0, $imageWrapEl: void 0, maxRatio: 3 }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 } }, te) }); var a = 1; Object.defineProperty(e.zoom, "scale", { get: function () { return a }, set: function (t) { if (a !== t) { var i = e.zoom.gesture.$imageEl ? e.zoom.gesture.$imageEl[0] : void 0, s = e.zoom.gesture.$slideEl ? e.zoom.gesture.$slideEl[0] : void 0; e.emit("zoomChange", t, i, s) } a = t } }) }, on: { init: function (e) { e.params.zoom.enabled && e.zoom.enable() }, destroy: function (e) { e.zoom.disable() }, touchStart: function (e, t) { e.zoom.enabled && e.zoom.onTouchStart(t) }, touchEnd: function (e, t) { e.zoom.enabled && e.zoom.onTouchEnd(t) }, doubleTap: function (e, t) { !e.animating && e.params.zoom.enabled && e.zoom.enabled && e.params.zoom.toggle && e.zoom.toggle(t) }, transitionEnd: function (e) { e.zoom.enabled && e.params.zoom.enabled && e.zoom.onTransitionEnd() }, slideChange: function (e) { e.zoom.enabled && e.params.zoom.enabled && e.params.cssMode && e.zoom.onTransitionEnd() } } }, { name: "lazy", params: { lazy: { checkInView: !1, enabled: !1, loadPrevNext: !1, loadPrevNextAmount: 1, loadOnTransitionStart: !1, scrollingElement: "", elementClass: "swiper-lazy", loadingClass: "swiper-lazy-loading", loadedClass: "swiper-lazy-loaded", preloaderClass: "swiper-lazy-preloader" } }, create: function () { M(this, { lazy: t({ initialImageLoaded: !1 }, ae) }) }, on: { beforeInit: function (e) { e.params.lazy.enabled && e.params.preloadImages && (e.params.preloadImages = !1) }, init: function (e) { e.params.lazy.enabled && !e.params.loop && 0 === e.params.initialSlide && (e.params.lazy.checkInView ? e.lazy.checkInViewOnLoad() : e.lazy.load()) }, scroll: function (e) { e.params.freeMode && !e.params.freeModeSticky && e.lazy.load() }, "scrollbarDragMove resize _freeModeNoMomentumRelease": function (e) { e.params.lazy.enabled && e.lazy.load() }, transitionStart: function (e) { e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load() }, transitionEnd: function (e) { e.params.lazy.enabled && !e.params.lazy.loadOnTransitionStart && e.lazy.load() }, slideChange: function (e) { e.params.lazy.enabled && e.params.cssMode && e.lazy.load() } } }, { name: "controller", params: { controller: { control: void 0, inverse: !1, by: "slide" } }, create: function () { M(this, { controller: t({ control: this.params.controller.control }, ie) }) }, on: { update: function (e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, resize: function (e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, observerUpdate: function (e) { e.controller.control && e.controller.spline && (e.controller.spline = void 0, delete e.controller.spline) }, setTranslate: function (e, t, a) { e.controller.control && e.controller.setTranslate(t, a) }, setTransition: function (e, t, a) { e.controller.control && e.controller.setTransition(t, a) } } }, { name: "a11y", params: { a11y: { enabled: !0, notificationClass: "swiper-notification", prevSlideMessage: "Previous slide", nextSlideMessage: "Next slide", firstSlideMessage: "This is the first slide", lastSlideMessage: "This is the last slide", paginationBulletMessage: "Go to slide {{index}}", slideLabelMessage: "{{index}} / {{slidesLength}}", containerMessage: null, containerRoleDescriptionMessage: null, itemRoleDescriptionMessage: null } }, create: function () { M(this, { a11y: t({}, se, { liveRegion: m('<span class="' + this.params.a11y.notificationClass + '" aria-live="assertive" aria-atomic="true"></span>') }) }) }, on: { afterInit: function (e) { e.params.a11y.enabled && (e.a11y.init(), e.a11y.updateNavigation()) }, toEdge: function (e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, fromEdge: function (e) { e.params.a11y.enabled && e.a11y.updateNavigation() }, paginationUpdate: function (e) { e.params.a11y.enabled && e.a11y.updatePagination() }, destroy: function (e) { e.params.a11y.enabled && e.a11y.destroy() } } }, { name: "history", params: { history: { enabled: !1, replaceState: !1, key: "slides" } }, create: function () { M(this, { history: t({}, re) }) }, on: { init: function (e) { e.params.history.enabled && e.history.init() }, destroy: function (e) { e.params.history.enabled && e.history.destroy() }, transitionEnd: function (e) { e.history.initialized && e.history.setHistory(e.params.history.key, e.activeIndex) }, slideChange: function (e) { e.history.initialized && e.params.cssMode && e.history.setHistory(e.params.history.key, e.activeIndex) } } }, { name: "hash-navigation", params: { hashNavigation: { enabled: !1, replaceState: !1, watchState: !1 } }, create: function () { M(this, { hashNavigation: t({ initialized: !1 }, ne) }) }, on: { init: function (e) { e.params.hashNavigation.enabled && e.hashNavigation.init() }, destroy: function (e) { e.params.hashNavigation.enabled && e.hashNavigation.destroy() }, transitionEnd: function (e) { e.hashNavigation.initialized && e.hashNavigation.setHash() }, slideChange: function (e) { e.hashNavigation.initialized && e.params.cssMode && e.hashNavigation.setHash() } } }, { name: "autoplay", params: { autoplay: { enabled: !1, delay: 3e3, waitForTransition: !0, disableOnInteraction: !0, stopOnLastSlide: !1, reverseDirection: !1 } }, create: function () { M(this, { autoplay: t({}, oe, { running: !1, paused: !1 }) }) }, on: { init: function (e) { e.params.autoplay.enabled && (e.autoplay.start(), r().addEventListener("visibilitychange", e.autoplay.onVisibilityChange)) }, beforeTransitionStart: function (e, t, a) { e.autoplay.running && (a || !e.params.autoplay.disableOnInteraction ? e.autoplay.pause(t) : e.autoplay.stop()) }, sliderFirstMove: function (e) { e.autoplay.running && (e.params.autoplay.disableOnInteraction ? e.autoplay.stop() : e.autoplay.pause()) }, touchEnd: function (e) { e.params.cssMode && e.autoplay.paused && !e.params.autoplay.disableOnInteraction && e.autoplay.run() }, destroy: function (e) { e.autoplay.running && e.autoplay.stop(), r().removeEventListener("visibilitychange", e.autoplay.onVisibilityChange) } } }, { name: "effect-fade", params: { fadeEffect: { crossFade: !1 } }, create: function () { M(this, { fadeEffect: t({}, le) }) }, on: { beforeInit: function (e) { if ("fade" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + "fade"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 }; C(e.params, t), C(e.originalParams, t) } }, setTranslate: function (e) { "fade" === e.params.effect && e.fadeEffect.setTranslate() }, setTransition: function (e, t) { "fade" === e.params.effect && e.fadeEffect.setTransition(t) } } }, { name: "effect-cube", params: { cubeEffect: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 } }, create: function () { M(this, { cubeEffect: t({}, de) }) }, on: { beforeInit: function (e) { if ("cube" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + "cube"), e.classNames.push(e.params.containerModifierClass + "3d"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, resistanceRatio: 0, spaceBetween: 0, centeredSlides: !1, virtualTranslate: !0 }; C(e.params, t), C(e.originalParams, t) } }, setTranslate: function (e) { "cube" === e.params.effect && e.cubeEffect.setTranslate() }, setTransition: function (e, t) { "cube" === e.params.effect && e.cubeEffect.setTransition(t) } } }, { name: "effect-flip", params: { flipEffect: { slideShadows: !0, limitRotation: !0 } }, create: function () { M(this, { flipEffect: t({}, pe) }) }, on: { beforeInit: function (e) { if ("flip" === e.params.effect) { e.classNames.push(e.params.containerModifierClass + "flip"), e.classNames.push(e.params.containerModifierClass + "3d"); var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 }; C(e.params, t), C(e.originalParams, t) } }, setTranslate: function (e) { "flip" === e.params.effect && e.flipEffect.setTranslate() }, setTransition: function (e, t) { "flip" === e.params.effect && e.flipEffect.setTransition(t) } } }, { name: "effect-coverflow", params: { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, scale: 1, modifier: 1, slideShadows: !0 } }, create: function () { M(this, { coverflowEffect: t({}, ce) }) }, on: { beforeInit: function (e) { "coverflow" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + "coverflow"), e.classNames.push(e.params.containerModifierClass + "3d"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0) }, setTranslate: function (e) { "coverflow" === e.params.effect && e.coverflowEffect.setTranslate() }, setTransition: function (e, t) { "coverflow" === e.params.effect && e.coverflowEffect.setTransition(t) } } }, { name: "thumbs", params: { thumbs: { swiper: null, multipleActiveThumbs: !0, autoScrollOffset: 0, slideThumbActiveClass: "swiper-slide-thumb-active", thumbsContainerClass: "swiper-container-thumbs" } }, create: function () { M(this, { thumbs: t({ swiper: null, initialized: !1 }, ue) }) }, on: { beforeInit: function (e) { var t = e.params.thumbs; t && t.swiper && (e.thumbs.init(), e.thumbs.update(!0)) }, slideChange: function (e) { e.thumbs.swiper && e.thumbs.update() }, update: function (e) { e.thumbs.swiper && e.thumbs.update() }, resize: function (e) { e.thumbs.swiper && e.thumbs.update() }, observerUpdate: function (e) { e.thumbs.swiper && e.thumbs.update() }, setTransition: function (e, t) { var a = e.thumbs.swiper; a && a.setTransition(t) }, beforeDestroy: function (e) { var t = e.thumbs.swiper; t && e.thumbs.swiperCreated && t && t.destroy() } } }]; return F.use(he), F }));
//# sourceMappingURL=swiper-bundle.min.js.map;
/**
 * Featherlight - ultra slim jQuery lightbox
 * Version 1.7.6 - http://noelboss.github.io/featherlight/
 *
 * Copyright 2017, Noël Raoul Bossart (http://www.noelboss.com)
 * MIT Licensed.
**/
(function($) {
	"use strict";

	if('undefined' === typeof $) {
		if('console' in window){ window.console.info('Too much lightness, Featherlight needs jQuery.'); }
		return;
	}

	/* Featherlight is exported as $.featherlight.
	   It is a function used to open a featherlight lightbox.

	   [tech]
	   Featherlight uses prototype inheritance.
	   Each opened lightbox will have a corresponding object.
	   That object may have some attributes that override the
	   prototype's.
	   Extensions created with Featherlight.extend will have their
	   own prototype that inherits from Featherlight's prototype,
	   thus attributes can be overriden either at the object level,
	   or at the extension level.
	   To create callbacks that chain themselves instead of overriding,
	   use chainCallbacks.
	   For those familiar with CoffeeScript, this correspond to
	   Featherlight being a class and the Gallery being a class
	   extending Featherlight.
	   The chainCallbacks is used since we don't have access to
	   CoffeeScript's `super`.
	*/

	function Featherlight($content, config) {
		if(this instanceof Featherlight) {  /* called with new */
			this.id = Featherlight.id++;
			this.setup($content, config);
			this.chainCallbacks(Featherlight._callbackChain);
		} else {
			var fl = new Featherlight($content, config);
			fl.open();
			return fl;
		}
	}

	var opened = [],
		pruneOpened = function(remove) {
			opened = $.grep(opened, function(fl) {
				return fl !== remove && fl.$instance.closest('body').length > 0;
			} );
			return opened;
		};

	// Removes keys of `set` from `obj` and returns the removed key/values.
	function slice(obj, set) {
		var r = {};
		for (var key in obj) {
			if (key in set) {
				r[key] = obj[key];
				delete obj[key];
			}
		}
		return r;
	}

	// NOTE: List of available [iframe attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe).
	var iFrameAttributeSet = {
		allowfullscreen: 1, frameborder: 1, height: 1, longdesc: 1, marginheight: 1, marginwidth: 1,
		name: 1, referrerpolicy: 1, scrolling: 1, sandbox: 1, src: 1, srcdoc: 1, width: 1
	};

	// Converts camelCased attributes to dasherized versions for given prefix:
	//   parseAttrs({hello: 1, hellFrozeOver: 2}, 'hell') => {froze-over: 2}
	function parseAttrs(obj, prefix) {
		var attrs = {},
			regex = new RegExp('^' + prefix + '([A-Z])(.*)');
		for (var key in obj) {
			var match = key.match(regex);
			if (match) {
				var dasherized = (match[1] + match[2].replace(/([A-Z])/g, '-$1')).toLowerCase();
				attrs[dasherized] = obj[key];
			}
		}
		return attrs;
	}

	/* document wide key handler */
	var eventMap = { keyup: 'onKeyUp', resize: 'onResize' };

	var globalEventHandler = function(event) {
		$.each(Featherlight.opened().reverse(), function() {
			if (!event.isDefaultPrevented()) {
				if (false === this[eventMap[event.type]](event)) {
					event.preventDefault(); event.stopPropagation(); return false;
			  }
			}
		});
	};

	var toggleGlobalEvents = function(set) {
			if(set !== Featherlight._globalHandlerInstalled) {
				Featherlight._globalHandlerInstalled = set;
				var events = $.map(eventMap, function(_, name) { return name+'.'+Featherlight.prototype.namespace; } ).join(' ');
				$(window)[set ? 'on' : 'off'](events, globalEventHandler);
			}
		};

	Featherlight.prototype = {
		constructor: Featherlight,
		/*** defaults ***/
		/* extend featherlight with defaults and methods */
		namespace:      'featherlight',        /* Name of the events and css class prefix */
		targetAttr:     'data-featherlight',   /* Attribute of the triggered element that contains the selector to the lightbox content */
		variant:        null,                  /* Class that will be added to change look of the lightbox */
		resetCss:       false,                 /* Reset all css */
		background:     null,                  /* Custom DOM for the background, wrapper and the closebutton */
		openTrigger:    'click',               /* Event that triggers the lightbox */
		closeTrigger:   'click',               /* Event that triggers the closing of the lightbox */
		filter:         null,                  /* Selector to filter events. Think $(...).on('click', filter, eventHandler) */
		root:           'body',                /* Where to append featherlights */
		openSpeed:      250,                   /* Duration of opening animation */
		closeSpeed:     250,                   /* Duration of closing animation */
		closeOnClick:   'background',          /* Close lightbox on click ('background', 'anywhere' or false) */
		closeOnEsc:     true,                  /* Close lightbox when pressing esc */
		closeIcon:      '&#10005;',            /* Close icon */
		loading:        '',                    /* Content to show while initial content is loading */
		persist:        false,                 /* If set, the content will persist and will be shown again when opened again. 'shared' is a special value when binding multiple elements for them to share the same content */
		otherClose:     null,                  /* Selector for alternate close buttons (e.g. "a.close") */
		beforeOpen:     $.noop,                /* Called before open. can return false to prevent opening of lightbox. Gets event as parameter, this contains all data */
		beforeContent:  $.noop,                /* Called when content is loaded. Gets event as parameter, this contains all data */
		beforeClose:    $.noop,                /* Called before close. can return false to prevent opening of lightbox. Gets event as parameter, this contains all data */
		afterOpen:      $.noop,                /* Called after open. Gets event as parameter, this contains all data */
		afterContent:   $.noop,                /* Called after content is ready and has been set. Gets event as parameter, this contains all data */
		afterClose:     $.noop,                /* Called after close. Gets event as parameter, this contains all data */
		onKeyUp:        $.noop,                /* Called on key up for the frontmost featherlight */
		onResize:       $.noop,                /* Called after new content and when a window is resized */
		type:           null,                  /* Specify type of lightbox. If unset, it will check for the targetAttrs value. */
		contentFilters: ['jquery', 'image', 'html', 'ajax', 'iframe', 'text'], /* List of content filters to use to determine the content */

		/*** methods ***/
		/* setup iterates over a single instance of featherlight and prepares the background and binds the events */
		setup: function(target, config){
			/* all arguments are optional */
			if (typeof target === 'object' && target instanceof $ === false && !config) {
				config = target;
				target = undefined;
			}

			var self = $.extend(this, config, {target: target}),
				css = !self.resetCss ? self.namespace : self.namespace+'-reset', /* by adding -reset to the classname, we reset all the default css */
				$background = $(self.background || [
					'<div class="'+css+'-loading '+css+'">',
						'<div class="'+css+'-content">',
							'<button type="button" class="'+css+'-close-icon '+ self.namespace + '-close" aria-label="Close">',
								self.closeIcon,
							'</button>',
							'<div class="'+self.namespace+'-inner">' + self.loading + '</div>',
						'</div>',
					'</div>'].join('')),
				closeButtonSelector = '.'+self.namespace+'-close' + (self.otherClose ? ',' + self.otherClose : '');

			self.$instance = $background.clone().addClass(self.variant); /* clone DOM for the background, wrapper and the close button */

			/* close when click on background/anywhere/null or closebox */
			self.$instance.on(self.closeTrigger+'.'+self.namespace, function(event) {
				var $target = $(event.target);
				if( ('background' === self.closeOnClick  && $target.is('.'+self.namespace))
					|| 'anywhere' === self.closeOnClick
					|| $target.closest(closeButtonSelector).length ){
					self.close(event);
					event.preventDefault();
				}
			});

			return this;
		},

		/* this method prepares the content and converts it into a jQuery object or a promise */
		getContent: function(){
			if(this.persist !== false && this.$content) {
				return this.$content;
			}
			var self = this,
				filters = this.constructor.contentFilters,
				readTargetAttr = function(name){ return self.$currentTarget && self.$currentTarget.attr(name); },
				targetValue = readTargetAttr(self.targetAttr),
				data = self.target || targetValue || '';

			/* Find which filter applies */
			var filter = filters[self.type]; /* check explicit type like {type: 'image'} */

			/* check explicit type like data-featherlight="image" */
			if(!filter && data in filters) {
				filter = filters[data];
				data = self.target && targetValue;
			}
			data = data || readTargetAttr('href') || '';

			/* check explicity type & content like {image: 'photo.jpg'} */
			if(!filter) {
				for(var filterName in filters) {
					if(self[filterName]) {
						filter = filters[filterName];
						data = self[filterName];
					}
				}
			}

			/* otherwise it's implicit, run checks */
			if(!filter) {
				var target = data;
				data = null;
				$.each(self.contentFilters, function() {
					filter = filters[this];
					if(filter.test)  {
						data = filter.test(target);
					}
					if(!data && filter.regex && target.match && target.match(filter.regex)) {
						data = target;
					}
					return !data;
				});
				if(!data) {
					if('console' in window){ window.console.error('Featherlight: no content filter found ' + (target ? ' for "' + target + '"' : ' (no target specified)')); }
					return false;
				}
			}
			/* Process it */
			return filter.process.call(self, data);
		},

		/* sets the content of $instance to $content */
		setContent: function($content){
			var self = this;
			/* we need a special class for the iframe */
			if($content.is('iframe')) {
				self.$instance.addClass(self.namespace+'-iframe');
			}

			self.$instance.removeClass(self.namespace+'-loading');

			/* replace content by appending to existing one before it is removed
			   this insures that featherlight-inner remain at the same relative
				 position to any other items added to featherlight-content */
			self.$instance.find('.'+self.namespace+'-inner')
				.not($content)                /* excluded new content, important if persisted */
				.slice(1).remove().end()      /* In the unexpected event where there are many inner elements, remove all but the first one */
				.replaceWith($.contains(self.$instance[0], $content[0]) ? '' : $content);

			self.$content = $content.addClass(self.namespace+'-inner');

			return self;
		},

		/* opens the lightbox. "this" contains $instance with the lightbox, and with the config.
			Returns a promise that is resolved after is successfully opened. */
		open: function(event){
			var self = this;
			self.$instance.hide().appendTo(self.root);
			if((!event || !event.isDefaultPrevented())
				&& self.beforeOpen(event) !== false) {

				if(event){
					event.preventDefault();
				}
				var $content = self.getContent();

				if($content) {
					opened.push(self);

					toggleGlobalEvents(true);

					self.$instance.fadeIn(self.openSpeed);
					self.beforeContent(event);

					/* Set content and show */
					return $.when($content)
						.always(function($content){
							self.setContent($content);
							self.afterContent(event);
						})
						.then(self.$instance.promise())
						/* Call afterOpen after fadeIn is done */
						.done(function(){ self.afterOpen(event); });
				}
			}
			self.$instance.detach();
			return $.Deferred().reject().promise();
		},

		/* closes the lightbox. "this" contains $instance with the lightbox, and with the config
			returns a promise, resolved after the lightbox is successfully closed. */
		close: function(event){
			var self = this,
				deferred = $.Deferred();

			if(self.beforeClose(event) === false) {
				deferred.reject();
			} else {

				if (0 === pruneOpened(self).length) {
					toggleGlobalEvents(false);
				}

				self.$instance.fadeOut(self.closeSpeed,function(){
					self.$instance.detach();
					self.afterClose(event);
					deferred.resolve();
				});
			}
			return deferred.promise();
		},

		/* resizes the content so it fits in visible area and keeps the same aspect ratio.
				Does nothing if either the width or the height is not specified.
				Called automatically on window resize.
				Override if you want different behavior. */
		resize: function(w, h) {
			if (w && h) {
				/* Reset apparent image size first so container grows */
				this.$content.css('width', '').css('height', '');
				/* Calculate the worst ratio so that dimensions fit */
				 /* Note: -1 to avoid rounding errors */
				var ratio = Math.max(
					w  / (parseInt(this.$content.parent().css('width'),10)-1),
					h / (parseInt(this.$content.parent().css('height'),10)-1));
				/* Resize content */
				if (ratio > 1) {
					ratio = h / Math.floor(h / ratio); /* Round ratio down so height calc works */
					this.$content.css('width', '' + w / ratio + 'px').css('height', '' + h / ratio + 'px');
				}
			}
		},

		/* Utility function to chain callbacks
		   [Warning: guru-level]
		   Used be extensions that want to let users specify callbacks but
		   also need themselves to use the callbacks.
		   The argument 'chain' has callback names as keys and function(super, event)
		   as values. That function is meant to call `super` at some point.
		*/
		chainCallbacks: function(chain) {
			for (var name in chain) {
				this[name] = $.proxy(chain[name], this, $.proxy(this[name], this));
			}
		}
	};

	$.extend(Featherlight, {
		id: 0,                                    /* Used to id single featherlight instances */
		autoBind:       '[data-featherlight]',    /* Will automatically bind elements matching this selector. Clear or set before onReady */
		defaults:       Featherlight.prototype,   /* You can access and override all defaults using $.featherlight.defaults, which is just a synonym for $.featherlight.prototype */
		/* Contains the logic to determine content */
		contentFilters: {
			jquery: {
				regex: /^[#.]\w/,         /* Anything that starts with a class name or identifiers */
				test: function(elem)    { return elem instanceof $ && elem; },
				process: function(elem) { return this.persist !== false ? $(elem) : $(elem).clone(true); }
			},
			image: {
				regex: /\.(png|jpg|jpeg|gif|tiff|bmp|svg)(\?\S*)?$/i,
				process: function(url)  {
					var self = this,
						deferred = $.Deferred(),
						img = new Image(),
						$img = $('<img src="'+url+'" alt="" class="'+self.namespace+'-image" />');
					img.onload  = function() {
						/* Store naturalWidth & height for IE8 */
						$img.naturalWidth = img.width; $img.naturalHeight = img.height;
						deferred.resolve( $img );
					};
					img.onerror = function() { deferred.reject($img); };
					img.src = url;
					return deferred.promise();
				}
			},
			html: {
				regex: /^\s*<[\w!][^<]*>/, /* Anything that starts with some kind of valid tag */
				process: function(html) { return $(html); }
			},
			ajax: {
				regex: /./,            /* At this point, any content is assumed to be an URL */
				process: function(url)  {
					var self = this,
						deferred = $.Deferred();
					/* we are using load so one can specify a target with: url.html #targetelement */
					var $container = $('<div></div>').load(url, function(response, status){
						if ( status !== "error" ) {
							deferred.resolve($container.contents());
						}
						deferred.fail();
					});
					return deferred.promise();
				}
			},
			iframe: {
				process: function(url) {
					var deferred = new $.Deferred();
					var $content = $('<iframe/>');
					var css = parseAttrs(this, 'iframe');
					var attrs = slice(css, iFrameAttributeSet);
					$content.hide()
						.attr('src', url)
						.attr(attrs)
						.css(css)
						.on('load', function() { deferred.resolve($content.show()); })
						// We can't move an <iframe> and avoid reloading it,
						// so let's put it in place ourselves right now:
						.appendTo(this.$instance.find('.' + this.namespace + '-content'));
					return deferred.promise();
				}
			},
			text: {
				process: function(text) { return $('<div>', {text: text}); }
			}
		},

		functionAttributes: ['beforeOpen', 'afterOpen', 'beforeContent', 'afterContent', 'beforeClose', 'afterClose'],

		/*** class methods ***/
		/* read element's attributes starting with data-featherlight- */
		readElementConfig: function(element, namespace) {
			var Klass = this,
				regexp = new RegExp('^data-' + namespace + '-(.*)'),
				config = {};
			if (element && element.attributes) {
				$.each(element.attributes, function(){
					var match = this.name.match(regexp);
					if (match) {
						var val = this.value,
							name = $.camelCase(match[1]);
						if ($.inArray(name, Klass.functionAttributes) >= 0) {  /* jshint -W054 */
							val = new Function(val);                           /* jshint +W054 */
						} else {
							try { val = JSON.parse(val); }
							catch(e) {}
						}
						config[name] = val;
					}
				});
			}
			return config;
		},

		/* Used to create a Featherlight extension
		   [Warning: guru-level]
		   Creates the extension's prototype that in turn
		   inherits Featherlight's prototype.
		   Could be used to extend an extension too...
		   This is pretty high level wizardy, it comes pretty much straight
		   from CoffeeScript and won't teach you anything about Featherlight
		   as it's not really specific to this library.
		   My suggestion: move along and keep your sanity.
		*/
		extend: function(child, defaults) {
			/* Setup class hierarchy, adapted from CoffeeScript */
			var Ctor = function(){ this.constructor = child; };
			Ctor.prototype = this.prototype;
			child.prototype = new Ctor();
			child.__super__ = this.prototype;
			/* Copy class methods & attributes */
			$.extend(child, this, defaults);
			child.defaults = child.prototype;
			return child;
		},

		attach: function($source, $content, config) {
			var Klass = this;
			if (typeof $content === 'object' && $content instanceof $ === false && !config) {
				config = $content;
				$content = undefined;
			}
			/* make a copy */
			config = $.extend({}, config);

			/* Only for openTrigger and namespace... */
			var namespace = config.namespace || Klass.defaults.namespace,
				tempConfig = $.extend({}, Klass.defaults, Klass.readElementConfig($source[0], namespace), config),
				sharedPersist;
			var handler = function(event) {
				var $target = $(event.currentTarget);
				/* ... since we might as well compute the config on the actual target */
				var elemConfig = $.extend(
					{$source: $source, $currentTarget: $target},
					Klass.readElementConfig($source[0], tempConfig.namespace),
					Klass.readElementConfig(event.currentTarget, tempConfig.namespace),
					config);
				var fl = sharedPersist || $target.data('featherlight-persisted') || new Klass($content, elemConfig);
				if(fl.persist === 'shared') {
					sharedPersist = fl;
				} else if(fl.persist !== false) {
					$target.data('featherlight-persisted', fl);
				}
				if (elemConfig.$currentTarget.blur) {
					elemConfig.$currentTarget.blur(); // Otherwise 'enter' key might trigger the dialog again
				}
				fl.open(event);
			};

			$source.on(tempConfig.openTrigger+'.'+tempConfig.namespace, tempConfig.filter, handler);

			return handler;
		},

		current: function() {
			var all = this.opened();
			return all[all.length - 1] || null;
		},

		opened: function() {
			var klass = this;
			pruneOpened();
			return $.grep(opened, function(fl) { return fl instanceof klass; } );
		},

		close: function(event) {
			var cur = this.current();
			if(cur) { return cur.close(event); }
		},

		/* Does the auto binding on startup.
		   Meant only to be used by Featherlight and its extensions
		*/
		_onReady: function() {
			var Klass = this;
			if(Klass.autoBind){
				/* Bind existing elements */
				$(Klass.autoBind).each(function(){
					Klass.attach($(this));
				});
				/* If a click propagates to the document level, then we have an item that was added later on */
				$(document).on('click', Klass.autoBind, function(evt) {
					if (evt.isDefaultPrevented()) {
						return;
					}
					/* Bind featherlight */
					var handler = Klass.attach($(evt.currentTarget));
					/* Dispatch event directly */
					handler(evt);
				});
			}
		},

		/* Featherlight uses the onKeyUp callback to intercept the escape key.
		   Private to Featherlight.
		*/
		_callbackChain: {
			onKeyUp: function(_super, event){
				if(27 === event.keyCode) {
					if (this.closeOnEsc) {
						$.featherlight.close(event);
					}
					return false;
				} else {
					return _super(event);
				}
			},

			beforeOpen: function(_super, event) {
				// Remember focus:
				this._previouslyActive = document.activeElement;

				// Disable tabbing:
				// See http://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus
				this._$previouslyTabbable = $("a, input, select, textarea, iframe, button, iframe, [contentEditable=true]")
					.not('[tabindex]')
					.not(this.$instance.find('button'));

				this._$previouslyWithTabIndex = $('[tabindex]').not('[tabindex="-1"]');
				this._previousWithTabIndices = this._$previouslyWithTabIndex.map(function(_i, elem) {
					return $(elem).attr('tabindex');
				});

				//this._$previouslyWithTabIndex.add(this._$previouslyTabbable).attr('tabindex', -1);

				if (document.activeElement.blur) {
					document.activeElement.blur();
				}
				return _super(event);
			},

			afterClose: function(_super, event) {
				var r = _super(event);
				var self = this;
				this._$previouslyTabbable.removeAttr('tabindex');
				this._$previouslyWithTabIndex.each(function(i, elem) {
					$(elem).attr('tabindex', self._previousWithTabIndices[i]);
				});
				this._previouslyActive.focus();
				return r;
			},

			onResize: function(_super, event){
				this.resize(this.$content.naturalWidth, this.$content.naturalHeight);
				return _super(event);
			},

			afterContent: function(_super, event){
				var r = _super(event);
				this.$instance.find('[autofocus]:not([disabled])').focus();
				this.onResize(event);
				return r;
			}
		}
	});

	$.featherlight = Featherlight;

	/* bind jQuery elements to trigger featherlight */
	$.fn.featherlight = function($content, config) {
		Featherlight.attach(this, $content, config);
		return this;
	};

	/* bind featherlight on ready if config autoBind is set */
    $(document).ready(function () { Featherlight._onReady(); });
}(jQuery));;
/*
 * Lazy Load - jQuery plugin for lazy loading images
 *
 * Copyright (c) 2007-2013 Mika Tuupola
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 *   http://www.appelsiini.net/projects/lazyload
 *
 * Version:  1.8.5
 *
 */
!function(e,t,o,n){var i=e(t);e.fn.lazyload=function(r){function f(){var t=0;a.each(function(){var o=e(this);if(!d.skip_invisible||o.is(":visible"))if(e.abovethetop(this,d)||e.leftofbegin(this,d));else if(e.belowthefold(this,d)||e.rightoffold(this,d)){if(++t>d.failure_limit)return!1}else o.trigger("appear"),t=0})}var l,a=this,d={threshold:0,failure_limit:0,event:"scroll",effect:"show",container:t,data_attribute:"original",skip_invisible:!0,appear:null,load:null};return r&&(n!==r.failurelimit&&(r.failure_limit=r.failurelimit,delete r.failurelimit),n!==r.effectspeed&&(r.effect_speed=r.effectspeed,delete r.effectspeed),e.extend(d,r)),l=d.container===n||d.container===t?i:e(d.container),0===d.event.indexOf("scroll")&&l.bind(d.event,function(){return f()}),this.each(function(){var t=this,o=e(t);t.loaded=!1,o.one("appear",function(){if(!this.loaded){if(d.appear){var n=a.length;d.appear.call(t,n,d)}e("<img />").bind("load",function(){o.hide().attr("src",o.data(d.data_attribute))[d.effect](d.effect_speed),t.loaded=!0;var n=e.grep(a,function(e){return!e.loaded});if(a=e(n),d.load){var i=a.length;d.load.call(t,i,d)}}).attr("src",o.data(d.data_attribute))}}),0!==d.event.indexOf("scroll")&&o.bind(d.event,function(){t.loaded||o.trigger("appear")})}),i.bind("resize",function(){f()}),/iphone|ipod|ipad.*os 5/gi.test(navigator.appVersion)&&i.bind("pageshow",function(t){t.originalEvent&&t.originalEvent.persisted&&a.each(function(){e(this).trigger("appear")})}),e(o).ready(function(){f()}),this},e.belowthefold=function(o,r){var f;return f=r.container===n||r.container===t?i.height()+i.scrollTop():e(r.container).offset().top+e(r.container).height(),f<=e(o).offset().top-r.threshold},e.rightoffold=function(o,r){var f;return f=r.container===n||r.container===t?i.width()+i.scrollLeft():e(r.container).offset().left+e(r.container).width(),f<=e(o).offset().left-r.threshold},e.abovethetop=function(o,r){var f;return f=r.container===n||r.container===t?i.scrollTop():e(r.container).offset().top,f>=e(o).offset().top+r.threshold+e(o).height()},e.leftofbegin=function(o,r){var f;return f=r.container===n||r.container===t?i.scrollLeft():e(r.container).offset().left,f>=e(o).offset().left+r.threshold+e(o).width()},e.inviewport=function(t,o){return!(e.rightoffold(t,o)||e.leftofbegin(t,o)||e.belowthefold(t,o)||e.abovethetop(t,o))},e.extend(e.expr[":"],{"below-the-fold":function(t){return e.belowthefold(t,{threshold:0})},"above-the-top":function(t){return!e.belowthefold(t,{threshold:0})},"right-of-screen":function(t){return e.rightoffold(t,{threshold:0})},"left-of-screen":function(t){return!e.rightoffold(t,{threshold:0})},"in-viewport":function(t){return e.inviewport(t,{threshold:0})},"above-the-fold":function(t){return!e.belowthefold(t,{threshold:0})},"right-of-fold":function(t){return e.rightoffold(t,{threshold:0})},"left-of-fold":function(t){return!e.rightoffold(t,{threshold:0})}})}(jQuery,window,document);
;
/*!
 * Select2 4.0.5
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node/CommonJS
        module.exports = function (root, jQuery) {
            if (jQuery === undefined) {
                // require('jQuery') returns a factory that requires window to
                // build a jQuery instance, we normalize how we use modules
                // that require this pattern but the window provided is a noop
                // if it's defined (how jquery works)
                if (typeof window !== 'undefined') {
                    jQuery = require('jquery');
                }
                else {
                    jQuery = require('jquery')(root);
                }
            }
            factory(jQuery);
            return jQuery;
        };
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function (jQuery) {
    // This is needed so we can catch the AMD loader configuration and use it
    // The inner file should be wrapped (by `banner.start.js`) in a function that
    // returns the AMD loader references.
    var S2 = (function () {
        // Restore the Select2 AMD loader so it can be used
        // Needed mostly in the language files, where the loader is not inserted
        if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
            var S2 = jQuery.fn.select2.amd;
        }
        var S2; (function () {
            if (!S2 || !S2.requirejs) {
                if (!S2) { S2 = {}; } else { require = S2; }
                /**
                 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
                 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
                 */
                //Going sloppy to avoid 'use strict' string cost, but strict practices should
                //be followed.
                /*global setTimeout: false */

                var requirejs, require, define;
                (function (undef) {
                    var main, req, makeMap, handlers,
                        defined = {},
                        waiting = {},
                        config = {},
                        defining = {},
                        hasOwn = Object.prototype.hasOwnProperty,
                        aps = [].slice,
                        jsSuffixRegExp = /\.js$/;

                    function hasProp(obj, prop) {
                        return hasOwn.call(obj, prop);
                    }

                    /**
                     * Given a relative module name, like ./something, normalize it to
                     * a real name that can be mapped to a path.
                     * @param {String} name the relative name
                     * @param {String} baseName a real name that the name arg is relative
                     * to.
                     * @returns {String} normalized name
                     */
                    function normalize(name, baseName) {
                        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
                            baseParts = baseName && baseName.split("/"),
                            map = config.map,
                            starMap = (map && map['*']) || {};

                        //Adjust any relative paths.
                        if (name) {
                            name = name.split('/');
                            lastIndex = name.length - 1;

                            // If wanting node ID compatibility, strip .js from end
                            // of IDs. Have to do this here, and not in nameToUrl
                            // because node allows either .js or non .js to map
                            // to same file.
                            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                            }

                            // Starts with a '.' so need the baseName
                            if (name[0].charAt(0) === '.' && baseParts) {
                                //Convert baseName to array, and lop off the last part,
                                //so that . matches that 'directory' and not name of the baseName's
                                //module. For instance, baseName of 'one/two/three', maps to
                                //'one/two/three.js', but we want the directory, 'one/two' for
                                //this normalization.
                                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                                name = normalizedBaseParts.concat(name);
                            }

                            //start trimDots
                            for (i = 0; i < name.length; i++) {
                                part = name[i];
                                if (part === '.') {
                                    name.splice(i, 1);
                                    i -= 1;
                                } else if (part === '..') {
                                    // If at the start, or previous value is still ..,
                                    // keep them so that when converted to a path it may
                                    // still work when converted to a path, even though
                                    // as an ID it is less than ideal. In larger point
                                    // releases, may be better to just kick out an error.
                                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                                        continue;
                                    } else if (i > 0) {
                                        name.splice(i - 1, 2);
                                        i -= 2;
                                    }
                                }
                            }
                            //end trimDots

                            name = name.join('/');
                        }

                        //Apply map config if available.
                        if ((baseParts || starMap) && map) {
                            nameParts = name.split('/');

                            for (i = nameParts.length; i > 0; i -= 1) {
                                nameSegment = nameParts.slice(0, i).join("/");

                                if (baseParts) {
                                    //Find the longest baseName segment match in the config.
                                    //So, do joins on the biggest to smallest lengths of baseParts.
                                    for (j = baseParts.length; j > 0; j -= 1) {
                                        mapValue = map[baseParts.slice(0, j).join('/')];

                                        //baseName segment has  config, find if it has one for
                                        //this name.
                                        if (mapValue) {
                                            mapValue = mapValue[nameSegment];
                                            if (mapValue) {
                                                //Match, update name to the new value.
                                                foundMap = mapValue;
                                                foundI = i;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (foundMap) {
                                    break;
                                }

                                //Check for a star map match, but just hold on to it,
                                //if there is a shorter segment match later in a matching
                                //config, then favor over this star map.
                                if (!foundStarMap && starMap && starMap[nameSegment]) {
                                    foundStarMap = starMap[nameSegment];
                                    starI = i;
                                }
                            }

                            if (!foundMap && foundStarMap) {
                                foundMap = foundStarMap;
                                foundI = starI;
                            }

                            if (foundMap) {
                                nameParts.splice(0, foundI, foundMap);
                                name = nameParts.join('/');
                            }
                        }

                        return name;
                    }

                    function makeRequire(relName, forceSync) {
                        return function () {
                            //A version of a require function that passes a moduleName
                            //value for items that may need to
                            //look up paths relative to the moduleName
                            var args = aps.call(arguments, 0);

                            //If first arg is not require('string'), and there is only
                            //one arg, it is the array form without a callback. Insert
                            //a null so that the following concat is correct.
                            if (typeof args[0] !== 'string' && args.length === 1) {
                                args.push(null);
                            }
                            return req.apply(undef, args.concat([relName, forceSync]));
                        };
                    }

                    function makeNormalize(relName) {
                        return function (name) {
                            return normalize(name, relName);
                        };
                    }

                    function makeLoad(depName) {
                        return function (value) {
                            defined[depName] = value;
                        };
                    }

                    function callDep(name) {
                        if (hasProp(waiting, name)) {
                            var args = waiting[name];
                            delete waiting[name];
                            defining[name] = true;
                            main.apply(undef, args);
                        }

                        if (!hasProp(defined, name) && !hasProp(defining, name)) {
                            throw new Error('No ' + name);
                        }
                        return defined[name];
                    }

                    //Turns a plugin!resource to [plugin, resource]
                    //with the plugin being undefined if the name
                    //did not have a plugin prefix.
                    function splitPrefix(name) {
                        var prefix,
                            index = name ? name.indexOf('!') : -1;
                        if (index > -1) {
                            prefix = name.substring(0, index);
                            name = name.substring(index + 1, name.length);
                        }
                        return [prefix, name];
                    }

                    //Creates a parts array for a relName where first part is plugin ID,
                    //second part is resource ID. Assumes relName has already been normalized.
                    function makeRelParts(relName) {
                        return relName ? splitPrefix(relName) : [];
                    }

                    /**
                     * Makes a name map, normalizing the name, and using a plugin
                     * for normalization if necessary. Grabs a ref to plugin
                     * too, as an optimization.
                     */
                    makeMap = function (name, relParts) {
                        var plugin,
                            parts = splitPrefix(name),
                            prefix = parts[0],
                            relResourceName = relParts[1];

                        name = parts[1];

                        if (prefix) {
                            prefix = normalize(prefix, relResourceName);
                            plugin = callDep(prefix);
                        }

                        //Normalize according
                        if (prefix) {
                            if (plugin && plugin.normalize) {
                                name = plugin.normalize(name, makeNormalize(relResourceName));
                            } else {
                                name = normalize(name, relResourceName);
                            }
                        } else {
                            name = normalize(name, relResourceName);
                            parts = splitPrefix(name);
                            prefix = parts[0];
                            name = parts[1];
                            if (prefix) {
                                plugin = callDep(prefix);
                            }
                        }

                        //Using ridiculous property names for space reasons
                        return {
                            f: prefix ? prefix + '!' + name : name, //fullName
                            n: name,
                            pr: prefix,
                            p: plugin
                        };
                    };

                    function makeConfig(name) {
                        return function () {
                            return (config && config.config && config.config[name]) || {};
                        };
                    }

                    handlers = {
                        require: function (name) {
                            return makeRequire(name);
                        },
                        exports: function (name) {
                            var e = defined[name];
                            if (typeof e !== 'undefined') {
                                return e;
                            } else {
                                return (defined[name] = {});
                            }
                        },
                        module: function (name) {
                            return {
                                id: name,
                                uri: '',
                                exports: defined[name],
                                config: makeConfig(name)
                            };
                        }
                    };

                    main = function (name, deps, callback, relName) {
                        var cjsModule, depName, ret, map, i, relParts,
                            args = [],
                            callbackType = typeof callback,
                            usingExports;

                        //Use name if no relName
                        relName = relName || name;
                        relParts = makeRelParts(relName);

                        //Call the callback to define the module, if necessary.
                        if (callbackType === 'undefined' || callbackType === 'function') {
                            //Pull out the defined dependencies and pass the ordered
                            //values to the callback.
                            //Default to [require, exports, module] if no deps
                            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                            for (i = 0; i < deps.length; i += 1) {
                                map = makeMap(deps[i], relParts);
                                depName = map.f;

                                //Fast path CommonJS standard dependencies.
                                if (depName === "require") {
                                    args[i] = handlers.require(name);
                                } else if (depName === "exports") {
                                    //CommonJS module spec 1.1
                                    args[i] = handlers.exports(name);
                                    usingExports = true;
                                } else if (depName === "module") {
                                    //CommonJS module spec 1.1
                                    cjsModule = args[i] = handlers.module(name);
                                } else if (hasProp(defined, depName) ||
                                    hasProp(waiting, depName) ||
                                    hasProp(defining, depName)) {
                                    args[i] = callDep(depName);
                                } else if (map.p) {
                                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                                    args[i] = defined[depName];
                                } else {
                                    throw new Error(name + ' missing ' + depName);
                                }
                            }

                            ret = callback ? callback.apply(defined[name], args) : undefined;

                            if (name) {
                                //If setting exports via "module" is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                if (cjsModule && cjsModule.exports !== undef &&
                                    cjsModule.exports !== defined[name]) {
                                    defined[name] = cjsModule.exports;
                                } else if (ret !== undef || !usingExports) {
                                    //Use the return value from the function.
                                    defined[name] = ret;
                                }
                            }
                        } else if (name) {
                            //May just be an object definition for the module. Only
                            //worry about defining if have a module name.
                            defined[name] = callback;
                        }
                    };

                    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
                        if (typeof deps === "string") {
                            if (handlers[deps]) {
                                //callback in this case is really relName
                                return handlers[deps](callback);
                            }
                            //Just return the module wanted. In this scenario, the
                            //deps arg is the module name, and second arg (if passed)
                            //is just the relName.
                            //Normalize module name, if it contains . or ..
                            return callDep(makeMap(deps, makeRelParts(callback)).f);
                        } else if (!deps.splice) {
                            //deps is a config object, not an array.
                            config = deps;
                            if (config.deps) {
                                req(config.deps, config.callback);
                            }
                            if (!callback) {
                                return;
                            }

                            if (callback.splice) {
                                //callback is an array, which means it is a dependency list.
                                //Adjust args if there are dependencies
                                deps = callback;
                                callback = relName;
                                relName = null;
                            } else {
                                deps = undef;
                            }
                        }

                        //Support require(['a'])
                        callback = callback || function () { };

                        //If relName is a function, it is an errback handler,
                        //so remove it.
                        if (typeof relName === 'function') {
                            relName = forceSync;
                            forceSync = alt;
                        }

                        //Simulate async callback;
                        if (forceSync) {
                            main(undef, deps, callback, relName);
                        } else {
                            //Using a non-zero value because of concern for what old browsers
                            //do, and latest browsers "upgrade" to 4 if lower value is used:
                            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                            //If want a value immediately, use require('id') instead -- something
                            //that works in almond on the global level, but not guaranteed and
                            //unlikely to work in other AMD implementations.
                            setTimeout(function () {
                                main(undef, deps, callback, relName);
                            }, 4);
                        }

                        return req;
                    };

                    /**
                     * Just drops the config on the floor, but returns req in case
                     * the config return value is used.
                     */
                    req.config = function (cfg) {
                        return req(cfg);
                    };

                    /**
                     * Expose module registry for debugging and tooling
                     */
                    requirejs._defined = defined;

                    define = function (name, deps, callback) {
                        if (typeof name !== 'string') {
                            throw new Error('See almond README: incorrect module build, no module name');
                        }

                        //This module may not have dependencies
                        if (!deps.splice) {
                            //deps is not an array, so probably means
                            //an object literal or factory function for
                            //the value. Adjust args.
                            callback = deps;
                            deps = [];
                        }

                        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                            waiting[name] = [name, deps, callback];
                        }
                    };

                    define.amd = {
                        jQuery: true
                    };
                }());

                S2.requirejs = requirejs; S2.require = require; S2.define = define;
            }
        }());
        S2.define("almond", function () { });

        /* global jQuery:false, $:false */
        S2.define('jquery', [], function () {
            var _$ = jQuery || $;

            if (_$ == null && console && console.error) {
                console.error(
                    'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
                    'found. Make sure that you are including jQuery before Select2 on your ' +
                    'web page.'
                );
            }

            return _$;
        });

        S2.define('select2/utils', [
            'jquery'
        ], function ($) {
            var Utils = {};

            Utils.Extend = function (ChildClass, SuperClass) {
                var __hasProp = {}.hasOwnProperty;

                function BaseConstructor() {
                    this.constructor = ChildClass;
                }

                for (var key in SuperClass) {
                    if (__hasProp.call(SuperClass, key)) {
                        ChildClass[key] = SuperClass[key];
                    }
                }

                BaseConstructor.prototype = SuperClass.prototype;
                ChildClass.prototype = new BaseConstructor();
                ChildClass.__super__ = SuperClass.prototype;

                return ChildClass;
            };

            function getMethods(theClass) {
                var proto = theClass.prototype;

                var methods = [];

                for (var methodName in proto) {
                    var m = proto[methodName];

                    if (typeof m !== 'function') {
                        continue;
                    }

                    if (methodName === 'constructor') {
                        continue;
                    }

                    methods.push(methodName);
                }

                return methods;
            }

            Utils.Decorate = function (SuperClass, DecoratorClass) {
                var decoratedMethods = getMethods(DecoratorClass);
                var superMethods = getMethods(SuperClass);

                function DecoratedClass() {
                    var unshift = Array.prototype.unshift;

                    var argCount = DecoratorClass.prototype.constructor.length;

                    var calledConstructor = SuperClass.prototype.constructor;

                    if (argCount > 0) {
                        unshift.call(arguments, SuperClass.prototype.constructor);

                        calledConstructor = DecoratorClass.prototype.constructor;
                    }

                    calledConstructor.apply(this, arguments);
                }

                DecoratorClass.displayName = SuperClass.displayName;

                function ctr() {
                    this.constructor = DecoratedClass;
                }

                DecoratedClass.prototype = new ctr();

                for (var m = 0; m < superMethods.length; m++) {
                    var superMethod = superMethods[m];

                    DecoratedClass.prototype[superMethod] =
                        SuperClass.prototype[superMethod];
                }

                var calledMethod = function (methodName) {
                    // Stub out the original method if it's not decorating an actual method
                    var originalMethod = function () { };

                    if (methodName in DecoratedClass.prototype) {
                        originalMethod = DecoratedClass.prototype[methodName];
                    }

                    var decoratedMethod = DecoratorClass.prototype[methodName];

                    return function () {
                        var unshift = Array.prototype.unshift;

                        unshift.call(arguments, originalMethod);

                        return decoratedMethod.apply(this, arguments);
                    };
                };

                for (var d = 0; d < decoratedMethods.length; d++) {
                    var decoratedMethod = decoratedMethods[d];

                    DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
                }

                return DecoratedClass;
            };

            var Observable = function () {
                this.listeners = {};
            };

            Observable.prototype.on = function (event, callback) {
                this.listeners = this.listeners || {};

                if (event in this.listeners) {
                    this.listeners[event].push(callback);
                } else {
                    this.listeners[event] = [callback];
                }
            };

            Observable.prototype.trigger = function (event) {
                var slice = Array.prototype.slice;
                var params = slice.call(arguments, 1);

                this.listeners = this.listeners || {};

                // Params should always come in as an array
                if (params == null) {
                    params = [];
                }

                // If there are no arguments to the event, use a temporary object
                if (params.length === 0) {
                    params.push({});
                }

                // Set the `_type` of the first object to the event
                params[0]._type = event;

                if (event in this.listeners) {
                    this.invoke(this.listeners[event], slice.call(arguments, 1));
                }

                if ('*' in this.listeners) {
                    this.invoke(this.listeners['*'], arguments);
                }
            };

            Observable.prototype.invoke = function (listeners, params) {
                for (var i = 0, len = listeners.length; i < len; i++) {
                    listeners[i].apply(this, params);
                }
            };

            Utils.Observable = Observable;

            Utils.generateChars = function (length) {
                var chars = '';

                for (var i = 0; i < length; i++) {
                    var randomChar = Math.floor(Math.random() * 36);
                    chars += randomChar.toString(36);
                }

                return chars;
            };

            Utils.bind = function (func, context) {
                return function () {
                    func.apply(context, arguments);
                };
            };

            Utils._convertData = function (data) {
                for (var originalKey in data) {
                    var keys = originalKey.split('-');

                    var dataLevel = data;

                    if (keys.length === 1) {
                        continue;
                    }

                    for (var k = 0; k < keys.length; k++) {
                        var key = keys[k];

                        // Lowercase the first letter
                        // By default, dash-separated becomes camelCase
                        key = key.substring(0, 1).toLowerCase() + key.substring(1);

                        if (!(key in dataLevel)) {
                            dataLevel[key] = {};
                        }

                        if (k == keys.length - 1) {
                            dataLevel[key] = data[originalKey];
                        }

                        dataLevel = dataLevel[key];
                    }

                    delete data[originalKey];
                }

                return data;
            };

            Utils.hasScroll = function (index, el) {
                // Adapted from the function created by @ShadowScripter
                // and adapted by @BillBarry on the Stack Exchange Code Review website.
                // The original code can be found at
                // http://codereview.stackexchange.com/q/13338
                // and was designed to be used with the Sizzle selector engine.

                var $el = $(el);
                var overflowX = el.style.overflowX;
                var overflowY = el.style.overflowY;

                //Check both x and y declarations
                if (overflowX === overflowY &&
                    (overflowY === 'hidden' || overflowY === 'visible')) {
                    return false;
                }

                if (overflowX === 'scroll' || overflowY === 'scroll') {
                    return true;
                }

                return ($el.innerHeight() < el.scrollHeight ||
                    $el.innerWidth() < el.scrollWidth);
            };

            Utils.escapeMarkup = function (markup) {
                var replaceMap = {
                    '\\': '&#92;',
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    '\'': '&#39;',
                    '/': '&#47;'
                };

                // Do not try to escape the markup if it's not a string
                if (typeof markup !== 'string') {
                    return markup;
                }

                return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
                    return replaceMap[match];
                });
            };

            // Append an array of jQuery nodes to a given element.
            Utils.appendMany = function ($element, $nodes) {
                // jQuery 1.7.x does not support $.fn.append() with an array
                // Fall back to a jQuery object collection using $.fn.add()
                if ($.fn.jquery.substr(0, 3) === '1.7') {
                    var $jqNodes = $();

                    $.map($nodes, function (node) {
                        $jqNodes = $jqNodes.add(node);
                    });

                    $nodes = $jqNodes;
                }

                $element.append($nodes);
            };

            return Utils;
        });

        S2.define('select2/results', [
            'jquery',
            './utils'
        ], function ($, Utils) {
            function Results($element, options, dataAdapter) {
                this.$element = $element;
                this.data = dataAdapter;
                this.options = options;

                Results.__super__.constructor.call(this);
            }

            Utils.Extend(Results, Utils.Observable);

            Results.prototype.render = function () {
                var $results = $(
                    '<ul class="select2-results__options" role="tree"></ul>'
                );

                if (this.options.get('multiple')) {
                    $results.attr('aria-multiselectable', 'true');
                }

                this.$results = $results;

                return $results;
            };

            Results.prototype.clear = function () {
                this.$results.empty();
            };

            Results.prototype.displayMessage = function (params) {
                var escapeMarkup = this.options.get('escapeMarkup');

                this.clear();
                this.hideLoading();

                var $message = $(
                    '<li role="treeitem" aria-live="assertive"' +
                    ' class="select2-results__option"></li>'
                );

                var message = this.options.get('translations').get(params.message);

                $message.append(
                    escapeMarkup(
                        message(params.args)
                    )
                );

                $message[0].className += ' select2-results__message';

                this.$results.append($message);
            };

            Results.prototype.hideMessages = function () {
                this.$results.find('.select2-results__message').remove();
            };

            Results.prototype.append = function (data) {
                this.hideLoading();

                var $options = [];

                if (data.results == null || data.results.length === 0) {
                    if (this.$results.children().length === 0) {
                        this.trigger('results:message', {
                            message: 'noResults'
                        });
                    }

                    return;
                }

                data.results = this.sort(data.results);

                for (var d = 0; d < data.results.length; d++) {
                    var item = data.results[d];

                    var $option = this.option(item);

                    $options.push($option);
                }

                this.$results.append($options);
            };

            Results.prototype.position = function ($results, $dropdown) {
                var $resultsContainer = $dropdown.find('.select2-results');
                $resultsContainer.append($results);
            };

            Results.prototype.sort = function (data) {
                var sorter = this.options.get('sorter');

                return sorter(data);
            };

            Results.prototype.highlightFirstItem = function () {
                var $options = this.$results
                    .find('.select2-results__option[aria-selected]');

                var $selected = $options.filter('[aria-selected=true]');

                // Check if there are any selected options
                if ($selected.length > 0) {
                    // If there are selected options, highlight the first
                    $selected.first().trigger('mouseenter');
                } else {
                    // If there are no selected options, highlight the first option
                    // in the dropdown
                    $options.first().trigger('mouseenter');
                }

                this.ensureHighlightVisible();
            };

            Results.prototype.setClasses = function () {
                var self = this;

                this.data.current(function (selected) {
                    var selectedIds = $.map(selected, function (s) {
                        return s.id.toString();
                    });

                    var $options = self.$results
                        .find('.select2-results__option[aria-selected]');

                    $options.each(function () {
                        var $option = $(this);

                        var item = $.data(this, 'data');

                        // id needs to be converted to a string when comparing
                        var id = '' + item.id;

                        if ((item.element != null && item.element.selected) ||
                            (item.element == null && $.inArray(id, selectedIds) > -1)) {
                            $option.attr('aria-selected', 'true');
                        } else {
                            $option.attr('aria-selected', 'false');
                        }
                    });

                });
            };

            Results.prototype.showLoading = function (params) {
                this.hideLoading();

                var loadingMore = this.options.get('translations').get('searching');

                var loading = {
                    disabled: true,
                    loading: true,
                    text: loadingMore(params)
                };
                var $loading = this.option(loading);
                $loading.className += ' loading-results';

                this.$results.prepend($loading);
            };

            Results.prototype.hideLoading = function () {
                this.$results.find('.loading-results').remove();
            };

            Results.prototype.option = function (data) {
                var option = document.createElement('li');
                option.className = 'select2-results__option';

                var attrs = {
                    'role': 'treeitem',
                    'aria-selected': 'false'
                };

                if (data.disabled) {
                    delete attrs['aria-selected'];
                    attrs['aria-disabled'] = 'true';
                }

                if (data.id == null) {
                    delete attrs['aria-selected'];
                }

                if (data._resultId != null) {
                    option.id = data._resultId;
                }

                if (data.title) {
                    option.title = data.title;
                }

                if (data.children) {
                    attrs.role = 'group';
                    attrs['aria-label'] = data.text;
                    delete attrs['aria-selected'];
                }

                for (var attr in attrs) {
                    var val = attrs[attr];

                    option.setAttribute(attr, val);
                }

                if (data.children) {
                    var $option = $(option);

                    var label = document.createElement('strong');
                    label.className = 'select2-results__group';

                    var $label = $(label);
                    this.template(data, label);

                    var $children = [];

                    for (var c = 0; c < data.children.length; c++) {
                        var child = data.children[c];

                        var $child = this.option(child);

                        $children.push($child);
                    }

                    var $childrenContainer = $('<ul></ul>', {
                        'class': 'select2-results__options select2-results__options--nested'
                    });

                    $childrenContainer.append($children);

                    $option.append(label);
                    $option.append($childrenContainer);
                } else {
                    this.template(data, option);
                }

                $.data(option, 'data', data);

                return option;
            };

            Results.prototype.bind = function (container, $container) {
                var self = this;

                var id = container.id + '-results';

                this.$results.attr('id', id);

                container.on('results:all', function (params) {
                    self.clear();
                    self.append(params.data);

                    if (container.isOpen()) {
                        self.setClasses();
                        self.highlightFirstItem();
                    }
                });

                container.on('results:append', function (params) {
                    self.append(params.data);

                    if (container.isOpen()) {
                        self.setClasses();
                    }
                });

                container.on('query', function (params) {
                    self.hideMessages();
                    self.showLoading(params);
                });

                container.on('select', function () {
                    if (!container.isOpen()) {
                        return;
                    }

                    self.setClasses();
                    self.highlightFirstItem();
                });

                container.on('unselect', function () {
                    if (!container.isOpen()) {
                        return;
                    }

                    self.setClasses();
                    self.highlightFirstItem();
                });

                container.on('open', function () {
                    // When the dropdown is open, aria-expended="true"
                    self.$results.attr('aria-expanded', 'true');
                    self.$results.attr('aria-hidden', 'false');

                    self.setClasses();
                    self.ensureHighlightVisible();
                });

                container.on('close', function () {
                    // When the dropdown is closed, aria-expended="false"
                    self.$results.attr('aria-expanded', 'false');
                    self.$results.attr('aria-hidden', 'true');
                    self.$results.removeAttr('aria-activedescendant');
                });

                container.on('results:toggle', function () {
                    var $highlighted = self.getHighlightedResults();

                    if ($highlighted.length === 0) {
                        return;
                    }

                    $highlighted.trigger('mouseup');
                });

                container.on('results:select', function () {
                    var $highlighted = self.getHighlightedResults();

                    if ($highlighted.length === 0) {
                        return;
                    }

                    var data = $highlighted.data('data');

                    if ($highlighted.attr('aria-selected') == 'true') {
                        self.trigger('close', {});
                    } else {
                        self.trigger('select', {
                            data: data
                        });
                    }
                });

                container.on('results:previous', function () {
                    var $highlighted = self.getHighlightedResults();

                    var $options = self.$results.find('[aria-selected]');

                    var currentIndex = $options.index($highlighted);

                    // If we are already at te top, don't move further
                    if (currentIndex === 0) {
                        return;
                    }

                    var nextIndex = currentIndex - 1;

                    // If none are highlighted, highlight the first
                    if ($highlighted.length === 0) {
                        nextIndex = 0;
                    }

                    var $next = $options.eq(nextIndex);

                    $next.trigger('mouseenter');

                    var currentOffset = self.$results.offset().top;
                    var nextTop = $next.offset().top;
                    var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

                    if (nextIndex === 0) {
                        self.$results.scrollTop(0);
                    } else if (nextTop - currentOffset < 0) {
                        self.$results.scrollTop(nextOffset);
                    }
                });

                container.on('results:next', function () {
                    var $highlighted = self.getHighlightedResults();

                    var $options = self.$results.find('[aria-selected]');

                    var currentIndex = $options.index($highlighted);

                    var nextIndex = currentIndex + 1;

                    // If we are at the last option, stay there
                    if (nextIndex >= $options.length) {
                        return;
                    }

                    var $next = $options.eq(nextIndex);

                    $next.trigger('mouseenter');

                    var currentOffset = self.$results.offset().top +
                        self.$results.outerHeight(false);
                    var nextBottom = $next.offset().top + $next.outerHeight(false);
                    var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

                    if (nextIndex === 0) {
                        self.$results.scrollTop(0);
                    } else if (nextBottom > currentOffset) {
                        self.$results.scrollTop(nextOffset);
                    }
                });

                container.on('results:focus', function (params) {
                    params.element.addClass('select2-results__option--highlighted');
                });

                container.on('results:message', function (params) {
                    self.displayMessage(params);
                });

                if ($.fn.mousewheel) {
                    this.$results.on('mousewheel', function (e) {
                        var top = self.$results.scrollTop();

                        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

                        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

                        if (isAtTop) {
                            self.$results.scrollTop(0);

                            e.preventDefault();
                            e.stopPropagation();
                        } else if (isAtBottom) {
                            self.$results.scrollTop(
                                self.$results.get(0).scrollHeight - self.$results.height()
                            );

                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                }

                this.$results.on('mouseup', '.select2-results__option[aria-selected]',
                    function (evt) {
                        var $this = $(this);

                        var data = $this.data('data');

                        if ($this.attr('aria-selected') === 'true') {
                            if (self.options.get('multiple')) {
                                self.trigger('unselect', {
                                    originalEvent: evt,
                                    data: data
                                });
                            } else {
                                self.trigger('close', {});
                            }

                            return;
                        }

                        self.trigger('select', {
                            originalEvent: evt,
                            data: data
                        });
                    });

                this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
                    function (evt) {
                        var data = $(this).data('data');

                        self.getHighlightedResults()
                            .removeClass('select2-results__option--highlighted');

                        self.trigger('results:focus', {
                            data: data,
                            element: $(this)
                        });
                    });
            };

            Results.prototype.getHighlightedResults = function () {
                var $highlighted = this.$results
                    .find('.select2-results__option--highlighted');

                return $highlighted;
            };

            Results.prototype.destroy = function () {
                this.$results.remove();
            };

            Results.prototype.ensureHighlightVisible = function () {
                var $highlighted = this.getHighlightedResults();

                if ($highlighted.length === 0) {
                    return;
                }

                var $options = this.$results.find('[aria-selected]');

                var currentIndex = $options.index($highlighted);

                var currentOffset = this.$results.offset().top;
                var nextTop = $highlighted.offset().top;
                var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

                var offsetDelta = nextTop - currentOffset;
                nextOffset -= $highlighted.outerHeight(false) * 2;

                if (currentIndex <= 2) {
                    this.$results.scrollTop(0);
                } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
                    this.$results.scrollTop(nextOffset);
                }
            };

            Results.prototype.template = function (result, container) {
                var template = this.options.get('templateResult');
                var escapeMarkup = this.options.get('escapeMarkup');

                var content = template(result, container);

                if (content == null) {
                    container.style.display = 'none';
                } else if (typeof content === 'string') {
                    container.innerHTML = escapeMarkup(content);
                } else {
                    $(container).append(content);
                }
            };

            return Results;
        });

        S2.define('select2/keys', [

        ], function () {
            var KEYS = {
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                SHIFT: 16,
                CTRL: 17,
                ALT: 18,
                ESC: 27,
                SPACE: 32,
                PAGE_UP: 33,
                PAGE_DOWN: 34,
                END: 35,
                HOME: 36,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                DELETE: 46
            };

            return KEYS;
        });

        S2.define('select2/selection/base', [
            'jquery',
            '../utils',
            '../keys'
        ], function ($, Utils, KEYS) {
            function BaseSelection($element, options) {
                this.$element = $element;
                this.options = options;

                BaseSelection.__super__.constructor.call(this);
            }

            Utils.Extend(BaseSelection, Utils.Observable);

            BaseSelection.prototype.render = function () {
                var $selection = $(
                    '<span class="select2-selection" role="combobox" aria-label="Search Field" ' +
                    ' aria-haspopup="true" aria-expanded="false">' +
                    '</span>'
                );

                this._tabindex = 0;

                if (this.$element.data('old-tabindex') != null) {
                    this._tabindex = this.$element.data('old-tabindex');
                } else if (this.$element.attr('tabindex') != null) {
                    this._tabindex = this.$element.attr('tabindex');
                }

                $selection.attr('title', this.$element.attr('title'));
                $selection.attr('tabindex', this._tabindex);

                this.$selection = $selection;

                return $selection;
            };

            BaseSelection.prototype.bind = function (container, $container) {
                var self = this;

                var id = container.id + '-container';
                var resultsId = container.id + '-results';

                this.container = container;

                this.$selection.on('focus', function (evt) {
                    self.trigger('focus', evt);
                });

                this.$selection.on('blur', function (evt) {
                    self._handleBlur(evt);
                });

                this.$selection.on('keydown', function (evt) {
                    self.trigger('keypress', evt);

                    if (evt.which === KEYS.SPACE) {
                        evt.preventDefault();
                    }
                });

                container.on('results:focus', function (params) {
                    self.$selection.attr('aria-activedescendant', params.data._resultId);
                });

                container.on('selection:update', function (params) {
                    self.update(params.data);
                });

                container.on('open', function () {
                    // When the dropdown is open, aria-expanded="true"
                    self.$selection.attr('aria-expanded', 'true');
                    self.$selection.attr('aria-owns', resultsId);

                    self._attachCloseHandler(container);
                });

                container.on('close', function () {
                    // When the dropdown is closed, aria-expanded="false"
                    self.$selection.attr('aria-expanded', 'false');
                    self.$selection.removeAttr('aria-activedescendant');
                    self.$selection.removeAttr('aria-owns');

                    self.$selection.focus();

                    self._detachCloseHandler(container);
                });

                container.on('enable', function () {
                    self.$selection.attr('tabindex', self._tabindex);
                });

                container.on('disable', function () {
                    self.$selection.attr('tabindex', '-1');
                });
            };

            BaseSelection.prototype._handleBlur = function (evt) {
                var self = this;

                // This needs to be delayed as the active element is the body when the tab
                // key is pressed, possibly along with others.
                window.setTimeout(function () {
                    // Don't trigger `blur` if the focus is still in the selection
                    if (
                        (document.activeElement == self.$selection[0]) ||
                        ($.contains(self.$selection[0], document.activeElement))
                    ) {
                        return;
                    }

                    self.trigger('blur', evt);
                }, 1);
            };

            BaseSelection.prototype._attachCloseHandler = function (container) {
                var self = this;

                $(document.body).on('mousedown.select2.' + container.id, function (e) {
                    var $target = $(e.target);

                    var $select = $target.closest('.select2');

                    var $all = $('.select2.select2-container--open');

                    $all.each(function () {
                        var $this = $(this);

                        if (this == $select[0]) {
                            return;
                        }

                        var $element = $this.data('element');

                        $element.select2('close');
                    });
                });
            };

            BaseSelection.prototype._detachCloseHandler = function (container) {
                $(document.body).off('mousedown.select2.' + container.id);
            };

            BaseSelection.prototype.position = function ($selection, $container) {
                var $selectionContainer = $container.find('.selection');
                $selectionContainer.append($selection);
            };

            BaseSelection.prototype.destroy = function () {
                this._detachCloseHandler(this.container);
            };

            BaseSelection.prototype.update = function (data) {
                throw new Error('The `update` method must be defined in child classes.');
            };

            return BaseSelection;
        });

        S2.define('select2/selection/single', [
            'jquery',
            './base',
            '../utils',
            '../keys'
        ], function ($, BaseSelection, Utils, KEYS) {
            function SingleSelection() {
                SingleSelection.__super__.constructor.apply(this, arguments);
            }

            Utils.Extend(SingleSelection, BaseSelection);

            SingleSelection.prototype.render = function () {
                var $selection = SingleSelection.__super__.render.call(this);

                $selection.addClass('select2-selection--single');

                $selection.html(
                    '<span class="select2-selection__rendered"></span>' +
                    '<span class="select2-selection__arrow" role="presentation">' +
                    '<b role="presentation"></b>' +
                    '</span>'
                );

                return $selection;
            };

            SingleSelection.prototype.bind = function (container, $container) {
                var self = this;

                SingleSelection.__super__.bind.apply(this, arguments);

                var id = container.id + '-container';

                this.$selection.find('.select2-selection__rendered').attr('id', id);
                this.$selection.attr('aria-labelledby', id);

                this.$selection.on('mousedown', function (evt) {
                    // Only respond to left clicks
                    if (evt.which !== 1) {
                        return;
                    }

                    self.trigger('toggle', {
                        originalEvent: evt
                    });
                });

                this.$selection.on('focus', function (evt) {
                    // User focuses on the container
                });

                this.$selection.on('blur', function (evt) {
                    // User exits the container
                });

                container.on('focus', function (evt) {
                    if (!container.isOpen()) {
                        self.$selection.focus();
                    }
                });

                container.on('selection:update', function (params) {
                    self.update(params.data);
                });
            };

            SingleSelection.prototype.clear = function () {
                this.$selection.find('.select2-selection__rendered').empty();
            };

            SingleSelection.prototype.display = function (data, container) {
                var template = this.options.get('templateSelection');
                var escapeMarkup = this.options.get('escapeMarkup');

                return escapeMarkup(template(data, container));
            };

            SingleSelection.prototype.selectionContainer = function () {
                return $('<span></span>');
            };

            SingleSelection.prototype.update = function (data) {
                if (data.length === 0) {
                    this.clear();
                    return;
                }

                var selection = data[0];

                var $rendered = this.$selection.find('.select2-selection__rendered');
                var formatted = this.display(selection, $rendered);

                $rendered.empty().append(formatted);
                $rendered.prop('title', selection.title || selection.text);
            };

            return SingleSelection;
        });

        S2.define('select2/selection/multiple', [
            'jquery',
            './base',
            '../utils'
        ], function ($, BaseSelection, Utils) {
            function MultipleSelection($element, options) {
                MultipleSelection.__super__.constructor.apply(this, arguments);
            }

            Utils.Extend(MultipleSelection, BaseSelection);

            MultipleSelection.prototype.render = function () {
                var $selection = MultipleSelection.__super__.render.call(this);

                $selection.addClass('select2-selection--multiple');

                $selection.html(
                    '<ul class="select2-selection__rendered"></ul>'
                );

                return $selection;
            };

            MultipleSelection.prototype.bind = function (container, $container) {
                var self = this;

                MultipleSelection.__super__.bind.apply(this, arguments);

                this.$selection.on('click', function (evt) {
                    self.trigger('toggle', {
                        originalEvent: evt
                    });
                });

                this.$selection.on(
                    'click',
                    '.select2-selection__choice__remove',
                    function (evt) {
                        // Ignore the event if it is disabled
                        if (self.options.get('disabled')) {
                            return;
                        }

                        var $remove = $(this);
                        var $selection = $remove.parent();

                        var data = $selection.data('data');

                        self.trigger('unselect', {
                            originalEvent: evt,
                            data: data
                        });
                    }
                );
            };

            MultipleSelection.prototype.clear = function () {
                this.$selection.find('.select2-selection__rendered').empty();
            };

            MultipleSelection.prototype.display = function (data, container) {
                var template = this.options.get('templateSelection');
                var escapeMarkup = this.options.get('escapeMarkup');

                return escapeMarkup(template(data, container));
            };

            MultipleSelection.prototype.selectionContainer = function () {
                var $container = $(
                    '<li class="select2-selection__choice">' +
                    '<span class="select2-selection__choice__remove" role="presentation">' +
                    '&times;' +
                    '</span>' +
                    '</li>'
                );

                return $container;
            };

            MultipleSelection.prototype.update = function (data) {
                this.clear();

                if (data.length === 0) {
                    return;
                }

                var $selections = [];

                for (var d = 0; d < data.length; d++) {
                    var selection = data[d];

                    var $selection = this.selectionContainer();
                    var formatted = this.display(selection, $selection);

                    $selection.append(formatted);
                    $selection.prop('title', selection.title || selection.text);

                    $selection.data('data', selection);

                    $selections.push($selection);
                }

                var $rendered = this.$selection.find('.select2-selection__rendered');

                Utils.appendMany($rendered, $selections);
            };

            return MultipleSelection;
        });

        S2.define('select2/selection/placeholder', [
            '../utils'
        ], function (Utils) {
            function Placeholder(decorated, $element, options) {
                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                decorated.call(this, $element, options);
            }

            Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
                if (typeof placeholder === 'string') {
                    placeholder = {
                        id: '',
                        text: placeholder
                    };
                }

                return placeholder;
            };

            Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
                var $placeholder = this.selectionContainer();

                $placeholder.html(this.display(placeholder));
                $placeholder.addClass('select2-selection__placeholder')
                    .removeClass('select2-selection__choice');

                return $placeholder;
            };

            Placeholder.prototype.update = function (decorated, data) {
                var singlePlaceholder = (
                    data.length == 1 && data[0].id != this.placeholder.id
                );
                var multipleSelections = data.length > 1;

                if (multipleSelections || singlePlaceholder) {
                    return decorated.call(this, data);
                }

                this.clear();

                var $placeholder = this.createPlaceholder(this.placeholder);

                this.$selection.find('.select2-selection__rendered').append($placeholder);
            };

            return Placeholder;
        });

        S2.define('select2/selection/allowClear', [
            'jquery',
            '../keys'
        ], function ($, KEYS) {
            function AllowClear() { }

            AllowClear.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                if (this.placeholder == null) {
                    if (this.options.get('debug') && window.console && console.error) {
                        console.error(
                            'Select2: The `allowClear` option should be used in combination ' +
                            'with the `placeholder` option.'
                        );
                    }
                }

                this.$selection.on('mousedown', '.select2-selection__clear',
                    function (evt) {
                        self._handleClear(evt);
                    });

                container.on('keypress', function (evt) {
                    self._handleKeyboardClear(evt, container);
                });
            };

            AllowClear.prototype._handleClear = function (_, evt) {
                // Ignore the event if it is disabled
                if (this.options.get('disabled')) {
                    return;
                }

                var $clear = this.$selection.find('.select2-selection__clear');

                // Ignore the event if nothing has been selected
                if ($clear.length === 0) {
                    return;
                }

                evt.stopPropagation();

                var data = $clear.data('data');

                for (var d = 0; d < data.length; d++) {
                    var unselectData = {
                        data: data[d]
                    };

                    // Trigger the `unselect` event, so people can prevent it from being
                    // cleared.
                    this.trigger('unselect', unselectData);

                    // If the event was prevented, don't clear it out.
                    if (unselectData.prevented) {
                        return;
                    }
                }

                this.$element.val(this.placeholder.id).trigger('change');

                this.trigger('toggle', {});
            };

            AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
                if (container.isOpen()) {
                    return;
                }

                if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
                    this._handleClear(evt);
                }
            };

            AllowClear.prototype.update = function (decorated, data) {
                decorated.call(this, data);

                if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
                    data.length === 0) {
                    return;
                }

                var $remove = $(
                    '<span class="select2-selection__clear">' +
                    '&times;' +
                    '</span>'
                );
                $remove.data('data', data);

                this.$selection.find('.select2-selection__rendered').prepend($remove);
            };

            return AllowClear;
        });

        S2.define('select2/selection/search', [
            'jquery',
            '../utils',
            '../keys'
        ], function ($, Utils, KEYS) {
            function Search(decorated, $element, options) {
                decorated.call(this, $element, options);
            }

            Search.prototype.render = function (decorated) {
                var $search = $(
                    '<li class="select2-search select2-search--inline">' +
                    '<input aria-label="Search Field" class="select2-search__field" type="search" tabindex="-1"' +
                    ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
                    ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
                    '</li>'
                );

                this.$searchContainer = $search;
                this.$search = $search.find('input');

                var $rendered = decorated.call(this);

                this._transferTabIndex();

                return $rendered;
            };

            Search.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('open', function () {
                    self.$search.trigger('focus');
                });

                container.on('close', function () {
                    self.$search.val('');
                    self.$search.removeAttr('aria-activedescendant');
                    self.$search.trigger('focus');
                });

                container.on('enable', function () {
                    self.$search.prop('disabled', false);

                    self._transferTabIndex();
                });

                container.on('disable', function () {
                    self.$search.prop('disabled', true);
                });

                container.on('focus', function (evt) {
                    self.$search.trigger('focus');
                });

                container.on('results:focus', function (params) {
                    self.$search.attr('aria-activedescendant', params.id);
                });

                this.$selection.on('focusin', '.select2-search--inline', function (evt) {
                    self.trigger('focus', evt);
                });

                this.$selection.on('focusout', '.select2-search--inline', function (evt) {
                    self._handleBlur(evt);
                });

                this.$selection.on('keydown', '.select2-search--inline', function (evt) {
                    evt.stopPropagation();

                    self.trigger('keypress', evt);

                    self._keyUpPrevented = evt.isDefaultPrevented();

                    var key = evt.which;

                    if (key === KEYS.BACKSPACE && self.$search.val() === '') {
                        var $previousChoice = self.$searchContainer
                            .prev('.select2-selection__choice');

                        if ($previousChoice.length > 0) {
                            var item = $previousChoice.data('data');

                            self.searchRemoveChoice(item);

                            evt.preventDefault();
                        }
                    }
                });

                // Try to detect the IE version should the `documentMode` property that
                // is stored on the document. This is only implemented in IE and is
                // slightly cleaner than doing a user agent check.
                // This property is not available in Edge, but Edge also doesn't have
                // this bug.
                var msie = document.documentMode;
                var disableInputEvents = msie && msie <= 11;

                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$selection.on(
                    'input.searchcheck',
                    '.select2-search--inline',
                    function (evt) {
                        // IE will trigger the `input` event when a placeholder is used on a
                        // search box. To get around this issue, we are forced to ignore all
                        // `input` events in IE and keep using `keyup`.
                        if (disableInputEvents) {
                            self.$selection.off('input.search input.searchcheck');
                            return;
                        }

                        // Unbind the duplicated `keyup` event
                        self.$selection.off('keyup.search');
                    }
                );

                this.$selection.on(
                    'keyup.search input.search',
                    '.select2-search--inline',
                    function (evt) {
                        // IE will trigger the `input` event when a placeholder is used on a
                        // search box. To get around this issue, we are forced to ignore all
                        // `input` events in IE and keep using `keyup`.
                        if (disableInputEvents && evt.type === 'input') {
                            self.$selection.off('input.search input.searchcheck');
                            return;
                        }

                        var key = evt.which;

                        // We can freely ignore events from modifier keys
                        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
                            return;
                        }

                        // Tabbing will be handled during the `keydown` phase
                        if (key == KEYS.TAB) {
                            return;
                        }

                        self.handleSearch(evt);
                    }
                );
            };

            /**
             * This method will transfer the tabindex attribute from the rendered
             * selection to the search box. This allows for the search box to be used as
             * the primary focus instead of the selection container.
             *
             * @private
             */
            Search.prototype._transferTabIndex = function (decorated) {
                this.$search.attr('tabindex', this.$selection.attr('tabindex'));
                this.$selection.attr('tabindex', '-1');
            };

            Search.prototype.createPlaceholder = function (decorated, placeholder) {
                this.$search.attr('placeholder', placeholder.text);
            };

            Search.prototype.update = function (decorated, data) { //Updated as per https://github.com/select2/select2/issues/4398
                var searchHadFocus = this.$search[0] == document.activeElement;

                this.$search.attr('placeholder', '');
                decorated.call(this, data);

                this.$selection.find('.select2-selection__rendered')
                    .append(this.$searchContainer);

                this.resizeSearch();
                if (searchHadFocus) {
                    var self = this;
                    window.setTimeout(function () {
                        self.$search.focus();
                        self.$element.trigger('searchupdatedone');//Realtor7- Needed to rebuild the events for every updates
                                                                  //because select2 empty the container after each update
                    }, 0);
                }
            };

            Search.prototype.handleSearch = function () {
                this.resizeSearch();

                if (!this._keyUpPrevented) {
                    var input = this.$search.val();

                    this.trigger('query', {
                        term: input
                    });
                }

                this._keyUpPrevented = false;
            };

            Search.prototype.searchRemoveChoice = function (decorated, item) {
                this.trigger('unselect', {
                    data: item
                });

                this.$search.val(item.text);
                this.handleSearch();
            };

            Search.prototype.resizeSearch = function () {
                this.$search.css('width', '25px');

                var width = '';

                if (this.$search.attr('placeholder') !== '') {
                    width = this.$selection.find('.select2-selection__rendered').innerWidth();
                } else {
                    var minimumWidth = this.$search.val().length + 1;

                    width = (minimumWidth * 0.75) + 'em';
                }

                this.$search.css('width', width);
            };

            return Search;
        });

        S2.define('select2/selection/eventRelay', [
            'jquery'
        ], function ($) {
            function EventRelay() { }

            EventRelay.prototype.bind = function (decorated, container, $container) {
                var self = this;
                var relayEvents = [
                    'open', 'opening',
                    'close', 'closing',
                    'select', 'selecting',
                    'unselect', 'unselecting'
                ];

                var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];

                decorated.call(this, container, $container);

                container.on('*', function (name, params) {
                    // Ignore events that should not be relayed
                    if ($.inArray(name, relayEvents) === -1) {
                        return;
                    }

                    // The parameters should always be an object
                    params = params || {};

                    // Generate the jQuery event for the Select2 event
                    var evt = $.Event('select2:' + name, {
                        params: params
                    });

                    self.$element.trigger(evt);

                    // Only handle preventable events if it was one
                    if ($.inArray(name, preventableEvents) === -1) {
                        return;
                    }

                    params.prevented = evt.isDefaultPrevented();
                });
            };

            return EventRelay;
        });

        S2.define('select2/translation', [
            'jquery',
            'require'
        ], function ($, require) {
            function Translation(dict) {
                this.dict = dict || {};
            }

            Translation.prototype.all = function () {
                return this.dict;
            };

            Translation.prototype.get = function (key) {
                return this.dict[key];
            };

            Translation.prototype.extend = function (translation) {
                this.dict = $.extend({}, translation.all(), this.dict);
            };

            // Static functions

            Translation._cache = {};

            Translation.loadPath = function (path) {
                if (!(path in Translation._cache)) {
                    var translations = require(path);

                    Translation._cache[path] = translations;
                }

                return new Translation(Translation._cache[path]);
            };

            return Translation;
        });

        S2.define('select2/diacritics', [

        ], function () {
            var diacritics = {
                '\u24B6': 'A',
                '\uFF21': 'A',
                '\u00C0': 'A',
                '\u00C1': 'A',
                '\u00C2': 'A',
                '\u1EA6': 'A',
                '\u1EA4': 'A',
                '\u1EAA': 'A',
                '\u1EA8': 'A',
                '\u00C3': 'A',
                '\u0100': 'A',
                '\u0102': 'A',
                '\u1EB0': 'A',
                '\u1EAE': 'A',
                '\u1EB4': 'A',
                '\u1EB2': 'A',
                '\u0226': 'A',
                '\u01E0': 'A',
                '\u00C4': 'A',
                '\u01DE': 'A',
                '\u1EA2': 'A',
                '\u00C5': 'A',
                '\u01FA': 'A',
                '\u01CD': 'A',
                '\u0200': 'A',
                '\u0202': 'A',
                '\u1EA0': 'A',
                '\u1EAC': 'A',
                '\u1EB6': 'A',
                '\u1E00': 'A',
                '\u0104': 'A',
                '\u023A': 'A',
                '\u2C6F': 'A',
                '\uA732': 'AA',
                '\u00C6': 'AE',
                '\u01FC': 'AE',
                '\u01E2': 'AE',
                '\uA734': 'AO',
                '\uA736': 'AU',
                '\uA738': 'AV',
                '\uA73A': 'AV',
                '\uA73C': 'AY',
                '\u24B7': 'B',
                '\uFF22': 'B',
                '\u1E02': 'B',
                '\u1E04': 'B',
                '\u1E06': 'B',
                '\u0243': 'B',
                '\u0182': 'B',
                '\u0181': 'B',
                '\u24B8': 'C',
                '\uFF23': 'C',
                '\u0106': 'C',
                '\u0108': 'C',
                '\u010A': 'C',
                '\u010C': 'C',
                '\u00C7': 'C',
                '\u1E08': 'C',
                '\u0187': 'C',
                '\u023B': 'C',
                '\uA73E': 'C',
                '\u24B9': 'D',
                '\uFF24': 'D',
                '\u1E0A': 'D',
                '\u010E': 'D',
                '\u1E0C': 'D',
                '\u1E10': 'D',
                '\u1E12': 'D',
                '\u1E0E': 'D',
                '\u0110': 'D',
                '\u018B': 'D',
                '\u018A': 'D',
                '\u0189': 'D',
                '\uA779': 'D',
                '\u01F1': 'DZ',
                '\u01C4': 'DZ',
                '\u01F2': 'Dz',
                '\u01C5': 'Dz',
                '\u24BA': 'E',
                '\uFF25': 'E',
                '\u00C8': 'E',
                '\u00C9': 'E',
                '\u00CA': 'E',
                '\u1EC0': 'E',
                '\u1EBE': 'E',
                '\u1EC4': 'E',
                '\u1EC2': 'E',
                '\u1EBC': 'E',
                '\u0112': 'E',
                '\u1E14': 'E',
                '\u1E16': 'E',
                '\u0114': 'E',
                '\u0116': 'E',
                '\u00CB': 'E',
                '\u1EBA': 'E',
                '\u011A': 'E',
                '\u0204': 'E',
                '\u0206': 'E',
                '\u1EB8': 'E',
                '\u1EC6': 'E',
                '\u0228': 'E',
                '\u1E1C': 'E',
                '\u0118': 'E',
                '\u1E18': 'E',
                '\u1E1A': 'E',
                '\u0190': 'E',
                '\u018E': 'E',
                '\u24BB': 'F',
                '\uFF26': 'F',
                '\u1E1E': 'F',
                '\u0191': 'F',
                '\uA77B': 'F',
                '\u24BC': 'G',
                '\uFF27': 'G',
                '\u01F4': 'G',
                '\u011C': 'G',
                '\u1E20': 'G',
                '\u011E': 'G',
                '\u0120': 'G',
                '\u01E6': 'G',
                '\u0122': 'G',
                '\u01E4': 'G',
                '\u0193': 'G',
                '\uA7A0': 'G',
                '\uA77D': 'G',
                '\uA77E': 'G',
                '\u24BD': 'H',
                '\uFF28': 'H',
                '\u0124': 'H',
                '\u1E22': 'H',
                '\u1E26': 'H',
                '\u021E': 'H',
                '\u1E24': 'H',
                '\u1E28': 'H',
                '\u1E2A': 'H',
                '\u0126': 'H',
                '\u2C67': 'H',
                '\u2C75': 'H',
                '\uA78D': 'H',
                '\u24BE': 'I',
                '\uFF29': 'I',
                '\u00CC': 'I',
                '\u00CD': 'I',
                '\u00CE': 'I',
                '\u0128': 'I',
                '\u012A': 'I',
                '\u012C': 'I',
                '\u0130': 'I',
                '\u00CF': 'I',
                '\u1E2E': 'I',
                '\u1EC8': 'I',
                '\u01CF': 'I',
                '\u0208': 'I',
                '\u020A': 'I',
                '\u1ECA': 'I',
                '\u012E': 'I',
                '\u1E2C': 'I',
                '\u0197': 'I',
                '\u24BF': 'J',
                '\uFF2A': 'J',
                '\u0134': 'J',
                '\u0248': 'J',
                '\u24C0': 'K',
                '\uFF2B': 'K',
                '\u1E30': 'K',
                '\u01E8': 'K',
                '\u1E32': 'K',
                '\u0136': 'K',
                '\u1E34': 'K',
                '\u0198': 'K',
                '\u2C69': 'K',
                '\uA740': 'K',
                '\uA742': 'K',
                '\uA744': 'K',
                '\uA7A2': 'K',
                '\u24C1': 'L',
                '\uFF2C': 'L',
                '\u013F': 'L',
                '\u0139': 'L',
                '\u013D': 'L',
                '\u1E36': 'L',
                '\u1E38': 'L',
                '\u013B': 'L',
                '\u1E3C': 'L',
                '\u1E3A': 'L',
                '\u0141': 'L',
                '\u023D': 'L',
                '\u2C62': 'L',
                '\u2C60': 'L',
                '\uA748': 'L',
                '\uA746': 'L',
                '\uA780': 'L',
                '\u01C7': 'LJ',
                '\u01C8': 'Lj',
                '\u24C2': 'M',
                '\uFF2D': 'M',
                '\u1E3E': 'M',
                '\u1E40': 'M',
                '\u1E42': 'M',
                '\u2C6E': 'M',
                '\u019C': 'M',
                '\u24C3': 'N',
                '\uFF2E': 'N',
                '\u01F8': 'N',
                '\u0143': 'N',
                '\u00D1': 'N',
                '\u1E44': 'N',
                '\u0147': 'N',
                '\u1E46': 'N',
                '\u0145': 'N',
                '\u1E4A': 'N',
                '\u1E48': 'N',
                '\u0220': 'N',
                '\u019D': 'N',
                '\uA790': 'N',
                '\uA7A4': 'N',
                '\u01CA': 'NJ',
                '\u01CB': 'Nj',
                '\u24C4': 'O',
                '\uFF2F': 'O',
                '\u00D2': 'O',
                '\u00D3': 'O',
                '\u00D4': 'O',
                '\u1ED2': 'O',
                '\u1ED0': 'O',
                '\u1ED6': 'O',
                '\u1ED4': 'O',
                '\u00D5': 'O',
                '\u1E4C': 'O',
                '\u022C': 'O',
                '\u1E4E': 'O',
                '\u014C': 'O',
                '\u1E50': 'O',
                '\u1E52': 'O',
                '\u014E': 'O',
                '\u022E': 'O',
                '\u0230': 'O',
                '\u00D6': 'O',
                '\u022A': 'O',
                '\u1ECE': 'O',
                '\u0150': 'O',
                '\u01D1': 'O',
                '\u020C': 'O',
                '\u020E': 'O',
                '\u01A0': 'O',
                '\u1EDC': 'O',
                '\u1EDA': 'O',
                '\u1EE0': 'O',
                '\u1EDE': 'O',
                '\u1EE2': 'O',
                '\u1ECC': 'O',
                '\u1ED8': 'O',
                '\u01EA': 'O',
                '\u01EC': 'O',
                '\u00D8': 'O',
                '\u01FE': 'O',
                '\u0186': 'O',
                '\u019F': 'O',
                '\uA74A': 'O',
                '\uA74C': 'O',
                '\u01A2': 'OI',
                '\uA74E': 'OO',
                '\u0222': 'OU',
                '\u24C5': 'P',
                '\uFF30': 'P',
                '\u1E54': 'P',
                '\u1E56': 'P',
                '\u01A4': 'P',
                '\u2C63': 'P',
                '\uA750': 'P',
                '\uA752': 'P',
                '\uA754': 'P',
                '\u24C6': 'Q',
                '\uFF31': 'Q',
                '\uA756': 'Q',
                '\uA758': 'Q',
                '\u024A': 'Q',
                '\u24C7': 'R',
                '\uFF32': 'R',
                '\u0154': 'R',
                '\u1E58': 'R',
                '\u0158': 'R',
                '\u0210': 'R',
                '\u0212': 'R',
                '\u1E5A': 'R',
                '\u1E5C': 'R',
                '\u0156': 'R',
                '\u1E5E': 'R',
                '\u024C': 'R',
                '\u2C64': 'R',
                '\uA75A': 'R',
                '\uA7A6': 'R',
                '\uA782': 'R',
                '\u24C8': 'S',
                '\uFF33': 'S',
                '\u1E9E': 'S',
                '\u015A': 'S',
                '\u1E64': 'S',
                '\u015C': 'S',
                '\u1E60': 'S',
                '\u0160': 'S',
                '\u1E66': 'S',
                '\u1E62': 'S',
                '\u1E68': 'S',
                '\u0218': 'S',
                '\u015E': 'S',
                '\u2C7E': 'S',
                '\uA7A8': 'S',
                '\uA784': 'S',
                '\u24C9': 'T',
                '\uFF34': 'T',
                '\u1E6A': 'T',
                '\u0164': 'T',
                '\u1E6C': 'T',
                '\u021A': 'T',
                '\u0162': 'T',
                '\u1E70': 'T',
                '\u1E6E': 'T',
                '\u0166': 'T',
                '\u01AC': 'T',
                '\u01AE': 'T',
                '\u023E': 'T',
                '\uA786': 'T',
                '\uA728': 'TZ',
                '\u24CA': 'U',
                '\uFF35': 'U',
                '\u00D9': 'U',
                '\u00DA': 'U',
                '\u00DB': 'U',
                '\u0168': 'U',
                '\u1E78': 'U',
                '\u016A': 'U',
                '\u1E7A': 'U',
                '\u016C': 'U',
                '\u00DC': 'U',
                '\u01DB': 'U',
                '\u01D7': 'U',
                '\u01D5': 'U',
                '\u01D9': 'U',
                '\u1EE6': 'U',
                '\u016E': 'U',
                '\u0170': 'U',
                '\u01D3': 'U',
                '\u0214': 'U',
                '\u0216': 'U',
                '\u01AF': 'U',
                '\u1EEA': 'U',
                '\u1EE8': 'U',
                '\u1EEE': 'U',
                '\u1EEC': 'U',
                '\u1EF0': 'U',
                '\u1EE4': 'U',
                '\u1E72': 'U',
                '\u0172': 'U',
                '\u1E76': 'U',
                '\u1E74': 'U',
                '\u0244': 'U',
                '\u24CB': 'V',
                '\uFF36': 'V',
                '\u1E7C': 'V',
                '\u1E7E': 'V',
                '\u01B2': 'V',
                '\uA75E': 'V',
                '\u0245': 'V',
                '\uA760': 'VY',
                '\u24CC': 'W',
                '\uFF37': 'W',
                '\u1E80': 'W',
                '\u1E82': 'W',
                '\u0174': 'W',
                '\u1E86': 'W',
                '\u1E84': 'W',
                '\u1E88': 'W',
                '\u2C72': 'W',
                '\u24CD': 'X',
                '\uFF38': 'X',
                '\u1E8A': 'X',
                '\u1E8C': 'X',
                '\u24CE': 'Y',
                '\uFF39': 'Y',
                '\u1EF2': 'Y',
                '\u00DD': 'Y',
                '\u0176': 'Y',
                '\u1EF8': 'Y',
                '\u0232': 'Y',
                '\u1E8E': 'Y',
                '\u0178': 'Y',
                '\u1EF6': 'Y',
                '\u1EF4': 'Y',
                '\u01B3': 'Y',
                '\u024E': 'Y',
                '\u1EFE': 'Y',
                '\u24CF': 'Z',
                '\uFF3A': 'Z',
                '\u0179': 'Z',
                '\u1E90': 'Z',
                '\u017B': 'Z',
                '\u017D': 'Z',
                '\u1E92': 'Z',
                '\u1E94': 'Z',
                '\u01B5': 'Z',
                '\u0224': 'Z',
                '\u2C7F': 'Z',
                '\u2C6B': 'Z',
                '\uA762': 'Z',
                '\u24D0': 'a',
                '\uFF41': 'a',
                '\u1E9A': 'a',
                '\u00E0': 'a',
                '\u00E1': 'a',
                '\u00E2': 'a',
                '\u1EA7': 'a',
                '\u1EA5': 'a',
                '\u1EAB': 'a',
                '\u1EA9': 'a',
                '\u00E3': 'a',
                '\u0101': 'a',
                '\u0103': 'a',
                '\u1EB1': 'a',
                '\u1EAF': 'a',
                '\u1EB5': 'a',
                '\u1EB3': 'a',
                '\u0227': 'a',
                '\u01E1': 'a',
                '\u00E4': 'a',
                '\u01DF': 'a',
                '\u1EA3': 'a',
                '\u00E5': 'a',
                '\u01FB': 'a',
                '\u01CE': 'a',
                '\u0201': 'a',
                '\u0203': 'a',
                '\u1EA1': 'a',
                '\u1EAD': 'a',
                '\u1EB7': 'a',
                '\u1E01': 'a',
                '\u0105': 'a',
                '\u2C65': 'a',
                '\u0250': 'a',
                '\uA733': 'aa',
                '\u00E6': 'ae',
                '\u01FD': 'ae',
                '\u01E3': 'ae',
                '\uA735': 'ao',
                '\uA737': 'au',
                '\uA739': 'av',
                '\uA73B': 'av',
                '\uA73D': 'ay',
                '\u24D1': 'b',
                '\uFF42': 'b',
                '\u1E03': 'b',
                '\u1E05': 'b',
                '\u1E07': 'b',
                '\u0180': 'b',
                '\u0183': 'b',
                '\u0253': 'b',
                '\u24D2': 'c',
                '\uFF43': 'c',
                '\u0107': 'c',
                '\u0109': 'c',
                '\u010B': 'c',
                '\u010D': 'c',
                '\u00E7': 'c',
                '\u1E09': 'c',
                '\u0188': 'c',
                '\u023C': 'c',
                '\uA73F': 'c',
                '\u2184': 'c',
                '\u24D3': 'd',
                '\uFF44': 'd',
                '\u1E0B': 'd',
                '\u010F': 'd',
                '\u1E0D': 'd',
                '\u1E11': 'd',
                '\u1E13': 'd',
                '\u1E0F': 'd',
                '\u0111': 'd',
                '\u018C': 'd',
                '\u0256': 'd',
                '\u0257': 'd',
                '\uA77A': 'd',
                '\u01F3': 'dz',
                '\u01C6': 'dz',
                '\u24D4': 'e',
                '\uFF45': 'e',
                '\u00E8': 'e',
                '\u00E9': 'e',
                '\u00EA': 'e',
                '\u1EC1': 'e',
                '\u1EBF': 'e',
                '\u1EC5': 'e',
                '\u1EC3': 'e',
                '\u1EBD': 'e',
                '\u0113': 'e',
                '\u1E15': 'e',
                '\u1E17': 'e',
                '\u0115': 'e',
                '\u0117': 'e',
                '\u00EB': 'e',
                '\u1EBB': 'e',
                '\u011B': 'e',
                '\u0205': 'e',
                '\u0207': 'e',
                '\u1EB9': 'e',
                '\u1EC7': 'e',
                '\u0229': 'e',
                '\u1E1D': 'e',
                '\u0119': 'e',
                '\u1E19': 'e',
                '\u1E1B': 'e',
                '\u0247': 'e',
                '\u025B': 'e',
                '\u01DD': 'e',
                '\u24D5': 'f',
                '\uFF46': 'f',
                '\u1E1F': 'f',
                '\u0192': 'f',
                '\uA77C': 'f',
                '\u24D6': 'g',
                '\uFF47': 'g',
                '\u01F5': 'g',
                '\u011D': 'g',
                '\u1E21': 'g',
                '\u011F': 'g',
                '\u0121': 'g',
                '\u01E7': 'g',
                '\u0123': 'g',
                '\u01E5': 'g',
                '\u0260': 'g',
                '\uA7A1': 'g',
                '\u1D79': 'g',
                '\uA77F': 'g',
                '\u24D7': 'h',
                '\uFF48': 'h',
                '\u0125': 'h',
                '\u1E23': 'h',
                '\u1E27': 'h',
                '\u021F': 'h',
                '\u1E25': 'h',
                '\u1E29': 'h',
                '\u1E2B': 'h',
                '\u1E96': 'h',
                '\u0127': 'h',
                '\u2C68': 'h',
                '\u2C76': 'h',
                '\u0265': 'h',
                '\u0195': 'hv',
                '\u24D8': 'i',
                '\uFF49': 'i',
                '\u00EC': 'i',
                '\u00ED': 'i',
                '\u00EE': 'i',
                '\u0129': 'i',
                '\u012B': 'i',
                '\u012D': 'i',
                '\u00EF': 'i',
                '\u1E2F': 'i',
                '\u1EC9': 'i',
                '\u01D0': 'i',
                '\u0209': 'i',
                '\u020B': 'i',
                '\u1ECB': 'i',
                '\u012F': 'i',
                '\u1E2D': 'i',
                '\u0268': 'i',
                '\u0131': 'i',
                '\u24D9': 'j',
                '\uFF4A': 'j',
                '\u0135': 'j',
                '\u01F0': 'j',
                '\u0249': 'j',
                '\u24DA': 'k',
                '\uFF4B': 'k',
                '\u1E31': 'k',
                '\u01E9': 'k',
                '\u1E33': 'k',
                '\u0137': 'k',
                '\u1E35': 'k',
                '\u0199': 'k',
                '\u2C6A': 'k',
                '\uA741': 'k',
                '\uA743': 'k',
                '\uA745': 'k',
                '\uA7A3': 'k',
                '\u24DB': 'l',
                '\uFF4C': 'l',
                '\u0140': 'l',
                '\u013A': 'l',
                '\u013E': 'l',
                '\u1E37': 'l',
                '\u1E39': 'l',
                '\u013C': 'l',
                '\u1E3D': 'l',
                '\u1E3B': 'l',
                '\u017F': 'l',
                '\u0142': 'l',
                '\u019A': 'l',
                '\u026B': 'l',
                '\u2C61': 'l',
                '\uA749': 'l',
                '\uA781': 'l',
                '\uA747': 'l',
                '\u01C9': 'lj',
                '\u24DC': 'm',
                '\uFF4D': 'm',
                '\u1E3F': 'm',
                '\u1E41': 'm',
                '\u1E43': 'm',
                '\u0271': 'm',
                '\u026F': 'm',
                '\u24DD': 'n',
                '\uFF4E': 'n',
                '\u01F9': 'n',
                '\u0144': 'n',
                '\u00F1': 'n',
                '\u1E45': 'n',
                '\u0148': 'n',
                '\u1E47': 'n',
                '\u0146': 'n',
                '\u1E4B': 'n',
                '\u1E49': 'n',
                '\u019E': 'n',
                '\u0272': 'n',
                '\u0149': 'n',
                '\uA791': 'n',
                '\uA7A5': 'n',
                '\u01CC': 'nj',
                '\u24DE': 'o',
                '\uFF4F': 'o',
                '\u00F2': 'o',
                '\u00F3': 'o',
                '\u00F4': 'o',
                '\u1ED3': 'o',
                '\u1ED1': 'o',
                '\u1ED7': 'o',
                '\u1ED5': 'o',
                '\u00F5': 'o',
                '\u1E4D': 'o',
                '\u022D': 'o',
                '\u1E4F': 'o',
                '\u014D': 'o',
                '\u1E51': 'o',
                '\u1E53': 'o',
                '\u014F': 'o',
                '\u022F': 'o',
                '\u0231': 'o',
                '\u00F6': 'o',
                '\u022B': 'o',
                '\u1ECF': 'o',
                '\u0151': 'o',
                '\u01D2': 'o',
                '\u020D': 'o',
                '\u020F': 'o',
                '\u01A1': 'o',
                '\u1EDD': 'o',
                '\u1EDB': 'o',
                '\u1EE1': 'o',
                '\u1EDF': 'o',
                '\u1EE3': 'o',
                '\u1ECD': 'o',
                '\u1ED9': 'o',
                '\u01EB': 'o',
                '\u01ED': 'o',
                '\u00F8': 'o',
                '\u01FF': 'o',
                '\u0254': 'o',
                '\uA74B': 'o',
                '\uA74D': 'o',
                '\u0275': 'o',
                '\u01A3': 'oi',
                '\u0223': 'ou',
                '\uA74F': 'oo',
                '\u24DF': 'p',
                '\uFF50': 'p',
                '\u1E55': 'p',
                '\u1E57': 'p',
                '\u01A5': 'p',
                '\u1D7D': 'p',
                '\uA751': 'p',
                '\uA753': 'p',
                '\uA755': 'p',
                '\u24E0': 'q',
                '\uFF51': 'q',
                '\u024B': 'q',
                '\uA757': 'q',
                '\uA759': 'q',
                '\u24E1': 'r',
                '\uFF52': 'r',
                '\u0155': 'r',
                '\u1E59': 'r',
                '\u0159': 'r',
                '\u0211': 'r',
                '\u0213': 'r',
                '\u1E5B': 'r',
                '\u1E5D': 'r',
                '\u0157': 'r',
                '\u1E5F': 'r',
                '\u024D': 'r',
                '\u027D': 'r',
                '\uA75B': 'r',
                '\uA7A7': 'r',
                '\uA783': 'r',
                '\u24E2': 's',
                '\uFF53': 's',
                '\u00DF': 's',
                '\u015B': 's',
                '\u1E65': 's',
                '\u015D': 's',
                '\u1E61': 's',
                '\u0161': 's',
                '\u1E67': 's',
                '\u1E63': 's',
                '\u1E69': 's',
                '\u0219': 's',
                '\u015F': 's',
                '\u023F': 's',
                '\uA7A9': 's',
                '\uA785': 's',
                '\u1E9B': 's',
                '\u24E3': 't',
                '\uFF54': 't',
                '\u1E6B': 't',
                '\u1E97': 't',
                '\u0165': 't',
                '\u1E6D': 't',
                '\u021B': 't',
                '\u0163': 't',
                '\u1E71': 't',
                '\u1E6F': 't',
                '\u0167': 't',
                '\u01AD': 't',
                '\u0288': 't',
                '\u2C66': 't',
                '\uA787': 't',
                '\uA729': 'tz',
                '\u24E4': 'u',
                '\uFF55': 'u',
                '\u00F9': 'u',
                '\u00FA': 'u',
                '\u00FB': 'u',
                '\u0169': 'u',
                '\u1E79': 'u',
                '\u016B': 'u',
                '\u1E7B': 'u',
                '\u016D': 'u',
                '\u00FC': 'u',
                '\u01DC': 'u',
                '\u01D8': 'u',
                '\u01D6': 'u',
                '\u01DA': 'u',
                '\u1EE7': 'u',
                '\u016F': 'u',
                '\u0171': 'u',
                '\u01D4': 'u',
                '\u0215': 'u',
                '\u0217': 'u',
                '\u01B0': 'u',
                '\u1EEB': 'u',
                '\u1EE9': 'u',
                '\u1EEF': 'u',
                '\u1EED': 'u',
                '\u1EF1': 'u',
                '\u1EE5': 'u',
                '\u1E73': 'u',
                '\u0173': 'u',
                '\u1E77': 'u',
                '\u1E75': 'u',
                '\u0289': 'u',
                '\u24E5': 'v',
                '\uFF56': 'v',
                '\u1E7D': 'v',
                '\u1E7F': 'v',
                '\u028B': 'v',
                '\uA75F': 'v',
                '\u028C': 'v',
                '\uA761': 'vy',
                '\u24E6': 'w',
                '\uFF57': 'w',
                '\u1E81': 'w',
                '\u1E83': 'w',
                '\u0175': 'w',
                '\u1E87': 'w',
                '\u1E85': 'w',
                '\u1E98': 'w',
                '\u1E89': 'w',
                '\u2C73': 'w',
                '\u24E7': 'x',
                '\uFF58': 'x',
                '\u1E8B': 'x',
                '\u1E8D': 'x',
                '\u24E8': 'y',
                '\uFF59': 'y',
                '\u1EF3': 'y',
                '\u00FD': 'y',
                '\u0177': 'y',
                '\u1EF9': 'y',
                '\u0233': 'y',
                '\u1E8F': 'y',
                '\u00FF': 'y',
                '\u1EF7': 'y',
                '\u1E99': 'y',
                '\u1EF5': 'y',
                '\u01B4': 'y',
                '\u024F': 'y',
                '\u1EFF': 'y',
                '\u24E9': 'z',
                '\uFF5A': 'z',
                '\u017A': 'z',
                '\u1E91': 'z',
                '\u017C': 'z',
                '\u017E': 'z',
                '\u1E93': 'z',
                '\u1E95': 'z',
                '\u01B6': 'z',
                '\u0225': 'z',
                '\u0240': 'z',
                '\u2C6C': 'z',
                '\uA763': 'z',
                '\u0386': '\u0391',
                '\u0388': '\u0395',
                '\u0389': '\u0397',
                '\u038A': '\u0399',
                '\u03AA': '\u0399',
                '\u038C': '\u039F',
                '\u038E': '\u03A5',
                '\u03AB': '\u03A5',
                '\u038F': '\u03A9',
                '\u03AC': '\u03B1',
                '\u03AD': '\u03B5',
                '\u03AE': '\u03B7',
                '\u03AF': '\u03B9',
                '\u03CA': '\u03B9',
                '\u0390': '\u03B9',
                '\u03CC': '\u03BF',
                '\u03CD': '\u03C5',
                '\u03CB': '\u03C5',
                '\u03B0': '\u03C5',
                '\u03C9': '\u03C9',
                '\u03C2': '\u03C3'
            };

            return diacritics;
        });

        S2.define('select2/data/base', [
            '../utils'
        ], function (Utils) {
            function BaseAdapter($element, options) {
                BaseAdapter.__super__.constructor.call(this);
            }

            Utils.Extend(BaseAdapter, Utils.Observable);

            BaseAdapter.prototype.current = function (callback) {
                throw new Error('The `current` method must be defined in child classes.');
            };

            BaseAdapter.prototype.query = function (params, callback) {
                throw new Error('The `query` method must be defined in child classes.');
            };

            BaseAdapter.prototype.bind = function (container, $container) {
                // Can be implemented in subclasses
            };

            BaseAdapter.prototype.destroy = function () {
                // Can be implemented in subclasses
            };

            BaseAdapter.prototype.generateResultId = function (container, data) {
                var id = container.id + '-result-';

                id += Utils.generateChars(4);

                if (data.id != null) {
                    id += '-' + data.id.toString();
                } else {
                    id += '-' + Utils.generateChars(4);
                }
                return id;
            };

            return BaseAdapter;
        });

        S2.define('select2/data/select', [
            './base',
            '../utils',
            'jquery'
        ], function (BaseAdapter, Utils, $) {
            function SelectAdapter($element, options) {
                this.$element = $element;
                this.options = options;

                SelectAdapter.__super__.constructor.call(this);
            }

            Utils.Extend(SelectAdapter, BaseAdapter);

            SelectAdapter.prototype.current = function (callback) {
                var data = [];
                var self = this;

                this.$element.find(':selected').each(function () {
                    var $option = $(this);

                    var option = self.item($option);

                    data.push(option);
                });

                callback(data);
            };

            SelectAdapter.prototype.select = function (data) {
                var self = this;

                data.selected = true;

                // If data.element is a DOM node, use it instead
                if ($(data.element).is('option')) {
                    data.element.selected = true;

                    this.$element.trigger('change');

                    return;
                }

                if (this.$element.prop('multiple')) {
                    this.current(function (currentData) {
                        var val = [];

                        data = [data];
                        data.push.apply(data, currentData);

                        for (var d = 0; d < data.length; d++) {
                            var id = data[d].id;

                            if ($.inArray(id, val) === -1) {
                                val.push(id);
                            }
                        }

                        self.$element.val(val);
                        self.$element.trigger('change');
                    });
                } else {
                    var val = data.id;

                    this.$element.val(val);
                    this.$element.trigger('change');
                }
            };

            SelectAdapter.prototype.unselect = function (data) {
                var self = this;

                if (!this.$element.prop('multiple')) {
                    return;
                }

                data.selected = false;

                if ($(data.element).is('option')) {
                    data.element.selected = false;

                    this.$element.trigger('change');

                    return;
                }

                this.current(function (currentData) {
                    var val = [];

                    for (var d = 0; d < currentData.length; d++) {
                        var id = currentData[d].id;

                        if (id !== data.id && $.inArray(id, val) === -1) {
                            val.push(id);
                        }
                    }

                    self.$element.val(val);

                    self.$element.trigger('change');
                });
            };

            SelectAdapter.prototype.bind = function (container, $container) {
                var self = this;

                this.container = container;

                container.on('select', function (params) {
                    self.select(params.data);
                });

                container.on('unselect', function (params) {
                    self.unselect(params.data);
                });
            };

            SelectAdapter.prototype.destroy = function () {
                // Remove anything added to child elements
                this.$element.find('*').each(function () {
                    // Remove any custom data set by Select2
                    $.removeData(this, 'data');
                });
            };

            SelectAdapter.prototype.query = function (params, callback) {
                var data = [];
                var self = this;

                var $options = this.$element.children();

                $options.each(function () {
                    var $option = $(this);

                    if (!$option.is('option') && !$option.is('optgroup')) {
                        return;
                    }

                    var option = self.item($option);

                    var matches = self.matches(params, option);

                    if (matches !== null) {
                        data.push(matches);
                    }
                });

                callback({
                    results: data
                });
            };

            SelectAdapter.prototype.addOptions = function ($options) {
                Utils.appendMany(this.$element, $options);
            };

            SelectAdapter.prototype.option = function (data) {
                var option;

                if (data.children) {
                    option = document.createElement('optgroup');
                    option.label = data.text;
                } else {
                    option = document.createElement('option');

                    if (option.textContent !== undefined) {
                        option.textContent = data.text;
                    } else {
                        option.innerText = data.text;
                    }
                }

                if (data.id !== undefined) {
                    option.value = data.id;
                }

                if (data.disabled) {
                    option.disabled = true;
                }

                if (data.selected) {
                    option.selected = true;
                }

                if (data.title) {
                    option.title = data.title;
                }

                var $option = $(option);

                var normalizedData = this._normalizeItem(data);
                normalizedData.element = option;

                // Override the option's data with the combined data
                $.data(option, 'data', normalizedData);

                return $option;
            };

            SelectAdapter.prototype.item = function ($option) {
                var data = {};

                data = $.data($option[0], 'data');

                if (data != null) {
                    return data;
                }

                if ($option.is('option')) {
                    data = {
                        id: $option.val(),
                        text: $option.text(),
                        disabled: $option.prop('disabled'),
                        selected: $option.prop('selected'),
                        title: $option.prop('title')
                    };
                } else if ($option.is('optgroup')) {
                    data = {
                        text: $option.prop('label'),
                        children: [],
                        title: $option.prop('title')
                    };

                    var $children = $option.children('option');
                    var children = [];

                    for (var c = 0; c < $children.length; c++) {
                        var $child = $($children[c]);

                        var child = this.item($child);

                        children.push(child);
                    }

                    data.children = children;
                }

                data = this._normalizeItem(data);
                data.element = $option[0];

                $.data($option[0], 'data', data);

                return data;
            };

            SelectAdapter.prototype._normalizeItem = function (item) {
                if (!$.isPlainObject(item)) {
                    item = {
                        id: item,
                        text: item
                    };
                }

                item = $.extend({}, {
                    text: ''
                }, item);

                var defaults = {
                    selected: false,
                    disabled: false
                };

                if (item.id != null) {
                    item.id = item.id.toString();
                }

                if (item.text != null) {
                    item.text = item.text.toString();
                }

                if (item._resultId == null && item.id && this.container != null) {
                    item._resultId = this.generateResultId(this.container, item);
                }

                return $.extend({}, defaults, item);
            };

            SelectAdapter.prototype.matches = function (params, data) {
                var matcher = this.options.get('matcher');

                return matcher(params, data);
            };

            return SelectAdapter;
        });

        S2.define('select2/data/array', [
            './select',
            '../utils',
            'jquery'
        ], function (SelectAdapter, Utils, $) {
            function ArrayAdapter($element, options) {
                var data = options.get('data') || [];

                ArrayAdapter.__super__.constructor.call(this, $element, options);

                this.addOptions(this.convertToOptions(data));
            }

            Utils.Extend(ArrayAdapter, SelectAdapter);

            ArrayAdapter.prototype.select = function (data) {
                var $option = this.$element.find('option').filter(function (i, elm) {
                    return elm.value == data.id.toString();
                });

                if ($option.length === 0) {
                    $option = this.option(data);

                    this.addOptions($option);
                }

                ArrayAdapter.__super__.select.call(this, data);
            };

            ArrayAdapter.prototype.convertToOptions = function (data) {
                var self = this;

                var $existing = this.$element.find('option');
                var existingIds = $existing.map(function () {
                    return self.item($(this)).id;
                }).get();

                var $options = [];

                // Filter out all items except for the one passed in the argument
                function onlyItem(item) {
                    return function () {
                        return $(this).val() == item.id;
                    };
                }

                for (var d = 0; d < data.length; d++) {
                    var item = this._normalizeItem(data[d]);

                    // Skip items which were pre-loaded, only merge the data
                    if ($.inArray(item.id, existingIds) >= 0) {
                        var $existingOption = $existing.filter(onlyItem(item));

                        var existingData = this.item($existingOption);
                        var newData = $.extend(true, {}, item, existingData);

                        var $newOption = this.option(newData);

                        $existingOption.replaceWith($newOption);

                        continue;
                    }

                    var $option = this.option(item);

                    if (item.children) {
                        var $children = this.convertToOptions(item.children);

                        Utils.appendMany($option, $children);
                    }

                    $options.push($option);
                }

                return $options;
            };

            return ArrayAdapter;
        });

        S2.define('select2/data/ajax', [
            './array',
            '../utils',
            'jquery'
        ], function (ArrayAdapter, Utils, $) {
            function AjaxAdapter($element, options) {
                this.ajaxOptions = this._applyDefaults(options.get('ajax'));

                if (this.ajaxOptions.processResults != null) {
                    this.processResults = this.ajaxOptions.processResults;
                }

                AjaxAdapter.__super__.constructor.call(this, $element, options);
            }

            Utils.Extend(AjaxAdapter, ArrayAdapter);

            AjaxAdapter.prototype._applyDefaults = function (options) {
                var defaults = {
                    data: function (params) {
                        return $.extend({}, params, {
                            q: params.term
                        });
                    },
                    transport: function (params, success, failure) {
                        var $request = $.ajax(params);

                        $request.then(success);
                        $request.fail(failure);

                        return $request;
                    }
                };

                return $.extend({}, defaults, options, true);
            };

            AjaxAdapter.prototype.processResults = function (results) {
                return results;
            };

            AjaxAdapter.prototype.query = function (params, callback) {
                var matches = [];
                var self = this;

                if (this._request != null) {
                    // JSONP requests cannot always be aborted
                    if ($.isFunction(this._request.abort)) {
                        this._request.abort();
                    }

                    this._request = null;
                }

                var options = $.extend({
                    type: 'GET'
                }, this.ajaxOptions);

                if (typeof options.url === 'function') {
                    options.url = options.url.call(this.$element, params);
                }

                if (typeof options.data === 'function') {
                    options.data = options.data.call(this.$element, params);
                }

                function request() {
                    var $request = options.transport(options, function (data) {
                        var results = self.processResults(data, params);

                        if (self.options.get('debug') && window.console && console.error) {
                            // Check to make sure that the response included a `results` key.
                            if (!results || !results.results || !$.isArray(results.results)) {
                                console.error(
                                    'Select2: The AJAX results did not return an array in the ' +
                                    '`results` key of the response.'
                                );
                            }
                        }

                        callback(results);
                    }, function () {
                        // Attempt to detect if a request was aborted
                        // Only works if the transport exposes a status property
                        if ($request.status && $request.status === '0') {
                            return;
                        }

                        self.trigger('results:message', {
                            message: 'errorLoading'
                        });
                    });

                    self._request = $request;
                }

                if (this.ajaxOptions.delay && params.term != null) {
                    if (this._queryTimeout) {
                        window.clearTimeout(this._queryTimeout);
                    }

                    this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
                } else {
                    request();
                }
            };

            return AjaxAdapter;
        });

        S2.define('select2/data/tags', [
            'jquery'
        ], function ($) {
            function Tags(decorated, $element, options) {
                var tags = options.get('tags');

                var createTag = options.get('createTag');

                if (createTag !== undefined) {
                    this.createTag = createTag;
                }

                var insertTag = options.get('insertTag');

                if (insertTag !== undefined) {
                    this.insertTag = insertTag;
                }

                decorated.call(this, $element, options);

                if ($.isArray(tags)) {
                    for (var t = 0; t < tags.length; t++) {
                        var tag = tags[t];
                        var item = this._normalizeItem(tag);

                        var $option = this.option(item);

                        this.$element.append($option);
                    }
                }
            }

            Tags.prototype.query = function (decorated, params, callback) {
                var self = this;

                this._removeOldTags();

                if (params.term == null || params.page != null) {
                    decorated.call(this, params, callback);
                    return;
                }

                function wrapper(obj, child) {
                    var data = obj.results;

                    for (var i = 0; i < data.length; i++) {
                        var option = data[i];

                        var checkChildren = (
                            option.children != null &&
                            !wrapper({
                                results: option.children
                            }, true)
                        );

                        var optionText = (option.text || '').toUpperCase();
                        var paramsTerm = (params.term || '').toUpperCase();

                        var checkText = optionText === paramsTerm;

                        if (checkText || checkChildren) {
                            if (child) {
                                return false;
                            }

                            obj.data = data;
                            callback(obj);

                            return;
                        }
                    }

                    if (child) {
                        return true;
                    }

                    var tag = self.createTag(params);

                    if (tag != null) {
                        var $option = self.option(tag);
                        $option.attr('data-select2-tag', true);

                        self.addOptions([$option]);

                        self.insertTag(data, tag);
                    }

                    obj.results = data;

                    callback(obj);
                }

                decorated.call(this, params, wrapper);
            };

            Tags.prototype.createTag = function (decorated, params) {
                var term = $.trim(params.term);

                if (term === '') {
                    return null;
                }

                return {
                    id: term,
                    text: term
                };
            };

            Tags.prototype.insertTag = function (_, data, tag) {
                data.unshift(tag);
            };

            Tags.prototype._removeOldTags = function (_) {
                var tag = this._lastTag;

                var $options = this.$element.find('option[data-select2-tag]');

                $options.each(function () {
                    if (this.selected) {
                        return;
                    }

                    $(this).remove();
                });
            };

            return Tags;
        });

        S2.define('select2/data/tokenizer', [
            'jquery'
        ], function ($) {
            function Tokenizer(decorated, $element, options) {
                var tokenizer = options.get('tokenizer');

                if (tokenizer !== undefined) {
                    this.tokenizer = tokenizer;
                }

                decorated.call(this, $element, options);
            }

            Tokenizer.prototype.bind = function (decorated, container, $container) {
                decorated.call(this, container, $container);

                this.$search = container.dropdown.$search || container.selection.$search ||
                    $container.find('.select2-search__field');
            };

            Tokenizer.prototype.query = function (decorated, params, callback) {
                var self = this;

                function createAndSelect(data) {
                    // Normalize the data object so we can use it for checks
                    var item = self._normalizeItem(data);

                    // Check if the data object already exists as a tag
                    // Select it if it doesn't
                    var $existingOptions = self.$element.find('option').filter(function () {
                        return $(this).val() === item.id;
                    });

                    // If an existing option wasn't found for it, create the option
                    if (!$existingOptions.length) {
                        var $option = self.option(item);
                        $option.attr('data-select2-tag', true);

                        self._removeOldTags();
                        self.addOptions([$option]);
                    }

                    // Select the item, now that we know there is an option for it
                    select(item);
                }

                function select(data) {
                    self.trigger('select', {
                        data: data
                    });
                }

                params.term = params.term || '';

                var tokenData = this.tokenizer(params, this.options, createAndSelect);

                if (tokenData.term !== params.term) {
                    // Replace the search term if we have the search box
                    if (this.$search.length) {
                        this.$search.val(tokenData.term);
                        this.$search.focus();
                    }

                    params.term = tokenData.term;
                }

                decorated.call(this, params, callback);
            };

            Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
                var separators = options.get('tokenSeparators') || [];
                var term = params.term;
                var i = 0;

                var createTag = this.createTag || function (params) {
                    return {
                        id: params.term,
                        text: params.term
                    };
                };

                while (i < term.length) {
                    var termChar = term[i];

                    if ($.inArray(termChar, separators) === -1) {
                        i++;

                        continue;
                    }

                    var part = term.substr(0, i);
                    var partParams = $.extend({}, params, {
                        term: part
                    });

                    var data = createTag(partParams);

                    if (data == null) {
                        i++;
                        continue;
                    }

                    callback(data);

                    // Reset the term to not include the tokenized portion
                    term = term.substr(i + 1) || '';
                    i = 0;
                }

                return {
                    term: term
                };
            };

            return Tokenizer;
        });

        S2.define('select2/data/minimumInputLength', [

        ], function () {
            function MinimumInputLength(decorated, $e, options) {
                this.minimumInputLength = options.get('minimumInputLength');

                decorated.call(this, $e, options);
            }

            MinimumInputLength.prototype.query = function (decorated, params, callback) {
                params.term = params.term || '';

                if (params.term.length < this.minimumInputLength) {
                    this.trigger('results:message', {
                        message: 'inputTooShort',
                        args: {
                            minimum: this.minimumInputLength,
                            input: params.term,
                            params: params
                        }
                    });

                    return;
                }

                decorated.call(this, params, callback);
            };

            return MinimumInputLength;
        });

        S2.define('select2/data/maximumInputLength', [

        ], function () {
            function MaximumInputLength(decorated, $e, options) {
                this.maximumInputLength = options.get('maximumInputLength');

                decorated.call(this, $e, options);
            }

            MaximumInputLength.prototype.query = function (decorated, params, callback) {
                params.term = params.term || '';

                if (this.maximumInputLength > 0 &&
                    params.term.length > this.maximumInputLength) {
                    this.trigger('results:message', {
                        message: 'inputTooLong',
                        args: {
                            maximum: this.maximumInputLength,
                            input: params.term,
                            params: params
                        }
                    });

                    return;
                }

                decorated.call(this, params, callback);
            };

            return MaximumInputLength;
        });

        S2.define('select2/data/maximumSelectionLength', [

        ], function () {
            function MaximumSelectionLength(decorated, $e, options) {
                this.maximumSelectionLength = options.get('maximumSelectionLength');

                decorated.call(this, $e, options);
            }

            MaximumSelectionLength.prototype.query =
                function (decorated, params, callback) {
                    var self = this;

                    this.current(function (currentData) {
                        var count = currentData != null ? currentData.length : 0;
                        if (self.maximumSelectionLength > 0 &&
                            count >= self.maximumSelectionLength) {
                            self.trigger('results:message', {
                                message: 'maximumSelected',
                                args: {
                                    maximum: self.maximumSelectionLength
                                }
                            });
                            return;
                        }
                        decorated.call(self, params, callback);
                    });
                };

            return MaximumSelectionLength;
        });

        S2.define('select2/dropdown', [
            'jquery',
            './utils'
        ], function ($, Utils) {
            function Dropdown($element, options) {
                this.$element = $element;
                this.options = options;

                Dropdown.__super__.constructor.call(this);
            }

            Utils.Extend(Dropdown, Utils.Observable);

            Dropdown.prototype.render = function () {
                var $dropdown = $(
                    '<span class="select2-dropdown">' +
                    '<span class="select2-results"></span>' +
                    '</span>'
                );

                $dropdown.attr('dir', this.options.get('dir'));

                this.$dropdown = $dropdown;

                return $dropdown;
            };

            Dropdown.prototype.bind = function () {
                // Should be implemented in subclasses
            };

            Dropdown.prototype.position = function ($dropdown, $container) {
                // Should be implmented in subclasses
            };

            Dropdown.prototype.destroy = function () {
                // Remove the dropdown from the DOM
                this.$dropdown.remove();
            };

            return Dropdown;
        });

        S2.define('select2/dropdown/search', [
            'jquery',
            '../utils'
        ], function ($, Utils) {
            function Search() { }

            Search.prototype.render = function (decorated) {
                var $rendered = decorated.call(this);

                var $search = $(
                    '<span class="select2-search select2-search--dropdown">' +
                    '<input aria-label="Search Field" class="select2-search__field" type="search" tabindex="-1"' +
                    ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
                    ' spellcheck="false" role="textbox" />' +
                    '</span>'
                );

                this.$searchContainer = $search;
                this.$search = $search.find('input');

                $rendered.prepend($search);

                return $rendered;
            };

            Search.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                this.$search.on('keydown', function (evt) {
                    self.trigger('keypress', evt);

                    self._keyUpPrevented = evt.isDefaultPrevented();
                });

                // Workaround for browsers which do not support the `input` event
                // This will prevent double-triggering of events for browsers which support
                // both the `keyup` and `input` events.
                this.$search.on('input', function (evt) {
                    // Unbind the duplicated `keyup` event
                    $(this).off('keyup');
                });

                this.$search.on('keyup input', function (evt) {
                    self.handleSearch(evt);
                });

                container.on('open', function () {
                    self.$search.attr('tabindex', 0);

                    self.$search.focus();

                    window.setTimeout(function () {
                        self.$search.focus();
                    }, 0);
                });

                container.on('close', function () {
                    self.$search.attr('tabindex', -1);

                    self.$search.val('');
                });

                container.on('focus', function () {
                    if (!container.isOpen()) {
                        self.$search.focus();
                    }
                });

                container.on('results:all', function (params) {
                    if (params.query.term == null || params.query.term === '') {
                        var showSearch = self.showSearch(params);

                        if (showSearch) {
                            self.$searchContainer.removeClass('select2-search--hide');
                        } else {
                            self.$searchContainer.addClass('select2-search--hide');
                        }
                    }
                });
            };

            Search.prototype.handleSearch = function (evt) {
                if (!this._keyUpPrevented) {
                    var input = this.$search.val();

                    this.trigger('query', {
                        term: input
                    });
                }

                this._keyUpPrevented = false;
            };

            Search.prototype.showSearch = function (_, params) {
                return true;
            };

            return Search;
        });

        S2.define('select2/dropdown/hidePlaceholder', [

        ], function () {
            function HidePlaceholder(decorated, $element, options, dataAdapter) {
                this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

                decorated.call(this, $element, options, dataAdapter);
            }

            HidePlaceholder.prototype.append = function (decorated, data) {
                data.results = this.removePlaceholder(data.results);

                decorated.call(this, data);
            };

            HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
                if (typeof placeholder === 'string') {
                    placeholder = {
                        id: '',
                        text: placeholder
                    };
                }

                return placeholder;
            };

            HidePlaceholder.prototype.removePlaceholder = function (_, data) {
                var modifiedData = data.slice(0);

                for (var d = data.length - 1; d >= 0; d--) {
                    var item = data[d];

                    if (this.placeholder.id === item.id) {
                        modifiedData.splice(d, 1);
                    }
                }

                return modifiedData;
            };

            return HidePlaceholder;
        });

        S2.define('select2/dropdown/infiniteScroll', [
            'jquery'
        ], function ($) {
            function InfiniteScroll(decorated, $element, options, dataAdapter) {
                this.lastParams = {};

                decorated.call(this, $element, options, dataAdapter);

                this.$loadingMore = this.createLoadingMore();
                this.loading = false;
            }

            InfiniteScroll.prototype.append = function (decorated, data) {
                this.$loadingMore.remove();
                this.loading = false;

                decorated.call(this, data);

                if (this.showLoadingMore(data)) {
                    this.$results.append(this.$loadingMore);
                }
            };

            InfiniteScroll.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('query', function (params) {
                    self.lastParams = params;
                    self.loading = true;
                });

                container.on('query:append', function (params) {
                    self.lastParams = params;
                    self.loading = true;
                });

                this.$results.on('scroll', function () {
                    var isLoadMoreVisible = $.contains(
                        document.documentElement,
                        self.$loadingMore[0]
                    );

                    if (self.loading || !isLoadMoreVisible) {
                        return;
                    }

                    var currentOffset = self.$results.offset().top +
                        self.$results.outerHeight(false);
                    var loadingMoreOffset = self.$loadingMore.offset().top +
                        self.$loadingMore.outerHeight(false);

                    if (currentOffset + 50 >= loadingMoreOffset) {
                        self.loadMore();
                    }
                });
            };

            InfiniteScroll.prototype.loadMore = function () {
                this.loading = true;

                var params = $.extend({}, { page: 1 }, this.lastParams);

                params.page++;

                this.trigger('query:append', params);
            };

            InfiniteScroll.prototype.showLoadingMore = function (_, data) {
                return data.pagination && data.pagination.more;
            };

            InfiniteScroll.prototype.createLoadingMore = function () {
                var $option = $(
                    '<li ' +
                    'class="select2-results__option select2-results__option--load-more"' +
                    'role="treeitem" aria-disabled="true"></li>'
                );

                var message = this.options.get('translations').get('loadingMore');

                $option.html(message(this.lastParams));

                return $option;
            };

            return InfiniteScroll;
        });

        S2.define('select2/dropdown/attachBody', [
            'jquery',
            '../utils'
        ], function ($, Utils) {
            function AttachBody(decorated, $element, options) {
                this.$dropdownParent = options.get('dropdownParent') || $(document.body);

                decorated.call(this, $element, options);
            }

            AttachBody.prototype.bind = function (decorated, container, $container) {
                var self = this;

                var setupResultsEvents = false;

                decorated.call(this, container, $container);

                container.on('open', function () {
                    self._showDropdown();
                    self._attachPositioningHandler(container);

                    if (!setupResultsEvents) {
                        setupResultsEvents = true;

                        container.on('results:all', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });

                        container.on('results:append', function () {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });
                    }
                });

                container.on('close', function () {
                    self._hideDropdown();
                    self._detachPositioningHandler(container);
                });

                this.$dropdownContainer.on('mousedown', function (evt) {
                    evt.stopPropagation();
                });
            };

            AttachBody.prototype.destroy = function (decorated) {
                decorated.call(this);

                this.$dropdownContainer.remove();
            };

            AttachBody.prototype.position = function (decorated, $dropdown, $container) {
                // Clone all of the container classes
                $dropdown.attr('class', $container.attr('class'));

                $dropdown.removeClass('select2');
                $dropdown.addClass('select2-container--open');

                $dropdown.css({
                    position: 'absolute',
                    top: -999999
                });

                this.$container = $container;
            };

            AttachBody.prototype.render = function (decorated) {
                var $container = $('<span></span>');

                var $dropdown = decorated.call(this);
                $container.append($dropdown);

                this.$dropdownContainer = $container;

                return $container;
            };

            AttachBody.prototype._hideDropdown = function (decorated) {
                this.$dropdownContainer.detach();
            };

            AttachBody.prototype._attachPositioningHandler =
                function (decorated, container) {
                    var self = this;

                    var scrollEvent = 'scroll.select2.' + container.id;
                    var resizeEvent = 'resize.select2.' + container.id;
                    var orientationEvent = 'orientationchange.select2.' + container.id;

                    var $watchers = this.$container.parents().filter(Utils.hasScroll);
                    $watchers.each(function () {
                        $(this).data('select2-scroll-position', {
                            x: $(this).scrollLeft(),
                            y: $(this).scrollTop()
                        });
                    });

                    $watchers.on(scrollEvent, function (ev) {
                        var position = $(this).data('select2-scroll-position');
                        $(this).scrollTop(position.y);
                    });

                    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
                        function (e) {
                            self._positionDropdown();
                            self._resizeDropdown();
                        });
                };

            AttachBody.prototype._detachPositioningHandler =
                function (decorated, container) {
                    var scrollEvent = 'scroll.select2.' + container.id;
                    var resizeEvent = 'resize.select2.' + container.id;
                    var orientationEvent = 'orientationchange.select2.' + container.id;

                    var $watchers = this.$container.parents().filter(Utils.hasScroll);
                    $watchers.off(scrollEvent);

                    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
                };

            AttachBody.prototype._positionDropdown = function () {
                var $window = $(window);

                var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
                var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

                var newDirection = null;

                var offset = this.$container.offset();

                offset.bottom = offset.top + this.$container.outerHeight(false);

                var container = {
                    height: this.$container.outerHeight(false)
                };

                container.top = offset.top;
                container.bottom = offset.top + container.height;

                var dropdown = {
                    height: this.$dropdown.outerHeight(false)
                };

                var viewport = {
                    top: $window.scrollTop(),
                    bottom: $window.scrollTop() + $window.height()
                };

                var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
                var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

                var css = {
                    left: offset.left,
                    top: container.bottom
                };

                // Determine what the parent element is to use for calciulating the offset
                var $offsetParent = this.$dropdownParent;

                // For statically positoned elements, we need to get the element
                // that is determining the offset
                if ($offsetParent.css('position') === 'static') {
                    $offsetParent = $offsetParent.offsetParent();
                }

                var parentOffset = $offsetParent.offset();

                css.top -= parentOffset.top;
                css.left -= parentOffset.left;

                if (!isCurrentlyAbove && !isCurrentlyBelow) {
                    newDirection = 'below';
                }

                if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                    newDirection = 'above';
                } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                    newDirection = 'below';
                }

                if (newDirection == 'above' ||
                    (isCurrentlyAbove && newDirection !== 'below')) {
                    css.top = container.top - parentOffset.top - dropdown.height;
                }

                if (newDirection != null) {
                    this.$dropdown
                        .removeClass('select2-dropdown--below select2-dropdown--above')
                        .addClass('select2-dropdown--' + newDirection);
                    this.$container
                        .removeClass('select2-container--below select2-container--above')
                        .addClass('select2-container--' + newDirection);
                }

                this.$dropdownContainer.css(css);
            };

            AttachBody.prototype._resizeDropdown = function () {
                var css = {
                    width: this.$container.outerWidth(false) + 'px'
                };

                if (this.options.get('dropdownAutoWidth')) {
                    css.minWidth = css.width;
                    css.position = 'relative';
                    css.width = 'auto';
                }

                this.$dropdown.css(css);
            };

            AttachBody.prototype._showDropdown = function (decorated) {
                this.$dropdownContainer.appendTo(this.$dropdownParent);

                this._positionDropdown();
                this._resizeDropdown();
            };

            return AttachBody;
        });

        S2.define('select2/dropdown/minimumResultsForSearch', [

        ], function () {
            function countResults(data) {
                var count = 0;

                for (var d = 0; d < data.length; d++) {
                    var item = data[d];

                    if (item.children) {
                        count += countResults(item.children);
                    } else {
                        count++;
                    }
                }

                return count;
            }

            function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
                this.minimumResultsForSearch = options.get('minimumResultsForSearch');

                if (this.minimumResultsForSearch < 0) {
                    this.minimumResultsForSearch = Infinity;
                }

                decorated.call(this, $element, options, dataAdapter);
            }

            MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
                if (countResults(params.data.results) < this.minimumResultsForSearch) {
                    return false;
                }

                return decorated.call(this, params);
            };

            return MinimumResultsForSearch;
        });

        S2.define('select2/dropdown/selectOnClose', [

        ], function () {
            function SelectOnClose() { }

            SelectOnClose.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('close', function (params) {
                    self._handleSelectOnClose(params);
                });
            };

            SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
                if (params && params.originalSelect2Event != null) {
                    var event = params.originalSelect2Event;

                    // Don't select an item if the close event was triggered from a select or
                    // unselect event
                    if (event._type === 'select' || event._type === 'unselect') {
                        return;
                    }
                }

                var $highlightedResults = this.getHighlightedResults();

                // Only select highlighted results
                if ($highlightedResults.length < 1) {
                    return;
                }

                var data = $highlightedResults.data('data');

                // Don't re-select already selected resulte
                if (
                    (data.element != null && data.element.selected) ||
                    (data.element == null && data.selected)
                ) {
                    return;
                }

                this.trigger('select', {
                    data: data
                });
            };

            return SelectOnClose;
        });

        S2.define('select2/dropdown/closeOnSelect', [

        ], function () {
            function CloseOnSelect() { }

            CloseOnSelect.prototype.bind = function (decorated, container, $container) {
                var self = this;

                decorated.call(this, container, $container);

                container.on('select', function (evt) {
                    self._selectTriggered(evt);
                });

                container.on('unselect', function (evt) {
                    self._selectTriggered(evt);
                });
            };

            CloseOnSelect.prototype._selectTriggered = function (_, evt) {
                var originalEvent = evt.originalEvent;

                // Don't close if the control key is being held
                if (originalEvent && originalEvent.ctrlKey) {
                    return;
                }

                this.trigger('close', {
                    originalEvent: originalEvent,
                    originalSelect2Event: evt
                });
            };

            return CloseOnSelect;
        });

        S2.define('select2/i18n/en', [], function () {
            // English
            return {
                errorLoading: function () {
                    return 'The results could not be loaded.';
                },
                inputTooLong: function (args) {
                    var overChars = args.input.length - args.maximum;

                    var message = 'Please delete ' + overChars + ' character';

                    if (overChars != 1) {
                        message += 's';
                    }

                    return message;
                },
                inputTooShort: function (args) {
                    var remainingChars = args.minimum - args.input.length;

                    var message = 'Please enter ' + remainingChars + ' or more characters';

                    return message;
                },
                loadingMore: function () {
                    return 'Loading more results…';
                },
                maximumSelected: function (args) {
                    var message = 'You can only select ' + args.maximum + ' item';

                    if (args.maximum != 1) {
                        message += 's';
                    }

                    return message;
                },
                noResults: function () {
                    return 'No results found';
                },
                searching: function () {
                    return 'Searching…';
                }
            };
        });

        S2.define('select2/defaults', [
            'jquery',
            'require',

            './results',

            './selection/single',
            './selection/multiple',
            './selection/placeholder',
            './selection/allowClear',
            './selection/search',
            './selection/eventRelay',

            './utils',
            './translation',
            './diacritics',

            './data/select',
            './data/array',
            './data/ajax',
            './data/tags',
            './data/tokenizer',
            './data/minimumInputLength',
            './data/maximumInputLength',
            './data/maximumSelectionLength',

            './dropdown',
            './dropdown/search',
            './dropdown/hidePlaceholder',
            './dropdown/infiniteScroll',
            './dropdown/attachBody',
            './dropdown/minimumResultsForSearch',
            './dropdown/selectOnClose',
            './dropdown/closeOnSelect',

            './i18n/en'
        ], function ($, require,

            ResultsList,

            SingleSelection, MultipleSelection, Placeholder, AllowClear,
            SelectionSearch, EventRelay,

            Utils, Translation, DIACRITICS,

            SelectData, ArrayData, AjaxData, Tags, Tokenizer,
            MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

            Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
            AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

            EnglishTranslation) {
                function Defaults() {
                    this.reset();
                }

                Defaults.prototype.apply = function (options) {
                    options = $.extend(true, {}, this.defaults, options);

                    if (options.dataAdapter == null) {
                        if (options.ajax != null) {
                            options.dataAdapter = AjaxData;
                        } else if (options.data != null) {
                            options.dataAdapter = ArrayData;
                        } else {
                            options.dataAdapter = SelectData;
                        }

                        if (options.minimumInputLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MinimumInputLength
                            );
                        }

                        if (options.maximumInputLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MaximumInputLength
                            );
                        }

                        if (options.maximumSelectionLength > 0) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                MaximumSelectionLength
                            );
                        }

                        if (options.tags) {
                            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
                        }

                        if (options.tokenSeparators != null || options.tokenizer != null) {
                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                Tokenizer
                            );
                        }

                        if (options.query != null) {
                            var Query = require(options.amdBase + 'compat/query');

                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                Query
                            );
                        }

                        if (options.initSelection != null) {
                            var InitSelection = require(options.amdBase + 'compat/initSelection');

                            options.dataAdapter = Utils.Decorate(
                                options.dataAdapter,
                                InitSelection
                            );
                        }
                    }

                    if (options.resultsAdapter == null) {
                        options.resultsAdapter = ResultsList;

                        if (options.ajax != null) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                InfiniteScroll
                            );
                        }

                        if (options.placeholder != null) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                HidePlaceholder
                            );
                        }

                        if (options.selectOnClose) {
                            options.resultsAdapter = Utils.Decorate(
                                options.resultsAdapter,
                                SelectOnClose
                            );
                        }
                    }

                    if (options.dropdownAdapter == null) {
                        if (options.multiple) {
                            options.dropdownAdapter = Dropdown;
                        } else {
                            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

                            options.dropdownAdapter = SearchableDropdown;
                        }

                        if (options.minimumResultsForSearch !== 0) {
                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                MinimumResultsForSearch
                            );
                        }

                        if (options.closeOnSelect) {
                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                CloseOnSelect
                            );
                        }

                        if (
                            options.dropdownCssClass != null ||
                            options.dropdownCss != null ||
                            options.adaptDropdownCssClass != null
                        ) {
                            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

                            options.dropdownAdapter = Utils.Decorate(
                                options.dropdownAdapter,
                                DropdownCSS
                            );
                        }

                        options.dropdownAdapter = Utils.Decorate(
                            options.dropdownAdapter,
                            AttachBody
                        );
                    }

                    if (options.selectionAdapter == null) {
                        if (options.multiple) {
                            options.selectionAdapter = MultipleSelection;
                        } else {
                            options.selectionAdapter = SingleSelection;
                        }

                        // Add the placeholder mixin if a placeholder was specified
                        if (options.placeholder != null) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                Placeholder
                            );
                        }

                        if (options.allowClear) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                AllowClear
                            );
                        }

                        if (options.multiple) {
                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                SelectionSearch
                            );
                        }

                        if (
                            options.containerCssClass != null ||
                            options.containerCss != null ||
                            options.adaptContainerCssClass != null
                        ) {
                            var ContainerCSS = require(options.amdBase + 'compat/containerCss');

                            options.selectionAdapter = Utils.Decorate(
                                options.selectionAdapter,
                                ContainerCSS
                            );
                        }

                        options.selectionAdapter = Utils.Decorate(
                            options.selectionAdapter,
                            EventRelay
                        );
                    }

                    if (typeof options.language === 'string') {
                        // Check if the language is specified with a region
                        if (options.language.indexOf('-') > 0) {
                            // Extract the region information if it is included
                            var languageParts = options.language.split('-');
                            var baseLanguage = languageParts[0];

                            options.language = [options.language, baseLanguage];
                        } else {
                            options.language = [options.language];
                        }
                    }

                    if ($.isArray(options.language)) {
                        var languages = new Translation();
                        options.language.push('en');

                        var languageNames = options.language;

                        for (var l = 0; l < languageNames.length; l++) {
                            var name = languageNames[l];
                            var language = {};

                            try {
                                // Try to load it with the original name
                                language = Translation.loadPath(name);
                            } catch (e) {
                                try {
                                    // If we couldn't load it, check if it wasn't the full path
                                    name = this.defaults.amdLanguageBase + name;
                                    language = Translation.loadPath(name);
                                } catch (ex) {
                                    // The translation could not be loaded at all. Sometimes this is
                                    // because of a configuration problem, other times this can be
                                    // because of how Select2 helps load all possible translation files.
                                    if (options.debug && window.console && console.warn) {
                                        console.warn(
                                            'Select2: The language file for "' + name + '" could not be ' +
                                            'automatically loaded. A fallback will be used instead.'
                                        );
                                    }

                                    continue;
                                }
                            }

                            languages.extend(language);
                        }

                        options.translations = languages;
                    } else {
                        var baseTranslation = Translation.loadPath(
                            this.defaults.amdLanguageBase + 'en'
                        );
                        var customTranslation = new Translation(options.language);

                        customTranslation.extend(baseTranslation);

                        options.translations = customTranslation;
                    }

                    return options;
                };

                Defaults.prototype.reset = function () {
                    function stripDiacritics(text) {
                        // Used 'uni range + named function' from http://jsperf.com/diacritics/18
                        function match(a) {
                            return DIACRITICS[a] || a;
                        }

                        return text.replace(/[^\u0000-\u007E]/g, match);
                    }

                    function matcher(params, data) {
                        // Always return the object if there is nothing to compare
                        if ($.trim(params.term) === '') {
                            return data;
                        }

                        // Do a recursive check for options with children
                        if (data.children && data.children.length > 0) {
                            // Clone the data object if there are children
                            // This is required as we modify the object to remove any non-matches
                            var match = $.extend(true, {}, data);

                            // Check each child of the option
                            for (var c = data.children.length - 1; c >= 0; c--) {
                                var child = data.children[c];

                                var matches = matcher(params, child);

                                // If there wasn't a match, remove the object in the array
                                if (matches == null) {
                                    match.children.splice(c, 1);
                                }
                            }

                            // If any children matched, return the new object
                            if (match.children.length > 0) {
                                return match;
                            }

                            // If there were no matching children, check just the plain object
                            return matcher(params, match);
                        }

                        var original = stripDiacritics(data.text).toUpperCase();
                        var term = stripDiacritics(params.term).toUpperCase();

                        // Check if the text contains the term
                        if (original.indexOf(term) > -1) {
                            return data;
                        }

                        // If it doesn't contain the term, don't return anything
                        return null;
                    }

                    this.defaults = {
                        amdBase: './',
                        amdLanguageBase: './i18n/',
                        closeOnSelect: true,
                        debug: false,
                        dropdownAutoWidth: false,
                        escapeMarkup: Utils.escapeMarkup,
                        language: EnglishTranslation,
                        matcher: matcher,
                        minimumInputLength: 0,
                        maximumInputLength: 0,
                        maximumSelectionLength: 0,
                        minimumResultsForSearch: 0,
                        selectOnClose: false,
                        sorter: function (data) {
                            return data;
                        },
                        templateResult: function (result) {
                            return result.text;
                        },
                        templateSelection: function (selection) {
                            return selection.text;
                        },
                        theme: 'default',
                        width: 'resolve'
                    };
                };

                Defaults.prototype.set = function (key, value) {
                    var camelKey = $.camelCase(key);

                    var data = {};
                    data[camelKey] = value;

                    var convertedData = Utils._convertData(data);

                    $.extend(this.defaults, convertedData);
                };

                var defaults = new Defaults();

                return defaults;
            });

        S2.define('select2/options', [
            'require',
            'jquery',
            './defaults',
            './utils'
        ], function (require, $, Defaults, Utils) {
            function Options(options, $element) {
                this.options = options;

                if ($element != null) {
                    this.fromElement($element);
                }

                this.options = Defaults.apply(this.options);

                if ($element && $element.is('input')) {
                    var InputCompat = require(this.get('amdBase') + 'compat/inputData');

                    this.options.dataAdapter = Utils.Decorate(
                        this.options.dataAdapter,
                        InputCompat
                    );
                }
            }

            Options.prototype.fromElement = function ($e) {
                var excludedData = ['select2'];

                if (this.options.multiple == null) {
                    this.options.multiple = $e.prop('multiple');
                }

                if (this.options.disabled == null) {
                    this.options.disabled = $e.prop('disabled');
                }

                if (this.options.language == null) {
                    if ($e.prop('lang')) {
                        this.options.language = $e.prop('lang').toLowerCase();
                    } else if ($e.closest('[lang]').prop('lang')) {
                        this.options.language = $e.closest('[lang]').prop('lang');
                    }
                }

                if (this.options.dir == null) {
                    if ($e.prop('dir')) {
                        this.options.dir = $e.prop('dir');
                    } else if ($e.closest('[dir]').prop('dir')) {
                        this.options.dir = $e.closest('[dir]').prop('dir');
                    } else {
                        this.options.dir = 'ltr';
                    }
                }

                $e.prop('disabled', this.options.disabled);
                $e.prop('multiple', this.options.multiple);

                if ($e.data('select2Tags')) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn(
                            'Select2: The `data-select2-tags` attribute has been changed to ' +
                            'use the `data-data` and `data-tags="true"` attributes and will be ' +
                            'removed in future versions of Select2.'
                        );
                    }

                    $e.data('data', $e.data('select2Tags'));
                    $e.data('tags', true);
                }

                if ($e.data('ajaxUrl')) {
                    if (this.options.debug && window.console && console.warn) {
                        console.warn(
                            'Select2: The `data-ajax-url` attribute has been changed to ' +
                            '`data-ajax--url` and support for the old attribute will be removed' +
                            ' in future versions of Select2.'
                        );
                    }

                    $e.attr('ajax--url', $e.data('ajaxUrl'));
                    $e.data('ajax--url', $e.data('ajaxUrl'));
                }

                var dataset = {};

                // Prefer the element's `dataset` attribute if it exists
                // jQuery 1.x does not correctly handle data attributes with multiple dashes
                if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
                    dataset = $.extend(true, {}, $e[0].dataset, $e.data());
                } else {
                    dataset = $e.data();
                }

                var data = $.extend(true, {}, dataset);

                data = Utils._convertData(data);

                for (var key in data) {
                    if ($.inArray(key, excludedData) > -1) {
                        continue;
                    }

                    if ($.isPlainObject(this.options[key])) {
                        $.extend(this.options[key], data[key]);
                    } else {
                        this.options[key] = data[key];
                    }
                }

                return this;
            };

            Options.prototype.get = function (key) {
                return this.options[key];
            };

            Options.prototype.set = function (key, val) {
                this.options[key] = val;
            };

            return Options;
        });

        S2.define('select2/core', [
            'jquery',
            './options',
            './utils',
            './keys'
        ], function ($, Options, Utils, KEYS) {
            var Select2 = function ($element, options) {
                if ($element.data('select2') != null) {
                    $element.data('select2').destroy();
                }

                this.$element = $element;

                this.id = this._generateId($element);

                options = options || {};

                this.options = new Options(options, $element);

                Select2.__super__.constructor.call(this);

                // Set up the tabindex

                var tabindex = $element.attr('tabindex') || 0;
                $element.data('old-tabindex', tabindex);
                $element.attr('tabindex', '-1');

                // Set up containers and adapters

                var DataAdapter = this.options.get('dataAdapter');
                this.dataAdapter = new DataAdapter($element, this.options);

                var $container = this.render();

                this._placeContainer($container);

                var SelectionAdapter = this.options.get('selectionAdapter');
                this.selection = new SelectionAdapter($element, this.options);
                this.$selection = this.selection.render();

                this.selection.position(this.$selection, $container);

                var DropdownAdapter = this.options.get('dropdownAdapter');
                this.dropdown = new DropdownAdapter($element, this.options);
                this.$dropdown = this.dropdown.render();

                this.dropdown.position(this.$dropdown, $container);

                var ResultsAdapter = this.options.get('resultsAdapter');
                this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
                this.$results = this.results.render();

                this.results.position(this.$results, this.$dropdown);

                // Bind events

                var self = this;

                // Bind the container to all of the adapters
                this._bindAdapters();

                // Register any DOM event handlers
                this._registerDomEvents();

                // Register any internal event handlers
                this._registerDataEvents();
                this._registerSelectionEvents();
                this._registerDropdownEvents();
                this._registerResultsEvents();
                this._registerEvents();

                // Set the initial state
                this.dataAdapter.current(function (initialData) {
                    self.trigger('selection:update', {
                        data: initialData
                    });
                });

                // Hide the original select
                $element.addClass('select2-hidden-accessible');
                $element.attr('aria-hidden', 'true');

                // Synchronize any monitored attributes
                this._syncAttributes();

                $element.data('select2', this);
            };

            Utils.Extend(Select2, Utils.Observable);

            Select2.prototype._generateId = function ($element) {
                var id = '';

                if ($element.attr('id') != null) {
                    id = $element.attr('id');
                } else if ($element.attr('name') != null) {
                    id = $element.attr('name') + '-' + Utils.generateChars(2);
                } else {
                    id = Utils.generateChars(4);
                }

                id = id.replace(/(:|\.|\[|\]|,)/g, '');
                id = 'select2-' + id;

                return id;
            };

            Select2.prototype._placeContainer = function ($container) {
                $container.insertAfter(this.$element);

                var width = this._resolveWidth(this.$element, this.options.get('width'));

                if (width != null) {
                    $container.css('width', width);
                }
            };

            Select2.prototype._resolveWidth = function ($element, method) {
                var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

                if (method == 'resolve') {
                    var styleWidth = this._resolveWidth($element, 'style');

                    if (styleWidth != null) {
                        return styleWidth;
                    }

                    return this._resolveWidth($element, 'element');
                }

                if (method == 'element') {
                    var elementWidth = $element.outerWidth(false);

                    if (elementWidth <= 0) {
                        return 'auto';
                    }

                    return elementWidth + 'px';
                }

                if (method == 'style') {
                    var style = $element.attr('style');

                    if (typeof (style) !== 'string') {
                        return null;
                    }

                    var attrs = style.split(';');

                    for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                        var attr = attrs[i].replace(/\s/g, '');
                        var matches = attr.match(WIDTH);

                        if (matches !== null && matches.length >= 1) {
                            return matches[1];
                        }
                    }

                    return null;
                }

                return method;
            };

            Select2.prototype._bindAdapters = function () {
                this.dataAdapter.bind(this, this.$container);
                this.selection.bind(this, this.$container);

                this.dropdown.bind(this, this.$container);
                this.results.bind(this, this.$container);
            };

            Select2.prototype._registerDomEvents = function () {
                var self = this;

                this.$element.on('change.select2', function () {
                    self.dataAdapter.current(function (data) {
                        self.trigger('selection:update', {
                            data: data
                        });
                    });
                });

                this.$element.on('focus.select2', function (evt) {
                    self.trigger('focus', evt);
                });

                this._syncA = Utils.bind(this._syncAttributes, this);
                this._syncS = Utils.bind(this._syncSubtree, this);

                if (this.$element[0].attachEvent) {
                    this.$element[0].attachEvent('onpropertychange', this._syncA);
                }

                var observer = window.MutationObserver ||
                    window.WebKitMutationObserver ||
                    window.MozMutationObserver
                    ;

                if (observer != null) {
                    this._observer = new observer(function (mutations) {
                        $.each(mutations, self._syncA);
                        $.each(mutations, self._syncS);
                    });
                    this._observer.observe(this.$element[0], {
                        attributes: true,
                        childList: true,
                        subtree: false
                    });
                } else if (this.$element[0].addEventListener) {
                    this.$element[0].addEventListener(
                        'DOMAttrModified',
                        self._syncA,
                        false
                    );
                    this.$element[0].addEventListener(
                        'DOMNodeInserted',
                        self._syncS,
                        false
                    );
                    this.$element[0].addEventListener(
                        'DOMNodeRemoved',
                        self._syncS,
                        false
                    );
                }
            };

            Select2.prototype._registerDataEvents = function () {
                var self = this;

                this.dataAdapter.on('*', function (name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerSelectionEvents = function () {
                var self = this;
                var nonRelayEvents = ['toggle', 'focus'];

                this.selection.on('toggle', function () {
                    self.toggleDropdown();
                });

                this.selection.on('focus', function (params) {
                    self.focus(params);
                });

                this.selection.on('*', function (name, params) {
                    if ($.inArray(name, nonRelayEvents) !== -1) {
                        return;
                    }

                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerDropdownEvents = function () {
                var self = this;

                this.dropdown.on('*', function (name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerResultsEvents = function () {
                var self = this;

                this.results.on('*', function (name, params) {
                    self.trigger(name, params);
                });
            };

            Select2.prototype._registerEvents = function () {
                var self = this;

                this.on('open', function () {
                    self.$container.addClass('select2-container--open');
                });

                this.on('close', function () {
                    self.$container.removeClass('select2-container--open');
                });

                this.on('enable', function () {
                    self.$container.removeClass('select2-container--disabled');
                });

                this.on('disable', function () {
                    self.$container.addClass('select2-container--disabled');
                });

                this.on('blur', function () {
                    self.$container.removeClass('select2-container--focus');
                });

                this.on('query', function (params) {
                    if (!self.isOpen()) {
                        self.trigger('open', {});
                    }

                    this.dataAdapter.query(params, function (data) {
                        self.trigger('results:all', {
                            data: data,
                            query: params
                        });
                    });
                });

                this.on('query:append', function (params) {
                    this.dataAdapter.query(params, function (data) {
                        self.trigger('results:append', {
                            data: data,
                            query: params
                        });
                    });
                });

                this.on('keypress', function (evt) {
                    var key = evt.which;

                    if (self.isOpen()) {
                        if (key === KEYS.ESC || key === KEYS.TAB ||
                            (key === KEYS.UP && evt.altKey)) {
                            self.close();

                            evt.preventDefault();
                        } else if (key === KEYS.ENTER) {
                            self.trigger('results:select', {});

                            evt.preventDefault();
                        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
                            self.trigger('results:toggle', {});

                            evt.preventDefault();
                        } else if (key === KEYS.UP) {
                            self.trigger('results:previous', {});

                            evt.preventDefault();
                        } else if (key === KEYS.DOWN) {
                            self.trigger('results:next', {});

                            evt.preventDefault();
                        }
                    } else {
                        if (key === KEYS.ENTER || key === KEYS.SPACE ||
                            (key === KEYS.DOWN && evt.altKey)) {
                            self.open();

                            evt.preventDefault();
                        }
                    }
                });
            };

            Select2.prototype._syncAttributes = function () {
                this.options.set('disabled', this.$element.prop('disabled'));

                if (this.options.get('disabled')) {
                    if (this.isOpen()) {
                        this.close();
                    }

                    this.trigger('disable', {});
                } else {
                    this.trigger('enable', {});
                }
            };

            Select2.prototype._syncSubtree = function (evt, mutations) {
                var changed = false;
                var self = this;

                // Ignore any mutation events raised for elements that aren't options or
                // optgroups. This handles the case when the select element is destroyed
                if (
                    evt && evt.target && (
                        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
                    )
                ) {
                    return;
                }

                if (!mutations) {
                    // If mutation events aren't supported, then we can only assume that the
                    // change affected the selections
                    changed = true;
                } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
                    for (var n = 0; n < mutations.addedNodes.length; n++) {
                        var node = mutations.addedNodes[n];

                        if (node.selected) {
                            changed = true;
                        }
                    }
                } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
                    changed = true;
                }

                // Only re-pull the data if we think there is a change
                if (changed) {
                    this.dataAdapter.current(function (currentData) {
                        self.trigger('selection:update', {
                            data: currentData
                        });
                    });
                }
            };

            /**
             * Override the trigger method to automatically trigger pre-events when
             * there are events that can be prevented.
             */
            Select2.prototype.trigger = function (name, args) {
                var actualTrigger = Select2.__super__.trigger;
                var preTriggerMap = {
                    'open': 'opening',
                    'close': 'closing',
                    'select': 'selecting',
                    'unselect': 'unselecting'
                };

                if (args === undefined) {
                    args = {};
                }

                if (name in preTriggerMap) {
                    var preTriggerName = preTriggerMap[name];
                    var preTriggerArgs = {
                        prevented: false,
                        name: name,
                        args: args
                    };

                    actualTrigger.call(this, preTriggerName, preTriggerArgs);

                    if (preTriggerArgs.prevented) {
                        args.prevented = true;

                        return;
                    }
                }

                actualTrigger.call(this, name, args);
            };

            Select2.prototype.toggleDropdown = function () {
                if (this.options.get('disabled')) {
                    return;
                }

                if (this.isOpen() && (this.dropdown.options.options.multiple || false) == false) { //DEF_0011869 - don't clear input when you click on text being input
                    this.close();
                } else {
                    this.open();
                }
            };

            Select2.prototype.open = function () {
                if (this.isOpen()) {
                    return;
                }

                this.trigger('query', {});
            };

            Select2.prototype.close = function () {
                if (!this.isOpen()) {
                    return;
                }

                this.trigger('close', {});
            };

            Select2.prototype.isOpen = function () {
                return this.$container.hasClass('select2-container--open');
            };

            Select2.prototype.hasFocus = function () {
                return this.$container.hasClass('select2-container--focus');
            };

            Select2.prototype.focus = function (data) {
                // No need to re-trigger focus events if we are already focused
                if (this.hasFocus()) {
                    return;
                }

                this.$container.addClass('select2-container--focus');
                this.trigger('focus', {});
            };

            Select2.prototype.enable = function (args) {
                if (this.options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `select2("enable")` method has been deprecated and will' +
                        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
                        ' instead.'
                    );
                }

                if (args == null || args.length === 0) {
                    args = [true];
                }

                var disabled = !args[0];

                this.$element.prop('disabled', disabled);
            };

            Select2.prototype.data = function () {
                if (this.options.get('debug') &&
                    arguments.length > 0 && window.console && console.warn) {
                    console.warn(
                        'Select2: Data can no longer be set using `select2("data")`. You ' +
                        'should consider setting the value instead using `$element.val()`.'
                    );
                }

                var data = [];

                this.dataAdapter.current(function (currentData) {
                    data = currentData;
                });

                return data;
            };

            Select2.prototype.val = function (args) {
                if (this.options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `select2("val")` method has been deprecated and will be' +
                        ' removed in later Select2 versions. Use $element.val() instead.'
                    );
                }

                if (args == null || args.length === 0) {
                    return this.$element.val();
                }

                var newVal = args[0];

                if ($.isArray(newVal)) {
                    newVal = $.map(newVal, function (obj) {
                        return obj.toString();
                    });
                }

                this.$element.val(newVal).trigger('change');
            };

            Select2.prototype.destroy = function () {
                this.$container.remove();

                if (this.$element[0].detachEvent) {
                    this.$element[0].detachEvent('onpropertychange', this._syncA);
                }

                if (this._observer != null) {
                    this._observer.disconnect();
                    this._observer = null;
                } else if (this.$element[0].removeEventListener) {
                    this.$element[0]
                        .removeEventListener('DOMAttrModified', this._syncA, false);
                    this.$element[0]
                        .removeEventListener('DOMNodeInserted', this._syncS, false);
                    this.$element[0]
                        .removeEventListener('DOMNodeRemoved', this._syncS, false);
                }

                this._syncA = null;
                this._syncS = null;

                this.$element.off('.select2');
                this.$element.attr('tabindex', this.$element.data('old-tabindex'));

                this.$element.removeClass('select2-hidden-accessible');
                this.$element.attr('aria-hidden', 'false');
                this.$element.removeData('select2');

                this.dataAdapter.destroy();
                this.selection.destroy();
                this.dropdown.destroy();
                this.results.destroy();

                this.dataAdapter = null;
                this.selection = null;
                this.dropdown = null;
                this.results = null;
            };

            Select2.prototype.render = function () {
                var $container = $(
                    '<span class="select2 select2-container">' +
                    '<span class="selection"></span>' +
                    '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
                    '</span>'
                );

                $container.attr('dir', this.options.get('dir'));

                this.$container = $container;

                this.$container.addClass('select2-container--' + this.options.get('theme'));

                $container.data('element', this.$element);

                return $container;
            };

            return Select2;
        });

        S2.define('select2/compat/utils', [
            'jquery'
        ], function ($) {
            function syncCssClasses($dest, $src, adapter) {
                var classes, replacements = [], adapted;

                classes = $.trim($dest.attr('class'));

                if (classes) {
                    classes = '' + classes; // for IE which returns object

                    $(classes.split(/\s+/)).each(function () {
                        // Save all Select2 classes
                        if (this.indexOf('select2-') === 0) {
                            replacements.push(this);
                        }
                    });
                }

                classes = $.trim($src.attr('class'));

                if (classes) {
                    classes = '' + classes; // for IE which returns object

                    $(classes.split(/\s+/)).each(function () {
                        // Only adapt non-Select2 classes
                        if (this.indexOf('select2-') !== 0) {
                            adapted = adapter(this);

                            if (adapted != null) {
                                replacements.push(adapted);
                            }
                        }
                    });
                }

                $dest.attr('class', replacements.join(' '));
            }

            return {
                syncCssClasses: syncCssClasses
            };
        });

        S2.define('select2/compat/containerCss', [
            'jquery',
            './utils'
        ], function ($, CompatUtils) {
            // No-op CSS adapter that discards all classes by default
            function _containerAdapter(clazz) {
                return null;
            }

            function ContainerCSS() { }

            ContainerCSS.prototype.render = function (decorated) {
                var $container = decorated.call(this);

                var containerCssClass = this.options.get('containerCssClass') || '';

                if ($.isFunction(containerCssClass)) {
                    containerCssClass = containerCssClass(this.$element);
                }

                var containerCssAdapter = this.options.get('adaptContainerCssClass');
                containerCssAdapter = containerCssAdapter || _containerAdapter;

                if (containerCssClass.indexOf(':all:') !== -1) {
                    containerCssClass = containerCssClass.replace(':all:', '');

                    var _cssAdapter = containerCssAdapter;

                    containerCssAdapter = function (clazz) {
                        var adapted = _cssAdapter(clazz);

                        if (adapted != null) {
                            // Append the old one along with the adapted one
                            return adapted + ' ' + clazz;
                        }

                        return clazz;
                    };
                }

                var containerCss = this.options.get('containerCss') || {};

                if ($.isFunction(containerCss)) {
                    containerCss = containerCss(this.$element);
                }

                CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);

                $container.css(containerCss);
                $container.addClass(containerCssClass);

                return $container;
            };

            return ContainerCSS;
        });

        S2.define('select2/compat/dropdownCss', [
            'jquery',
            './utils'
        ], function ($, CompatUtils) {
            // No-op CSS adapter that discards all classes by default
            function _dropdownAdapter(clazz) {
                return null;
            }

            function DropdownCSS() { }

            DropdownCSS.prototype.render = function (decorated) {
                var $dropdown = decorated.call(this);

                var dropdownCssClass = this.options.get('dropdownCssClass') || '';

                if ($.isFunction(dropdownCssClass)) {
                    dropdownCssClass = dropdownCssClass(this.$element);
                }

                var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');
                dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;

                if (dropdownCssClass.indexOf(':all:') !== -1) {
                    dropdownCssClass = dropdownCssClass.replace(':all:', '');

                    var _cssAdapter = dropdownCssAdapter;

                    dropdownCssAdapter = function (clazz) {
                        var adapted = _cssAdapter(clazz);

                        if (adapted != null) {
                            // Append the old one along with the adapted one
                            return adapted + ' ' + clazz;
                        }

                        return clazz;
                    };
                }

                var dropdownCss = this.options.get('dropdownCss') || {};

                if ($.isFunction(dropdownCss)) {
                    dropdownCss = dropdownCss(this.$element);
                }

                CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);

                $dropdown.css(dropdownCss);
                $dropdown.addClass(dropdownCssClass);

                return $dropdown;
            };

            return DropdownCSS;
        });

        S2.define('select2/compat/initSelection', [
            'jquery'
        ], function ($) {
            function InitSelection(decorated, $element, options) {
                if (options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `initSelection` option has been deprecated in favor' +
                        ' of a custom data adapter that overrides the `current` method. ' +
                        'This method is now called multiple times instead of a single ' +
                        'time when the instance is initialized. Support will be removed ' +
                        'for the `initSelection` option in future versions of Select2'
                    );
                }

                this.initSelection = options.get('initSelection');
                this._isInitialized = false;

                decorated.call(this, $element, options);
            }

            InitSelection.prototype.current = function (decorated, callback) {
                var self = this;

                if (this._isInitialized) {
                    decorated.call(this, callback);

                    return;
                }

                this.initSelection.call(null, this.$element, function (data) {
                    self._isInitialized = true;

                    if (!$.isArray(data)) {
                        data = [data];
                    }

                    callback(data);
                });
            };

            return InitSelection;
        });

        S2.define('select2/compat/inputData', [
            'jquery'
        ], function ($) {
            function InputData(decorated, $element, options) {
                this._currentData = [];
                this._valueSeparator = options.get('valueSeparator') || ',';

                if ($element.prop('type') === 'hidden') {
                    if (options.get('debug') && console && console.warn) {
                        console.warn(
                            'Select2: Using a hidden input with Select2 is no longer ' +
                            'supported and may stop working in the future. It is recommended ' +
                            'to use a `<select>` element instead.'
                        );
                    }
                }

                decorated.call(this, $element, options);
            }

            InputData.prototype.current = function (_, callback) {
                function getSelected(data, selectedIds) {
                    var selected = [];

                    if (data.selected || $.inArray(data.id, selectedIds) !== -1) {
                        data.selected = true;
                        selected.push(data);
                    } else {
                        data.selected = false;
                    }

                    if (data.children) {
                        selected.push.apply(selected, getSelected(data.children, selectedIds));
                    }

                    return selected;
                }

                var selected = [];

                for (var d = 0; d < this._currentData.length; d++) {
                    var data = this._currentData[d];

                    selected.push.apply(
                        selected,
                        getSelected(
                            data,
                            this.$element.val().split(
                                this._valueSeparator
                            )
                        )
                    );
                }

                callback(selected);
            };

            InputData.prototype.select = function (_, data) {
                if (!this.options.get('multiple')) {
                    this.current(function (allData) {
                        $.map(allData, function (data) {
                            data.selected = false;
                        });
                    });

                    this.$element.val(data.id);
                    this.$element.trigger('change');
                } else {
                    var value = this.$element.val();
                    value += this._valueSeparator + data.id;

                    this.$element.val(value);
                    this.$element.trigger('change');
                }
            };

            InputData.prototype.unselect = function (_, data) {
                var self = this;

                data.selected = false;

                this.current(function (allData) {
                    var values = [];

                    for (var d = 0; d < allData.length; d++) {
                        var item = allData[d];

                        if (data.id == item.id) {
                            continue;
                        }

                        values.push(item.id);
                    }

                    self.$element.val(values.join(self._valueSeparator));
                    self.$element.trigger('change');
                });
            };

            InputData.prototype.query = function (_, params, callback) {
                var results = [];

                for (var d = 0; d < this._currentData.length; d++) {
                    var data = this._currentData[d];

                    var matches = this.matches(params, data);

                    if (matches !== null) {
                        results.push(matches);
                    }
                }

                callback({
                    results: results
                });
            };

            InputData.prototype.addOptions = function (_, $options) {
                var options = $.map($options, function ($option) {
                    return $.data($option[0], 'data');
                });

                this._currentData.push.apply(this._currentData, options);
            };

            return InputData;
        });

        S2.define('select2/compat/matcher', [
            'jquery'
        ], function ($) {
            function oldMatcher(matcher) {
                function wrappedMatcher(params, data) {
                    var match = $.extend(true, {}, data);

                    if (params.term == null || $.trim(params.term) === '') {
                        return match;
                    }

                    if (data.children) {
                        for (var c = data.children.length - 1; c >= 0; c--) {
                            var child = data.children[c];

                            // Check if the child object matches
                            // The old matcher returned a boolean true or false
                            var doesMatch = matcher(params.term, child.text, child);

                            // If the child didn't match, pop it off
                            if (!doesMatch) {
                                match.children.splice(c, 1);
                            }
                        }

                        if (match.children.length > 0) {
                            return match;
                        }
                    }

                    if (matcher(params.term, data.text, data)) {
                        return match;
                    }

                    return null;
                }

                return wrappedMatcher;
            }

            return oldMatcher;
        });

        S2.define('select2/compat/query', [

        ], function () {
            function Query(decorated, $element, options) {
                if (options.get('debug') && window.console && console.warn) {
                    console.warn(
                        'Select2: The `query` option has been deprecated in favor of a ' +
                        'custom data adapter that overrides the `query` method. Support ' +
                        'will be removed for the `query` option in future versions of ' +
                        'Select2.'
                    );
                }

                decorated.call(this, $element, options);
            }

            Query.prototype.query = function (_, params, callback) {
                params.callback = callback;

                var query = this.options.get('query');

                query.call(null, params);
            };

            return Query;
        });

        S2.define('select2/dropdown/attachContainer', [

        ], function () {
            function AttachContainer(decorated, $element, options) {
                decorated.call(this, $element, options);
            }

            AttachContainer.prototype.position =
                function (decorated, $dropdown, $container) {
                    var $dropdownContainer = $container.find('.dropdown-wrapper');
                    $dropdownContainer.append($dropdown);

                    $dropdown.addClass('select2-dropdown--below');
                    $container.addClass('select2-container--below');
                };

            return AttachContainer;
        });

        S2.define('select2/dropdown/stopPropagation', [

        ], function () {
            function StopPropagation() { }

            StopPropagation.prototype.bind = function (decorated, container, $container) {
                decorated.call(this, container, $container);

                var stoppedEvents = [
                    'blur',
                    'change',
                    'click',
                    'dblclick',
                    'focus',
                    'focusin',
                    'focusout',
                    'input',
                    'keydown',
                    'keyup',
                    'keypress',
                    'mousedown',
                    'mouseenter',
                    'mouseleave',
                    'mousemove',
                    'mouseover',
                    'mouseup',
                    'search',
                    'touchend',
                    'touchstart'
                ];

                this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
                    evt.stopPropagation();
                });
            };

            return StopPropagation;
        });

        S2.define('select2/selection/stopPropagation', [

        ], function () {
            function StopPropagation() { }

            StopPropagation.prototype.bind = function (decorated, container, $container) {
                decorated.call(this, container, $container);

                var stoppedEvents = [
                    'blur',
                    'change',
                    'click',
                    'dblclick',
                    'focus',
                    'focusin',
                    'focusout',
                    'input',
                    'keydown',
                    'keyup',
                    'keypress',
                    'mousedown',
                    'mouseenter',
                    'mouseleave',
                    'mousemove',
                    'mouseover',
                    'mouseup',
                    'search',
                    'touchend',
                    'touchstart'
                ];

                this.$selection.on(stoppedEvents.join(' '), function (evt) {
                    evt.stopPropagation();
                });
            };

            return StopPropagation;
        });

        /*!
         * jQuery Mousewheel 3.1.13
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         */

        (function (factory) {
            if (typeof S2.define === 'function' && S2.define.amd) {
                // AMD. Register as an anonymous module.
                S2.define('jquery-mousewheel', ['jquery'], factory);
            } else if (typeof exports === 'object') {
                // Node/CommonJS style for Browserify
                module.exports = factory;
            } else {
                // Browser globals
                factory(jQuery);
            }
        }(function ($) {

            var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
                toBind = ('onwheel' in document || document.documentMode >= 9) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
                slice = Array.prototype.slice,
                nullLowestDeltaTimeout, lowestDelta;

            if ($.event.fixHooks) {
                for (var i = toFix.length; i;) {
                    $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
                }
            }

            var special = $.event.special.mousewheel = {
                version: '3.1.12',

                setup: function () {
                    if (this.addEventListener) {
                        for (var i = toBind.length; i;) {
                            this.addEventListener(toBind[--i], handler, false);
                        }
                    } else {
                        this.onmousewheel = handler;
                    }
                    // Store the line height and page height for this particular element
                    $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
                    $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
                },

                teardown: function () {
                    if (this.removeEventListener) {
                        for (var i = toBind.length; i;) {
                            this.removeEventListener(toBind[--i], handler, false);
                        }
                    } else {
                        this.onmousewheel = null;
                    }
                    // Clean up the data we added to the element
                    $.removeData(this, 'mousewheel-line-height');
                    $.removeData(this, 'mousewheel-page-height');
                },

                getLineHeight: function (elem) {
                    var $elem = $(elem),
                        $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
                    if (!$parent.length) {
                        $parent = $('body');
                    }
                    return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
                },

                getPageHeight: function (elem) {
                    return $(elem).height();
                },

                settings: {
                    adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
                    normalizeOffset: true  // calls getBoundingClientRect for each event
                }
            };

            $.fn.extend({
                mousewheel: function (fn) {
                    return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
                },

                unmousewheel: function (fn) {
                    return this.unbind('mousewheel', fn);
                }
            });


            function handler(event) {
                var orgEvent = event || window.event,
                    args = slice.call(arguments, 1),
                    delta = 0,
                    deltaX = 0,
                    deltaY = 0,
                    absDelta = 0,
                    offsetX = 0,
                    offsetY = 0;
                event = $.event.fix(orgEvent);
                event.type = 'mousewheel';

                // Old school scrollwheel delta
                if ('detail' in orgEvent) { deltaY = orgEvent.detail * -1; }
                if ('wheelDelta' in orgEvent) { deltaY = orgEvent.wheelDelta; }
                if ('wheelDeltaY' in orgEvent) { deltaY = orgEvent.wheelDeltaY; }
                if ('wheelDeltaX' in orgEvent) { deltaX = orgEvent.wheelDeltaX * -1; }

                // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
                if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
                    deltaX = deltaY * -1;
                    deltaY = 0;
                }

                // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
                delta = deltaY === 0 ? deltaX : deltaY;

                // New school wheel delta (wheel event)
                if ('deltaY' in orgEvent) {
                    deltaY = orgEvent.deltaY * -1;
                    delta = deltaY;
                }
                if ('deltaX' in orgEvent) {
                    deltaX = orgEvent.deltaX;
                    if (deltaY === 0) { delta = deltaX * -1; }
                }

                // No change actually happened, no reason to go any further
                if (deltaY === 0 && deltaX === 0) { return; }

                // Need to convert lines and pages to pixels if we aren't already in pixels
                // There are three delta modes:
                //   * deltaMode 0 is by pixels, nothing to do
                //   * deltaMode 1 is by lines
                //   * deltaMode 2 is by pages
                if (orgEvent.deltaMode === 1) {
                    var lineHeight = $.data(this, 'mousewheel-line-height');
                    delta *= lineHeight;
                    deltaY *= lineHeight;
                    deltaX *= lineHeight;
                } else if (orgEvent.deltaMode === 2) {
                    var pageHeight = $.data(this, 'mousewheel-page-height');
                    delta *= pageHeight;
                    deltaY *= pageHeight;
                    deltaX *= pageHeight;
                }

                // Store lowest absolute delta to normalize the delta values
                absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

                if (!lowestDelta || absDelta < lowestDelta) {
                    lowestDelta = absDelta;

                    // Adjust older deltas if necessary
                    if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                        lowestDelta /= 40;
                    }
                }

                // Adjust older deltas if necessary
                if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                    // Divide all the things by 40!
                    delta /= 40;
                    deltaX /= 40;
                    deltaY /= 40;
                }

                // Get a whole, normalized value for the deltas
                delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
                deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
                deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

                // Normalise offsetX and offsetY properties
                if (special.settings.normalizeOffset && this.getBoundingClientRect) {
                    var boundingRect = this.getBoundingClientRect();
                    offsetX = event.clientX - boundingRect.left;
                    offsetY = event.clientY - boundingRect.top;
                }

                // Add information to the event object
                event.deltaX = deltaX;
                event.deltaY = deltaY;
                event.deltaFactor = lowestDelta;
                event.offsetX = offsetX;
                event.offsetY = offsetY;
                // Go ahead and set deltaMode to 0 since we converted to pixels
                // Although this is a little odd since we overwrite the deltaX/Y
                // properties with normalized deltas.
                event.deltaMode = 0;

                // Add event and delta to the front of the arguments
                args.unshift(event, delta, deltaX, deltaY);

                // Clearout lowestDelta after sometime to better
                // handle multiple device types that give different
                // a different lowestDelta
                // Ex: trackpad = 3 and mouse wheel = 120
                if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
                nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

                return ($.event.dispatch || $.event.handle).apply(this, args);
            }

            function nullLowestDelta() {
                lowestDelta = null;
            }

            function shouldAdjustOldDeltas(orgEvent, absDelta) {
                // If this is an older event and the delta is divisable by 120,
                // then we are assuming that the browser is treating this as an
                // older mouse wheel event and that we should divide the deltas
                // by 40 to try and get a more usable deltaFactor.
                // Side note, this actually impacts the reported scroll distance
                // in older browsers and can cause scrolling to be slower than native.
                // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
                return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
            }

        }));

        S2.define('jquery.select2', [
            'jquery',
            'jquery-mousewheel',

            './select2/core',
            './select2/defaults'
        ], function ($, _, Select2, Defaults) {
            if ($.fn.select2 == null) {
                // All methods that should return the element
                var thisMethods = ['open', 'close', 'destroy'];

                $.fn.select2 = function (options) {
                    options = options || {};

                    if (typeof options === 'object') {
                        this.each(function () {
                            var instanceOptions = $.extend(true, {}, options);

                            var instance = new Select2($(this), instanceOptions);
                        });

                        return this;
                    } else if (typeof options === 'string') {
                        var ret;
                        var args = Array.prototype.slice.call(arguments, 1);

                        this.each(function () {
                            var instance = $(this).data('select2');

                            if (instance == null && window.console && console.error) {
                                console.error(
                                    'The select2(\'' + options + '\') method was called on an ' +
                                    'element that is not using Select2.'
                                );
                            }

                            ret = instance[options].apply(instance, args);
                        });

                        // Check if we should be returning `this`
                        if ($.inArray(options, thisMethods) > -1) {
                            return this;
                        }

                        return ret;
                    } else {
                        throw new Error('Invalid arguments for Select2: ' + options);
                    }
                };
            }

            if ($.fn.select2.defaults == null) {
                $.fn.select2.defaults = Defaults;
            }

            return Select2;
        });

        // Return the AMD loader configuration so it can be used outside of this file
        return {
            define: S2.define,
            require: S2.require
        };
    }());

    // Autoload the jQuery bindings
    // We know that all of the modules exist above this, so we're safe
    var select2 = S2.require('jquery.select2');

    // Hold the AMD module references on the jQuery function that was just loaded
    // This allows Select2 to use the internal loader outside of this file, such
    // as in the language files.
    jQuery.fn.select2.amd = S2;

    // Return the Select2 instance for anyone who is importing it.
    return select2;
}));
;
/* qtip2 v3.0.3 | Plugins: tips modal viewport svg imagemap ie6 | Styles: core basic css3 | qtip2.com | Licensed MIT | Wed May 11 2016 22:31:31 */

!function (a, b, c) {
    !function (a) { "use strict"; "function" == typeof define && define.amd ? define(["jquery"], a) : jQuery && !jQuery.fn.qtip && a(jQuery) }(function (d) {
        "use strict"; function e(a, b, c, e) { this.id = c, this.target = a, this.tooltip = F, this.elements = { target: a }, this._id = S + "-" + c, this.timers = { img: {} }, this.options = b, this.plugins = {}, this.cache = { event: {}, target: d(), disabled: E, attr: e, onTooltip: E, lastClass: "" }, this.rendered = this.destroyed = this.disabled = this.waiting = this.hiddenDuringWait = this.positioning = this.triggering = E } function f(a) { return a === F || "object" !== d.type(a) } function g(a) { return !(d.isFunction(a) || a && a.attr || a.length || "object" === d.type(a) && (a.jquery || a.then)) } function h(a) { var b, c, e, h; return f(a) ? E : (f(a.metadata) && (a.metadata = { type: a.metadata }), "content" in a && (b = a.content, f(b) || b.jquery || b.done ? (c = g(b) ? E : b, b = a.content = { text: c }) : c = b.text, "ajax" in b && (e = b.ajax, h = e && e.once !== E, delete b.ajax, b.text = function (a, b) { var f = c || d(this).attr(b.options.content.attr) || "Loading...", g = d.ajax(d.extend({}, e, { context: b })).then(e.success, F, e.error).then(function (a) { return a && h && b.set("content.text", a), a }, function (a, c, d) { b.destroyed || 0 === a.status || b.set("content.text", c + ": " + d) }); return h ? f : (b.set("content.text", f), g) }), "title" in b && (d.isPlainObject(b.title) && (b.button = b.title.button, b.title = b.title.text), g(b.title || E) && (b.title = E))), "position" in a && f(a.position) && (a.position = { my: a.position, at: a.position }), "show" in a && f(a.show) && (a.show = a.show.jquery ? { target: a.show } : a.show === D ? { ready: D } : { event: a.show }), "hide" in a && f(a.hide) && (a.hide = a.hide.jquery ? { target: a.hide } : { event: a.hide }), "style" in a && f(a.style) && (a.style = { classes: a.style }), d.each(R, function () { this.sanitize && this.sanitize(a) }), a) } function i(a, b) { for (var c, d = 0, e = a, f = b.split("."); e = e[f[d++]];)d < f.length && (c = e); return [c || a, f.pop()] } function j(a, b) { var c, d, e; for (c in this.checks) if (this.checks.hasOwnProperty(c)) for (d in this.checks[c]) this.checks[c].hasOwnProperty(d) && (e = new RegExp(d, "i").exec(a)) && (b.push(e), ("builtin" === c || this.plugins[c]) && this.checks[c][d].apply(this.plugins[c] || this, b)) } function k(a) { return V.concat("").join(a ? "-" + a + " " : " ") } function l(a, b) { return b > 0 ? setTimeout(d.proxy(a, this), b) : void a.call(this) } function m(a) { this.tooltip.hasClass(aa) || (clearTimeout(this.timers.show), clearTimeout(this.timers.hide), this.timers.show = l.call(this, function () { this.toggle(D, a) }, this.options.show.delay)) } function n(a) { if (!this.tooltip.hasClass(aa) && !this.destroyed) { var b = d(a.relatedTarget), c = b.closest(W)[0] === this.tooltip[0], e = b[0] === this.options.show.target[0]; if (clearTimeout(this.timers.show), clearTimeout(this.timers.hide), this !== b[0] && "mouse" === this.options.position.target && c || this.options.hide.fixed && /mouse(out|leave|move)/.test(a.type) && (c || e)) try { a.preventDefault(), a.stopImmediatePropagation() } catch (f) { } else this.timers.hide = l.call(this, function () { this.toggle(E, a) }, this.options.hide.delay, this) } } function o(a) { !this.tooltip.hasClass(aa) && this.options.hide.inactive && (clearTimeout(this.timers.inactive), this.timers.inactive = l.call(this, function () { this.hide(a) }, this.options.hide.inactive)) } function p(a) { this.rendered && this.tooltip[0].offsetWidth > 0 && this.reposition(a) } function q(a, c, e) { d(b.body).delegate(a, (c.split ? c : c.join("." + S + " ")) + "." + S, function () { var a = y.api[d.attr(this, U)]; a && !a.disabled && e.apply(a, arguments) }) } function r(a, c, f) { var g, i, j, k, l, m = d(b.body), n = a[0] === b ? m : a, o = a.metadata ? a.metadata(f.metadata) : F, p = "html5" === f.metadata.type && o ? o[f.metadata.name] : F, q = a.data(f.metadata.name || "qtipopts"); try { q = "string" == typeof q ? d.parseJSON(q) : q } catch (r) { } if (k = d.extend(D, {}, y.defaults, f, "object" == typeof q ? h(q) : F, h(p || o)), i = k.position, k.id = c, "boolean" == typeof k.content.text) { if (j = a.attr(k.content.attr), k.content.attr === E || !j) return E; k.content.text = j } if (i.container.length || (i.container = m), i.target === E && (i.target = n), k.show.target === E && (k.show.target = n), k.show.solo === D && (k.show.solo = i.container.closest("body")), k.hide.target === E && (k.hide.target = n), k.position.viewport === D && (k.position.viewport = i.container), i.container = i.container.eq(0), i.at = new A(i.at, D), i.my = new A(i.my), a.data(S)) if (k.overwrite) a.qtip("destroy", !0); else if (k.overwrite === E) return E; return a.attr(T, c), k.suppress && (l = a.attr("title")) && a.removeAttr("title").attr(ca, l).attr("title", ""), g = new e(a, k, c, !!j), a.data(S, g), g } function s(a) { return a.charAt(0).toUpperCase() + a.slice(1) } function t(a, b) { var d, e, f = b.charAt(0).toUpperCase() + b.slice(1), g = (b + " " + va.join(f + " ") + f).split(" "), h = 0; if (ua[b]) return a.css(ua[b]); for (; d = g[h++];)if ((e = a.css(d)) !== c) return ua[b] = d, e } function u(a, b) { return Math.ceil(parseFloat(t(a, b))) } function v(a, b) { this._ns = "tip", this.options = b, this.offset = b.offset, this.size = [b.width, b.height], this.qtip = a, this.init(a) } function w(a, b) { this.options = b, this._ns = "-modal", this.qtip = a, this.init(a) } function x(a) { this._ns = "ie6", this.qtip = a, this.init(a) } var y, z, A, B, C, D = !0, E = !1, F = null, G = "x", H = "y", I = "width", J = "height", K = "top", L = "left", M = "bottom", N = "right", O = "center", P = "flipinvert", Q = "shift", R = {}, S = "qtip", T = "data-hasqtip", U = "data-qtip-id", V = ["ui-widget", "ui-tooltip"], W = "." + S, X = "click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "), Y = S + "-fixed", Z = S + "-default", $ = S + "-focus", _ = S + "-hover", aa = S + "-disabled", ba = "_replacedByqTip", ca = "oldtitle", da = { ie: function () { var a, c; for (a = 4, c = b.createElement("div"); (c.innerHTML = "<!--[if gt IE " + a + "]><i></i><![endif]-->") && c.getElementsByTagName("i")[0]; a += 1); return a > 4 ? a : NaN }(), iOS: parseFloat(("" + (/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent) || [0, ""])[1]).replace("undefined", "3_2").replace("_", ".").replace("_", "")) || E }; z = e.prototype, z._when = function (a) { return d.when.apply(d, a) }, z.render = function (a) { if (this.rendered || this.destroyed) return this; var b = this, c = this.options, e = this.cache, f = this.elements, g = c.content.text, h = c.content.title, i = c.content.button, j = c.position, k = []; return d.attr(this.target[0], "aria-describedby", this._id), e.posClass = this._createPosClass((this.position = { my: j.my, at: j.at }).my), this.tooltip = f.tooltip = d("<div/>", { id: this._id, "class": [S, Z, c.style.classes, e.posClass].join(" "), width: c.style.width || "", height: c.style.height || "", tracking: "mouse" === j.target && j.adjust.mouse, role: "alert", "aria-live": "polite", "aria-atomic": E, "aria-describedby": this._id + "-content", "aria-hidden": D }).toggleClass(aa, this.disabled).attr(U, this.id).data(S, this).appendTo(j.container).append(f.content = d("<div />", { "class": S + "-content", id: this._id + "-content", "aria-atomic": D })), this.rendered = -1, this.positioning = D, h && (this._createTitle(), d.isFunction(h) || k.push(this._updateTitle(h, E))), i && this._createButton(), d.isFunction(g) || k.push(this._updateContent(g, E)), this.rendered = D, this._setWidget(), d.each(R, function (a) { var c; "render" === this.initialize && (c = this(b)) && (b.plugins[a] = c) }), this._unassignEvents(), this._assignEvents(), this._when(k).then(function () { b._trigger("render"), b.positioning = E, b.hiddenDuringWait || !c.show.ready && !a || b.toggle(D, e.event, E), b.hiddenDuringWait = E }), y.api[this.id] = this, this }, z.destroy = function (a) { function b() { if (!this.destroyed) { this.destroyed = D; var a, b = this.target, c = b.attr(ca); this.rendered && this.tooltip.stop(1, 0).find("*").remove().end().remove(), d.each(this.plugins, function () { this.destroy && this.destroy() }); for (a in this.timers) this.timers.hasOwnProperty(a) && clearTimeout(this.timers[a]); b.removeData(S).removeAttr(U).removeAttr(T).removeAttr("aria-describedby"), this.options.suppress && c && b.attr("title", c).removeAttr(ca), this._unassignEvents(), this.options = this.elements = this.cache = this.timers = this.plugins = this.mouse = F, delete y.api[this.id] } } return this.destroyed ? this.target : (a === D && "hide" !== this.triggering || !this.rendered ? b.call(this) : (this.tooltip.one("tooltiphidden", d.proxy(b, this)), !this.triggering && this.hide()), this.target) }, B = z.checks = { builtin: { "^id$": function (a, b, c, e) { var f = c === D ? y.nextid : c, g = S + "-" + f; f !== E && f.length > 0 && !d("#" + g).length ? (this._id = g, this.rendered && (this.tooltip[0].id = this._id, this.elements.content[0].id = this._id + "-content", this.elements.title[0].id = this._id + "-title")) : a[b] = e }, "^prerender": function (a, b, c) { c && !this.rendered && this.render(this.options.show.ready) }, "^content.text$": function (a, b, c) { this._updateContent(c) }, "^content.attr$": function (a, b, c, d) { this.options.content.text === this.target.attr(d) && this._updateContent(this.target.attr(c)) }, "^content.title$": function (a, b, c) { return c ? (c && !this.elements.title && this._createTitle(), void this._updateTitle(c)) : this._removeTitle() }, "^content.button$": function (a, b, c) { this._updateButton(c) }, "^content.title.(text|button)$": function (a, b, c) { this.set("content." + b, c) }, "^position.(my|at)$": function (a, b, c) { "string" == typeof c && (this.position[b] = a[b] = new A(c, "at" === b)) }, "^position.container$": function (a, b, c) { this.rendered && this.tooltip.appendTo(c) }, "^show.ready$": function (a, b, c) { c && (!this.rendered && this.render(D) || this.toggle(D)) }, "^style.classes$": function (a, b, c, d) { this.rendered && this.tooltip.removeClass(d).addClass(c) }, "^style.(width|height)": function (a, b, c) { this.rendered && this.tooltip.css(b, c) }, "^style.widget|content.title": function () { this.rendered && this._setWidget() }, "^style.def": function (a, b, c) { this.rendered && this.tooltip.toggleClass(Z, !!c) }, "^events.(render|show|move|hide|focus|blur)$": function (a, b, c) { this.rendered && this.tooltip[(d.isFunction(c) ? "" : "un") + "bind"]("tooltip" + b, c) }, "^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)": function () { if (this.rendered) { var a = this.options.position; this.tooltip.attr("tracking", "mouse" === a.target && a.adjust.mouse), this._unassignEvents(), this._assignEvents() } } } }, z.get = function (a) { if (this.destroyed) return this; var b = i(this.options, a.toLowerCase()), c = b[0][b[1]]; return c.precedance ? c.string() : c }; var ea = /^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i, fa = /^prerender|show\.ready/i; z.set = function (a, b) { if (this.destroyed) return this; var c, e = this.rendered, f = E, g = this.options; return "string" == typeof a ? (c = a, a = {}, a[c] = b) : a = d.extend({}, a), d.each(a, function (b, c) { if (e && fa.test(b)) return void delete a[b]; var h, j = i(g, b.toLowerCase()); h = j[0][j[1]], j[0][j[1]] = c && c.nodeType ? d(c) : c, f = ea.test(b) || f, a[b] = [j[0], j[1], c, h] }), h(g), this.positioning = D, d.each(a, d.proxy(j, this)), this.positioning = E, this.rendered && this.tooltip[0].offsetWidth > 0 && f && this.reposition("mouse" === g.position.target ? F : this.cache.event), this }, z._update = function (a, b) { var c = this, e = this.cache; return this.rendered && a ? (d.isFunction(a) && (a = a.call(this.elements.target, e.event, this) || ""), d.isFunction(a.then) ? (e.waiting = D, a.then(function (a) { return e.waiting = E, c._update(a, b) }, F, function (a) { return c._update(a, b) })) : a === E || !a && "" !== a ? E : (a.jquery && a.length > 0 ? b.empty().append(a.css({ display: "block", visibility: "visible" })) : b.html(a), this._waitForContent(b).then(function (a) { c.rendered && c.tooltip[0].offsetWidth > 0 && c.reposition(e.event, !a.length) }))) : E }, z._waitForContent = function (a) { var b = this.cache; return b.waiting = D, (d.fn.imagesLoaded ? a.imagesLoaded() : (new d.Deferred).resolve([])).done(function () { b.waiting = E }).promise() }, z._updateContent = function (a, b) { this._update(a, this.elements.content, b) }, z._updateTitle = function (a, b) { this._update(a, this.elements.title, b) === E && this._removeTitle(E) }, z._createTitle = function () { var a = this.elements, b = this._id + "-title"; a.titlebar && this._removeTitle(), a.titlebar = d("<div />", { "class": S + "-titlebar " + (this.options.style.widget ? k("header") : "") }).append(a.title = d("<div />", { id: b, "class": S + "-title", "aria-atomic": D })).insertBefore(a.content).delegate(".qtip-close", "mousedown keydown mouseup keyup mouseout", function (a) { d(this).toggleClass("ui-state-active ui-state-focus", "down" === a.type.substr(-4)) }).delegate(".qtip-close", "mouseover mouseout", function (a) { d(this).toggleClass("ui-state-hover", "mouseover" === a.type) }), this.options.content.button && this._createButton() }, z._removeTitle = function (a) { var b = this.elements; b.title && (b.titlebar.remove(), b.titlebar = b.title = b.button = F, a !== E && this.reposition()) }, z._createPosClass = function (a) { return S + "-pos-" + (a || this.options.position.my).abbrev() }, z.reposition = function (c, e) { if (!this.rendered || this.positioning || this.destroyed) return this; this.positioning = D; var f, g, h, i, j = this.cache, k = this.tooltip, l = this.options.position, m = l.target, n = l.my, o = l.at, p = l.viewport, q = l.container, r = l.adjust, s = r.method.split(" "), t = k.outerWidth(E), u = k.outerHeight(E), v = 0, w = 0, x = k.css("position"), y = { left: 0, top: 0 }, z = k[0].offsetWidth > 0, A = c && "scroll" === c.type, B = d(a), C = q[0].ownerDocument, F = this.mouse; if (d.isArray(m) && 2 === m.length) o = { x: L, y: K }, y = { left: m[0], top: m[1] }; else if ("mouse" === m) o = { x: L, y: K }, (!r.mouse || this.options.hide.distance) && j.origin && j.origin.pageX ? c = j.origin : !c || c && ("resize" === c.type || "scroll" === c.type) ? c = j.event : F && F.pageX && (c = F), "static" !== x && (y = q.offset()), C.body.offsetWidth !== (a.innerWidth || C.documentElement.clientWidth) && (g = d(b.body).offset()), y = { left: c.pageX - y.left + (g && g.left || 0), top: c.pageY - y.top + (g && g.top || 0) }, r.mouse && A && F && (y.left -= (F.scrollX || 0) - B.scrollLeft(), y.top -= (F.scrollY || 0) - B.scrollTop()); else { if ("event" === m ? c && c.target && "scroll" !== c.type && "resize" !== c.type ? j.target = d(c.target) : c.target || (j.target = this.elements.target) : "event" !== m && (j.target = d(m.jquery ? m : this.elements.target)), m = j.target, m = d(m).eq(0), 0 === m.length) return this; m[0] === b || m[0] === a ? (v = da.iOS ? a.innerWidth : m.width(), w = da.iOS ? a.innerHeight : m.height(), m[0] === a && (y = { top: (p || m).scrollTop(), left: (p || m).scrollLeft() })) : R.imagemap && m.is("area") ? f = R.imagemap(this, m, o, R.viewport ? s : E) : R.svg && m && m[0].ownerSVGElement ? f = R.svg(this, m, o, R.viewport ? s : E) : (v = m.outerWidth(E), w = m.outerHeight(E), y = m.offset()), f && (v = f.width, w = f.height, g = f.offset, y = f.position), y = this.reposition.offset(m, y, q), (da.iOS > 3.1 && da.iOS < 4.1 || da.iOS >= 4.3 && da.iOS < 4.33 || !da.iOS && "fixed" === x) && (y.left -= B.scrollLeft(), y.top -= B.scrollTop()), (!f || f && f.adjustable !== E) && (y.left += o.x === N ? v : o.x === O ? v / 2 : 0, y.top += o.y === M ? w : o.y === O ? w / 2 : 0) } return y.left += r.x + (n.x === N ? -t : n.x === O ? -t / 2 : 0), y.top += r.y + (n.y === M ? -u : n.y === O ? -u / 2 : 0), R.viewport ? (h = y.adjusted = R.viewport(this, y, l, v, w, t, u), g && h.left && (y.left += g.left), g && h.top && (y.top += g.top), h.my && (this.position.my = h.my)) : y.adjusted = { left: 0, top: 0 }, j.posClass !== (i = this._createPosClass(this.position.my)) && (j.posClass = i, k.removeClass(j.posClass).addClass(i)), this._trigger("move", [y, p.elem || p], c) ? (delete y.adjusted, e === E || !z || isNaN(y.left) || isNaN(y.top) || "mouse" === m || !d.isFunction(l.effect) ? k.css(y) : d.isFunction(l.effect) && (l.effect.call(k, this, d.extend({}, y)), k.queue(function (a) { d(this).css({ opacity: "", height: "" }), da.ie && this.style.removeAttribute("filter"), a() })), this.positioning = E, this) : this }, z.reposition.offset = function (a, c, e) { function f(a, b) { c.left += b * a.scrollLeft(), c.top += b * a.scrollTop() } if (!e[0]) return c; var g, h, i, j, k = d(a[0].ownerDocument), l = !!da.ie && "CSS1Compat" !== b.compatMode, m = e[0]; do "static" !== (h = d.css(m, "position")) && ("fixed" === h ? (i = m.getBoundingClientRect(), f(k, -1)) : (i = d(m).position(), i.left += parseFloat(d.css(m, "borderLeftWidth")) || 0, i.top += parseFloat(d.css(m, "borderTopWidth")) || 0), c.left -= i.left + (parseFloat(d.css(m, "marginLeft")) || 0), c.top -= i.top + (parseFloat(d.css(m, "marginTop")) || 0), g || "hidden" === (j = d.css(m, "overflow")) || "visible" === j || (g = d(m))); while (m = m.offsetParent); return g && (g[0] !== k[0] || l) && f(g, 1), c }; var ga = (A = z.reposition.Corner = function (a, b) { a = ("" + a).replace(/([A-Z])/, " $1").replace(/middle/gi, O).toLowerCase(), this.x = (a.match(/left|right/i) || a.match(/center/) || ["inherit"])[0].toLowerCase(), this.y = (a.match(/top|bottom|center/i) || ["inherit"])[0].toLowerCase(), this.forceY = !!b; var c = a.charAt(0); this.precedance = "t" === c || "b" === c ? H : G }).prototype; ga.invert = function (a, b) { this[a] = this[a] === L ? N : this[a] === N ? L : b || this[a] }, ga.string = function (a) { var b = this.x, c = this.y, d = b !== c ? "center" === b || "center" !== c && (this.precedance === H || this.forceY) ? [c, b] : [b, c] : [b]; return a !== !1 ? d.join(" ") : d }, ga.abbrev = function () { var a = this.string(!1); return a[0].charAt(0) + (a[1] && a[1].charAt(0) || "") }, ga.clone = function () { return new A(this.string(), this.forceY) }, z.toggle = function (a, c) { var e = this.cache, f = this.options, g = this.tooltip; if (c) { if (/over|enter/.test(c.type) && e.event && /out|leave/.test(e.event.type) && f.show.target.add(c.target).length === f.show.target.length && g.has(c.relatedTarget).length) return this; e.event = d.event.fix(c) } if (this.waiting && !a && (this.hiddenDuringWait = D), !this.rendered) return a ? this.render(1) : this; if (this.destroyed || this.disabled) return this; var h, i, j, k = a ? "show" : "hide", l = this.options[k], m = this.options.position, n = this.options.content, o = this.tooltip.css("width"), p = this.tooltip.is(":visible"), q = a || 1 === l.target.length, r = !c || l.target.length < 2 || e.target[0] === c.target; return (typeof a).search("boolean|number") && (a = !p), h = !g.is(":animated") && p === a && r, i = h ? F : !!this._trigger(k, [90]), this.destroyed ? this : (i !== E && a && this.focus(c), !i || h ? this : (d.attr(g[0], "aria-hidden", !a), a ? (this.mouse && (e.origin = d.event.fix(this.mouse)), d.isFunction(n.text) && this._updateContent(n.text, E), d.isFunction(n.title) && this._updateTitle(n.title, E), !C && "mouse" === m.target && m.adjust.mouse && (d(b).bind("mousemove." + S, this._storeMouse), C = D), o || g.css("width", g.outerWidth(E)), this.reposition(c, arguments[2]), o || g.css("width", ""), l.solo && ("string" == typeof l.solo ? d(l.solo) : d(W, l.solo)).not(g).not(l.target).qtip("hide", new d.Event("tooltipsolo"))) : (clearTimeout(this.timers.show), delete e.origin, C && !d(W + '[tracking="true"]:visible', l.solo).not(g).length && (d(b).unbind("mousemove." + S), C = E), this.blur(c)), j = d.proxy(function () { a ? (da.ie && g[0].style.removeAttribute("filter"), g.css("overflow", ""), "string" == typeof l.autofocus && d(this.options.show.autofocus, g).focus(), this.options.show.target.trigger("qtip-" + this.id + "-inactive")) : g.css({ display: "", visibility: "", opacity: "", left: "", top: "" }), this._trigger(a ? "visible" : "hidden") }, this), l.effect === E || q === E ? (g[k](), j()) : d.isFunction(l.effect) ? (g.stop(1, 1), l.effect.call(g, this), g.queue("fx", function (a) { j(), a() })) : g.fadeTo(90, a ? 1 : 0, j), a && l.target.trigger("qtip-" + this.id + "-inactive"), this)) }, z.show = function (a) { return this.toggle(D, a) }, z.hide = function (a) { return this.toggle(E, a) }, z.focus = function (a) { if (!this.rendered || this.destroyed) return this; var b = d(W), c = this.tooltip, e = parseInt(c[0].style.zIndex, 10), f = y.zindex + b.length; return c.hasClass($) || this._trigger("focus", [f], a) && (e !== f && (b.each(function () { this.style.zIndex > e && (this.style.zIndex = this.style.zIndex - 1) }), b.filter("." + $).qtip("blur", a)), c.addClass($)[0].style.zIndex = f), this }, z.blur = function (a) { return !this.rendered || this.destroyed ? this : (this.tooltip.removeClass($), this._trigger("blur", [this.tooltip.css("zIndex")], a), this) }, z.disable = function (a) { return this.destroyed ? this : ("toggle" === a ? a = !(this.rendered ? this.tooltip.hasClass(aa) : this.disabled) : "boolean" != typeof a && (a = D), this.rendered && this.tooltip.toggleClass(aa, a).attr("aria-disabled", a), this.disabled = !!a, this) }, z.enable = function () { return this.disable(E) }, z._createButton = function () { var a = this, b = this.elements, c = b.tooltip, e = this.options.content.button, f = "string" == typeof e, g = f ? e : "Close tooltip"; b.button && b.button.remove(), e.jquery ? b.button = e : b.button = d("<a />", { "class": "qtip-close " + (this.options.style.widget ? "" : S + "-icon"), title: g, "aria-label": g }).prepend(d("<span />", { "class": "ui-icon ui-icon-close", html: "&times;" })), b.button.appendTo(b.titlebar || c).attr("role", "button").click(function (b) { return c.hasClass(aa) || a.hide(b), E }) }, z._updateButton = function (a) { if (!this.rendered) return E; var b = this.elements.button; a ? this._createButton() : b.remove() }, z._setWidget = function () { var a = this.options.style.widget, b = this.elements, c = b.tooltip, d = c.hasClass(aa); c.removeClass(aa), aa = a ? "ui-state-disabled" : "qtip-disabled", c.toggleClass(aa, d), c.toggleClass("ui-helper-reset " + k(), a).toggleClass(Z, this.options.style.def && !a), b.content && b.content.toggleClass(k("content"), a), b.titlebar && b.titlebar.toggleClass(k("header"), a), b.button && b.button.toggleClass(S + "-icon", !a) }, z._storeMouse = function (a) { return (this.mouse = d.event.fix(a)).type = "mousemove", this }, z._bind = function (a, b, c, e, f) { if (a && c && b.length) { var g = "." + this._id + (e ? "-" + e : ""); return d(a).bind((b.split ? b : b.join(g + " ")) + g, d.proxy(c, f || this)), this } }, z._unbind = function (a, b) { return a && d(a).unbind("." + this._id + (b ? "-" + b : "")), this }, z._trigger = function (a, b, c) { var e = new d.Event("tooltip" + a); return e.originalEvent = c && d.extend({}, c) || this.cache.event || F, this.triggering = a, this.tooltip.trigger(e, [this].concat(b || [])), this.triggering = E, !e.isDefaultPrevented() }, z._bindEvents = function (a, b, c, e, f, g) { var h = c.filter(e).add(e.filter(c)), i = []; h.length && (d.each(b, function (b, c) { var e = d.inArray(c, a); e > -1 && i.push(a.splice(e, 1)[0]) }), i.length && (this._bind(h, i, function (a) { var b = this.rendered ? this.tooltip[0].offsetWidth > 0 : !1; (b ? g : f).call(this, a) }), c = c.not(h), e = e.not(h))), this._bind(c, a, f), this._bind(e, b, g) }, z._assignInitialEvents = function (a) { function b(a) { return this.disabled || this.destroyed ? E : (this.cache.event = a && d.event.fix(a), this.cache.target = a && d(a.target), clearTimeout(this.timers.show), void (this.timers.show = l.call(this, function () { this.render("object" == typeof a || c.show.ready) }, c.prerender ? 0 : c.show.delay))) } var c = this.options, e = c.show.target, f = c.hide.target, g = c.show.event ? d.trim("" + c.show.event).split(" ") : [], h = c.hide.event ? d.trim("" + c.hide.event).split(" ") : []; this._bind(this.elements.target, ["remove", "removeqtip"], function () { this.destroy(!0) }, "destroy"), /mouse(over|enter)/i.test(c.show.event) && !/mouse(out|leave)/i.test(c.hide.event) && h.push("mouseleave"), this._bind(e, "mousemove", function (a) { this._storeMouse(a), this.cache.onTarget = D }), this._bindEvents(g, h, e, f, b, function () { return this.timers ? void clearTimeout(this.timers.show) : E }), (c.show.ready || c.prerender) && b.call(this, a) }, z._assignEvents = function () { var c = this, e = this.options, f = e.position, g = this.tooltip, h = e.show.target, i = e.hide.target, j = f.container, k = f.viewport, l = d(b), q = d(a), r = e.show.event ? d.trim("" + e.show.event).split(" ") : [], s = e.hide.event ? d.trim("" + e.hide.event).split(" ") : []; d.each(e.events, function (a, b) { c._bind(g, "toggle" === a ? ["tooltipshow", "tooltiphide"] : ["tooltip" + a], b, null, g) }), /mouse(out|leave)/i.test(e.hide.event) && "window" === e.hide.leave && this._bind(l, ["mouseout", "blur"], function (a) { /select|option/.test(a.target.nodeName) || a.relatedTarget || this.hide(a) }), e.hide.fixed ? i = i.add(g.addClass(Y)) : /mouse(over|enter)/i.test(e.show.event) && this._bind(i, "mouseleave", function () { clearTimeout(this.timers.show) }), ("" + e.hide.event).indexOf("unfocus") > -1 && this._bind(j.closest("html"), ["mousedown", "touchstart"], function (a) { var b = d(a.target), c = this.rendered && !this.tooltip.hasClass(aa) && this.tooltip[0].offsetWidth > 0, e = b.parents(W).filter(this.tooltip[0]).length > 0; b[0] === this.target[0] || b[0] === this.tooltip[0] || e || this.target.has(b[0]).length || !c || this.hide(a) }), "number" == typeof e.hide.inactive && (this._bind(h, "qtip-" + this.id + "-inactive", o, "inactive"), this._bind(i.add(g), y.inactiveEvents, o)), this._bindEvents(r, s, h, i, m, n), this._bind(h.add(g), "mousemove", function (a) { if ("number" == typeof e.hide.distance) { var b = this.cache.origin || {}, c = this.options.hide.distance, d = Math.abs; (d(a.pageX - b.pageX) >= c || d(a.pageY - b.pageY) >= c) && this.hide(a) } this._storeMouse(a) }), "mouse" === f.target && f.adjust.mouse && (e.hide.event && this._bind(h, ["mouseenter", "mouseleave"], function (a) { return this.cache ? void (this.cache.onTarget = "mouseenter" === a.type) : E }), this._bind(l, "mousemove", function (a) { this.rendered && this.cache.onTarget && !this.tooltip.hasClass(aa) && this.tooltip[0].offsetWidth > 0 && this.reposition(a) })), (f.adjust.resize || k.length) && this._bind(d.event.special.resize ? k : q, "resize", p), f.adjust.scroll && this._bind(q.add(f.container), "scroll", p) }, z._unassignEvents = function () { var c = this.options, e = c.show.target, f = c.hide.target, g = d.grep([this.elements.target[0], this.rendered && this.tooltip[0], c.position.container[0], c.position.viewport[0], c.position.container.closest("html")[0], a, b], function (a) { return "object" == typeof a }); e && e.toArray && (g = g.concat(e.toArray())), f && f.toArray && (g = g.concat(f.toArray())), this._unbind(g)._unbind(g, "destroy")._unbind(g, "inactive") }, d(function () { q(W, ["mouseenter", "mouseleave"], function (a) { var b = "mouseenter" === a.type, c = d(a.currentTarget), e = d(a.relatedTarget || a.target), f = this.options; b ? (this.focus(a), c.hasClass(Y) && !c.hasClass(aa) && clearTimeout(this.timers.hide)) : "mouse" === f.position.target && f.position.adjust.mouse && f.hide.event && f.show.target && !e.closest(f.show.target[0]).length && this.hide(a), c.toggleClass(_, b) }), q("[" + U + "]", X, o) }), y = d.fn.qtip = function (a, b, e) { var f = ("" + a).toLowerCase(), g = F, i = d.makeArray(arguments).slice(1), j = i[i.length - 1], k = this[0] ? d.data(this[0], S) : F; return !arguments.length && k || "api" === f ? k : "string" == typeof a ? (this.each(function () { var a = d.data(this, S); if (!a) return D; if (j && j.timeStamp && (a.cache.event = j), !b || "option" !== f && "options" !== f) a[f] && a[f].apply(a, i); else { if (e === c && !d.isPlainObject(b)) return g = a.get(b), E; a.set(b, e) } }), g !== F ? g : this) : "object" != typeof a && arguments.length ? void 0 : (k = h(d.extend(D, {}, a)), this.each(function (a) { var b, c; return c = d.isArray(k.id) ? k.id[a] : k.id, c = !c || c === E || c.length < 1 || y.api[c] ? y.nextid++ : c, b = r(d(this), c, k), b === E ? D : (y.api[c] = b, d.each(R, function () { "initialize" === this.initialize && this(b) }), void b._assignInitialEvents(j)) })) }, d.qtip = e, y.api = {}, d.each({ attr: function (a, b) { if (this.length) { var c = this[0], e = "title", f = d.data(c, "qtip"); if (a === e && f && f.options && "object" == typeof f && "object" == typeof f.options && f.options.suppress) return arguments.length < 2 ? d.attr(c, ca) : (f && f.options.content.attr === e && f.cache.attr && f.set("content.text", b), this.attr(ca, b)) } return d.fn["attr" + ba].apply(this, arguments) }, clone: function (a) { var b = d.fn["clone" + ba].apply(this, arguments); return a || b.filter("[" + ca + "]").attr("title", function () { return d.attr(this, ca) }).removeAttr(ca), b } }, function (a, b) { if (!b || d.fn[a + ba]) return D; var c = d.fn[a + ba] = d.fn[a]; d.fn[a] = function () { return b.apply(this, arguments) || c.apply(this, arguments) } }), d.ui || (d["cleanData" + ba] = d.cleanData, d.cleanData = function (a) { for (var b, c = 0; (b = d(a[c])).length; c++)if (b.attr(T)) try { b.triggerHandler("removeqtip") } catch (e) { } d["cleanData" + ba].apply(this, arguments) }), y.version = "3.0.3", y.nextid = 0, y.inactiveEvents = X, y.zindex = 15e3, y.defaults = { prerender: E, id: E, overwrite: D, suppress: D, content: { text: D, attr: "title", title: E, button: E }, position: { my: "top left", at: "bottom right", target: E, container: E, viewport: E, adjust: { x: 0, y: 0, mouse: D, scroll: D, resize: D, method: "flipinvert flipinvert" }, effect: function (a, b) { d(this).animate(b, { duration: 200, queue: E }) } }, show: { target: E, event: "mouseenter", effect: D, delay: 90, solo: E, ready: E, autofocus: E }, hide: { target: E, event: "mouseleave", effect: D, delay: 0, fixed: E, inactive: E, leave: "window", distance: E }, style: { classes: "", widget: E, width: E, height: E, def: D }, events: { render: F, move: F, show: F, hide: F, toggle: F, visible: F, hidden: F, focus: F, blur: F } }; var ha, ia, ja, ka, la, ma = "margin", na = "border", oa = "color", pa = "background-color", qa = "transparent", ra = " !important", sa = !!b.createElement("canvas").getContext, ta = /rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i, ua = {}, va = ["Webkit", "O", "Moz", "ms"]; sa ? (ka = a.devicePixelRatio || 1, la = function () { var a = b.createElement("canvas").getContext("2d"); return a.backingStorePixelRatio || a.webkitBackingStorePixelRatio || a.mozBackingStorePixelRatio || a.msBackingStorePixelRatio || a.oBackingStorePixelRatio || 1 }(), ja = ka / la) : ia = function (a, b, c) { return "<qtipvml:" + a + ' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" ' + (b || "") + ' style="behavior: url(#default#VML); ' + (c || "") + '" />' }, d.extend(v.prototype, {
            init: function (a) { var b, c; c = this.element = a.elements.tip = d("<div />", { "class": S + "-tip" }).prependTo(a.tooltip), sa ? (b = d("<canvas />").appendTo(this.element)[0].getContext("2d"), b.lineJoin = "miter", b.miterLimit = 1e5, b.save()) : (b = ia("shape", 'coordorigin="0,0"', "position:absolute;"), this.element.html(b + b), a._bind(d("*", c).add(c), ["click", "mousedown"], function (a) { a.stopPropagation() }, this._ns)), a._bind(a.tooltip, "tooltipmove", this.reposition, this._ns, this), this.create() }, _swapDimensions: function () { this.size[0] = this.options.height, this.size[1] = this.options.width }, _resetDimensions: function () { this.size[0] = this.options.width, this.size[1] = this.options.height }, _useTitle: function (a) { var b = this.qtip.elements.titlebar; return b && (a.y === K || a.y === O && this.element.position().top + this.size[1] / 2 + this.options.offset < b.outerHeight(D)) }, _parseCorner: function (a) { var b = this.qtip.options.position.my; return a === E || b === E ? a = E : a === D ? a = new A(b.string()) : a.string || (a = new A(a), a.fixed = D), a }, _parseWidth: function (a, b, c) { var d = this.qtip.elements, e = na + s(b) + "Width"; return (c ? u(c, e) : u(d.content, e) || u(this._useTitle(a) && d.titlebar || d.content, e) || u(d.tooltip, e)) || 0 }, _parseRadius: function (a) { var b = this.qtip.elements, c = na + s(a.y) + s(a.x) + "Radius"; return da.ie < 9 ? 0 : u(this._useTitle(a) && b.titlebar || b.content, c) || u(b.tooltip, c) || 0 }, _invalidColour: function (a, b, c) { var d = a.css(b); return !d || c && d === a.css(c) || ta.test(d) ? E : d }, _parseColours: function (a) { var b = this.qtip.elements, c = this.element.css("cssText", ""), e = na + s(a[a.precedance]) + s(oa), f = this._useTitle(a) && b.titlebar || b.content, g = this._invalidColour, h = []; return h[0] = g(c, pa) || g(f, pa) || g(b.content, pa) || g(b.tooltip, pa) || c.css(pa), h[1] = g(c, e, oa) || g(f, e, oa) || g(b.content, e, oa) || g(b.tooltip, e, oa) || b.tooltip.css(e), d("*", c).add(c).css("cssText", pa + ":" + qa + ra + ";" + na + ":0" + ra + ";"), h }, _calculateSize: function (a) { var b, c, d, e = a.precedance === H, f = this.options.width, g = this.options.height, h = "c" === a.abbrev(), i = (e ? f : g) * (h ? .5 : 1), j = Math.pow, k = Math.round, l = Math.sqrt(j(i, 2) + j(g, 2)), m = [this.border / i * l, this.border / g * l]; return m[2] = Math.sqrt(j(m[0], 2) - j(this.border, 2)), m[3] = Math.sqrt(j(m[1], 2) - j(this.border, 2)), b = l + m[2] + m[3] + (h ? 0 : m[0]), c = b / l, d = [k(c * f), k(c * g)], e ? d : d.reverse() }, _calculateTip: function (a, b, c) { c = c || 1, b = b || this.size; var d = b[0] * c, e = b[1] * c, f = Math.ceil(d / 2), g = Math.ceil(e / 2), h = { br: [0, 0, d, e, d, 0], bl: [0, 0, d, 0, 0, e], tr: [0, e, d, 0, d, e], tl: [0, 0, 0, e, d, e], tc: [0, e, f, 0, d, e], bc: [0, 0, d, 0, f, e], rc: [0, 0, d, g, 0, e], lc: [d, 0, d, e, 0, g] }; return h.lt = h.br, h.rt = h.bl, h.lb = h.tr, h.rb = h.tl, h[a.abbrev()] }, _drawCoords: function (a, b) { a.beginPath(), a.moveTo(b[0], b[1]), a.lineTo(b[2], b[3]), a.lineTo(b[4], b[5]), a.closePath() }, create: function () { var a = this.corner = (sa || da.ie) && this._parseCorner(this.options.corner); return this.enabled = !!this.corner && "c" !== this.corner.abbrev(), this.enabled && (this.qtip.cache.corner = a.clone(), this.update()), this.element.toggle(this.enabled), this.corner }, update: function (b, c) { if (!this.enabled) return this; var e, f, g, h, i, j, k, l, m = this.qtip.elements, n = this.element, o = n.children(), p = this.options, q = this.size, r = p.mimic, s = Math.round; b || (b = this.qtip.cache.corner || this.corner), r === E ? r = b : (r = new A(r), r.precedance = b.precedance, "inherit" === r.x ? r.x = b.x : "inherit" === r.y ? r.y = b.y : r.x === r.y && (r[b.precedance] = b[b.precedance])), f = r.precedance, b.precedance === G ? this._swapDimensions() : this._resetDimensions(), e = this.color = this._parseColours(b), e[1] !== qa ? (l = this.border = this._parseWidth(b, b[b.precedance]), p.border && 1 > l && !ta.test(e[1]) && (e[0] = e[1]), this.border = l = p.border !== D ? p.border : l) : this.border = l = 0, k = this.size = this._calculateSize(b), n.css({ width: k[0], height: k[1], lineHeight: k[1] + "px" }), j = b.precedance === H ? [s(r.x === L ? l : r.x === N ? k[0] - q[0] - l : (k[0] - q[0]) / 2), s(r.y === K ? k[1] - q[1] : 0)] : [s(r.x === L ? k[0] - q[0] : 0), s(r.y === K ? l : r.y === M ? k[1] - q[1] - l : (k[1] - q[1]) / 2)], sa ? (g = o[0].getContext("2d"), g.restore(), g.save(), g.clearRect(0, 0, 6e3, 6e3), h = this._calculateTip(r, q, ja), i = this._calculateTip(r, this.size, ja), o.attr(I, k[0] * ja).attr(J, k[1] * ja), o.css(I, k[0]).css(J, k[1]), this._drawCoords(g, i), g.fillStyle = e[1], g.fill(), g.translate(j[0] * ja, j[1] * ja), this._drawCoords(g, h), g.fillStyle = e[0], g.fill()) : (h = this._calculateTip(r), h = "m" + h[0] + "," + h[1] + " l" + h[2] + "," + h[3] + " " + h[4] + "," + h[5] + " xe", j[2] = l && /^(r|b)/i.test(b.string()) ? 8 === da.ie ? 2 : 1 : 0, o.css({ coordsize: k[0] + l + " " + k[1] + l, antialias: "" + (r.string().indexOf(O) > -1), left: j[0] - j[2] * Number(f === G), top: j[1] - j[2] * Number(f === H), width: k[0] + l, height: k[1] + l }).each(function (a) { var b = d(this); b[b.prop ? "prop" : "attr"]({ coordsize: k[0] + l + " " + k[1] + l, path: h, fillcolor: e[0], filled: !!a, stroked: !a }).toggle(!(!l && !a)), !a && b.html(ia("stroke", 'weight="' + 2 * l + 'px" color="' + e[1] + '" miterlimit="1000" joinstyle="miter"')) })), a.opera && setTimeout(function () { m.tip.css({ display: "inline-block", visibility: "visible" }) }, 1), c !== E && this.calculate(b, k) }, calculate: function (a, b) {
                if (!this.enabled) return E; var c, e, f = this, g = this.qtip.elements, h = this.element, i = this.options.offset, j = {};
                return a = a || this.corner, c = a.precedance, b = b || this._calculateSize(a), e = [a.x, a.y], c === G && e.reverse(), d.each(e, function (d, e) { var h, k, l; e === O ? (h = c === H ? L : K, j[h] = "50%", j[ma + "-" + h] = -Math.round(b[c === H ? 0 : 1] / 2) + i) : (h = f._parseWidth(a, e, g.tooltip), k = f._parseWidth(a, e, g.content), l = f._parseRadius(a), j[e] = Math.max(-f.border, d ? k : i + (l > h ? l : -h))) }), j[a[c]] -= b[c === G ? 0 : 1], h.css({ margin: "", top: "", bottom: "", left: "", right: "" }).css(j), j
            }, reposition: function (a, b, d) { function e(a, b, c, d, e) { a === Q && j.precedance === b && k[d] && j[c] !== O ? j.precedance = j.precedance === G ? H : G : a !== Q && k[d] && (j[b] = j[b] === O ? k[d] > 0 ? d : e : j[b] === d ? e : d) } function f(a, b, e) { j[a] === O ? p[ma + "-" + b] = o[a] = g[ma + "-" + b] - k[b] : (h = g[e] !== c ? [k[b], -g[b]] : [-k[b], g[b]], (o[a] = Math.max(h[0], h[1])) > h[0] && (d[b] -= k[b], o[b] = E), p[g[e] !== c ? e : b] = o[a]) } if (this.enabled) { var g, h, i = b.cache, j = this.corner.clone(), k = d.adjusted, l = b.options.position.adjust.method.split(" "), m = l[0], n = l[1] || l[0], o = { left: E, top: E, x: 0, y: 0 }, p = {}; this.corner.fixed !== D && (e(m, G, H, L, N), e(n, H, G, K, M), j.string() === i.corner.string() && i.cornerTop === k.top && i.cornerLeft === k.left || this.update(j, E)), g = this.calculate(j), g.right !== c && (g.left = -g.right), g.bottom !== c && (g.top = -g.bottom), g.user = this.offset, o.left = m === Q && !!k.left, o.left && f(G, L, N), o.top = n === Q && !!k.top, o.top && f(H, K, M), this.element.css(p).toggle(!(o.x && o.y || j.x === O && o.y || j.y === O && o.x)), d.left -= g.left.charAt ? g.user : m !== Q || o.top || !o.left && !o.top ? g.left + this.border : 0, d.top -= g.top.charAt ? g.user : n !== Q || o.left || !o.left && !o.top ? g.top + this.border : 0, i.cornerLeft = k.left, i.cornerTop = k.top, i.corner = j.clone() } }, destroy: function () { this.qtip._unbind(this.qtip.tooltip, this._ns), this.qtip.elements.tip && this.qtip.elements.tip.find("*").remove().end().remove() }
        }), ha = R.tip = function (a) { return new v(a, a.options.style.tip) }, ha.initialize = "render", ha.sanitize = function (a) { if (a.style && "tip" in a.style) { var b = a.style.tip; "object" != typeof b && (b = a.style.tip = { corner: b }), /string|boolean/i.test(typeof b.corner) || (b.corner = D) } }, B.tip = { "^position.my|style.tip.(corner|mimic|border)$": function () { this.create(), this.qtip.reposition() }, "^style.tip.(height|width)$": function (a) { this.size = [a.width, a.height], this.update(), this.qtip.reposition() }, "^content.title|style.(classes|widget)$": function () { this.update() } }, d.extend(D, y.defaults, { style: { tip: { corner: D, mimic: E, width: 6, height: 6, border: D, offset: 0 } } }); var wa, xa, ya = "qtip-modal", za = "." + ya; xa = function () { function a(a) { if (d.expr[":"].focusable) return d.expr[":"].focusable; var b, c, e, f = !isNaN(d.attr(a, "tabindex")), g = a.nodeName && a.nodeName.toLowerCase(); return "area" === g ? (b = a.parentNode, c = b.name, a.href && c && "map" === b.nodeName.toLowerCase() ? (e = d("img[usemap=#" + c + "]")[0], !!e && e.is(":visible")) : !1) : /input|select|textarea|button|object/.test(g) ? !a.disabled : "a" === g ? a.href || f : f } function c(a) { j.length < 1 && a.length ? a.not("body").blur() : j.first().focus() } function e(a) { if (h.is(":visible")) { var b, e = d(a.target), g = f.tooltip, i = e.closest(W); b = i.length < 1 ? E : parseInt(i[0].style.zIndex, 10) > parseInt(g[0].style.zIndex, 10), b || e.closest(W)[0] === g[0] || c(e) } } var f, g, h, i = this, j = {}; d.extend(i, { init: function () { return h = i.elem = d("<div />", { id: "qtip-overlay", html: "<div></div>", mousedown: function () { return E } }).hide(), d(b.body).bind("focusin" + za, e), d(b).bind("keydown" + za, function (a) { f && f.options.show.modal.escape && 27 === a.keyCode && f.hide(a) }), h.bind("click" + za, function (a) { f && f.options.show.modal.blur && f.hide(a) }), i }, update: function (b) { f = b, j = b.options.show.modal.stealfocus !== E ? b.tooltip.find("*").filter(function () { return a(this) }) : [] }, toggle: function (a, e, j) { var k = a.tooltip, l = a.options.show.modal, m = l.effect, n = e ? "show" : "hide", o = h.is(":visible"), p = d(za).filter(":visible:not(:animated)").not(k); return i.update(a), e && l.stealfocus !== E && c(d(":focus")), h.toggleClass("blurs", l.blur), e && h.appendTo(b.body), h.is(":animated") && o === e && g !== E || !e && p.length ? i : (h.stop(D, E), d.isFunction(m) ? m.call(h, e) : m === E ? h[n]() : h.fadeTo(parseInt(j, 10) || 90, e ? 1 : 0, function () { e || h.hide() }), e || h.queue(function (a) { h.css({ left: "", top: "" }), d(za).length || h.detach(), a() }), g = e, f.destroyed && (f = F), i) } }), i.init() }, xa = new xa, d.extend(w.prototype, { init: function (a) { var b = a.tooltip; return this.options.on ? (a.elements.overlay = xa.elem, b.addClass(ya).css("z-index", y.modal_zindex + d(za).length), a._bind(b, ["tooltipshow", "tooltiphide"], function (a, c, e) { var f = a.originalEvent; if (a.target === b[0]) if (f && "tooltiphide" === a.type && /mouse(leave|enter)/.test(f.type) && d(f.relatedTarget).closest(xa.elem[0]).length) try { a.preventDefault() } catch (g) { } else (!f || f && "tooltipsolo" !== f.type) && this.toggle(a, "tooltipshow" === a.type, e) }, this._ns, this), a._bind(b, "tooltipfocus", function (a, c) { if (!a.isDefaultPrevented() && a.target === b[0]) { var e = d(za), f = y.modal_zindex + e.length, g = parseInt(b[0].style.zIndex, 10); xa.elem[0].style.zIndex = f - 1, e.each(function () { this.style.zIndex > g && (this.style.zIndex -= 1) }), e.filter("." + $).qtip("blur", a.originalEvent), b.addClass($)[0].style.zIndex = f, xa.update(c); try { a.preventDefault() } catch (h) { } } }, this._ns, this), void a._bind(b, "tooltiphide", function (a) { a.target === b[0] && d(za).filter(":visible").not(b).last().qtip("focus", a) }, this._ns, this)) : this }, toggle: function (a, b, c) { return a && a.isDefaultPrevented() ? this : void xa.toggle(this.qtip, !!b, c) }, destroy: function () { this.qtip.tooltip.removeClass(ya), this.qtip._unbind(this.qtip.tooltip, this._ns), xa.toggle(this.qtip, E), delete this.qtip.elements.overlay } }), wa = R.modal = function (a) { return new w(a, a.options.show.modal) }, wa.sanitize = function (a) { a.show && ("object" != typeof a.show.modal ? a.show.modal = { on: !!a.show.modal } : "undefined" == typeof a.show.modal.on && (a.show.modal.on = D)) }, y.modal_zindex = y.zindex - 200, wa.initialize = "render", B.modal = { "^show.modal.(on|blur)$": function () { this.destroy(), this.init(), this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth > 0) } }, d.extend(D, y.defaults, { show: { modal: { on: E, effect: D, blur: D, stealfocus: D, escape: D } } }), R.viewport = function (c, d, e, f, g, h, i) { function j(a, b, c, e, f, g, h, i, j) { var k = d[f], s = u[a], t = v[a], w = c === Q, x = s === f ? j : s === g ? -j : -j / 2, y = t === f ? i : t === g ? -i : -i / 2, z = q[f] + r[f] - (n ? 0 : m[f]), A = z - k, B = k + j - (h === I ? o : p) - z, C = x - (u.precedance === a || s === u[b] ? y : 0) - (t === O ? i / 2 : 0); return w ? (C = (s === f ? 1 : -1) * x, d[f] += A > 0 ? A : B > 0 ? -B : 0, d[f] = Math.max(-m[f] + r[f], k - C, Math.min(Math.max(-m[f] + r[f] + (h === I ? o : p), k + C), d[f], "center" === s ? k - x : 1e9))) : (e *= c === P ? 2 : 0, A > 0 && (s !== f || B > 0) ? (d[f] -= C + e, l.invert(a, f)) : B > 0 && (s !== g || A > 0) && (d[f] -= (s === O ? -C : C) + e, l.invert(a, g)), d[f] < q[f] && -d[f] > B && (d[f] = k, l = u.clone())), d[f] - k } var k, l, m, n, o, p, q, r, s = e.target, t = c.elements.tooltip, u = e.my, v = e.at, w = e.adjust, x = w.method.split(" "), y = x[0], z = x[1] || x[0], A = e.viewport, B = e.container, C = { left: 0, top: 0 }; return A.jquery && s[0] !== a && s[0] !== b.body && "none" !== w.method ? (m = B.offset() || C, n = "static" === B.css("position"), k = "fixed" === t.css("position"), o = A[0] === a ? A.width() : A.outerWidth(E), p = A[0] === a ? A.height() : A.outerHeight(E), q = { left: k ? 0 : A.scrollLeft(), top: k ? 0 : A.scrollTop() }, r = A.offset() || C, "shift" === y && "shift" === z || (l = u.clone()), C = { left: "none" !== y ? j(G, H, y, w.x, L, N, I, f, h) : 0, top: "none" !== z ? j(H, G, z, w.y, K, M, J, g, i) : 0, my: l }) : C }, R.polys = { polygon: function (a, b) { var c, d, e, f = { width: 0, height: 0, position: { top: 1e10, right: 0, bottom: 0, left: 1e10 }, adjustable: E }, g = 0, h = [], i = 1, j = 1, k = 0, l = 0; for (g = a.length; g--;)c = [parseInt(a[--g], 10), parseInt(a[g + 1], 10)], c[0] > f.position.right && (f.position.right = c[0]), c[0] < f.position.left && (f.position.left = c[0]), c[1] > f.position.bottom && (f.position.bottom = c[1]), c[1] < f.position.top && (f.position.top = c[1]), h.push(c); if (d = f.width = Math.abs(f.position.right - f.position.left), e = f.height = Math.abs(f.position.bottom - f.position.top), "c" === b.abbrev()) f.position = { left: f.position.left + f.width / 2, top: f.position.top + f.height / 2 }; else { for (; d > 0 && e > 0 && i > 0 && j > 0;)for (d = Math.floor(d / 2), e = Math.floor(e / 2), b.x === L ? i = d : b.x === N ? i = f.width - d : i += Math.floor(d / 2), b.y === K ? j = e : b.y === M ? j = f.height - e : j += Math.floor(e / 2), g = h.length; g-- && !(h.length < 2);)k = h[g][0] - f.position.left, l = h[g][1] - f.position.top, (b.x === L && k >= i || b.x === N && i >= k || b.x === O && (i > k || k > f.width - i) || b.y === K && l >= j || b.y === M && j >= l || b.y === O && (j > l || l > f.height - j)) && h.splice(g, 1); f.position = { left: h[0][0], top: h[0][1] } } return f }, rect: function (a, b, c, d) { return { width: Math.abs(c - a), height: Math.abs(d - b), position: { left: Math.min(a, c), top: Math.min(b, d) } } }, _angles: { tc: 1.5, tr: 7 / 4, tl: 5 / 4, bc: .5, br: .25, bl: .75, rc: 2, lc: 1, c: 0 }, ellipse: function (a, b, c, d, e) { var f = R.polys._angles[e.abbrev()], g = 0 === f ? 0 : c * Math.cos(f * Math.PI), h = d * Math.sin(f * Math.PI); return { width: 2 * c - Math.abs(g), height: 2 * d - Math.abs(h), position: { left: a + g, top: b + h }, adjustable: E } }, circle: function (a, b, c, d) { return R.polys.ellipse(a, b, c, c, d) } }, R.svg = function (a, c, e) { for (var f, g, h, i, j, k, l, m, n, o = c[0], p = d(o.ownerSVGElement), q = o.ownerDocument, r = (parseInt(c.css("stroke-width"), 10) || 0) / 2; !o.getBBox;)o = o.parentNode; if (!o.getBBox || !o.parentNode) return E; switch (o.nodeName) { case "ellipse": case "circle": m = R.polys.ellipse(o.cx.baseVal.value, o.cy.baseVal.value, (o.rx || o.r).baseVal.value + r, (o.ry || o.r).baseVal.value + r, e); break; case "line": case "polygon": case "polyline": for (l = o.points || [{ x: o.x1.baseVal.value, y: o.y1.baseVal.value }, { x: o.x2.baseVal.value, y: o.y2.baseVal.value }], m = [], k = -1, i = l.numberOfItems || l.length; ++k < i;)j = l.getItem ? l.getItem(k) : l[k], m.push.apply(m, [j.x, j.y]); m = R.polys.polygon(m, e); break; default: m = o.getBBox(), m = { width: m.width, height: m.height, position: { left: m.x, top: m.y } } }return n = m.position, p = p[0], p.createSVGPoint && (g = o.getScreenCTM(), l = p.createSVGPoint(), l.x = n.left, l.y = n.top, h = l.matrixTransform(g), n.left = h.x, n.top = h.y), q !== b && "mouse" !== a.position.target && (f = d((q.defaultView || q.parentWindow).frameElement).offset(), f && (n.left += f.left, n.top += f.top)), q = d(q), n.left += q.scrollLeft(), n.top += q.scrollTop(), m }, R.imagemap = function (a, b, c) { b.jquery || (b = d(b)); var e, f, g, h, i, j = (b.attr("shape") || "rect").toLowerCase().replace("poly", "polygon"), k = d('img[usemap="#' + b.parent("map").attr("name") + '"]'), l = d.trim(b.attr("coords")), m = l.replace(/,$/, "").split(","); if (!k.length) return E; if ("polygon" === j) h = R.polys.polygon(m, c); else { if (!R.polys[j]) return E; for (g = -1, i = m.length, f = []; ++g < i;)f.push(parseInt(m[g], 10)); h = R.polys[j].apply(this, f.concat(c)) } return e = k.offset(), e.left += Math.ceil((k.outerWidth(E) - k.width()) / 2), e.top += Math.ceil((k.outerHeight(E) - k.height()) / 2), h.position.left += e.left, h.position.top += e.top, h }; var Aa, Ba = '<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>'; d.extend(x.prototype, { _scroll: function () { var b = this.qtip.elements.overlay; b && (b[0].style.top = d(a).scrollTop() + "px") }, init: function (c) { var e = c.tooltip; d("select, object").length < 1 && (this.bgiframe = c.elements.bgiframe = d(Ba).appendTo(e), c._bind(e, "tooltipmove", this.adjustBGIFrame, this._ns, this)), this.redrawContainer = d("<div/>", { id: S + "-rcontainer" }).appendTo(b.body), c.elements.overlay && c.elements.overlay.addClass("qtipmodal-ie6fix") && (c._bind(a, ["scroll", "resize"], this._scroll, this._ns, this), c._bind(e, ["tooltipshow"], this._scroll, this._ns, this)), this.redraw() }, adjustBGIFrame: function () { var a, b, c = this.qtip.tooltip, d = { height: c.outerHeight(E), width: c.outerWidth(E) }, e = this.qtip.plugins.tip, f = this.qtip.elements.tip; b = parseInt(c.css("borderLeftWidth"), 10) || 0, b = { left: -b, top: -b }, e && f && (a = "x" === e.corner.precedance ? [I, L] : [J, K], b[a[1]] -= f[a[0]]()), this.bgiframe.css(b).css(d) }, redraw: function () { if (this.qtip.rendered < 1 || this.drawing) return this; var a, b, c, d, e = this.qtip.tooltip, f = this.qtip.options.style, g = this.qtip.options.position.container; return this.qtip.drawing = 1, f.height && e.css(J, f.height), f.width ? e.css(I, f.width) : (e.css(I, "").appendTo(this.redrawContainer), b = e.width(), 1 > b % 2 && (b += 1), c = e.css("maxWidth") || "", d = e.css("minWidth") || "", a = (c + d).indexOf("%") > -1 ? g.width() / 100 : 0, c = (c.indexOf("%") > -1 ? a : 1 * parseInt(c, 10)) || b, d = (d.indexOf("%") > -1 ? a : 1 * parseInt(d, 10)) || 0, b = c + d ? Math.min(Math.max(b, d), c) : b, e.css(I, Math.round(b)).appendTo(g)), this.drawing = 0, this }, destroy: function () { this.bgiframe && this.bgiframe.remove(), this.qtip._unbind([a, this.qtip.tooltip], this._ns) } }), Aa = R.ie6 = function (a) { return 6 === da.ie ? new x(a) : E }, Aa.initialize = "render", B.ie6 = { "^content|style$": function () { this.redraw() } }
    })
}(window, document);
//# sourceMappingURL=jquery.qtip.min.map;
/** https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent **/
(function () {

    if (typeof window.CustomEvent === "function") return false;

    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();;
/// <reference path="../../../lib/jquery-1.2.6.js" />
/*
	Masked Input plugin for jQuery
	Copyright (c) 2007-2009 Josh Bush (digitalbush.com)
	Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license) 
	Version: 1.2.2 (03/09/2009 22:39:06)
*/
// Modified by ramiro at conductiva.com to accept placeholder for the full mask
(function($) {
	var pasteEventName = (navigator.appName == 'Microsoft Internet Explorer' ? 'paste' : 'input') + ".mask";
	var iPhone = (window.orientation != undefined);

	$.mask = {
		//Predefined character definitions
		definitions: {
			'9': "[0-9]",
			'a': "[A-Za-z]",
			'*': "[A-Za-z0-9]"
		}
	};

	$.fn.extend({
		//Helper Function for Caret positioning
		caret: function(begin, end) {
			if (this.length == 0) return;
			if (typeof begin == 'number') {
				end = (typeof end == 'number') ? end : begin;
				return this.each(function() {
					if (this.setSelectionRange) {
						this.focus();
						this.setSelectionRange(begin, end);
					} else if (this.createTextRange) {
						var range = this.createTextRange();
						range.collapse(true);
						range.moveEnd('character', end);
						range.moveStart('character', begin);
						range.select();
					}
				});
			} else {
				if (this[0].setSelectionRange) {
					begin = this[0].selectionStart;
					end = this[0].selectionEnd;
				} else if (document.selection && document.selection.createRange) {
					var range = document.selection.createRange();
					begin = 0 - range.duplicate().moveStart('character', -100000);
					end = begin + range.text.length;
				}
				return { begin: begin, end: end };
			}
		},
		unmask: function() { return this.trigger("unmask"); },
		mask: function(mask, settings) {
			if (!mask && this.length > 0) {
				var input = $(this[0]);
				var tests = input.data("tests");
				return $.map(input.data("buffer"), function(c, i) {
					return tests[i] ? c : null;
				}).join('');
			}
			settings = $.extend({
				placeholder: "_",
				completed: null
			}, settings);

			var defs = $.mask.definitions;
			var tests = [];
			var partialPosition = mask.length;
			var firstNonMaskPos = null;
			var len = mask.length;

			$.each(mask.split(""), function(i, c) {
				if (c == '?') {
					len--;
					partialPosition = i;
				} else if (defs[c]) {
					tests.push(new RegExp(defs[c]));
					if(firstNonMaskPos==null)
						firstNonMaskPos =  tests.length - 1;
				} else {
					tests.push(null);
				}
			});

			return this.each(function() {
				var input = $(this);
				var buffer = $.map(mask.split(""), function(c, i) { 
					if (c != '?') { 
						// conductiva
						return defs[c] ? (settings.placeholder.length>1 ? settings.placeholder.charAt(i) : settings.placeholder) : c;
					}
				});
				var ignore = false;  			//Variable for ignoring control keys
				var focusText = input.val();

				input.data("buffer", buffer).data("tests", tests);

				function seekNext(pos) {
					while (++pos <= len && !tests[pos]);
					return pos;
				};

				function shiftL(pos) {
					while (!tests[pos] && --pos >= 0);
					for (var i = pos; i < len; i++) {
						if (tests[i]) {
							// conductiva
							buffer[i] = settings.placeholder.length>1 ? settings.placeholder.charAt(i) : settings.placeholder;
							var j = seekNext(i);
							if (j < len && tests[i].test(buffer[j])) {
								buffer[i] = buffer[j];
							} else
								break;
						}
					}
					writeBuffer();
					input.caret(Math.max(firstNonMaskPos, pos));
				};

				function shiftR(pos) {
					// conductiva
					for (var i = pos /*,c = settings.placeholder*/; i < len; i++) {
						var c = settings.placeholder.length>1 ? settings.placeholder.charAt(i) : settings.placeholder;
						if (tests[i]) {
							var j = seekNext(i);
							var t = buffer[i];
							buffer[i] = c;
							if (j < len && tests[j].test(t))
								c = t;
							else
								break;
						}
					}
				};

				function keydownEvent(e) {
					var pos = $(this).caret();
					var k = e.keyCode;
					ignore = (k < 16 || (k > 16 && k < 32) || (k > 32 && k < 41));

					//delete selection before proceeding
					if ((pos.begin - pos.end) != 0 && (!ignore || k == 8 || k == 46))
						clearBuffer(pos.begin, pos.end);

					//backspace, delete, and escape get special treatment
					if (k == 8 || k == 46 || (iPhone && k == 127)) {//backspace/delete
						shiftL(pos.begin + (k == 46 ? 0 : -1));
						return false;
					} else if (k == 27) {//escape
						input.val(focusText);
						input.caret(0, checkVal());
						return false;
					}
				};

				function keypressEvent(e) {
					if (ignore) {
						ignore = false;
						//Fixes Mac FF bug on backspace
						return (e.keyCode == 8) ? false : null;
					}
					e = e || window.event;
					var k = e.charCode || e.keyCode || e.which;
					var pos = $(this).caret();

					if (e.ctrlKey || e.altKey || e.metaKey) {//Ignore
						return true;
					} else if ((k >= 32 && k <= 125) || k > 186) {//typeable characters
						var p = seekNext(pos.begin - 1);
						if (p < len) {
							var c = String.fromCharCode(k);
							if (tests[p].test(c)) {
								shiftR(p);
								buffer[p] = c;
								writeBuffer();
								var next = seekNext(p);
								$(this).caret(next);
								if (settings.completed && next == len)
									settings.completed.call(input);
							}
						}
					}
					return false;
				};

				function clearBuffer(start, end) {
					for (var i = start; i < end && i < len; i++) {
						if (tests[i]) // conductiva
							buffer[i] = settings.placeholder.length>1 ? settings.placeholder.charAt(i) : settings.placeholder;
					}
				};

				function writeBuffer() { return input.val(buffer.join('')).val(); };

				function checkVal(allow) {
					//try to place characters where they belong
					var test = input.val();
					var lastMatch = -1;
					for (var i = 0, pos = 0; i < len; i++) {
						if (tests[i]) {
							// conductiva
							buffer[i] = settings.placeholder.length>1 ? settings.placeholder.charAt(i) : settings.placeholder;
							while (pos++ < test.length) {
								var c = test.charAt(pos - 1);
								if (tests[i].test(c)) {
									buffer[i] = c;
									lastMatch = i;
									break;
								}
							}
							if (pos > test.length)
								break;
						} else if (buffer[i] == test[pos] && i!=partialPosition) {
							pos++;
							lastMatch = i;
						} 
					}
					if (!allow && lastMatch + 1 < partialPosition) {
						input.val("");
						clearBuffer(0, len);
					} else if (allow || lastMatch + 1 >= partialPosition) {
						writeBuffer();
						if (!allow) input.val(input.val().substring(0, lastMatch + 1));
					}
					return (partialPosition ? i : firstNonMaskPos);
				};

				if (!input.attr("readonly"))
					input
					.one("unmask", function() {
						input
							.unbind(".mask")
							.removeData("buffer")
							.removeData("tests");
					})
					.bind("focus.mask", function() {
						focusText = input.val();
						var pos = checkVal();
						writeBuffer();
						setTimeout(function() {
							if (pos == mask.length)
								input.caret(0, pos);
							else
								input.caret(pos);
						}, 0);
					})
					.bind("blur.mask", function() {
						checkVal();
						if (input.val() != focusText)
							input.change();
					})
					.bind("keydown.mask", keydownEvent)
					.bind("keypress.mask", keypressEvent)
					.bind(pasteEventName, function() {
						setTimeout(function() { input.caret(checkVal(true)); }, 0);
					});

				checkVal(); //Perform initial check for existing values
			});
		}
	});
})(jQuery);;
/**
 * jQuery Bar Rating Plugin v1.2.2
 *
 * http://github.com/antennaio/jquery-bar-rating
 *
 * Copyright (c) 2012-2016 Kazik Pietruszewski
 *
 * This plugin is available under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * Modified for use of star box-shadow, using half star
 */
!function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof module && module.exports ? module.exports = t(require("jquery")) : t(jQuery) }(function (v) { var a = function () { function t() { var u = this, d = function (t) { return v.isNumeric(t) && (t = Math.floor(t)), v('option[value="' + t + '"]', u.$elem) }, l = function (t) { var e = u.$elem.data("barrating"); return void 0 !== t ? e[t] : e }, g = function (t, e) { null !== e && "object" == typeof e ? u.$elem.data("barrating", e) : u.$elem.data("barrating")[t] = e }, e = function () { var t, e, n = (t = u.options.initialRating) ? d(t) : v("option:selected", u.$elem), a = !(e = u.$elem.find('option[value="' + u.options.emptyValue + '"]')).length && u.options.allowEmpty ? (e = v("<option />", { value: u.options.emptyValue })).prependTo(u.$elem) : e, i = n.val(), r = n.data("html") ? n.data("html") : n.text(), o = null !== u.options.allowEmpty ? u.options.allowEmpty : !!a.length, l = a.length ? a.val() : null, s = a.length ? a.text() : null; g(null, { userOptions: u.options, ratingValue: i, ratingText: r, originalRatingValue: i, originalRatingText: r, allowEmpty: o, emptyRatingValue: l, emptyRatingText: s, readOnly: u.options.readonly, ratingMade: !1 }) }, o = function () { return l("ratingText") }, s = function () { return l("ratingValue") }, p = function () { return l("userOptions").reverse ? "nextAll" : "prevAll" }, c = function (t) { d(t).prop("selected", !0), l("userOptions").triggerChange && u.$elem.change() }, f = function (t) { (t = t || o()) == l("emptyRatingText") && (t = ""), u.options.showSelectedRating && u.$elem.parent().find(".br-current-rating").text(t) }, h = function () { u.$widget.find("a").removeClass(function (t, e) { return (e.match(/(^|\s)br-\S+/g) || []).join(" ") }) }, m = function () { var t, e, n, a = u.$widget.find('a[data-rating-value="' + s() + '"]'), i = l("userOptions").initialRating, r = v.isNumeric(s()) ? s() : 0, o = (t = i, Math.round(Math.floor(10 * t) / 10 % 1 * 100)); if (h(), a.addClass("br-selected br-current")[p()]().addClass("br-selected"), !l("ratingMade") && v.isNumeric(i)) { if (i <= r || !o) return; e = u.$widget.find("a"), (n = a.length ? a[l("userOptions").reverse ? "prev" : "next"]() : e[l("userOptions").reverse ? "last" : "first"]()).addClass("br-fractional"), n.addClass("br-fractional-" + o), n.append('<a class="fa fa-flip-horizontal br-empty"></a>') } }, n = function (t) { t.on("click.barrating", function (t) { var e, n, a, i = v(this), r = l("userOptions"); return t.preventDefault(), e = i.attr("data-rating-value"), n = i.attr("data-rating-text"), a = i, l("allowEmpty") && l("userOptions").deselectable && s() == a.attr("data-rating-value") && (e = l("emptyRatingValue"), n = l("emptyRatingText")), g("ratingValue", e), g("ratingText", n), g("ratingMade", !0), c(e), f(n), m(), r.onSelect.call(u, s(), o(), t), !1 }) }, a = function (t) { n(t), u.options.hoverState && (t.on("mouseenter.barrating", function () { var t = v(this); h(), t.addClass("br-active")[p()]().addClass("br-active"), f(t.attr("data-rating-text")) }), u.$widget.on("mouseleave.barrating blur.barrating", function () { f(), m() })) }, i = function (t) { t.off(".barrating") }, r = function (t) { var e = u.$widget.find("a"); l("userOptions").fastClicks && e.on("touchstart.barrating", function (t) { t.preventDefault(), t.stopPropagation(), v(this).click() }), t ? (i(e), e.on("click.barrating", function (t) { t.preventDefault() })) : a(e) }; this.show = function () { var t, i; l() || (t = ["br-wrapper"], "" !== u.options.theme && t.push("br-theme-" + u.options.theme), u.$elem.wrap(v("<div />", { class: t.join(" ") })), e(), u.$widget = (i = v("<div />", { class: "br-widget" }), u.$elem.find("option").each(function () { var t, e, n, a; (t = v(this).val()) !== l("emptyRatingValue") && (e = v(this).text(), (n = v(this).data("html")) && (e = n), a = v("<a />", { href: "#", "data-rating-value": t, "data-rating-text": e, class: "fa", html: u.options.showValues ? e : "" }), i.append(a)) }), u.options.showSelectedRating && i.append(v("<div />", { text: "", class: "br-current-rating" })), u.options.reverse && i.addClass("br-reverse"), u.options.readonly && i.addClass("br-readonly"), i), u.$widget.insertAfter(u.$elem), m(), f(), r(u.options.readonly), u.$elem.hide()) }, this.readonly = function (t) { "boolean" == typeof t && l("readOnly") != t && (r(t), g("readOnly", t), u.$widget.toggleClass("br-readonly")) }, this.set = function (t) { var e = l("userOptions"); 0 !== u.$elem.find('option[value="' + t + '"]').length && (g("ratingValue", t), g("ratingText", u.$elem.find('option[value="' + t + '"]').text()), g("ratingMade", !0), c(s()), f(o()), m(), e.silent || e.onSelect.call(this, s(), o())) }, this.clear = function () { var t = l("userOptions"); g("ratingValue", l("originalRatingValue")), g("ratingText", l("originalRatingText")), g("ratingMade", !1), v("option", u.$elem).prop("selected", function () { return this.defaultSelected }), l("userOptions").triggerChange && u.$elem.change(), f(o()), m(), t.onClear.call(this, s(), o()) }, this.destroy = function () { var t = s(), e = o(), n = l("userOptions"); i(u.$widget.find("a")), u.$widget.remove(), u.$elem.removeData("barrating"), u.$elem.unwrap(), u.$elem.show(), n.onDestroy.call(this, t, e) } } return t.prototype.init = function (t, e) { return this.$elem = v(e), this.options = v.extend({}, v.fn.barrating.defaults, t), this.options }, t }(); v.fn.barrating = function (e, n) { return this.each(function () { var t = new a; if (v(this).is("select") || v.error("Sorry, this plugin only works with select fields."), t.hasOwnProperty(e)) { if (t.init(n, this), "show" === e) return t.show(n); if (t.$elem.data("barrating")) return t.$widget = v(this).next(".br-widget"), t[e](n) } else { if ("object" == typeof e || !e) return n = e, t.init(n, this), t.show(); v.error("Method " + e + " does not exist on jQuery.barrating") } }) }, v.fn.barrating.defaults = { theme: "", initialRating: null, allowEmpty: null, emptyValue: "", showValues: !1, showSelectedRating: !0, deselectable: !0, reverse: !1, readonly: !1, fastClicks: !0, hoverState: !0, silent: !1, triggerChange: !0, onSelect: function (t, e, n) { }, onClear: function (t, e) { }, onDestroy: function (t, e) { } }, v.fn.barrating.BarRating = a });;
if (!window['YT']) {
    var YT = {
        loading: 0,
        loaded: 0
    };
}
if (!window['YTConfig']) {
    var YTConfig = {
        'host': 'http://www.youtube.com'
    };
}
if (!YT.loading) {
    YT.loading = 1;
    (function () {
        var l = [];
        YT.ready = function (f) {
            if (YT.loaded) {
                f();
            } else {
                l.push(f);
            }
        };
        window.onYTReady = function () {
            YT.loaded = 1;
            for (var i = 0; i < l.length; i++) {
                try {
                    l[i]();
                } catch (e) { }
            }
        };
        YT.setConfig = function (c) {
            for (var k in c) {
                if (c.hasOwnProperty(k)) {
                    YTConfig[k] = c[k];
                }
            }
        };
    })();
};
(function () {
    var h, k = this; function l(a) { return "string" == typeof a }
    function m(a) { a = a.split("."); for (var b = k, c = 0; c < a.length; c++)if (b = b[a[c]], null == b) return null; return b }
    function aa() { }
    function p(a) {
        var b = typeof a; if ("object" == b) if (a) { if (a instanceof Array) return "array"; if (a instanceof Object) return b; var c = Object.prototype.toString.call(a); if ("[object Window]" == c) return "object"; if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array"; if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function" } else return "null";
        else if ("function" == b && "undefined" == typeof a.call) return "object"; return b
    }
    function q(a) { var b = typeof a; return "object" == b && null != a || "function" == b }
    var r = "closure_uid_" + (1E9 * Math.random() >>> 0), t = 0; function ba(a, b, c) { return a.call.apply(a.bind, arguments) }
    function ca(a, b, c) { if (!a) throw Error(); if (2 < arguments.length) { var d = Array.prototype.slice.call(arguments, 2); return function () { var c = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(c, d); return a.apply(b, c) } } return function () { return a.apply(b, arguments) } }
    function u(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? u = ba : u = ca; return u.apply(null, arguments) }
    var da = Date.now || function () { return +new Date };
    function v(a, b) { var c = a.split("."), d = k; c[0] in d || "undefined" == typeof d.execScript || d.execScript("var " + c[0]); for (var e; c.length && (e = c.shift());)c.length || void 0 === b ? d[e] && d[e] !== Object.prototype[e] ? d = d[e] : d = d[e] = {} : d[e] = b }
    function w(a, b) {
        function c() { }
        c.prototype = b.prototype; a.I = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.P = function (a, c, g) { for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++)d[e - 2] = arguments[e]; return b.prototype[c].apply(a, d) }
    }
    ; var x = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0) } : function (a, b) {
        if (l(a)) return l(b) && 1 == b.length ? a.indexOf(b, 0) : -1;
        for (var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c; return -1
    }, y = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c) } : function (a, b, c) { for (var d = a.length, e = l(a) ? a.split("") : a, g = 0; g < d; g++)g in e && b.call(c, e[g], g, a) };
    function ea(a, b) { a: { var c = a.length; for (var d = l(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) { c = e; break a } c = -1 } return 0 > c ? null : l(a) ? a.charAt(c) : a[c] }
    function fa(a) { return Array.prototype.concat.apply([], arguments) }
    function z(a) { var b = a.length; if (0 < b) { for (var c = Array(b), d = 0; d < b; d++)c[d] = a[d]; return c } return [] }
    ; function A(a, b) { this.c = a; this.f = b; this.b = 0; this.a = null }
    A.prototype.get = function () { if (0 < this.b) { this.b--; var a = this.a; this.a = a.next; a.next = null } else a = this.c(); return a }; var ha = /&/g, ia = /</g, ja = />/g, ka = /"/g, la = /'/g, ma = /\x00/g, na = /[\x00&<>"']/; var B; a: { var C = k.navigator; if (C) { var D = C.userAgent; if (D) { B = D; break a } } B = "" }; function oa(a) { var b = E, c; for (c in b) if (a.call(void 0, b[c], c, b)) return c }
    ; function pa(a) { k.setTimeout(function () { throw a; }, 0) }
    var F;
    function qa() {
        var a = k.MessageChannel; "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && -1 == B.indexOf("Presto") && (a = function () {
            var a = document.createElement("IFRAME"); a.style.display = "none"; a.src = ""; document.documentElement.appendChild(a); var b = a.contentWindow; a = b.document; a.open(); a.write(""); a.close(); var c = "callImmediate" + Math.random(), d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host; a = u(function (a) {
                if (("*" == d || a.origin == d) &&
                    a.data == c) this.port1.onmessage()
            }, this);
            b.addEventListener("message", a, !1); this.port1 = {}; this.port2 = { postMessage: function () { b.postMessage(c, d) } }
        });
        if ("undefined" !== typeof a && -1 == B.indexOf("Trident") && -1 == B.indexOf("MSIE")) {
            var b = new a, c = {}, d = c; b.port1.onmessage = function () { if (void 0 !== c.next) { c = c.next; var a = c.D; c.D = null; a() } };
            return function (a) { d.next = { D: a }; d = d.next; b.port2.postMessage(0) }
        } return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
            var b = document.createElement("SCRIPT");
            b.onreadystatechange = function () { b.onreadystatechange = null; b.parentNode.removeChild(b); b = null; a(); a = null };
            document.documentElement.appendChild(b)
        } : function (a) { k.setTimeout(a, 0) }
    }
    ; function G() { this.b = this.a = null }
    var I = new A(function () { return new H }, function (a) { a.reset() });
    G.prototype.add = function (a, b) { var c = I.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c };
    G.prototype.remove = function () { var a = null; this.a && (a = this.a, this.a = this.a.next, this.a || (this.b = null), a.next = null); return a };
    function H() { this.next = this.b = this.a = null }
    H.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null };
    H.prototype.reset = function () { this.next = this.b = this.a = null }; function ra(a) { J || sa(); K || (J(), K = !0); ta.add(a, void 0) }
    var J; function sa() {
        if (k.Promise && k.Promise.resolve) { var a = k.Promise.resolve(void 0); J = function () { a.then(ua) } } else J = function () {
            var a = ua, c;
            !(c = "function" != p(k.setImmediate)) && (c = k.Window && k.Window.prototype) && (c = -1 == B.indexOf("Edge") && k.Window.prototype.setImmediate == k.setImmediate); c ? (F || (F = qa()), F(a)) : k.setImmediate(a)
        }
    }
    var K = !1, ta = new G; function ua() { for (var a; a = ta.remove();) { try { a.a.call(a.b) } catch (c) { pa(c) } var b = I; b.f(a); 100 > b.b && (b.b++ , a.next = b.a, b.a = a) } K = !1 }
    ; function L() { this.c = this.c; this.f = this.f }
    L.prototype.c = !1; L.prototype.dispose = function () { this.c || (this.c = !0, this.w()) };
    L.prototype.w = function () { if (this.f) for (; this.f.length;)this.f.shift()() }; function va(a, b) { var c, d; var e = document; e = b || e; if (e.querySelectorAll && e.querySelector && a) return e.querySelectorAll(a ? "." + a : ""); if (a && e.getElementsByClassName) { var g = e.getElementsByClassName(a); return g } g = e.getElementsByTagName("*"); if (a) { var f = {}; for (c = d = 0; e = g[c]; c++) { var n = e.className, N; if (N = "function" == typeof n.split) N = 0 <= x(n.split(/\s+/), a); N && (f[d++] = e) } f.length = d; return f } return g }
    function wa(a, b) { for (var c = 0; a;) { if (b(a)) return a; a = a.parentNode; c++ } return null }
    ; var xa = k.JSON.stringify; function M(a) { L.call(this); this.l = 1; this.g = []; this.h = 0; this.a = []; this.b = {}; this.m = !!a }
    w(M, L); h = M.prototype; h.subscribe = function (a, b, c) { var d = this.b[a]; d || (d = this.b[a] = []); var e = this.l; this.a[e] = a; this.a[e + 1] = b; this.a[e + 2] = c; this.l = e + 3; d.push(e); return e };
    function ya(a, b, c) { var d = O; if (a = d.b[a]) { var e = d.a; (a = ea(a, function (a) { return e[a + 1] == b && e[a + 2] == c })) && d.C(a) } }
    h.C = function (a) { var b = this.a[a]; if (b) { var c = this.b[b]; if (0 != this.h) this.g.push(a), this.a[a + 1] = aa; else { if (c) { var d = x(c, a); 0 <= d && Array.prototype.splice.call(c, d, 1) } delete this.a[a]; delete this.a[a + 1]; delete this.a[a + 2] } } return !!b };
    h.G = function (a, b) { var c = this.b[a]; if (c) { for (var d = Array(arguments.length - 1), e = 1, g = arguments.length; e < g; e++)d[e - 1] = arguments[e]; if (this.m) for (e = 0; e < c.length; e++) { var f = c[e]; za(this.a[f + 1], this.a[f + 2], d) } else { this.h++; try { for (e = 0, g = c.length; e < g; e++)f = c[e], this.a[f + 1].apply(this.a[f + 2], d) } finally { if (this.h-- , 0 < this.g.length && 0 == this.h) for (; c = this.g.pop();)this.C(c) } } return 0 != e } return !1 };
    function za(a, b, c) { ra(function () { a.apply(b, c) }) }
    h.clear = function (a) { if (a) { var b = this.b[a]; b && (y(b, this.C, this), delete this.b[a]) } else this.a.length = 0, this.b = {} };
    h.w = function () { M.I.w.call(this); this.clear(); this.g.length = 0 }; var Aa = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/; function Ba(a) { var b = a.match(Aa); a = b[1]; var c = b[2], d = b[3]; b = b[4]; var e = ""; a && (e += a + ":"); d && (e += "//", c && (e += c + "@"), e += d, b && (e += ":" + b)); return e }
    function Ca(a, b, c) { if ("array" == p(b)) for (var d = 0; d < b.length; d++)Ca(a, String(b[d]), c); else null != b && c.push(a + ("" === b ? "" : "=" + encodeURIComponent(String(b)))) }
    function Da(a) { var b = [], c; for (c in a) Ca(c, a[c], b); return b.join("&") }
    var Ea = /#|$/; var P = window.yt && window.yt.config_ || window.ytcfg && window.ytcfg.data_ || {}; v("yt.config_", P); function Fa(a) { var b = arguments; if (1 < b.length) P[b[0]] = b[1]; else { b = b[0]; for (var c in b) P[c] = b[c] } }
    ; function Ga(a) { return a && window.yterr ? function () { try { return a.apply(this, arguments) } catch (b) { Ha(b) } } : a }
    function Ha(a, b) { var c = m("yt.logging.errors.log"); c ? c(a, b, void 0, void 0, void 0) : (c = [], c = "ERRORS" in P ? P.ERRORS : c, c.push([a, b, void 0, void 0, void 0]), Fa("ERRORS", c)) }
    ; var Ia = 0; v("ytDomDomGetNextId", m("ytDomDomGetNextId") || function () { return ++Ia }); var Ja = { stopImmediatePropagation: 1, stopPropagation: 1, preventMouseEvent: 1, preventManipulation: 1, preventDefault: 1, layerX: 1, layerY: 1, screenX: 1, screenY: 1, scale: 1, rotation: 1, webkitMovementX: 1, webkitMovementY: 1 };
    function Q(a) {
    this.type = ""; this.source = this.data = this.currentTarget = this.relatedTarget = this.target = null; this.charCode = this.keyCode = 0; this.metaKey = this.shiftKey = this.ctrlKey = this.altKey = !1; this.clientY = this.clientX = 0; this.changedTouches = this.touches = null; if (a = a || window.event) {
    this.a = a; for (var b in a) b in Ja || (this[b] = a[b]); (b = a.target || a.srcElement) && 3 == b.nodeType && (b = b.parentNode); this.target = b; if (b = a.relatedTarget) try { b = b.nodeName ? b : null } catch (c) { b = null } else "mouseover" == this.type ? b = a.fromElement :
        "mouseout" == this.type && (b = a.toElement); this.relatedTarget = b; this.clientX = void 0 != a.clientX ? a.clientX : a.pageX; this.clientY = void 0 != a.clientY ? a.clientY : a.pageY; this.keyCode = a.keyCode ? a.keyCode : a.which; this.charCode = a.charCode || ("keypress" == this.type ? this.keyCode : 0); this.altKey = a.altKey; this.ctrlKey = a.ctrlKey; this.shiftKey = a.shiftKey; this.metaKey = a.metaKey
    }
    }
    Q.prototype.preventDefault = function () { this.a && (this.a.returnValue = !1, this.a.preventDefault && this.a.preventDefault()) };
    Q.prototype.stopPropagation = function () { this.a && (this.a.cancelBubble = !0, this.a.stopPropagation && this.a.stopPropagation()) };
    Q.prototype.stopImmediatePropagation = function () { this.a && (this.a.cancelBubble = !0, this.a.stopImmediatePropagation && this.a.stopImmediatePropagation()) }; var E = m("ytEventsEventsListeners") || {}; v("ytEventsEventsListeners", E); var Ka = m("ytEventsEventsCounter") || { count: 0 }; v("ytEventsEventsCounter", Ka);
    function La(a, b, c, d) {
        d = void 0 === d ? {} : d; a.addEventListener && ("mouseenter" != b || "onmouseenter" in document ? "mouseleave" != b || "onmouseenter" in document ? "mousewheel" == b && "MozBoxSizing" in document.documentElement.style && (b = "MozMousePixelScroll") : b = "mouseout" : b = "mouseover"); return oa(function (e) {
            var g = "boolean" == typeof e[4] && e[4] == !!d, f; if (f = q(e[4]) && q(d)) a: { f = e[4]; for (var n in f) if (!(n in d) || f[n] !== d[n]) { f = !1; break a } for (n in d) if (!(n in f)) { f = !1; break a } f = !0 } return !!e.length && e[0] == a && e[1] == b && e[2] == c &&
                (g || f)
        })
    }
    function Ma(a) { a && ("string" == typeof a && (a = [a]), y(a, function (a) { if (a in E) { var b = E[a], d = b[0], e = b[1], g = b[3]; b = b[4]; d.removeEventListener ? Na() || "boolean" == typeof b ? d.removeEventListener(e, g, b) : d.removeEventListener(e, g, !!b.capture) : d.detachEvent && d.detachEvent("on" + e, g); delete E[a] } })) }
    var Na = function (a) { var b = !1, c; return function () { b || (c = a(), b = !0); return c } }(function () {
        var a = !1;
        try {
            var b = Object.defineProperty({}, "capture", { get: function () { a = !0 } });
            window.addEventListener("test", null, b)
        } catch (c) { } return a
    });
    function Oa(a, b, c) {
        var d = void 0 === d ? {} : d; if (a && (a.addEventListener || a.attachEvent)) {
            var e = La(a, b, c, d); if (!e) {
                e = ++Ka.count + ""; var g = !("mouseenter" != b && "mouseleave" != b || !a.addEventListener || "onmouseenter" in document); var f = g ? function (d) { d = new Q(d); if (!wa(d.relatedTarget, function (b) { return b == a })) return d.currentTarget = a, d.type = b, c.call(a, d) } : function (b) {
                    b = new Q(b);
                    b.currentTarget = a; return c.call(a, b)
                };
                f = Ga(f); a.addEventListener ? ("mouseenter" == b && g ? b = "mouseover" : "mouseleave" == b && g ? b = "mouseout" : "mousewheel" == b && "MozBoxSizing" in document.documentElement.style && (b = "MozMousePixelScroll"), Na() || "boolean" == typeof d ? a.addEventListener(b, f, d) : a.addEventListener(b, f, !!d.capture)) : a.attachEvent("on" + b, f); E[e] = [a, b, c, f, d]
            }
        }
    }
    ; function Pa(a) { "function" == p(a) && (a = Ga(a)); return window.setInterval(a, 250) }
    ; var Qa = {}; function Ra(a) { return Qa[a] || (Qa[a] = String(a).replace(/\-([a-z])/g, function (a, c) { return c.toUpperCase() })) }
    ; var R = {}, S = [], O = new M, Sa = {}; function Ta() { y(S, function (a) { a() }) }
    function Ua(a, b) { b || (b = document); var c = z(b.getElementsByTagName("yt:" + a)), d = "yt-" + a, e = b || document; d = z(e.querySelectorAll && e.querySelector ? e.querySelectorAll("." + d) : va(d, b)); return fa(c, d) }
    function T(a, b) { var c; "yt:" == a.tagName.toLowerCase().substr(0, 3) ? c = a.getAttribute(b) : c = a ? a.dataset ? a.dataset[Ra(b)] : a.getAttribute("data-" + b) : null; return c }
    function Va(a, b) { O.G.apply(O, arguments) }
    ; function Wa(a) { this.b = a || {}; this.f = {}; this.c = this.a = !1; a = document.getElementById("www-widgetapi-script"); if (this.a = !!("https:" == document.location.protocol || a && 0 == a.src.indexOf("https:"))) { a = [this.b, window.YTConfig || {}, this.f]; for (var b = 0; b < a.length; b++)a[b].host && (a[b].host = a[b].host.replace("http://", "https://")) } }
    var U = null; function V(a, b) { for (var c = [a.b, window.YTConfig || {}, a.f], d = 0; d < c.length; d++) { var e = c[d][b]; if (void 0 != e) return e } return null }
    function Xa(a, b, c) { U || (U = {}, Oa(window, "message", u(a.g, a))); U[c] = b }
    Wa.prototype.g = function (a) { if (a.origin == V(this, "host") || a.origin == V(this, "host").replace(/^http:/, "https:")) { try { var b = JSON.parse(a.data) } catch (c) { return } this.c = !0; this.a || 0 != a.origin.indexOf("https:") || (this.a = !0); if (a = U[b.id]) a.A = !0, a.A && (y(a.s, a.B, a), a.s.length = 0), a.H(b) } }; function W(a, b, c) {
    this.h = this.a = this.b = null; this.g = this[r] || (this[r] = ++t); this.c = 0; this.A = !1; this.s = []; this.f = null; this.l = c; this.m = {}; c = document; if (a = l(a) ? c.getElementById(a) : a) if (c = "iframe" == a.tagName.toLowerCase(), b.host || (b.host = c ? Ba(a.src) : "https://www.youtube.com"), this.b = new Wa(b), c || (b = Ya(this, a), this.h = a, (c = a.parentNode) && c.replaceChild(b, a), a = b), this.a = a, this.a.id || (a = b = this.a, a = a[r] || (a[r] = ++t), b.id = "widget" + a), R[this.a.id] = this, window.postMessage) {
    this.f = new M; Za(this); b = V(this.b, "events");
        for (var d in b) b.hasOwnProperty(d) && this.addEventListener(d, b[d]); for (var e in Sa) $a(this, e)
    }
    }
    h = W.prototype; h.L = function (a, b) { this.a.width = a; this.a.height = b; return this };
    h.K = function () { return this.a };
    h.H = function (a) { this.o(a.event, a) };
    h.addEventListener = function (a, b) {
        var c = b; "string" == typeof b && (c = function () { window[b].apply(window, arguments) });
        this.f.subscribe(a, c); ab(this, a); return this
    };
    function $a(a, b) { var c = b.split("."); if (2 == c.length) { var d = c[1]; a.l == c[0] && ab(a, d) } }
    h.J = function () { this.a.id && (R[this.a.id] = null); var a = this.f; a && "function" == typeof a.dispose && a.dispose(); if (this.h) { a = this.a; var b = a.parentNode; b && b.replaceChild(this.h, a) } else (a = this.a) && a.parentNode && a.parentNode.removeChild(a); U && (U[this.g] = null); this.b = null; a = this.a; for (var c in E) E[c][0] == a && Ma(c); this.h = this.a = null };
    h.u = function () { return {} };
    function X(a, b, c) { c = c || []; c = Array.prototype.slice.call(c); b = { event: "command", func: b, args: c }; a.A ? a.B(b) : a.s.push(b) }
    h.o = function (a, b) { if (!this.f.c) { var c = { target: this, data: b }; this.f.G(a, c); Va(this.l + "." + a, c) } };
    function Ya(a, b) {
        for (var c = document.createElement("iframe"), d = b.attributes, e = 0, g = d.length; e < g; e++) { var f = d[e].value; null != f && "" != f && "null" != f && c.setAttribute(d[e].name, f) } c.setAttribute("frameBorder", 0); c.setAttribute("allowfullscreen", 1); c.setAttribute("allow", "autoplay; encrypted-media"); c.setAttribute("title", "YouTube " + V(a.b, "title")); (d = V(a.b, "width")) && c.setAttribute("width", d); (d = V(a.b, "height")) && c.setAttribute("height", d); var n = a.u(); n.enablejsapi = window.postMessage ? 1 : 0; window.location.host &&
            (n.origin = window.location.protocol + "//" + window.location.host); n.widgetid = a.g; window.location.href && y(["debugjs", "debugcss"], function (a) { var b = window.location.href; var c = b.search(Ea); b: { var d = 0; for (var e = a.length; 0 <= (d = b.indexOf(a, d)) && d < c;) { var f = b.charCodeAt(d - 1); if (38 == f || 63 == f) if (f = b.charCodeAt(d + e), !f || 61 == f || 38 == f || 35 == f) break b; d += e + 1 } d = -1 } if (0 > d) b = null; else { e = b.indexOf("&", d); if (0 > e || e > c) e = c; d += a.length + 1; b = decodeURIComponent(b.substr(d, e - d).replace(/\+/g, " ")) } null === b || (n[a] = b) });
        c.src = V(a.b, "host") + a.v() + "?" + Da(n); return c
    }
    h.F = function () { this.a && this.a.contentWindow ? this.B({ event: "listening" }) : window.clearInterval(this.c) };
    function Za(a) { Xa(a.b, a, a.g); a.c = Pa(u(a.F, a)); Oa(a.a, "load", u(function () { window.clearInterval(this.c); this.c = Pa(u(this.F, this)) }, a)) }
    function ab(a, b) { a.m[b] || (a.m[b] = !0, X(a, "addEventListener", [b])) }
    h.B = function (a) { a.id = this.g; a.channel = "widget"; a = xa(a); var b = this.b; var c = Ba(this.a.src); b = 0 == c.indexOf("https:") ? [c] : b.a ? [c.replace("http:", "https:")] : b.c ? [c] : [c, c.replace("http:", "https:")]; if (!this.a.contentWindow) throw Error("The YouTube player is not attached to the DOM."); for (c = 0; c < b.length; c++)try { this.a.contentWindow.postMessage(a, b[c]) } catch (d) { if (d.name && "SyntaxError" == d.name) Ha(d, "WARNING"); else throw d; } }; function bb(a) { return (0 == a.search("cue") || 0 == a.search("load")) && "loadModule" != a }
    function cb(a) { return 0 == a.search("get") || 0 == a.search("is") }
    ; function Y(a, b) { if (!a) throw Error("YouTube player element ID required."); var c = { title: "video player", videoId: "", width: 640, height: 360 }; if (b) for (var d in b) c[d] = b[d]; W.call(this, a, c, "player"); this.i = {}; this.j = {} }
    w(Y, W); function db(a) { if ("iframe" != a.tagName.toLowerCase()) { var b = T(a, "videoid"); b && (b = { videoId: b, width: T(a, "width"), height: T(a, "height") }, new Y(a, b)) } }
    h = Y.prototype; h.v = function () { return "/embed/" + V(this.b, "videoId") };
    h.u = function () { var a = V(this.b, "playerVars"); if (a) { var b = {}, c; for (c in a) b[c] = a[c]; a = b } else a = {}; window != window.top && document.referrer && (a.widget_referrer = document.referrer.substring(0, 256)); if (c = V(this.b, "embedConfig")) { if (q(c)) try { c = xa(c) } catch (d) { console.error("Invalid embed config JSON", d) } a.embed_config = c } return a };
    h.H = function (a) { var b = a.event; a = a.info; switch (b) { case "apiInfoDelivery": if (q(a)) for (var c in a) this.i[c] = a[c]; break; case "infoDelivery": eb(this, a); break; case "initialDelivery": window.clearInterval(this.c); this.j = {}; this.i = {}; fb(this, a.apiInterface); eb(this, a); break; default: this.o(b, a) } };
    function eb(a, b) { if (q(b)) for (var c in b) a.j[c] = b[c] }
    function fb(a, b) {
        y(b, function (a) {
        this[a] || ("getCurrentTime" == a ? this[a] = function () { var a = this.j.currentTime; if (1 == this.j.playerState) { var b = (da() / 1E3 - this.j.currentTimeLastUpdated_) * this.j.playbackRate; 0 < b && (a += Math.min(b, 1)) } return a } : bb(a) ? this[a] = function () {
        this.j = {};
            this.i = {}; X(this, a, arguments); return this
        } : cb(a) ? this[a] = function () {
            var b = 0;
            0 == a.search("get") ? b = 3 : 0 == a.search("is") && (b = 2); return this.j[a.charAt(b).toLowerCase() + a.substr(b + 1)]
        } : this[a] = function () {
            X(this, a, arguments);
            return this
        })
        }, a)
    }
    h.O = function () {
        var a = parseInt(V(this.b, "width"), 10); var b = parseInt(V(this.b, "height"), 10); var c = V(this.b, "host") + this.v(); na.test(c) && (-1 != c.indexOf("&") && (c = c.replace(ha, "&amp;")), -1 != c.indexOf("<") && (c = c.replace(ia, "&lt;")), -1 != c.indexOf(">") && (c = c.replace(ja, "&gt;")), -1 != c.indexOf('"') && (c = c.replace(ka, "&quot;")), -1 != c.indexOf("'") && (c = c.replace(la, "&#39;")), -1 != c.indexOf("\x00") && (c = c.replace(ma, "&#0;"))); a = '<iframe width="' + a + '" height="' + b + '" src="' + c + '" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>';
        return a
    };
    h.N = function (a) { return this.i.namespaces ? a ? this.i[a].options || [] : this.i.namespaces || [] : [] };
    h.M = function (a, b) { if (this.i.namespaces && a && b) return this.i[a][b] }; function Z(a, b) { var c = { title: "Thumbnail", videoId: "", width: 120, height: 68 }; if (b) for (var d in b) c[d] = b[d]; W.call(this, a, c, "thumbnail") }
    w(Z, W); function gb(a) { if ("iframe" != a.tagName.toLowerCase()) { var b = T(a, "videoid"); if (b) { b = { videoId: b, events: {} }; b.width = T(a, "width"); b.height = T(a, "height"); b.thumbWidth = T(a, "thumb-width"); b.thumbHeight = T(a, "thumb-height"); b.thumbAlign = T(a, "thumb-align"); var c = T(a, "onclick"); c && (b.events.onClick = c); new Z(a, b) } } }
    Z.prototype.v = function () { return "/embed/" + V(this.b, "videoId") };
    Z.prototype.u = function () { return { player: 0, thumb_width: V(this.b, "thumbWidth"), thumb_height: V(this.b, "thumbHeight"), thumb_align: V(this.b, "thumbAlign") } };
    Z.prototype.o = function (a, b) { Z.I.o.call(this, a, b ? b.info : void 0) }; v("YT.PlayerState.UNSTARTED", -1); v("YT.PlayerState.ENDED", 0); v("YT.PlayerState.PLAYING", 1); v("YT.PlayerState.PAUSED", 2); v("YT.PlayerState.BUFFERING", 3); v("YT.PlayerState.CUED", 5); v("YT.get", function (a) { return R[a] });
    v("YT.scan", Ta); v("YT.subscribe", function (a, b, c) { O.subscribe(a, b, c); Sa[a] = !0; for (var d in R) $a(R[d], a) });
    v("YT.unsubscribe", function (a, b, c) { ya(a, b, c) });
    v("YT.Player", Y); v("YT.Thumbnail", Z); W.prototype.destroy = W.prototype.J; W.prototype.setSize = W.prototype.L; W.prototype.getIframe = W.prototype.K; W.prototype.addEventListener = W.prototype.addEventListener; Y.prototype.getVideoEmbedCode = Y.prototype.O; Y.prototype.getOptions = Y.prototype.N; Y.prototype.getOption = Y.prototype.M; S.push(function (a) { a = Ua("player", a); y(a, db) });
    S.push(function () { var a = Ua("thumbnail"); y(a, gb) });
    "undefined" != typeof YTConfig && YTConfig.parsetags && "onload" != YTConfig.parsetags || Ta(); var hb = m("onYTReady"); hb && hb(); var ib = m("onYouTubeIframeAPIReady"); ib && ib(); var jb = m("onYouTubePlayerAPIReady"); jb && jb();
}).call(this);;
; (function ($) {

    var Defaults = $.fn.select2.amd.require('select2/defaults');

    $.extend(Defaults.defaults, {
        dropdownPosition: 'auto'
    });

    var AttachBody = $.fn.select2.amd.require('select2/dropdown/attachBody');

    var _positionDropdown = AttachBody.prototype._positionDropdown;

    AttachBody.prototype._positionDropdown = function () {

        var $window = $(window);

        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

        var newDirection = null;

        var offset = this.$container.offset();

        offset.bottom = offset.top + this.$container.outerHeight(false);

        var container = {
            height: this.$container.outerHeight(false)
        };

        container.top = offset.top;
        container.bottom = offset.top + container.height;

        var dropdown = {
            height: this.$dropdown.outerHeight(false)
        };

        var viewport = {
            top: $window.scrollTop(),
            bottom: $window.scrollTop() + $window.height()
        };

        var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
        var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

        var css = {
            left: offset.left,
            top: container.bottom
        };

        // Determine what the parent element is to use for calciulating the offset
        var $offsetParent = this.$dropdownParent;

        // For statically positoned elements, we need to get the element
        // that is determining the offset
        if ($offsetParent.css('position') === 'static') {
            $offsetParent = $offsetParent.offsetParent();
        }

        var parentOffset = $offsetParent.offset();

        css.top -= parentOffset.top
        css.left -= parentOffset.left;

        var dropdownPositionOption = this.options.get('dropdownPosition');

        if (dropdownPositionOption === 'above' || dropdownPositionOption === 'below') {

            newDirection = dropdownPositionOption;

        } else {

            if (!isCurrentlyAbove && !isCurrentlyBelow) {
                newDirection = 'below';
            }

            if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
                newDirection = 'above';
            } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
                newDirection = 'below';
            }

        }

        if (newDirection === 'above' ||
            (isCurrentlyAbove && newDirection !== 'below')) {
            css.top = container.top - parentOffset.top - dropdown.height;
        }

        if (newDirection !== null) {
            this.$dropdown
                .removeClass('select2-dropdown--below select2-dropdown--above')
                .addClass('select2-dropdown--' + newDirection);
            this.$container
                .removeClass('select2-container--below select2-container--above')
                .addClass('select2-container--' + newDirection);
        }

        this.$dropdownContainer.css(css);

    };

})(window.jQuery);;
function callAfterDOMLoaded(methodCall) {
    if (methodCall) {
        if (document.readyState == 'loading') {
            // loading yet, wait for the event
            document.addEventListener('DOMContentLoaded', function () {
                queueTask(function () { methodCall(); });
            });
        }
        else {
            // DOM is ready!
            queueTask(function () { methodCall(); });
        }
    }
}
function toggle(element, visible) {
    if (element.style.display === "none" || visible) {
        element.style.display = "block";
    }
    else {
        element.style.display = "none";
    }
    //if (visible) {
    //    element.hidden = false;
    //} else {
    //    element.hidden = true;
    //}
}
function queueTask(task) {
    //task();
    window.setTimeout(task, 0);
}
function initializeControl(methodCall) {
    callAfterDOMLoaded(methodCall);
}
function initializePage(methodCall) {
    callAfterDOMLoaded(methodCall);
}
//# sourceMappingURL=Utilities.js.map;
/* TS wrapper for Actions.asmx */
var Actions = /** @class */ (function () {
    function Actions() {
    }
    Actions.emailAnOrganization = function (criteria, resultsHandler, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        //criteria = APIProxy.addCommonParams(criteria);
        var url = '/Services/Actions.asmx/EmailOffice';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.timeoutInMS = 40000; //Potential timeout issues due to stats gathering.
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.emailARealtor = function (criteria, resultsHandler, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        //criteria = APIProxy.addCommonParams(criteria);        
        var url = '/Services/Actions.asmx/EmailRealtor';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.timeoutInMS = 40000; //Potential timeout issues due to stats gathering.
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.emailAFriend = function (criteria, resultsHandler, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        //criteria = APIProxy.addCommonParams(criteria);
        var url = '/Services/Actions.asmx/SendListing';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.emailAFriendFavourites = function (criteria, resultsHandler, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        //criteria = APIProxy.addCommonParams(criteria);
        var url = '/Services/Actions.asmx/SendListings';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.emailAFriendPage = function (criteria, resultsHandler, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        //criteria = APIProxy.addCommonParams(criteria);
        var url = '/Services/Actions.asmx/SendPage';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.emailContactUs = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/SendContactUs';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    /* Gigya Actions */
    Actions.accountsLogin = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/AccountsLogin';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.socialLogin = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/SocialLogin';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    Actions.socializeLogin = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/SocializeLogin';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    Actions.socializeResponseLogin = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/SocializeResponseLogin';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    Actions.accountsRegister = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsRegister';
        var args = new AjaxCallArgs(resultsHandler);
        args.contentType = 'application/json; charset=UTF-8';
        args.errorHandler = errorHandler;
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.accountsFinalizeRegistration = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsFinalizeRegistration';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.accountsGetSchema = function (resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsGetSchema';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, null, args);
    };
    ;
    Actions.accountsLogout = function (resultsHandler, callbackArgs, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsLogout';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, null, args);
    };
    ;
    Actions.accountsSetInfo = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/AccountsSetInfo';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.accountsGetInfo = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsGetInfo';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.getAccountInfo = function (criteria, resultsHandler, callbackArgs, errorHandler) {
        var url = '/Services/Actions.asmx/GetAccountInfo';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    Actions.setAccountInfo = function (criteria, resultsHandler, callbackArgs, errorHandler) {
        var url = '/Services/Actions.asmx/SetAccountInfo';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    Actions.resendVerificationCode = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsResendVerificationCode';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.forgotPassword = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsForgotPassword';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.resetPassword = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsResetPassword';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.changePassword = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsChangePassword';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.changeEmail = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsChangeEmail';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.accountsDeleteAccount = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/AccountsDeleteAccount';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.deactivateAccount = function (resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/DeactivateAccount';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, null, args);
    };
    ;
    Actions.getAccountFromBOL = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetAccountFromBOL';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.getConsumerNotifications = function (criteria, resultsHandler, errorHandler, callbackArgs, skipCache) {
        if (skipCache === void 0) { skipCache = false; }
        var url = '/Services/Actions.asmx/GetNotifications';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        if (skipCache == false) {
            args.cacheFetchHandler = ConsumerProfile.Notifications.cacheFetch;
        }
        args.cacheSaveHandler = ConsumerProfile.Notifications.cacheSave;
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.PostBlogComment = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/PostBlogComment';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.GetBlogCommentData = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetBlogCommentData';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.GetRandomHomePageImgBg = function (resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetRandomHomePageImgBg';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, null, args);
    };
    Actions.SwitchPreviewMode = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/SwitchPreviewMode';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.GetInstagramData = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetInstagramData';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.GetVideoJsonData = function (criteria, resultsHandler, errorHandler, callbackArgs, ajaxVideoDataQueueName) {
        var url = '/Services/Actions.asmx/GetVideoJsonData';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        args.queueName = ajaxVideoDataQueueName;
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.GetLatestPublicOffers = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/GetLatestPublicOffers';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.GetCalendarICS = function (criteria, resultsHandler, errorHandler) {
        var url = '/Services/Actions.asmx/GetCalendarICS';
        var args = new AjaxCallArgs(resultsHandler);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.GetUnsubscribeEmailNotification = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetUnsubscribeEmailNotification';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        args.errorHandler = errorHandler;
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.AddUnsubscribeEmailNotification = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/AddUnsubscribeEmailNotification';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.contentType = 'application/json; charset=UTF-8';
        args.errorHandler = errorHandler;
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.GetCurrencyRate = function (resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetCurrencyRate';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, null, args);
    };
    Actions.GetShareaholicShortenedURL = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetShareaholicShortenedURL';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.contentType = 'application/json; charset=UTF-8';
        args.errorHandler = errorHandler;
        AjaxEngine.POST(url, JSON.stringify(criteria), args);
    };
    ;
    Actions.GetAutocompleteResults = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/GetAutocompleteResults';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        args.queueName = "getAutoComplete";
        args.cancelExistingRequestsInQueue = true;
        args.showLoadingBar = false;
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    ;
    Actions.DeleteEmailSearchNotifications = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/DeleteEmailSearchNotifications';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.DeleteEmailFavouriteNotifications = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/DeleteEmailFavouriteNotifications';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    Actions.UpdateSavedSearchViewedDate = function (criteria, resultsHandler, errorHandler, callbackArgs) {
        var url = '/Services/Actions.asmx/UpdateSavedSearchViewedDate';
        var args = new AjaxCallArgs(resultsHandler, callbackArgs);
        args.errorHandler = errorHandler;
        args.contentType = 'application/json; charset=UTF-8';
        AjaxEngine.POST(url, (criteria ? JSON.stringify(criteria) : null), args);
    };
    return Actions;
}());
//# sourceMappingURL=Actions.js.map;
var unloadingState = false;
var AjaxCallArgs = /** @class */ (function () {
    function AjaxCallArgs(handler, argsForCallback) {
        //TODO: break caching out into it's own class?
        /** Allow for skipping certain requests from hitting the cache */
        this.isRequestCacheable = null;
        /** Handler to allow for caching of data being fetched */
        this.cacheFetchHandler = null;
        /** Handler to allow for caching of data being fetched */
        this.cacheSaveHandler = null;
        this.callHandler = null;
        this.errorHandler = null;
        this.contentType = 'application/x-www-form-urlencoded; charset=UTF-8';
        this.queueName = '';
        this.cancelExistingRequestsInQueue = false;
        this.timeoutInMS = 20000;
        this.showLoadingBar = true;
        this.callHandler = handler;
        this.callBackArgs = argsForCallback;
    }
    return AjaxCallArgs;
}());
var AjaxEngine = /** @class */ (function () {
    function AjaxEngine() {
    }
    AjaxEngine.init = function () {
        $.ajaxSetup({
            beforeSend: function (jqXHR, obj) {
                jqXHR.timestamp = Date.now();
                if (obj.complete) { //Filters out analytics calls (eg. https://analytics-qa.crea.ca/LogEvents.svc/)
                    AjaxEngine.currentXHRs.push(jqXHR);
                }
                //if (obj.url.toLowerCase().indexOf("propertysearch_post") > -1) {
                //    $.xhrPropertySearches.push(jqXHR);
                //}
                obj.url = obj.url.replace(/%3E/g, "").replace(/%3C/g, ""); //Remove < > to avoid XSS issues, otherwise .net handled at server level
                jqXHR.url = obj.url;
                jqXHR.queueName = obj.queueName;
            }
        });
        this.initialized = true;
    };
    AjaxEngine.returnResults = function (handler, argsForCallback) {
        if (this.response && handler != null) {
            // return the result back to the caller        
            handler(this.response, argsForCallback);
        }
    };
    AjaxEngine.GET = function (url, args, ajaxArgs) {
        if (ajaxArgs.cacheFetchHandler != null) {
            if (ajaxArgs.isRequestCacheable == null || ajaxArgs.isRequestCacheable(url, args)) {
                var value = ajaxArgs.cacheFetchHandler(url, args);
                if (value != null) {
                    ajaxArgs.callHandler(value, ajaxArgs.callBackArgs);
                    return;
                }
            }
        }
        if (ajaxArgs.cacheSaveHandler != null) {
            if (ajaxArgs.isRequestCacheable == null || ajaxArgs.isRequestCacheable(url, args)) {
                var exitingHandler = ajaxArgs.callHandler;
                ajaxArgs.callHandler = function (returnVal) {
                    ajaxArgs.cacheSaveHandler(url, args, returnVal);
                    exitingHandler(returnVal, ajaxArgs.callBackArgs);
                };
            }
        }
        return AjaxEngine.makeAjaxCall(url, args, ajaxArgs.callHandler, 'GET', ajaxArgs.contentType, ajaxArgs.errorHandler, ajaxArgs.callBackArgs, ajaxArgs.queueName, ajaxArgs.cancelExistingRequestsInQueue, ajaxArgs.timeoutInMS, ajaxArgs.headers, ajaxArgs.xhrFields, ajaxArgs.showLoadingBar);
    };
    AjaxEngine.POST = function (url, args, ajaxArgs) {
        if (ajaxArgs.cacheFetchHandler != null) {
            if (ajaxArgs.isRequestCacheable == null || ajaxArgs.isRequestCacheable(url, args)) {
                var value = ajaxArgs.cacheFetchHandler(url, args);
                if (value != null) {
                    ajaxArgs.callHandler(value, ajaxArgs.callBackArgs);
                    return;
                }
            }
        }
        if (ajaxArgs.cacheSaveHandler != null) {
            if (ajaxArgs.isRequestCacheable == null || ajaxArgs.isRequestCacheable(url, args)) {
                var exitingHandler = ajaxArgs.callHandler;
                ajaxArgs.callHandler = function (returnVal) {
                    ajaxArgs.cacheSaveHandler(url, args, returnVal);
                    exitingHandler(returnVal, ajaxArgs.callBackArgs);
                };
            }
        }
        return AjaxEngine.makeAjaxCall(url, args, ajaxArgs.callHandler, 'POST', ajaxArgs.contentType, ajaxArgs.errorHandler, ajaxArgs.callBackArgs, ajaxArgs.queueName, ajaxArgs.cancelExistingRequestsInQueue, ajaxArgs.timeoutInMS, ajaxArgs.headers, ajaxArgs.xhrFields, ajaxArgs.showLoadingBar);
    };
    AjaxEngine.TransformResponse = function (response) {
        var returnValue;
        try {
            // create a json Object from the response. this is required for firefox.
            returnValue = JSON.parse(response.d || response);
        }
        catch (e) {
            // if it is not a json Object then send as a string
            // this is used for the email dialogs
            returnValue = response;
        }
        return returnValue;
    };
    AjaxEngine.makeAjaxCall = function (url, theQuery, handler, method, contentTypeVal, errorHandler, postcallArgs, queueName, cancelExistingRequestsInQueue, timeoutInMS, headers, xhrFields, showLoadingBar) {
        if (theQuery === void 0) { theQuery = ''; }
        if (method === void 0) { method = 'POST'; }
        if (errorHandler === void 0) { errorHandler = null; }
        if (postcallArgs === void 0) { postcallArgs = null; }
        if (queueName === void 0) { queueName = ""; }
        if (cancelExistingRequestsInQueue === void 0) { cancelExistingRequestsInQueue = false; }
        if (timeoutInMS === void 0) { timeoutInMS = 20000; }
        if (xhrFields === void 0) { xhrFields = { withCredentials: true }; }
        if (showLoadingBar === void 0) { showLoadingBar = true; }
        if (this.initialized == false)
            this.init();
        // need this for IE call
        jQuery.support.cors = true;
        var xhr = new XMLHttpRequest(); //Want to pass this in so we have something to return to allow the caller of the ajax request to abort if needed (see: https://stackoverflow.com/questions/446594/abort-ajax-requests-using-jquery)
        if (showLoadingBar) {
            Events.Fire(AjaxEngine.callBeginEvent, url);
        }
        var ajaxSettings = {
            xhr: function () { return xhr; },
            url: url,
            data: theQuery,
            type: method,
            processData: true,
            queueName: queueName,
            xhrFields: xhrFields,
            crossDomain: true,
            contentType: contentTypeVal,
            timeout: timeoutInMS,
            success: function (response, textStatus, request) {
                //AjaxEngine.response = AjaxEngine.TransformResponse(response);           
            },
            complete: function (jqXHR) {
                var index = AjaxEngine.getIndexOfRequest(jqXHR, AjaxEngine.currentXHRs);
                if (index > -1) {
                    AjaxEngine.currentXHRs.splice(index, 1);
                }
                else {
                    Logging.Debug("Unable to find AJAX request to remove from AjaxEngine.XHRs");
                }
                Events.Fire(AjaxEngine.callEndEvent, jqXHR);
                AjaxEngine.fireNextRequestInQueue(jqXHR.queueName);
            },
            error: function (request, textStatus, errorThrown) {
                Events.Fire(AjaxEngine.callErrorEvent, textStatus);
                if (unloadingState)
                    return;
                var info = errorThrown;
                if (textStatus != errorThrown)
                    info += ": " + textStatus;
                if (request.statusText != errorThrown)
                    info += " " + request.statusText;
                var ajaxStatusTextError;
                switch (textStatus) {
                    case AjaxTextStatusError.Abort:
                        ajaxStatusTextError = AjaxTextStatusError.Abort;
                        break;
                    case AjaxTextStatusError.Timeout:
                        ajaxStatusTextError = AjaxTextStatusError.Timeout;
                        break;
                    case AjaxTextStatusError.NotModified:
                        ajaxStatusTextError = AjaxTextStatusError.NotModified;
                        break;
                    case AjaxTextStatusError.ParseError:
                        ajaxStatusTextError = AjaxTextStatusError.ParseError;
                        break;
                    default:
                }
                if (errorHandler)
                    errorHandler(request, ajaxStatusTextError, info);
            }
        };
        if (headers)
            ajaxSettings.headers = headers;
        var MakeAJAXCall = function () {
            $.ajax(ajaxSettings).then(function (response, textStatus, request) {
                // after the ajax call has returned values, call the function to return it to the caller
                //AjaxEngine.returnResults(handler, postcallArgs);
                //Check for mime reponse text instead of expected JSON object response type
                var contentType = request.getResponseHeader("content-type") || "";
                if ((contentType.indexOf('json') < 0 && ajaxSettings.contentType.indexOf('json') > -1)) {
                    //Fire the error handler
                    if (errorHandler) {
                        errorHandler(request, AjaxTextStatusError.ParseError, "MIME type response detected...");
                    }
                    Logging.Error('AjaxEngine request failed: MIME type response detected...');
                }
                else {
                    handler(AjaxEngine.TransformResponse(response), postcallArgs);
                }
            }, function (response, status, error) {
                if (status != "abort") {
                    if (response.status != 404) {
                        Logging.Error('AjaxEngine request failed: {Status: ' + (response.status || "") + "} {Error: " + (error || "") + "} {ResponseText: " + (response.responseText || "") + "} {StatusText: " + (response.statusText || "") + "}");
                    }
                    else {
                        Logging.Error('AjaxEngine request failed: {Status: ' + (response.status || "") + "} {URL: " + (response.url || "") + "}");
                    }
                }
            });
        };
        var ExistingRequestInQueue = null;
        if ((queueName || "") != "") {
            ExistingRequestInQueue = AjaxEngine.getPendingRequestFromQueue(queueName, AjaxEngine.currentXHRs);
            if (ExistingRequestInQueue != null) {
                if (cancelExistingRequestsInQueue) {
                    AjaxEngine.abortAndClearPendingRequestsFromQueue(queueName, AjaxEngine.currentXHRs);
                    MakeAJAXCall();
                }
                else {
                    Logging.Debug("Request added to '" + queueName + "' queue", LogType.AJAXEngine);
                    AjaxEngine.queuedXHRs.push({ queueName: queueName, call: MakeAJAXCall });
                }
            }
            else {
                MakeAJAXCall();
            }
        }
        else {
            MakeAJAXCall();
        }
        return xhr;
    };
    AjaxEngine.getIndexOfRequest = function (request, requests) {
        for (var i = 0; i < requests.length; i++) {
            if (requests[i].timestamp == request.timestamp) {
                return i;
            }
        }
        return -1;
    };
    /**
     *
     * @param queueName
     * @param requests
     */
    AjaxEngine.getPendingRequestFromQueue = function (queueName, requests) {
        for (var i = 0; i < requests.length; i++) {
            if (requests[i].queueName == queueName) {
                return requests[i];
            }
        }
        return null;
    };
    /**
    *
    * @param queueName
    * @param requests
    */
    AjaxEngine.abortAndClearPendingRequestsFromQueue = function (queueName, requests) {
        var indexesToRemove = [];
        for (var i = 0; i < requests.length; i++) {
            if (requests[i].queueName == queueName) {
                Logging.Debug("Aborting request from queue: '" + queueName, LogType.AJAXEngine);
                requests[i].abort();
                indexesToRemove.push(i);
            }
        }
        for (var i = 0; i < indexesToRemove.length; i++) {
            requests.splice(i, 1);
        }
        return null;
    };
    /**
     * Will lookup the next ajax request in the queue and fire it off.
     * @param queueName Name of the queue to request is in
     */
    AjaxEngine.fireNextRequestInQueue = function (queueName) {
        var foundIndex = -1;
        var callToMake = null;
        for (var i = 0; i < AjaxEngine.queuedXHRs.length; i++) {
            if (AjaxEngine.queuedXHRs[i].queueName == queueName) {
                foundIndex = i;
                callToMake = AjaxEngine.queuedXHRs[i].call;
                break;
            }
        }
        if (foundIndex != -1) {
            Logging.Debug("Firing next request in queue '" + queueName + "'", LogType.AJAXEngine);
            AjaxEngine.queuedXHRs.splice(foundIndex, 1);
            callToMake();
        }
    };
    AjaxEngine.callBeginEvent = 'AJAXCallBegin';
    AjaxEngine.callEndEvent = 'AJAXCallEnd';
    AjaxEngine.callErrorEvent = 'AJAXCallError';
    AjaxEngine.currentXHRs = []; //Active pending requests
    AjaxEngine.queuedXHRs = [];
    AjaxEngine.initialized = false;
    return AjaxEngine;
}());
//# sourceMappingURL=AjaxEngine.js.map;
/**
 * Wrapper class for the analyics web service calls to expose them to TypeScript compiler.
 */
var Analytics = /** @class */ (function () {
    function Analytics() {
    }
    Analytics.log = function (id, value, hasOpenHouse) {
        if (ApplicationConfig.AnalyticsEnabled) {
            if (typeof value === "string") {
                logAnalytics(id, value, hasOpenHouse);
            }
            else {
                logAnalytics(id, AnalyticsValues[value], hasOpenHouse);
            }
        }
    };
    return Analytics;
}());
var AnalyticsValues;
(function (AnalyticsValues) {
    AnalyticsValues[AnalyticsValues["view"] = 0] = "view";
    AnalyticsValues[AnalyticsValues["click"] = 1] = "click";
    AnalyticsValues[AnalyticsValues["compare"] = 2] = "compare";
    AnalyticsValues[AnalyticsValues["driving"] = 3] = "driving";
    AnalyticsValues[AnalyticsValues["email_friend"] = 4] = "email_friend";
    AnalyticsValues[AnalyticsValues["email_realtor"] = 5] = "email_realtor";
    AnalyticsValues[AnalyticsValues["email_office"] = 6] = "email_office";
    AnalyticsValues[AnalyticsValues["favorite"] = 7] = "favorite";
    AnalyticsValues[AnalyticsValues["openhouse_calendar"] = 8] = "openhouse_calendar";
    AnalyticsValues[AnalyticsValues["phone_agent"] = 9] = "phone_agent";
    AnalyticsValues[AnalyticsValues["photo"] = 10] = "photo";
    AnalyticsValues[AnalyticsValues["share_facebook"] = 11] = "share_facebook";
    AnalyticsValues[AnalyticsValues["share_googleplus"] = 12] = "share_googleplus";
    AnalyticsValues[AnalyticsValues["share_linkedin"] = 13] = "share_linkedin";
    AnalyticsValues[AnalyticsValues["share_pinterest"] = 14] = "share_pinterest";
    AnalyticsValues[AnalyticsValues["share_twitter"] = 15] = "share_twitter";
    AnalyticsValues[AnalyticsValues["tour"] = 16] = "tour";
    AnalyticsValues[AnalyticsValues["website_agent"] = 17] = "website_agent";
    AnalyticsValues[AnalyticsValues["website_office"] = 18] = "website_office";
    AnalyticsValues[AnalyticsValues["livestream_join"] = 19] = "livestream_join";
    AnalyticsValues[AnalyticsValues["livestream_calendar"] = 20] = "livestream_calendar";
})(AnalyticsValues || (AnalyticsValues = {}));
//# sourceMappingURL=Analytics.js.map;
//namespace APISearchCriteria
//{
//    export class SubAreaSearchCriteria
//    {
//        Area?: string = null;
//        Latitude?: number = null;
//        Longitude?: number = null;
//    }
//}
//Typescript representation of PublicContracts classes used by the API.
//Should be 1:1 binding, no methods/ functions / data manipulation.
//If these keep getting out of date look into moving in PublicContracts project and using a nuget package to auto-generate these classes/interfaces.
var PublicContracts;
(function (PublicContracts) {
    var ErrorCodeId;
    (function (ErrorCodeId) {
        ErrorCodeId[ErrorCodeId["OK"] = 200] = "OK";
        ErrorCodeId[ErrorCodeId["NotModified"] = 304] = "NotModified";
        ErrorCodeId[ErrorCodeId["BadRequest"] = 400] = "BadRequest";
        ErrorCodeId[ErrorCodeId["Unauthorized"] = 401] = "Unauthorized";
        ErrorCodeId[ErrorCodeId["Forbidden"] = 403] = "Forbidden";
        ErrorCodeId[ErrorCodeId["NotFound"] = 404] = "NotFound";
        ErrorCodeId[ErrorCodeId["NotAcceptable"] = 406] = "NotAcceptable";
        ErrorCodeId[ErrorCodeId["InternalServerError"] = 500] = "InternalServerError";
        ErrorCodeId[ErrorCodeId["BadGateway"] = 502] = "BadGateway";
        ErrorCodeId[ErrorCodeId["ServiceUnavailable"] = 503] = "ServiceUnavailable";
        ErrorCodeId[ErrorCodeId["MailUndeliverable"] = 504] = "MailUndeliverable";
        ErrorCodeId[ErrorCodeId["BlackListed"] = 505] = "BlackListed";
    })(ErrorCodeId = PublicContracts.ErrorCodeId || (PublicContracts.ErrorCodeId = {}));
    //Maps to PublicContracts.ErrorCode
    var ErrorCode = /** @class */ (function () {
        function ErrorCode(obj) {
            if (obj != null) {
                this.Id = obj.Id;
                this.Description = obj.Description;
                this.LogId = obj.LogId;
                this.Status = obj.Status;
                this.Exception = obj.Exception;
            }
        }
        return ErrorCode;
    }());
    PublicContracts.ErrorCode = ErrorCode;
    //Maps to PublicContracts.Paging
    var Paging = /** @class */ (function () {
        function Paging(obj) {
            if (obj != null) {
                this.RecordsPerPage = obj.RecordsPerPage;
                this.CurrentPage = obj.CurrentPage;
                this.TotalRecords = obj.TotalRecords;
                this.MaxRecords = obj.MaxRecords;
                this.TotalPages = obj.TotalPages;
                this.RecordsShowing = obj.RecordsShowing;
                this.Pins = obj.Pins;
            }
        }
        return Paging;
    }());
    PublicContracts.Paging = Paging;
    //Maps to PublicContracts.SubArea
    var SubArea = /** @class */ (function () {
        function SubArea(obj) {
            this.Location = "";
            this.InternalResult = "";
            this.GEOId = "";
            this.Polygons = null;
            this.Viewport = null;
            this.Location = obj.Location;
            this.ZoomLevel = obj.ZoomLevel == "" ? null : Number(obj.ZoomLevel);
            this.Longitude = obj.Longitude == "" ? null : Number(obj.Longitude);
            this.Latitude = obj.Latitude == "" ? null : Number(obj.Latitude);
            this.Height = obj.Height == "" ? null : Number(obj.Height);
            this.Width = obj.Width == "" ? null : Number(obj.Width);
            this.InternalResult = obj.InternalResult;
            this.GEOId = obj.GEOId || "";
            this.Polygons = obj.Polygons;
            if (obj.Viewport) {
                this.Viewport = new Viewport(obj.Viewport);
            }
        }
        return SubArea;
    }());
    PublicContracts.SubArea = SubArea;
    var Viewport = /** @class */ (function () {
        function Viewport(obj) {
            this.NorthEast = new Coordinate(obj.NorthEast);
            this.SouthWest = new Coordinate(obj.SouthWest);
        }
        Viewport.prototype.toGoogleBounds = function () {
            return new google.maps.LatLngBounds(this.SouthWest.toGoogleCoordinate(), this.NorthEast.toGoogleCoordinate());
        };
        return Viewport;
    }());
    PublicContracts.Viewport = Viewport;
    var Coordinate = /** @class */ (function () {
        function Coordinate(obj) {
            this.Latitude = obj.Latitude;
            this.Longitude = obj.Longitude;
        }
        Coordinate.prototype.toGoogleCoordinate = function () {
            return new google.maps.LatLng(Number(this.Latitude), Number(this.Longitude));
        };
        return Coordinate;
    }());
    PublicContracts.Coordinate = Coordinate;
    //Maps to PublicContracts.Pin
    var Pin = /** @class */ (function () {
        function Pin(obj) {
            this.key = obj.key;
            this.propertyId = obj.propertyId;
            this.count = obj.count;
            this.longitude = obj.longitude;
            this.latitude = obj.latitude;
            this.favouriteCount = obj.favouriteCount;
        }
        return Pin;
    }());
    PublicContracts.Pin = Pin;
    //Maps to PublicContracts.Website
    var Website = /** @class */ (function () {
        function Website(obj) {
            this.Website = obj.Website;
            this.WebsiteTypeId = obj.WebsiteTypeId;
        }
        return Website;
    }());
    PublicContracts.Website = Website;
    //Maps to PublicContracts.Phone
    var Phone = /** @class */ (function () {
        function Phone(obj) {
            if (obj == null) {
                return;
            }
            this.PhoneType = obj.PhoneType;
            this.CountryCode = obj.CountryCode;
            this.PhoneNumber = obj.PhoneNumber;
            this.AreaCode = obj.AreaCode;
            this.Extension = obj.Extension;
            this.PhoneTypeId = obj.PhoneTypeId;
        }
        return Phone;
    }());
    PublicContracts.Phone = Phone;
    //Maps to PublicContracts.Email
    var Email = /** @class */ (function () {
        function Email(obj) {
            if (obj == null) {
                return;
            }
            this.ContactTypeId = obj.ContactTypeId;
            this.ContactId = obj.ContactId;
        }
        return Email;
    }());
    PublicContracts.Email = Email;
    //Maps to PublicContracts.AlternateURL
    var UnsubscribeNotificationEmail = /** @class */ (function () {
        function UnsubscribeNotificationEmail(obj) {
            this.CunbList = [];
            if (obj == null) {
                return;
            }
            for (var i in obj.CunbList) {
                this.CunbList.push(new UnsubscribeNotificationEmailBasic(obj));
            }
            this.ErrorCode = obj.ErrorCode;
        }
        return UnsubscribeNotificationEmail;
    }());
    PublicContracts.UnsubscribeNotificationEmail = UnsubscribeNotificationEmail;
    var UnsubscribeNotificationEmailBasic = /** @class */ (function () {
        function UnsubscribeNotificationEmailBasic(obj) {
            if (obj == null) {
                return;
            }
            this.NotificationTypeID = obj.NotificationTypeID;
            this.AppID = obj.AppID;
            this.EmailAddress = obj.EmailAddress;
            this.PhoneNumber = obj.PhoneNumber;
            this.Culture = obj.Culture;
            this.TimeStamp = obj.TimeStamp;
        }
        return UnsubscribeNotificationEmailBasic;
    }());
    PublicContracts.UnsubscribeNotificationEmailBasic = UnsubscribeNotificationEmailBasic;
    //Maps to PublicContracts.AlternateURL
    var AlternateURL = /** @class */ (function () {
        function AlternateURL(obj) {
            if (obj == null) {
                return;
            }
            this.BrochureLink = obj.BrochureLink;
            this.DetailsLink = obj.DetailsLink;
            this.MapLink = obj.MapLink;
            this.PhotoLink = obj.PhotoLink;
            this.SoundLink = obj.SoundLink;
            this.VideoLink = obj.VideoLink;
        }
        return AlternateURL;
    }());
    PublicContracts.AlternateURL = AlternateURL;
    //Maps to PublicContracts.BusinessBasicDetails
    var BusinessBasicDetails = /** @class */ (function () {
        function BusinessBasicDetails(obj) {
            if (obj == null) {
                return;
            }
            this.BusinessType = obj.BusinessType;
            this.BusinessSubType = obj.BusinessSubType;
        }
        return BusinessBasicDetails;
    }());
    PublicContracts.BusinessBasicDetails = BusinessBasicDetails;
    //Maps to PublicContracts.Address
    var Address = /** @class */ (function () {
        function Address(obj) {
            if (obj == null) {
                return;
            }
            this.AddressText = obj.AddressText;
            this.Longitude = obj.Longitude;
            this.Latitude = obj.Latitude;
            this.CommunityName = obj.CommunityName;
            this.Neighbourhood = obj.Neighbourhood;
            this.Subdivision = obj.Subdivision;
        }
        return Address;
    }());
    PublicContracts.Address = Address;
    //Maps to PublicContracts.Event
    var Event = /** @class */ (function () {
        function Event(obj) {
            if (obj == null) {
                return;
            }
            this.StartTime = obj.StartTime;
            this.StartDateTime = obj.StartDateTime;
            this.EndDateTime = obj.EndDateTime;
            this.FormattedDateTime = obj.FormattedDateTime;
            this.Comments = obj.Comments;
            this.TypeID = obj.EventTypeID || "1";
        }
        return Event;
    }());
    PublicContracts.Event = Event;
    //Maps to PublicContracts.Parking
    var Parking = /** @class */ (function () {
        function Parking(obj) {
            if (obj == null) {
                return;
            }
            this.Name = obj.Name;
            this.Spaces = obj.Spaces;
            this.ParkingType = obj.ParkingType;
        }
        return Parking;
    }());
    PublicContracts.Parking = Parking;
    //Maps to PublicContracts.Shared.Price
    var Price = /** @class */ (function () {
        function Price(obj) {
            if (obj == null) {
                return;
            }
            this.CurrencyName = obj.CurrencyName;
            this.Value = obj.Value;
        }
        return Price;
    }());
    PublicContracts.Price = Price;
    //Maps to PublicContracts.OrganizationBasicDetails
    var OrganizationBasicDetails = /** @class */ (function () {
        function OrganizationBasicDetails(obj) {
            this.Phones = [];
            this.Emails = [];
            this.Websites = [];
            if (obj == null) {
                return;
            }
            this.OrganizationID = obj.OrganizationID;
            this.Name = obj.Name;
            this.Logo = obj.Logo;
            this.Address = new Address(obj.Address);
            for (var i in obj.Phones) {
                this.Phones.push(new Phone(obj.Phones[i]));
            }
            for (var i in obj.Emails) {
                this.Emails.push(new Email(obj.Emails[i]));
            }
            for (var i in obj.Websites) {
                this.Websites.push(new Website(obj.Websites[i]));
            }
            this.OrganizationType = obj.OrganizationType;
            this.Designation = obj.Designation;
            this.HasEmail = obj.HasEmail;
            this.HasListings = obj.HasListings;
            this.HasRealtors = obj.HasRealtors;
            this.PermitFreetextEmail = obj.PermitFreetextEmail;
            this.PermitShowListingLink = obj.PermitShowListingLink;
            this.RelativeDetailsURL = obj.RelativeDetailsURL;
        }
        return OrganizationBasicDetails;
    }());
    PublicContracts.OrganizationBasicDetails = OrganizationBasicDetails;
    //Maps to PublicContracts.PropertyPhoto
    var PropertyPhoto = /** @class */ (function () {
        function PropertyPhoto(obj) {
            if (obj == null) {
                return;
            }
            this.SequenceId = obj.SequenceId;
            this.HighResPath = obj.HighResPath;
            this.MedResPath = obj.MedResPath;
            this.LowResPath = obj.LowResPath;
            this.Description = obj.Description;
            this.LastUpdated = obj.LastUpdated;
        }
        return PropertyPhoto;
    }());
    PublicContracts.PropertyPhoto = PropertyPhoto;
    //Maps to PublicContracts.PropertyBasicDetails
    var PropertyBasicDetails = /** @class */ (function () {
        function PropertyBasicDetails(obj) {
            this.Photo = [];
            this.Parking = [];
            if (obj == null) {
                return;
            }
            this.Price = obj.Price;
            this.LeaseRent = obj.LeaseRent;
            this.ConvertedPrice = obj.ConvertedPrice;
            this.Type = obj.Type;
            this.Address = new Address(obj.Address);
            for (var i in obj.Photo) {
                this.Photo.push(new PropertyPhoto(obj.Photo[i]));
            }
            for (var i in obj.Parking) {
                this.Parking.push(new Parking(obj.Parking[i]));
            }
            this.ParkingSpaceTotal = obj.ParkingSpaceTotal;
            this.TypeId = obj.TypeId;
            this.Distance = obj.Distance;
            this.FarmType = obj.FarmType;
            this.OwnershipType = obj.OwnershipType;
            this.ZoningType = obj.ZoningType;
            this.AmmenitiesNearBy = obj.AmmenitiesNearBy;
            this.OwnershipTypeGroupIds = obj.OwnershipTypeGroupIds;
            for (var i in obj.Tags) {
                this.Tags.push(new ListingTag(obj.Tags[i]));
            }
        }
        return PropertyBasicDetails;
    }());
    PublicContracts.PropertyBasicDetails = PropertyBasicDetails;
    var ListingTag = /** @class */ (function () {
        function ListingTag(obj) {
            if (obj == null) {
                return;
            }
            this.Label = obj.Label;
            this.HTMLColorCode = obj.HTMLColorCode;
            this.ListingTagTypeID = obj.ListingTagTypeID;
        }
        return ListingTag;
    }());
    PublicContracts.ListingTag = ListingTag;
    //Maps to PublicContracts.BuildingBasicDetails
    var BuildingBasicDetails = /** @class */ (function () {
        function BuildingBasicDetails(obj) {
            if (obj == null) {
                return;
            }
            this.BathroomTotal = obj.BathroomTotal;
            this.Bedrooms = obj.Bedrooms;
            this.SizeExterior = obj.SizeExterior;
            this.SizeInterior = obj.SizeInterior;
            this.StoriesTotal = obj.StoriesTotal;
            this.Type = obj.Type;
            this.UnitTotal = obj.UnitTotal;
            this.Ammenities = obj.Ammenities;
        }
        return BuildingBasicDetails;
    }());
    PublicContracts.BuildingBasicDetails = BuildingBasicDetails;
    //Maps to PublicContracts.IndividualBasicDetails
    var IndividualBasicDetails = /** @class */ (function () {
        function IndividualBasicDetails(obj) {
            this.Phones = [];
            this.Websites = [];
            this.Emails = [];
            if (obj == null) {
                return;
            }
            this.IndividualID = obj.IndividualID;
            this.Name = obj.Name;
            this.Organization = new OrganizationBasicDetails(obj.Organization);
            for (var i in obj.Phones) {
                this.Phones.push(new Phone(obj.Phones[i]));
            }
            for (var i in obj.Websites) {
                this.Websites.push(new Website(obj.Websites[i]));
            }
            for (var i in obj.Emails) {
                this.Emails.push(new Email(obj.Emails[i]));
            }
            this.Photo = obj.Photo;
            this.Position = obj.Position;
            this.DesignationCodes = obj.DesignationCodes;
            this.DesignationText = obj.DesignationText;
            this.EducationCredentials = obj.EducationCredentials;
            this.HasOpenHouses = obj.HasOpenHouses;
            this.HasOrganizationListings = obj.HasOrganizationListings;
            this.PermitFreetextEmail = obj.PermitFreetextEmail;
            this.FirstName = obj.FirstName;
            this.LastName = obj.LastName;
            this.CccMember = obj.CccMember;
            this.CorporationName = obj.CorporationName;
            this.CorporationDisplayTypeId = obj.CorporationDisplayTypeId;
            this.CorporationType = obj.CorporationType;
            this.HasListings = obj.HasListings;
            this.PermitShowListingLink = obj.PermitShowListingLink;
            this.RelativeDetailsURL = obj.RelativeDetailsURL;
        }
        return IndividualBasicDetails;
    }());
    PublicContracts.IndividualBasicDetails = IndividualBasicDetails;
    //Maps to PublicContracts.IndividualBasicDetails
    var LandBasicDetails = /** @class */ (function () {
        function LandBasicDetails(obj) {
            if (obj == null) {
                return;
            }
            this.SizeTotal = obj.SizeTotal;
            this.SizeFrontage = obj.SizeFrontage;
            this.CurrentUse = obj.CurrentUse;
            this.AccessType = obj.AccessType;
            this.LandscapeFeatures = obj.LandscapeFeatures;
        }
        return LandBasicDetails;
    }());
    PublicContracts.LandBasicDetails = LandBasicDetails;
    //Maps to PublicContracts.ListingBasicDetails
    var ListingBasicDetails = /** @class */ (function () {
        function ListingBasicDetails(obj) {
            this.Individual = [];
            this.OpenHouse = [];
            this.OpenHouses = [];
            this.LiveStreams = [];
            this.Tags = [];
            if (obj == null) {
                return;
            }
            this.Id = obj.Id;
            this.MlsNumber = obj.MlsNumber;
            this.PublicRemarks = obj.PublicRemarks;
            this.Building = new BuildingBasicDetails(obj.Building);
            for (var i in obj.Individual) {
                this.Individual.push(new IndividualBasicDetails(obj.Individual[i]));
            }
            this.Property = new PropertyBasicDetails(obj.Property);
            for (var i in obj.OpenHouse) {
                this.OpenHouse.push(new Event(obj.OpenHouse[i]));
                if (obj.OpenHouse[i].EventTypeID == "8") {
                    this.LiveStreams.push(new Event(obj.OpenHouse[i]));
                }
                else if (obj.OpenHouse[i].EventTypeID == "1") {
                    this.OpenHouses.push(new Event(obj.OpenHouse[i]));
                }
            }
            this.Business = new BusinessBasicDetails(obj.Business);
            this.Land = new LandBasicDetails(obj.Land);
            this.AlternateURL = new AlternateURL(obj.AlternateURL);
            this.PostalCode = obj.PostalCode;
            this.RelativeDetailsURL = obj.RelativeDetailsURL;
            this.StatusId = obj.StatusId;
            this.OpenHouseInsertDateUTC = obj.OpenHouseInsertDateUTC;
            this.HasOpenHouseUpdate = obj.HasOpenHouseUpdate && this.OpenHouses.length > 0;
            this.HasLiveStreamUpdate = obj.HasOpenHouseUpdate && this.LiveStreams.length > 0;
            this.PriceChangeDateUTC = obj.PriceChangeDateUTC;
            this.HasPriceUpdate = obj.HasPriceUpdate;
            this.PhotoChangeDateUTC = obj.PhotoChangeDateUTC;
            this.HasNewImageUpdate = obj.HasNewImageUpdate;
            this.ClosePrice = obj.ClosePrice;
            this.HistoricalStatusId = obj.HistoricalStatusId;
            this.HistoricalStatusDate = obj.HistoricalStatusDate;
            this.Distance = obj.Distance;
            this.HasActiveLiveStream = obj.HasActiveLiveStream;
            this.TimeOnRealtor = obj.TimeOnRealtor;
            this.ConditionallySold = obj.ConditionallySold;
            for (var i in obj.Tags) {
                this.Tags.push(new ListingTag(obj.Tags[i]));
            }
        }
        return ListingBasicDetails;
    }());
    PublicContracts.ListingBasicDetails = ListingBasicDetails;
    var ConsumerNotifications = /** @class */ (function () {
        function ConsumerNotifications(obj) {
            if (obj == null) {
                return;
            }
            this.Type = obj.Type;
            this.ApplicationMode = obj.ApplicationMode;
            this.Text = obj.Text;
            this.ListingIds = obj.ListingIds;
            this.ActionData = obj.ActionData;
            this.SearchDate = obj.SearchDate;
        }
        return ConsumerNotifications;
    }());
    PublicContracts.ConsumerNotifications = ConsumerNotifications;
    var ConsumerNotificationSetting = /** @class */ (function () {
        function ConsumerNotificationSetting(obj) {
            this.id = ""; /*/Guid set by server*/
            this.method = "";
            this.frequency = "";
            this.lastActionedTimestampUTC = "";
            this.createdTimestampUTC = "";
            if (obj == null) {
                return;
            }
            this.id = obj.id;
            this.method = obj.method;
            this.frequency = obj.frequency;
            this.lastActionedTimestampUTC = obj.lastActionedTimestampUTC;
            this.createdTimestampUTC = obj.createdTimestampUTC;
        }
        return ConsumerNotificationSetting;
    }());
    PublicContracts.ConsumerNotificationSetting = ConsumerNotificationSetting;
    var ResultsMapBox = /** @class */ (function () {
        function ResultsMapBox(obj) {
            if (obj == null) {
                return;
            }
            this.location = obj.location;
        }
        return ResultsMapBox;
    }());
    PublicContracts.ResultsMapBox = ResultsMapBox;
    var AutocompleteMapBox = /** @class */ (function () {
        function AutocompleteMapBox(obj) {
            if (obj == null) {
                return;
            }
            this.type = obj.type;
            this.query = obj.query;
            this.features = obj.features;
        }
        return AutocompleteMapBox;
    }());
    PublicContracts.AutocompleteMapBox = AutocompleteMapBox;
    var MapBoxFeature = /** @class */ (function () {
        function MapBoxFeature(obj) {
            if (obj == null) {
                return;
            }
            this.id = obj.id;
            this.type = obj.type;
            this.place_type = obj.place_type;
            this.relevance = obj.relevance;
            this.properties = obj.properties;
            this.text = obj.text;
            this.place_name = obj.place_name;
            this.bbox = obj.bbox;
            this.center = obj.center;
            this.geometry = obj.geometry;
            this.context = obj.context;
            this.matching_text = obj.matching_text;
            this.matching_place_name = obj.matching_place_name;
        }
        return MapBoxFeature;
    }());
    PublicContracts.MapBoxFeature = MapBoxFeature;
    var MapBoxProperties = /** @class */ (function () {
        function MapBoxProperties(obj) {
            if (obj == null) {
                return;
            }
            this.wikidata = obj.wikidata;
        }
        return MapBoxProperties;
    }());
    PublicContracts.MapBoxProperties = MapBoxProperties;
    var MapBoxGeometry = /** @class */ (function () {
        function MapBoxGeometry(obj) {
            if (obj == null) {
                return;
            }
            this.type = obj.type;
            this.coordinates = obj.coordinates;
        }
        return MapBoxGeometry;
    }());
    PublicContracts.MapBoxGeometry = MapBoxGeometry;
    var MapBoxContext = /** @class */ (function () {
        function MapBoxContext(obj) {
            if (obj == null) {
                return;
            }
            this.id = obj.id;
            this.wikidata = obj.wikidata;
            this.short_code = obj.short_code;
            this.text = obj.text;
        }
        return MapBoxContext;
    }());
    PublicContracts.MapBoxContext = MapBoxContext;
    var AutocompleteResults = /** @class */ (function () {
        function AutocompleteResults(obj) {
            if (obj == null) {
                return;
            }
            this.ListingId = obj.ListingId;
            this.ReferenceNumber = obj.ReferenceNumber;
            this.Address_EN = obj.Address_EN;
            this.Address_FR = obj.Address_FR;
            this.City = obj.City;
            this.PostalCode = obj.PostalCode;
            this.Province = obj.Province;
            this.RelativeURLEn = obj.RelativeURLEn;
            this.RelativeURLFr = obj.RelativeURLFr;
            this.isReferenceMatch = obj.isReferenceMatch;
            this.isPostalCodeMatch = obj.isPostalCodeMatch;
            this.isCommercialProperty = obj.isCommercialProperty;
            //this.IndividualID = obj.IndividualID;
            //this.FirstName = obj.FirstName;
            //this.LastName = obj.LastName;
            //this.OrganizationID = obj.OrganizationID;
            //this.OrganizationName_EN = obj.OrganizationName_EN;
            //this.OrganizationName_FR = obj.OrganizationName_FR;
            //this.IndividualAddress_EN = obj.IndividualAddress_EN;
            //this.IndividualAddress_FR = obj.IndividualAddress_FR;
            //this.IndividualCity = obj.IndividualCity;
            //this.IndividualProvinceName_EN = obj.IndividualProvinceName_EN;
            //this.IndividualProvinceName_FR = obj.IndividualProvinceName_FR;
            //this.IndividualPostalCode = obj.IndividualPostalCode;
            //this.SubAreaID = obj.SubAreaID;
            //this.Longitude = obj.Longitude;
            //this.Latitude = obj.Latitude;
            //this.Area = obj.Area;
            //this.LocationCity = obj.LocationCity;
            //this.OpenMapsResult = obj.OpenMapsResult;
        }
        return AutocompleteResults;
    }());
    PublicContracts.AutocompleteResults = AutocompleteResults;
    var CurrencyExchange = /** @class */ (function () {
        function CurrencyExchange(obj) {
            if (obj == null) {
                return;
            }
            this.ExchangeName = obj.ExchangeName;
            this.Value = obj.Value;
        }
        return CurrencyExchange;
    }());
    PublicContracts.CurrencyExchange = CurrencyExchange;
    var PublicOffer = /** @class */ (function () {
        function PublicOffer(obj) {
            if (obj == null) {
                return;
            }
            this.ID = obj.ID;
            this.PeriodId = obj.PeriodId;
            this.Timestamp = obj.Timestamp;
            this.TimestampUTC = obj.TimestampUTC;
            this.Price = obj.Price;
            this.PriceCurrencyFormat = obj.PriceCurrencyFormat;
            this.BuyerNumber = obj.BuyerNumber;
            this.HasConditions = obj.HasConditions;
            this.StatusId = obj.StatusId;
            this.StatusName = obj.StatusName;
            this.BuyerAgentCreaIndividualId = obj.BuyerAgentCreaIndividualId;
            this.LastUpdated = obj.LastUpdated;
            this.InsertedDate = obj.InsertedDate;
            this.SourceOfferKey = obj.SourceOfferKey;
            this.FXPrices = new Array();
            for (var i in obj.FXPrices) {
                this.FXPrices.push(new CurrencyExchange(obj.FXPrices[i]));
            }
        }
        return PublicOffer;
    }());
    PublicContracts.PublicOffer = PublicOffer;
    var PublicOfferPeriod = /** @class */ (function () {
        function PublicOfferPeriod(obj) {
            if (obj == null) {
                return;
            }
            this.ID = obj.ID;
            this.ProviderId = obj.ProviderId;
            this.StatusId = obj.StatusId;
            this.StatusName = obj.StatusName;
            this.DisplayPeriod = obj.DisplayPeriod;
            this.DisplayValues = obj.DisplayValues;
            this.StartDateTime = obj.StartDateTime;
            this.EndDateTime = obj.EndDateTime;
            this.CloseDate = obj.CloseDate;
            this.LastUpdated = obj.LastUpdated;
            this.InsertedDate = obj.InsertedDate;
            this.UpdatedBy = obj.UpdatedBy;
            this.AcceptedSourceOfferKey = obj.AcceptedSourceOfferKey;
            this.StatusStateName = obj.StatusStateName;
            this.StatusStateId = obj.StatusStateId;
            this.IsActive = obj.IsActive;
        }
        return PublicOfferPeriod;
    }());
    PublicContracts.PublicOfferPeriod = PublicOfferPeriod;
    var PublicOfferProvider = /** @class */ (function () {
        function PublicOfferProvider(obj) {
            if (obj == null) {
                return;
            }
            this.ID = obj.ID;
            this.LogoUrl = obj.LogoUrl;
            this.DesignationShortName = obj.DesignationShortName;
            this.DesignationLongName = obj.DesignationLongName;
        }
        return PublicOfferProvider;
    }());
    PublicContracts.PublicOfferProvider = PublicOfferProvider;
})(PublicContracts || (PublicContracts = {}));
var ActionResults;
(function (ActionResults) {
    var AccountResponse = /** @class */ (function () {
        function AccountResponse(obj) {
            if (obj == null) {
                return;
            }
            this.ErrorCode = obj.ErrorCode;
            this.ErrorMsg = obj.ErrorMsg;
        }
        return AccountResponse;
    }());
    ActionResults.AccountResponse = AccountResponse;
})(ActionResults || (ActionResults = {}));
var ConsumerProfile;
(function (ConsumerProfile) {
    var Consumer = /** @class */ (function () {
        function Consumer(obj) {
            if (obj == null) {
                return;
            }
            this.firstName = obj.firstName;
            this.lastName = obj.lastName;
            this.displayName = obj.displayName;
            this.email = obj.email;
            this.UID = obj.UID;
            this.CRMUID = obj.CRMUID;
            this.regToken = obj.regToken;
            this.profile = obj.profile;
            this.GigyaError = obj.GigyaError;
            this.errorCode = obj.errorCode;
            if (obj.GigyaError != undefined) {
                this.GigyaError.ErrorCode = obj.GigyaError.ErrorCode;
                this.GigyaError.ErrorMsg = obj.GigyaError.ErrorMsg;
            }
            this.validationErrors = obj.validationErrors;
            this.moreAboutYouCondition = obj.moreAboutYouCondition;
            this.socialTermsCondition = obj.socialTermsCondition;
            this.revisedTermsCondition = obj.revisedTermsCondition;
            this.reactivateCondition = obj.reactivateCondition;
            this.LoginProviderType = obj.LoginProviderType;
            this.LoginProviderTypeJSON = obj.LoginProviderTypeJSON;
            this.lastUpdatedTimestamp = obj.lastUpdatedTimestamp;
            this.Favourites = obj.Favourites;
            this.Compares = obj.Compares;
            this.Searches = obj.Searches;
            this.Notes = obj.Notes;
            this.user = obj.user;
            this.data = obj.data;
            this.pwrtToken = obj.pwrtToken;
            this.Interested = obj.Interested;
            this.Interested_Com = obj.Interested_Com;
            this.Buyer = obj.Buyer;
            this.Buyer_Com = obj.Buyer_Com;
            //this.CREA_mail_updates = obj.CREA_mail_updates;
            //this.REALTOR_mail_updates = obj.REALTOR_mail_updates;
            this.REALTOR_mail = obj.REALTOR_mail;
            this.EmailRealtorConfirmation = obj.EmailRealtorConfirmation;
            this.Salesforce_Contact_CREA_ID = obj.Salesforce_Contact_CREA_ID;
            this.NotificationsEnabled = obj.NotificationsEnabled;
            this.FavNotificationsEnabled = obj.FavNotificationsEnabled;
            this.CompareNotificationsEnabled = obj.CompareNotificationsEnabled;
            this.SavedSearchNotificationsEnabled = obj.SavedSearchNotificationsEnabled;
            this.HashUID = obj.HashUID;
            this.unsubscribeLink = obj.unsubscribeLink;
            this.pardot_error = obj.pardot_error;
            this.AccountStatus = obj.Account_Status;
        }
        return Consumer;
    }());
    ConsumerProfile.Consumer = Consumer;
})(ConsumerProfile || (ConsumerProfile = {}));
var APICriteria;
(function (APICriteria) {
    var ListingPublicOfferCriteria = /** @class */ (function () {
        function ListingPublicOfferCriteria() {
        }
        return ListingPublicOfferCriteria;
    }());
    APICriteria.ListingPublicOfferCriteria = ListingPublicOfferCriteria;
    var SearchFilterCriteria = /** @class */ (function () {
        function SearchFilterCriteria() {
            this.BedRange = "";
            this.BathRange = "";
            this.PriceMin = "";
            this.PriceMax = "";
            this.RentMin = "";
            this.RentMax = "";
            this.PropertyTypeID = "";
            this.MinBath = "";
            this.MaxBath = "";
            this.MinBed = "";
            this.MaxBed = "";
            this.OpenHouse = "";
            this.OpenHouseStartDate = "";
            this.OpenHouseEndDate = "";
            this.NumberOfDays = "";
            this.OwnershipTypeGroupId = "";
            this.TransactionTypeID = "";
            this.ParkingSpaceMin = "";
            this.ParkingSpaceMax = "";
            this.ParkingSpaceRange = "";
            this.LandSizeMin = "";
            this.LandSizeMax = "";
            this.LandSizeRange = "";
            this.BedroomRange = "";
            this.BathroomRange = "";
            this.StoreyMin = "";
            this.StoreyMax = "";
            this.StoreyRange = "";
            this.FarmTypeId = "";
            this.BuildingSizeRange = "";
            this.BuildingSizeMin = "";
            this.BuildingSizeMax = "";
            this.ParkingTypeId = "";
            this.UnitRange = "";
            this.UnitMinimum = "";
            this.UnitMaximum = "";
            this.BuildingAmenityTypeId = "";
            this.AmenityTypeId = "";
            this.ZoningTypeGroupId = "";
            this.BuildingTypeId = "";
            this.LoadingTypeId = "";
            this.PropertyFeatureId = "";
            this.UtilitiesGroupId = "";
            this.CeilingHeightRange = "";
            this.CeilingHeightMinimum = "";
            this.CeilingHeightMaximum = "";
            this.BusinessTypeId = "";
            this.IncludesProperty = "";
            this.BusinessSubTypeId = "";
            this.AirCondition = "";
            this.Fireplace = "";
            this.Pool = "";
            this.Garage = "";
            this.Acreage = "";
            this.WaterFront = "";
            this.CropTypeId = "";
            this.ViewTypeGroupId = "";
            this.LiveStockTypeId = "";
            this.LandUseTypeId = "";
            this.Radius = "";
            this.Top = "";
            this.PolygonPoints = "";
            this.ConstructionStyleId = "";
            this.KeyWords = "";
            this.PropertySearchTypeId = "";
            this.FloorSpaceMin = "";
            this.FloorSpaceMax = "";
            this.FloorSpaceRange = "";
            this.PropertyTypeGroupID = "";
            this.City = "";
            this.CityId = "";
            this.IncludeTombstones = "";
            this.ListingAgeMode = "";
            this.Currency = "";
        }
        return SearchFilterCriteria;
    }());
    APICriteria.SearchFilterCriteria = SearchFilterCriteria;
    var PropertySearchCriteria = /** @class */ (function () {
        function PropertySearchCriteria() {
            this.UploadedBy = "";
        }
        PropertySearchCriteria.prototype.setBounds = function (bounds) {
            this.LatitudeMin = bounds.getSouthWest().lat().toFixed(5);
            this.LatitudeMax = bounds.getNorthEast().lat().toFixed(5);
            this.LongitudeMin = bounds.getSouthWest().lat().toFixed(5);
            this.LongitudeMax = bounds.getNorthEast().lat().toFixed(5);
        };
        PropertySearchCriteria.prototype.getBounds = function () {
            var returnValue = null;
            if (this.LatitudeMin && this.LatitudeMax && this.LongitudeMin && this.LongitudeMax) {
                returnValue = new google.maps.LatLngBounds(new google.maps.LatLng(Number(this.LatitudeMin), Number(this.LongitudeMin)), new google.maps.LatLng(Number(this.LatitudeMax), Number(this.LongitudeMax)));
            }
            return returnValue;
        };
        return PropertySearchCriteria;
    }());
    APICriteria.PropertySearchCriteria = PropertySearchCriteria;
    var SubAreaSearchCriteria = /** @class */ (function () {
        function SubAreaSearchCriteria() {
        }
        return SubAreaSearchCriteria;
    }());
    APICriteria.SubAreaSearchCriteria = SubAreaSearchCriteria;
    var LocationDescriptionCriteria = /** @class */ (function () {
        function LocationDescriptionCriteria() {
        }
        return LocationDescriptionCriteria;
    }());
    APICriteria.LocationDescriptionCriteria = LocationDescriptionCriteria;
    var IndividualSearch = /** @class */ (function () {
        function IndividualSearch() {
            this.CurrentPage = "1";
        }
        return IndividualSearch;
    }());
    APICriteria.IndividualSearch = IndividualSearch;
    var OrganizationSearch = /** @class */ (function () {
        function OrganizationSearch() {
        }
        return OrganizationSearch;
    }());
    APICriteria.OrganizationSearch = OrganizationSearch;
    var AutocompleteCriteria = /** @class */ (function () {
        function AutocompleteCriteria() {
        }
        return AutocompleteCriteria;
    }());
    APICriteria.AutocompleteCriteria = AutocompleteCriteria;
})(APICriteria || (APICriteria = {}));
var APIReturnValues;
(function (APIReturnValues) {
    var APIResult = /** @class */ (function () {
        function APIResult(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return APIResult;
    }());
    APIReturnValues.APIResult = APIResult;
    var PublicOfferResult = /** @class */ (function () {
        function PublicOfferResult() {
        }
        return PublicOfferResult;
    }());
    APIReturnValues.PublicOfferResult = PublicOfferResult;
    var EmailOfficeResult = /** @class */ (function () {
        function EmailOfficeResult(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return EmailOfficeResult;
    }());
    APIReturnValues.EmailOfficeResult = EmailOfficeResult;
    var EmailRealtorResult = /** @class */ (function () {
        function EmailRealtorResult(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return EmailRealtorResult;
    }());
    APIReturnValues.EmailRealtorResult = EmailRealtorResult;
    var EmailFriendResult = /** @class */ (function () {
        function EmailFriendResult(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return EmailFriendResult;
    }());
    APIReturnValues.EmailFriendResult = EmailFriendResult;
    var EmailContactUsResult = /** @class */ (function () {
        function EmailContactUsResult(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return EmailContactUsResult;
    }());
    APIReturnValues.EmailContactUsResult = EmailContactUsResult;
    var ListingSearchResults = /** @class */ (function () {
        function ListingSearchResults(obj) {
            this.Results = [];
            this.Pins = [];
            if (obj != null) {
                this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
                this.Paging = new PublicContracts.Paging(obj.Paging);
                this.Results = [];
                for (var i in obj.Results) {
                    this.Results.push(new PublicContracts.ListingBasicDetails(obj.Results[i]));
                }
                this.Pins = [];
                for (var i in obj.Pins) {
                    this.Pins.push(new PublicContracts.Pin(obj.Pins[i]));
                }
            }
        }
        return ListingSearchResults;
    }());
    APIReturnValues.ListingSearchResults = ListingSearchResults;
    var SubAreaSearchResults = /** @class */ (function () {
        function SubAreaSearchResults(obj) {
            this.SubArea = [];
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.SubArea = [];
            for (var i in obj.SubArea) {
                this.SubArea.push(new PublicContracts.SubArea(obj.SubArea[i]));
            }
        }
        return SubAreaSearchResults;
    }());
    APIReturnValues.SubAreaSearchResults = SubAreaSearchResults;
    var LocationDescriptionResults = /** @class */ (function () {
        function LocationDescriptionResults(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.Name = obj.Name;
            this.Description = obj.Description;
            this.Polygons = obj.Polygons;
        }
        return LocationDescriptionResults;
    }());
    APIReturnValues.LocationDescriptionResults = LocationDescriptionResults;
    var OrganizationSearchResults = /** @class */ (function () {
        function OrganizationSearchResults(obj) {
            this.Results = [];
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.Paging = new PublicContracts.Paging(obj.Paging);
            this.Results = [];
            for (var i in obj.Results) {
                this.Results.push(new PublicContracts.OrganizationBasicDetails(obj.Results[i]));
            }
        }
        return OrganizationSearchResults;
    }());
    APIReturnValues.OrganizationSearchResults = OrganizationSearchResults;
    var IndividualSearchResults = /** @class */ (function () {
        function IndividualSearchResults(obj) {
            this.Results = [];
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.Results = [];
            this.Paging = new PublicContracts.Paging(obj.Paging);
            for (var i in obj.Results) {
                this.Results.push(new PublicContracts.IndividualBasicDetails(obj.Results[i]));
            }
        }
        return IndividualSearchResults;
    }());
    APIReturnValues.IndividualSearchResults = IndividualSearchResults;
    var SetAccountInfoResults = /** @class */ (function () {
        function SetAccountInfoResults(obj, callbackArgs) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.GigyaErrorCode = obj.GigyaErrorCode;
            this.GigyaErrorMsg = obj.GigyaErrorMsg;
        }
        return SetAccountInfoResults;
    }());
    APIReturnValues.SetAccountInfoResults = SetAccountInfoResults;
    var GetAccountInfoResults = /** @class */ (function () {
        function GetAccountInfoResults(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return GetAccountInfoResults;
    }());
    APIReturnValues.GetAccountInfoResults = GetAccountInfoResults;
    var DeleteAccountResults = /** @class */ (function () {
        function DeleteAccountResults(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return DeleteAccountResults;
    }());
    APIReturnValues.DeleteAccountResults = DeleteAccountResults;
    var DeactivateAccountResults = /** @class */ (function () {
        function DeactivateAccountResults(obj) {
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
        }
        return DeactivateAccountResults;
    }());
    APIReturnValues.DeactivateAccountResults = DeactivateAccountResults;
    var NotificationResults = /** @class */ (function () {
        function NotificationResults(obj, callbackArgs) {
            this.Notifications = [];
            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
            this.Notifications = [];
            for (var i in obj.Notifications) {
                this.Notifications.push(new PublicContracts.ConsumerNotifications(obj.Results[i]));
            }
            this.TimestampUTCEpoch = obj.TimestampUTCEpoch;
        }
        return NotificationResults;
    }());
    APIReturnValues.NotificationResults = NotificationResults;
    var AutocompleteResults = /** @class */ (function () {
        function AutocompleteResults(obj) {
            this.Results = [];
            this.ResultsMapBox = [];
            if (obj != null) {
                this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
                this.Results = obj.Results;
                this.ResultsMapBox = obj.ResultsMapBox;
            }
        }
        return AutocompleteResults;
    }());
    APIReturnValues.AutocompleteResults = AutocompleteResults;
    //export class ListingSearchResults {
    //    constructor(obj?: any) {
    //        if (obj != null) {
    //            this.ErrorCode = new PublicContracts.ErrorCode(obj.ErrorCode);
    //            this.Paging = new PublicContracts.Paging(obj.Paging);
    //            this.Results = [];
    //            for (let i in obj.Results) {
    //                this.Results.push(new PublicContracts.ListingBasicDetails(obj.Results[i]));
    //            }
    //            this.Pins = [];
    //            for (let i in obj.Pins) {
    //                this.Pins.push(new PublicContracts.Pin(obj.Pins[i]));
    //            }
    //        }
    //    }
    //    ErrorCode: PublicContracts.ErrorCode;
    //    Paging: PublicContracts.Paging;
    //    Results: Array<PublicContracts.ListingBasicDetails> = [];
    //    Pins: Array<PublicContracts.Pin> = [];
    //}
})(APIReturnValues || (APIReturnValues = {}));
//# sourceMappingURL=APIClasses.js.map;
//class APIProxyArgs {   
//    requestCompleteHandler: (request: JQueryXHR) => void = null;    
//}
var APIProxy = /** @class */ (function () {
    function APIProxy() {
    }
    /**
     * Used to fix issue of map->details page->map not finding the last search in the cache due to google maps setBounds not setting the bounds EXACTLY
     * @param args
     */
    APIProxy.reduceBoundingBoxAccuracy = function (args) {
        var returnValue = Object.assign({}, args);
        if (returnValue["LatitudeMin"] != null) {
            returnValue["LatitudeMin"] = Number(returnValue["LatitudeMin"]).toFixed(4);
        }
        if (returnValue["LatitudeMax"] != null) {
            returnValue["LatitudeMax"] = Number(returnValue["LatitudeMax"]).toFixed(4);
        }
        if (returnValue["LongitudeMin"] != null) {
            returnValue["LongitudeMin"] = Number(args["LongitudeMin"]).toFixed(4);
        }
        if (returnValue["LongitudeMax"] != null) {
            returnValue["LongitudeMax"] = Number(returnValue["LongitudeMax"]).toFixed(4);
        }
        return returnValue;
    };
    /**
     * Creates a unique hash for an API call based on the url of the call and the arguments used for the call
     * @param url
     * @param args
     */
    APIProxy.getCacheItemHash = function (url, args) {
        var returnValue = "";
        var urlHash = Utilities.hash(url).toString();
        args = APIProxy.reduceBoundingBoxAccuracy(args);
        var argsHash = Utilities.hash(JSON.stringify(args)).toString();
        returnValue = urlHash + argsHash;
        return returnValue;
    };
    APIProxy.cacheFetchHandler = function (url, args) {
        var returnValue = null;
        var valFromSession = sessionStorage.getItem(url);
        if (valFromSession != null) {
            var hash = APIProxy.getCacheItemHash(url, args);
            var actualValue = JSON.parse(valFromSession);
            if (actualValue.hash == hash) {
                Logging.Debug("Value pulled from cache ( " + url + " )", LogType.APIProxy);
                returnValue = JSON.parse(actualValue.value.toString());
            }
        }
        return returnValue;
    };
    APIProxy.cacheSaveHandler = function (url, args, val) {
        var hash = APIProxy.getCacheItemHash(url, args);
        var castedValue = val;
        if (castedValue.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
            var valueToStore = new StorageItems.HashedItem(hash, JSON.stringify(val));
            Logging.Debug("Saving item to cache ( " + url + " )", LogType.APIProxy);
            sessionStorage.setItem(url, JSON.stringify(valueToStore));
        }
    };
    APIProxy.errorCheck = function (errorCode) {
        if (errorCode.Id != PublicContracts.ErrorCodeId.OK) {
            Logging.Error("APIProxy error: " + errorCode.Id + " - " + (errorCode.LogId || "") + " - " + (errorCode.Description || "") + " : " + (errorCode.Exception || ""));
            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
        }
    };
    APIProxy.addCommonParams_ListingSearch = function (object) {
        object = APIProxy.addCommonParams(object);
        if (!object.RecordsPerPage) {
            object.RecordsPerPage = (ApplicationState.IsMobileDevice ? 25 : 12).toString();
        }
        return object;
    };
    APIProxy.addCommonParams = function (object) {
        object["ApplicationId"] = ApplicationConfig.ApplicationID;
        object["CultureId"] = ApplicationState.CultureID;
        object["Version"] = ApplicationConfig.ApplicationVersion;
        if (object["CurrentPage"] == undefined) {
            object["CurrentPage"] = "1";
        }
        return object;
    };
    APIProxy.abortCurrentPropertySearch = function () {
        if (APIProxy.currentPropertySearch != null) {
            APIProxy.currentPropertySearch.abort();
        }
    };
    APIProxy.propertySearch = function (criteria, resultsHandler, argsPassedToCallback, enableCaching, cancelExistingRequests, queueName, errorHandler) {
        if (enableCaching === void 0) { enableCaching = true; }
        if (cancelExistingRequests === void 0) { cancelExistingRequests = false; }
        if (queueName === void 0) { queueName = ""; }
        if (errorHandler === void 0) { errorHandler = null; }
        criteria = Utilities.removeBlankProperties(criteria);
        criteria = APIProxy.addCommonParams_ListingSearch(criteria);
        var url = ApplicationConfig.ApiPath + "Listing.svc/PropertySearch_Post";
        var returnValueConverter = function (response, callerArgs) {
            //var responseObj = JSON.parse(response);
            var APIResultsObj = new APIReturnValues.ListingSearchResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        args.queueName = queueName;
        args.errorHandler = errorHandler;
        args.cancelExistingRequestsInQueue = cancelExistingRequests;
        if (enableCaching) {
            args.isRequestCacheable = function (url, args) { return args["Listingids"] == null; };
        }
        else {
            args.isRequestCacheable = function (url, args) { return false; };
        }
        return APIProxy.currentPropertySearch = AjaxEngine.POST(url, criteria, args);
    };
    ;
    APIProxy.individualSearch = function (criteria, resultsHandler, argsPassedToCallback) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        criteria = APIProxy.addCommonParams(criteria);
        var url = ApplicationConfig.ApiPath + 'individual.svc/IndividualSearch';
        var returnValueConverter = function (response, callerArgs) {
            //var responseObj = JSON.parse(response);
            var APIResultsObj = new APIReturnValues.IndividualSearchResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        //args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        //args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        return AjaxEngine.GET(url, criteria, args);
    };
    ;
    APIProxy.organizationSearch = function (criteria, resultsHandler, argsPassedToCallback) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        criteria = APIProxy.addCommonParams(criteria);
        var url = ApplicationConfig.ApiPath + 'organization.svc/OrganizationSearch';
        var returnValueConverter = function (response, callerArgs) {
            //var responseObj = JSON.parse(response);
            var APIResultsObj = new APIReturnValues.OrganizationSearchResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        //args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        //args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        return AjaxEngine.POST(url, criteria, args);
    };
    ;
    APIProxy.subAreaSearch = function (criteria, resultsHandler, argsPassedToCallback, errorHandler) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        criteria = APIProxy.addCommonParams(criteria);
        var url = ApplicationConfig.ApiPath + 'Location.svc/SubAreaSearch';
        var returnValueConverter = function (response, callerArgs) {
            //var responseObj = JSON.parse(response);
            var APIResultsObj = new APIReturnValues.SubAreaSearchResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        if (errorHandler)
            args.errorHandler = errorHandler;
        args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        return AjaxEngine.GET(url, criteria, args);
    };
    ;
    APIProxy.locationDescription = function (criteria, resultsHandler, argsPassedToCallback) {
        //criteria = APIProxy.removeBlankProperties(criteria);
        criteria = APIProxy.addCommonParams(criteria);
        var url = ApplicationConfig.ApiPath + 'Location.svc/LocationDescription';
        var returnValueConverter = function (response, callerArgs) {
            //var responseObj = JSON.parse(response);
            var APIResultsObj = new APIReturnValues.LocationDescriptionResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        return AjaxEngine.GET(url, criteria, args);
    };
    ;
    APIProxy.autocompleteResults = function (criteria, resultsHandler, argsPassedToCallback, enableCaching, cancelExistingRequests, queueName, errorHandler, showLoadingBar) {
        if (enableCaching === void 0) { enableCaching = true; }
        if (cancelExistingRequests === void 0) { cancelExistingRequests = true; }
        if (queueName === void 0) { queueName = "getAutoComplete"; }
        if (errorHandler === void 0) { errorHandler = null; }
        if (showLoadingBar === void 0) { showLoadingBar = true; }
        var url = ApplicationConfig.ApiPath + "Autocomplete.svc/GetAutocompleteResults";
        var returnValueConverter = function (response, callerArgs) {
            var APIResultsObj = new APIReturnValues.AutocompleteResults(response);
            APIProxy.errorCheck(APIResultsObj.ErrorCode);
            resultsHandler(APIResultsObj, callerArgs);
        };
        var args = new AjaxCallArgs(returnValueConverter, argsPassedToCallback);
        args.cacheFetchHandler = APIProxy.cacheFetchHandler;
        if (criteria.IsWarmup) {
            args.isRequestCacheable = function (url, args) { return false; };
        }
        else {
            args.cacheSaveHandler = APIProxy.cacheSaveHandler;
        }
        args.queueName = queueName;
        args.errorHandler = errorHandler;
        args.cancelExistingRequestsInQueue = cancelExistingRequests;
        args.showLoadingBar = showLoadingBar;
        //if (enableCaching) {
        //    args.isRequestCacheable = (url: string, args: Object): boolean => { return args["Listingids"] == null; };
        //} else {
        //    args.isRequestCacheable = (url: string, args: Object): boolean => { return false; }
        //}
        return AjaxEngine.GET(url, criteria, args);
    };
    ;
    return APIProxy;
}());
//# sourceMappingURL=APIProxy.js.map;
var ApplicationConfig = /** @class */ (function () {
    function ApplicationConfig() {
    }
    ApplicationConfig.CaptchaEnabled = false;
    ApplicationConfig.SkipClientCaptchaValidation = false;
    ApplicationConfig.EnableAutoComplete = false;
    ApplicationConfig.SurveyEnabled = true;
    ApplicationConfig.FavouriteLimit = 50;
    ApplicationConfig.CompareLimit = 5;
    ApplicationConfig.SearchLimit = 5;
    ApplicationConfig.TOSDate = "";
    ApplicationConfig.OrganizationImageLowResolution = "";
    ApplicationConfig.IsDebugMode = false;
    ApplicationConfig.IsQAMode = false;
    ApplicationConfig.MaxSoldDataDisplay = 4;
    ApplicationConfig.LocationAutocompleteCacheKey = "LocationAutoComp";
    ApplicationConfig.NumAutocompleteResultsToStore = 20;
    ApplicationConfig.NumAutoCompleteResultsToDisplay = 5;
    ApplicationConfig.EnabledLocalLogicGeoIdSearchSelect = false;
    ApplicationConfig.LocalLogicMapLayersPromoActive = false;
    ApplicationConfig.EnableLocalLogicMapLayers = false;
    ApplicationConfig.HomePageHeaderResImages = [];
    ApplicationConfig.HomePageHeaderCommImages = [];
    ApplicationConfig.LocalLogicMapLayersScriptSrc = "";
    ApplicationConfig.RateHubScriptSrc = "";
    //num days td customer cookie set to live
    ApplicationConfig.TDCustomerDuration = 0;
    ApplicationConfig.EnableMobileSlideInPDP = false;
    ApplicationConfig.MobileSlideInPDPUserAgentRestrictionRegex = "";
    ApplicationConfig.EnableDesktopMapListingDetailsLinksOpenInNewTab = false;
    ApplicationConfig.EnableComscore = false;
    ApplicationConfig.EnablePublicOffersUI = false;
    ApplicationConfig.StaticFileCacheParam = "";
    ApplicationConfig.OpenHouseEventId = "";
    ApplicationConfig.StreamEventId = "";
    ApplicationConfig.FormValueStorageCacheParamOldAndNew = "";
    return ApplicationConfig;
}());
//# sourceMappingURL=ApplicationConfig.js.map;
var ApplicationState = /** @class */ (function () {
    function ApplicationState() {
    }
    ApplicationState.registerEventHandlers = function () {
        Events.Listen(MasterPage.masterLoadedEvent, function (e) {
            var controlId = e.detail.id;
            var typeScriptObject = e.detail.object;
            if (typeScriptObject) { //When leaving page Edge value is undefined
                Logging.Debug("Type: " + typeScriptObject.constructor["name"] + ", Id: " + controlId, LogType.MasterLoaded);
                ApplicationState.Current.Master = typeScriptObject; //Put object into global cache for this page            
            }
        }, { scope: Events.ListenerScope.Global });
        Events.Listen(WebPage.pageInitingEvent, function (e) {
            var controlId = e.detail.id;
            var typeScriptObject = e.detail.object;
            if (typeScriptObject) { //When leaving page Edge value is undefined
                Logging.Debug("Type: " + typeScriptObject.constructor["name"] + ", Id: " + controlId, LogType.PageLoaded);
                ApplicationState.Current.Page = typeScriptObject; //Put object into global cache for this page
                ApplicationState.Current.Page.Name = typeScriptObject.constructor["name"];
            }
        }, { scope: Events.ListenerScope.Global });
        Events.Listen(WebPage.pagePreRender, function (e) {
            clearjCache();
            ApplicationState.Current.ServerPageName = e.detail;
        }, { scope: Events.ListenerScope.Global });
        Events.Listen(WebControl.webControlLoadedEvent, function (e) {
            var controlId = e.detail.id;
            var typeScriptObject = e.detail.object;
            if (typeScriptObject) { //When leaving page Edge value is undefined
                Logging.Debug("Type: " + typeScriptObject.constructor["name"] + ", Id: " + controlId, LogType.ControlLoaded);
                ApplicationState.Current.Controls[controlId] = typeScriptObject; //Put object into global cache for this page            
            }
        }, { scope: Events.ListenerScope.Global });
    };
    ApplicationState.IsMobileDevice = /Mobile|iP(hone|od|ad)|Android|BlackBerry|IEMobile|Kindle|NetFront|Silk-Accelerated|(hpw|web)OS|Fennec|Minimo|Opera M(obi|ini)|Blazer|Dolfin|Dolphin|Skyfire|Zune/i.test(navigator.userAgent);
    ApplicationState.IsSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    ApplicationState.IsFireFox = /.*firefox.*/i.test(navigator.userAgent);
    ApplicationState.IsSamsungBrowser = /.*samsungbrowser/i.test(navigator.userAgent);
    ApplicationState.IsSamsungDevice = /.* sm-/i.test(navigator.userAgent);
    ApplicationState.IsFacebookAppBrowser = /.*(FBAN|FBAV)/i.test(navigator.userAgent);
    ApplicationState.IsAndroid = /.*android.*/i.test(navigator.userAgent);
    ApplicationState.IsAppleDevice = /.*iphone|ipad.*/i.test(navigator.userAgent);
    ApplicationState.IsUnsuportedIEDevice = navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0;
    ApplicationState.UserIsSignedIn = false;
    ApplicationState.Current = { Master: null, Page: null, Controls: {}, ServerPageName: "" };
    ApplicationState.LoadingViaBackButton = false;
    ApplicationState.DisableScrollSet = false;
    /** Used to track when we are loading mobile PDP page via a slide-in on the map - needed to supress scroll location refresh when page load event fired */
    ApplicationState.LoadingPageViaSlideIn = false;
    ApplicationState.CurrentSlideInPageContainerId = null;
    ApplicationState.ResidentialMode = 1;
    ApplicationState.CommercialMode = 2;
    ApplicationState.ApplicationModeString = ""; //Set via 
    ApplicationState.AlternateApplicationModeString = "";
    ApplicationState.BuildVersion = "";
    ApplicationState.LanguageAttribute = "";
    ApplicationState.GigyaAPIKey = "";
    ApplicationState.GuestNotifyChgPending = false;
    ApplicationState.CurrentHref = document.location.href;
    ApplicationState.PreviousHref = document.location.href;
    ApplicationState.CurrentHrefCopy = document.location.href;
    ApplicationState.InitialDeviceScreenHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; //$(window).height();
    ApplicationState.InitialDeviceScreenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; //$(window).width();
    //This won't work if they switch the screen orientation, not sure how to handle that?
    //static IsScreenKeyboardVisible = (): boolean => { return ApplicationState.IsMobileDevice && ($(window).width() + $(window).height()) != (ApplicationState.InitialDeviceScreenWidth + ApplicationState.InitialDeviceScreenHeight); }
    ApplicationState.IsScreenKeyboardVisible = function () { return ApplicationState.IsMobileDevice && ((window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) + (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight)) != (ApplicationState.InitialDeviceScreenWidth + ApplicationState.InitialDeviceScreenHeight); };
    ApplicationState.IsScreenLandscape = function () { return screen.height < screen.width; };
    ApplicationState.PageLoadingAnimationComplete = false;
    ApplicationState.SupportsDynamicViewportUnits = function () { return !ApplicationState.IsUnsuportedIEDevice && CSS.supports("height", "100dvh"); };
    return ApplicationState;
}());
//# sourceMappingURL=ApplicationState.js.map;
//interface IAutoCompleteDataSource {
//    getResults(query: string, callback: (values:Array<IAutoCompleteEntry>)=>void): void;
//}
//class AutoCompleteDataSource_Local implements IAutoCompleteDataSource {
//    static LocalStorageKey: string = "LocalAutoCompRes";
//    getResults(query: string): Array<IAutoCompleteEntry> {
//        let returnValue: Array<IAutoCompleteEntry> = [];
//        return returnValue;
//    }
//    static storeEntry(value: string) {
//        //LocalStorage.getObject()
//    }
//}
//class AutoCompleteDataSource_Google implements IAutoCompleteDataSource {
//    static Service: google.maps.places.AutocompleteService = null;
//    //static Cache = new Caching.LocalStorageCache("GoogleAutoComp");
//    //static Cachekey: string = "GoogleAutoCompResults";
//    getResults(query: string, callback: (values:Array<IAutoCompleteEntry>)=>void): void {
//        if (AutoCompleteDataSource_Google.Service == null) {
//            AutoCompleteDataSource_Google.Service = new google.maps.places.AutocompleteService();
//        }
//        AutoCompleteDataSource_Google.Service.getPlacePredictions({ input: query, componentRestrictions: { country: "CA" }, types: ['geocode'] },
//            (predictions: Array<google.maps.places.AutocompletePrediction>, status: google.maps.places.PlacesServiceStatus) => {
//                if (status == google.maps.places.PlacesServiceStatus.OK) {
//                    let results: Array<IAutoCompleteEntry> = [];
//                    for (var i = 0; i < predictions.length; i++) {
//                        results.push({ Text: predictions[i].description });
//                    }
//                    callback(results);
//                }
//                //AutoComplete.DisplayGoogleSuggestions(AutoCompleteEntry.createArrayFromGoogleResults(predictions), status, autoComplete, false);
//            });
//        //let resultsFromCache: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = <Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>>> AutoCompleteDataSource_Google.Cache.get(AutoCompleteDataSource_Google.Cachekey);
//        //let resultFromCache: StorageItems.TimestampedItem<Array<IAutoCompleteEntry>> = resultsFromCache[query.toLowerCase()];
//        //if (resultFromCache != null) {
//        //    return resultFromCache.value;
//        //    //Logging.Debug("Showing cached results for '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//        //    //AutoComplete.DisplayGoogleSuggestions(resultFromCache.value, google.maps.places.PlacesServiceStatus.OK, autoComplete, true);
//        //} else {
//        //    //Logging.Debug("Looking up '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//        //    AutoComplete.Service.getPlacePredictions({ input: autoComplete.TextInput.value, componentRestrictions: { country: "CA" }, types: ['geocode'] },
//        //        (predictions: Array<google.maps.places.AutocompletePrediction>, status: google.maps.places.PlacesServiceStatus) => {
//        //            AutoComplete.DisplayGoogleSuggestions(AutoCompleteEntry.createArrayFromGoogleResults(predictions), status, autoComplete, false);
//        //        });
//        //}      
//    }
//}
///**
// * Class to create google places autocomplete results for a text input field.
// */
//class AutoCompleteGoogle {   
//    static Cache: Caching.LocalStorageCache = new Caching.LocalStorageCache("AutoComplete");
//    CacheKey: string;// = LocalStorage.GoogleAutoComplete.key;
//    ResultsDiv: HTMLDivElement;
//    TextInput: HTMLInputElement;
//    InputId: string;
//    ItemClickedHandler: () => any;
//    CurrentText: string = "";
//    MaxCachedResultSets: number = 0;
//    constructor(id: string, cacheKey: string, itemClickHandler: () => any, maxCachedResultSets: number) {
//        let _this = this;
//        this.InputId = id;
//        this.ItemClickedHandler = itemClickHandler;
//        this.MaxCachedResultSets = maxCachedResultSets;
//        this.TextInput = <HTMLInputElement>document.getElementById(id);
//        this.CacheKey = cacheKey;
//        this.ResultsDiv = AutoComplete.CreateResultsDiv(id);
//        document.body.appendChild(this.ResultsDiv);
//        AutoComplete.AddEventHandlers(this);
//    }
//    /**
//     * Adds the event handlers for the HTML results
//     * @param autoComplete
//     */
//    static AddEventHandlers(autoComplete: AutoComplete) {
//        let input: JQuery = $('#' + autoComplete.InputId);
//        $(window).on('resize', function () { AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id")); });
//        input.blur(function () {
//            //Need timer to allow for click event to still be capture before results are hidden
//            window.setTimeout(function () { autoComplete.ResultsDiv.classList.add("hidden"); }, 100);
//        });
//        input.click(function () {
//            //Need timer to allow for click event to still be capture before results are hidden
//            autoComplete.ResultsDiv.classList.remove("hidden");
//        });
//        input.keyup(function () {
//            if (autoComplete.CurrentText || "" == "") {
//                AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id"));
//            }
//            if (autoComplete.CurrentText != $(this).val()) {
//                autoComplete.CurrentText = $(this).val();
//                if ($(this).val().length > 2) {
//                    AutoComplete.FetchPredictions($(this).val(), autoComplete);
//                } else {
//                    autoComplete.ResultsDiv.classList.add("hidden");
//                }
//            }
//        });
//    }
//    /**
//     * Move the results div do it's under the input it's attached to.
//     * @param inputId
//     * @param resultsDivId
//     */
//    static RefreshPosition(inputId: string, resultsDivId: string) {
//        let item = $('#' + inputId);
//        let resultsDiv = $('#' + resultsDivId);
//        if (item.length > 0 && resultsDiv.length > 0) {
//            var offset = item.offset();
//            if (offset != null) {
//                var height = item.outerHeight();
//                var width = item.outerWidth();
//                var top = offset.top + height + "px";
//                var left = offset.left + "px";
//                resultsDiv.css({
//                    'position': 'absolute',
//                    'left': left,
//                    'top': top,
//                    'width': width
//                });
//            }
//        }
//    }
//    /**
//     * Created the HTML Div that will hold the autocomplte results.
//     * @param inputId
//     */
//    static CreateResultsDiv(inputId: string): HTMLDivElement {
//        let ResultsElement: HTMLDivElement = document.createElement('div');
//        ResultsElement.className = "autoCompleteCon hidden";
//        ResultsElement.id = "AutoCompleteCon-" + inputId;
//        return ResultsElement;
//    }
//    /**
//     * Will return results from the cache and remove any expired items.
//     */
//    static FetchCachedResultsSet(cacheKey: string): Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> {
//        let returnValue: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = {};
//        let valueFromCache: Object = AutoComplete.Cache.get(cacheKey);
//        let values = <Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>>>(valueFromCache || {});
//        returnValue = AutoComplete.RemoveExpiredEntries(cacheKey, values);
//        return returnValue;
//    }
//    /**
//     * Google only allows caching up to 30 days, this will remove any entries older than that.
//     * @param cacheKey
//     * @param results
//     */
//    static RemoveExpiredEntries(cacheKey: string, results: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>>): Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> {
//        let returnValue: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = {};
//        let itemsRemoved: number = 0;
//        var key;
//        for (key in results) if (results.hasOwnProperty(key) && results[key] != null) {
//            let timestamp: number = results[key].timestamp || 0;
//            if (AutoComplete.isOlderThan(timestamp, 30) == false) {
//                returnValue[key] = results[key];
//            } else {
//                itemsRemoved++;
//            }
//        }
//        if (itemsRemoved > 0) {
//            Logging.Debug(itemsRemoved.toString() + " item have expired and been deleted from the cache");
//            AutoComplete.Cache.set(cacheKey, returnValue);
//            //LocalStorage.saveObject(cacheKey, returnValue);
//        }
//        return returnValue;
//    }
//    static isOlderThan(timestamp: number, days: number = 30) { //TODO: move into TimestampedItem?
//        var XDaysAgo = new Date().getTime() - (days * 24 * 60 * 60 * 1000)
//        return timestamp < XDaysAgo;
//    }
//    ///**
//    // * Fetched the results (checks cache) and displays them.
//    // * @param query Search string
//    // * @param autoComplete AutoComplete object
//    // */
//    //static FetchGooglePredictions(query: string, autoComplete: AutoComplete) {
//    //    let resultsFromCache: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = AutoComplete.FetchCachedResultsSet(autoComplete.CacheKey);
//    //    let resultFromCache: StorageItems.TimestampedItem<Array<IAutoCompleteEntry>> = resultsFromCache[query.toLowerCase()];
//    //    if (resultFromCache != null) {
//    //        Logging.Debug("Showing cached results for '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//    //        AutoComplete.DisplayGoogleSuggestions(resultFromCache.value, google.maps.places.PlacesServiceStatus.OK, autoComplete, true);
//    //    } else {
//    //        Logging.Debug("Looking up '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//    //        AutoComplete.Service.getPlacePredictions({ input: autoComplete.TextInput.value, componentRestrictions: { country: "CA" }, types: ['geocode'] },
//    //            (predictions: Array<google.maps.places.AutocompletePrediction>, status: google.maps.places.PlacesServiceStatus) => {
//    //                AutoComplete.DisplayGoogleSuggestions(AutoCompleteEntry.createArrayFromGoogleResults(predictions), status, autoComplete, false);
//    //            });
//    //    }
//    //}
//    /**
//     * Fetched the results (checks cache) and displays them.
//     * @param query Search string
//     * @param autoComplete AutoComplete object
//     */
//    static FetchPredictions(query: string, autoComplete: AutoComplete) {
//        let resultsFromCache: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = AutoComplete.FetchCachedResultsSet(autoComplete.CacheKey);
//        let resultFromCache: StorageItems.TimestampedItem<Array<IAutoCompleteEntry>> = resultsFromCache[query.toLowerCase()];
//        if (resultFromCache != null) {
//            Logging.Debug("Showing cached results for '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//            AutoComplete.DisplaySuggestions(resultFromCache.value, autoComplete, true);
//        } else {
//            Logging.Debug("Looking up '" + autoComplete.TextInput.value + "'", LogType.AutoComplete);
//        }
//    }
//    /**
//     * Stored the results of the autocomplete query into a cache.
//     * @param cacheKey Key to use for the cache
//     * @param query Search string associated with the results
//     * @param results Results to be cached
//     * @param maxResults Max result sets to be held in the cache
//     */
//    static StorePredictions(cacheKey: string, query: string, results: Array<IAutoCompleteEntry>, maxResults: number) {
//        let resultsSet: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = AutoComplete.FetchCachedResultsSet(cacheKey);
//        Logging.Debug("Caching results for '" + query + "'", LogType.AutoComplete);
//        if (Object.keys(resultsSet).length > maxResults) {
//            Logging.Debug("Deleting oldest result: " + Object.keys(resultsSet)[0], LogType.AutoComplete);
//            delete resultsSet[Object.keys(resultsSet)[0]];
//        }
//        resultsSet[query.toLowerCase()] = new StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>(results);
//        LocalStorage.saveObject(cacheKey, resultsSet);
//    }
//    /**
//  * Stored the results of the autocomplete query into a cache.
//  * @param cacheKey Key to use for the cache
//  * @param query Search string associated with the results
//  * @param results Results to be cached
//  * @param maxResults Max result sets to be held in the cache
//  */
//    static StorePrediction(cacheKey: string, query: string, results: Array<IAutoCompleteEntry>, maxResults: number) {
//        let resultsSet: Lookup<StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>> = AutoComplete.FetchCachedResultsSet(cacheKey);
//        Logging.Debug("Caching results for '" + query + "'", LogType.AutoComplete);
//        if (Object.keys(resultsSet).length > maxResults) {
//            Logging.Debug("Deleting oldest result: " + Object.keys(resultsSet)[0], LogType.AutoComplete);
//            delete resultsSet[Object.keys(resultsSet)[0]];
//        }
//        resultsSet[query.toLowerCase()] = new StorageItems.TimestampedItem<Array<IAutoCompleteEntry>>(results);
//        LocalStorage.saveObject(cacheKey, resultsSet);
//    }
//    ///**
//    // * Shows the latest rusults in the results div.
//    // * @param predictions
//    // * @param status
//    // * @param _this
//    // * @param predictionsFromCache
//    // */
//    //static DisplayGoogleSuggestions(predictions: Array<IAutoCompleteEntry>, status: google.maps.places.PlacesServiceStatus, _this: AutoComplete, predictionsFromCache: boolean) {
//    //    if (status != google.maps.places.PlacesServiceStatus.OK) {
//    //        for (var i = 0; i < _this.ResultsDiv.children.length; i++) {
//    //            _this.ResultsDiv.children[i].remove();
//    //        }
//    //    } else {
//    //        let entries: Array<IAutoCompleteEntry> = [];
//    //        for (var i = predictions.length; i < _this.ResultsDiv.children.length; i++) {
//    //            _this.ResultsDiv.children[i].remove();    
//    //        }
//    //        for (var i = 0; i < predictions.length; i++) {
//    //            let item: HTMLElement = AutoComplete.CreatePredictionElement(entries[i], _this, () => { if (predictionsFromCache == false) { AutoComplete.StorePredictions(_this.CacheKey, _this.TextInput.value, entries, _this.MaxCachedResultSets); } });
//    //            if (_this.ResultsDiv.children.length > i) {
//    //                _this.ResultsDiv.replaceChild(item, _this.ResultsDiv.children[i]);
//    //            } else {
//    //                _this.ResultsDiv.appendChild(item);
//    //            }
//    //        }
//    //        let resultsDiv: JQuery = $('#' + _this.ResultsDiv.getAttribute('id'));
//    //        if (resultsDiv.hasClass('hidden')) {
//    //            resultsDiv.removeClass("hidden");
//    //        }
//    //    }
//    //}
//    /**
//     * Shows the latest rusults in the results div.
//     * @param predictions
//     * @param status
//     * @param _this
//     * @param predictionsFromCache
//     */
//    static DisplaySuggestions(predictions: Array<IAutoCompleteEntry>, _this: AutoComplete, predictionsFromCache: boolean) {
//        for (var i = predictions.length; i < _this.ResultsDiv.children.length; i++) {
//            _this.ResultsDiv.children[i].remove();
//        }
//        for (var i = 0; i < predictions.length; i++) {
//            let item: HTMLElement = AutoComplete.CreatePredictionElement(predictions[i], _this, () => { if (predictionsFromCache == false) { AutoComplete.StorePredictions(_this.CacheKey, _this.TextInput.value, predictions, _this.MaxCachedResultSets); } });
//            if (_this.ResultsDiv.children.length > i) {
//                _this.ResultsDiv.replaceChild(item, _this.ResultsDiv.children[i]);
//            } else {
//                _this.ResultsDiv.appendChild(item);
//            }
//        }
//        let resultsDiv: JQuery = $('#' + _this.ResultsDiv.getAttribute('id'));
//        if (resultsDiv.hasClass('hidden')) {
//            resultsDiv.removeClass("hidden");
//        }
//    }
//    /**
//     * Created the HTMLElement for each autocomplete result entry
//     * @param prediction
//     * @param field
//     * @param itemClickedHandler
//     */
//    static CreatePredictionElement(
//        prediction: IAutoCompleteEntry,
//        field: AutoComplete,
//        itemClickedHandler: () => any)
//        : HTMLElement {
//        let _this = this;
//        let returnValue: HTMLElement;
//        returnValue = document.createElement('span');
//        returnValue.className = "autoCompleteItem";
//        var itemIcon = document.createElement('span');
//        itemIcon.className = "autoCompleteIcon";
//        var itemText = document.createElement('span');
//        itemText.className = "autoCompleteText";
//        itemText.innerText = prediction.Text;
//        returnValue.appendChild(itemIcon);
//        returnValue.appendChild(itemText);
//        returnValue.onclick = function () {
//            itemClickedHandler();
//            $('#' + field.InputId).val(prediction.Text);
//            field.ResultsDiv.classList.add("hidden");//$('#AutoCompleteCon-' + _this.InputId)
//            field.ItemClickedHandler("");
//        }
//        return returnValue;
//    }
//}
//# sourceMappingURL=AutoComplete-Google.js.map;
var AutocompleteResultsCallbackArgs = /** @class */ (function () {
    function AutocompleteResultsCallbackArgs() {
    }
    return AutocompleteResultsCallbackArgs;
}());
/**
 * Class to create google places autocomplete results for a text input field.
 */
var AutoComplete = /** @class */ (function () {
    function AutoComplete(id, cacheKey, itemClickHandler, maxResultsToDisplay, controlParent, forcedZIndex) {
        this.CurrentText = "";
        this.CurrentItems = [];
        this.VerticalOffset = 0;
        this.WidthPadding = 0;
        this.NoLocationAutoCompletePrefix = "";
        this.UserLocation = new LocalStorage("UserLocation", "0", 2);
        this.MaxResultsToDisplay = maxResultsToDisplay;
        this.InputId = id;
        this.ItemClickedHandler = itemClickHandler;
        this.TextInput = document.getElementById(id);
        this.CacheKey = cacheKey;
        this.ResultsDiv = AutoComplete.CreateResultsDiv(id, forcedZIndex);
        if (controlParent == null) {
            document.body.appendChild(this.ResultsDiv);
        }
        else {
            controlParent.append(this.ResultsDiv);
        }
        AutoComplete.AddEventHandlers(this);
        AutoComplete.init();
    }
    AutoComplete.init = function () {
        if (AutoComplete.Cache == null) {
            AutoComplete.Cache = new Caching.LocalStorageCache("AutoComplete");
            AutoComplete.CacheKey = LocalStorage.AutoComplete.getKey();
        }
    };
    AutoComplete.BlurEvent = function (autoComplete, input) {
        window.clearTimeout(autoComplete.hideTimer);
        autoComplete.hideTimer = window.setTimeout(function () {
            if ($('.autoCompleteItem').is(':focus') == false && input.is(':focus') == false) {
                autoComplete.ResultsDiv.classList.add("hidden");
                autoComplete.ResultsApiListingsHeader.classList.add("hidden");
                autoComplete.ResultsApiListingsDiv.innerHTML = "";
                autoComplete.ResultsApiLocationsHeader.classList.add("hidden");
                autoComplete.ResultsApiLocationsDiv.innerHTML = "";
            }
        }, 100);
    };
    /**
     * Adds the event handlers for the HTML results
     * @param autoComplete
     */
    AutoComplete.AddEventHandlers = function (autoComplete) {
        var input = $('#' + autoComplete.InputId);
        $(window).on('resize', function () { AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id"), autoComplete.VerticalOffset, autoComplete.WidthPadding); });
        autoComplete.ResultsResumeLastCon = document.getElementById("AutoCompleteResumeLastCon");
        autoComplete.ResultsSuggestionsHeader = document.getElementById("AutoCompleteSuggestionsHeader-" + autoComplete.InputId);
        autoComplete.ResultsSuggestionsDiv = document.getElementById("AutoCompleteSuggestionsCon-" + autoComplete.InputId);
        autoComplete.ResultsApiDiv = document.getElementById("AutoCompleteApiCon-" + autoComplete.InputId);
        autoComplete.ResultsApiLocationsHeader = document.getElementById("AutoCompleteApiLocationsHeader-" + autoComplete.InputId);
        autoComplete.ResultsApiLocationsDiv = document.getElementById("AutoCompleteApiLocations-" + autoComplete.InputId);
        autoComplete.ResultsApiListingsHeader = document.getElementById("AutoCompleteApiListingsHeader-" + autoComplete.InputId);
        autoComplete.ResultsApiListingsDiv = document.getElementById("AutoCompleteApiListings-" + autoComplete.InputId);
        var waitMilliseconds = 200;
        var func = AutoComplete.FetchResultsFromAPI;
        var debouncedSearch = Utilities.debounce(func, waitMilliseconds, { isImmediate: false });
        //const immediateSearch = Utilities.debounce(func, 0, { isImmediate: true });
        input.blur(function (e) {
            if ((e === null || e === void 0 ? void 0 : e.target) !== document.activeElement) {
                //Need timer to allow for click event to still be capture before results are hidden
                AutoComplete.BlurEvent(autoComplete, input);
            }
        });
        var showResults = function (element) {
            var results = AutoComplete.FetchResults($(element).val(), autoComplete);
            if (results != null && results.length > 0) {
                AutoComplete.DisplaySuggestions(results, autoComplete);
                AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id"), autoComplete.VerticalOffset, autoComplete.WidthPadding);
            }
        };
        input.focus(function () {
            if (autoComplete.ResultsDiv.classList.contains("hidden")) {
                showResults(this);
                //immediateSearch($(this).val(), autoComplete);
                debouncedSearch($(this).val(), autoComplete);
            }
        });
        input.click(function () {
            if (autoComplete.ResultsDiv.classList.contains("hidden")) {
                showResults(this);
                //immediateSearch($(this).val(), autoComplete);
                debouncedSearch($(this).val(), autoComplete);
            }
        });
        input.keyup(function (e) {
            if (e.keyCode == 40 && e.ctrlKey == false) { //arrowDown
                if ($(autoComplete.ResultsDiv).find('.autoCompleteItem').length > 0) {
                    $(autoComplete.ResultsDiv).find('.autoCompleteItem')[0].focus();
                    return;
                }
            }
            if (autoComplete.CurrentText || "" == "") {
                AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id"), autoComplete.VerticalOffset, autoComplete.WidthPadding);
            }
            if (autoComplete.CurrentText != $(this).val()) {
                autoComplete.CurrentText = $(this).val();
                //if ($(this).val().length > 2) 
                debouncedSearch($(this).val(), autoComplete);
                //immediateSearch($(this).val(), autoComplete);
                var results = AutoComplete.FetchResults($(this).val(), autoComplete);
                if (results != null && results.length > 0) {
                    //Logging.Debug("Showing cached results for '" + $(this).val() + "'", LogType.AutoComplete);
                    AutoComplete.DisplaySuggestions(results, autoComplete);
                }
                else {
                    if (autoComplete.ResultsApiListingsDiv.innerHTML == "" && autoComplete.ResultsApiLocationsDiv.innerHTML == "") {
                        autoComplete.ResultsDiv.classList.add("hidden");
                    }
                }
            }
        });
    };
    /**
     * Move the results div do it's under the input it's attached to.
     * @param inputId
     * @param resultsDivId
     */
    AutoComplete.RefreshPosition = function (inputId, resultsDivId, verticalOffset, widthPadding) {
        if (verticalOffset === void 0) { verticalOffset = 0; }
        if (widthPadding === void 0) { widthPadding = 0; }
        var input = $('#' + inputId);
        var resultsDiv = $('#' + resultsDivId);
        if (input.length > 0 && resultsDiv.length > 0) {
            var offset = input.offset();
            if (offset != null) {
                var height = input.height();
                var width = input.width() + widthPadding;
                var top;
                //if ($('body').css("position") == "fixed") { //Not needed anymore? Causes issues on mobile when map filters showing
                //    top = (height + parseInt(input.css('marginBottom'), 10) + parseInt(input.css('paddingBottom'), 10) + 10 + verticalOffset) + "px";
                //} else {
                top = (offset.top + height + parseInt(input.css('marginBottom'), 10) + parseInt(input.css('paddingBottom'), 10)) + verticalOffset + "px";
                //}                
                var left = (offset.left + parseInt(input.css('marginLeft'), 10) + parseInt(input.css('paddingLeft'), 10)) + "px";
                //Changed from absolute to fixed to solve issue with mobile when filters are open (and body switched to fixed)
                if (ApplicationState.IsMobileDevice) {
                    resultsDiv.css({
                        'position': 'absolute',
                        'left': left,
                        'top': top,
                        'width': width
                    });
                }
                else {
                    resultsDiv.css({
                        'position': 'absolute',
                        'left': left,
                        'top': top,
                        'min-width': width
                    });
                }
            }
        }
    };
    /**
     * Created the HTML Div that will hold the autocomplte results.
     * @param inputId
     */
    AutoComplete.CreateResultsDiv = function (inputId, forcedZIndex) {
        var ResultsElement = document.createElement('div');
        var ResultsSuggestionsHeader = document.createElement('div');
        var ResultsSuggestionsElement = document.createElement('div');
        var ResultsResumeLastElement = document.createElement('div');
        var ResultsAPIElement = document.createElement('div');
        var ResultsAPILocationsHeader = document.createElement('div');
        var ResultsAPILocations = document.createElement('div');
        var ResultsAPIListingsHeader = document.createElement('div');
        var ResultsAPIListings = document.createElement('div');
        if (forcedZIndex) {
            ResultsElement.style.zIndex = forcedZIndex;
            ResultsAPIElement.style.zIndex = forcedZIndex;
            ResultsSuggestionsElement.style.zIndex = forcedZIndex;
            ResultsResumeLastElement.style.zIndex = forcedZIndex;
        }
        ResultsElement.className = "autoCompleteCon hidden";
        ResultsElement.id = "AutoCompleteCon-" + inputId;
        ResultsSuggestionsHeader.id = "AutoCompleteSuggestionsHeader-" + inputId;
        ResultsSuggestionsHeader.className = "autoCompleteSuggestionsHeader autoCompleteHeader hidden";
        ResultsSuggestionsHeader.innerHTML = "<span class='autoCompleteIcon'><img style='height:18px; width:18px;' src='/images/common/icons/svg/history-green.svg' /></span><span class='autoCompleteText'>" + Translation.get("HistoryAutocomplete") + "</span>";
        ResultsSuggestionsElement.className = 'autoCompleteSuggestionsCon';
        ResultsSuggestionsElement.id = "AutoCompleteSuggestionsCon-" + inputId;
        ResultsResumeLastElement.className = 'autoCompleteResumeLastCon';
        ResultsResumeLastElement.id = 'AutoCompleteResumeLastCon';
        ResultsAPIElement.className = "autoCompleteApiCon hidden";
        ResultsAPIElement.id = "AutoCompleteApiCon-" + inputId;
        ResultsElement.append(ResultsResumeLastElement);
        ResultsElement.append(ResultsSuggestionsHeader);
        ResultsElement.append(ResultsSuggestionsElement);
        ResultsElement.append(ResultsAPIElement);
        ResultsElement.append(ResultsAPIElement);
        ResultsAPILocations.className = "autoCompleteApiLocations";
        ResultsAPILocations.id = "AutoCompleteApiLocations-" + inputId;
        ResultsAPIListings.className = "autoCompleteApiListings";
        ResultsAPIListings.id = "AutoCompleteApiListings-" + inputId;
        ResultsAPILocationsHeader.id = "AutoCompleteApiLocationsHeader-" + inputId;
        ResultsAPILocationsHeader.className = "autoCompleteApiLocationsHeader autoCompleteHeader hidden";
        ResultsAPILocationsHeader.innerHTML = "<span class='autoCompleteIcon'><img style='height:18px; width:18px;' src='/images/common/icons/svg/map-grayblue.svg' /></span><span class='autoCompleteText'>" + Translation.get("LocationsAutocomplete") + "</span>";
        ResultsAPIElement.append(ResultsAPILocationsHeader);
        ResultsAPIElement.append(ResultsAPILocations);
        ResultsAPIListingsHeader.id = "AutoCompleteApiListingsHeader-" + inputId;
        ResultsAPIListingsHeader.className = "autoCompleteApiListingsHeader autoCompleteHeader hidden";
        ResultsAPIListingsHeader.innerHTML = "<span class='autoCompleteIcon'><img style='height:18px; width:18px;' src='/images/common/icons/svg/house-gray2.svg' /></span><span class='autoCompleteText'>" + Translation.get("ListingsAutocomplete") + "</span>";
        ResultsAPIElement.append(ResultsAPIListingsHeader);
        ResultsAPIElement.append(ResultsAPIListings);
        return ResultsElement;
    };
    /**
     * Will return results from the cache and remove any expired items.
     */
    AutoComplete.FetchResultsSet = function () {
        var returnValue;
        var valueFromCache = AutoComplete.Cache.get(AutoComplete.CacheKey);
        returnValue = (valueFromCache || {});
        return returnValue;
    };
    /**
     * Fetched the results (checks cache) and displays them.
     * @param query Search string
     * @param autoComplete AutoComplete object
     */
    AutoComplete.FetchResults = function (query, autoComplete) {
        var dataFromCache = AutoComplete.FetchResultsSet();
        var resultsFromCache = dataFromCache[autoComplete.CacheKey];
        var results = [];
        autoComplete.ResultsSuggestionsDiv.innerHTML = "";
        autoComplete.ResultsResumeLastCon.innerHTML = "";
        autoComplete.ResultsSuggestionsHeader.classList.add("hidden");
        var addResumeLastSearch = autoComplete.FixedTopItem && query.trim() == "";
        if (addResumeLastSearch) {
            autoComplete.FixedTopItem.Type = AutoCompleteType.ResumeLast;
            results.push(new StorageItems.TimestampedItem(autoComplete.FixedTopItem, Date.now()));
        }
        if (resultsFromCache != null) {
            for (var i = 0; i < resultsFromCache.length; i++) {
                var areTheSame = query.trim().toLowerCase() == resultsFromCache[i].value.Text.toLowerCase();
                var isBlank = query.trim() == "";
                var containsText = resultsFromCache[i].value.Text.toLowerCase().indexOf(query.toLowerCase()) > -1;
                if (!resultsFromCache[i].value.Icon) {
                    resultsFromCache[i].value.Icon = '/images/common/icons/svg/history-green.svg';
                }
                if (!resultsFromCache[i].value.Type) {
                    resultsFromCache[i].value.Type = AutoCompleteType.Cache;
                }
                if ((isBlank || containsText) && !areTheSame) {
                    results.push(resultsFromCache[i]);
                    if (results.length >= (addResumeLastSearch ? autoComplete.MaxResultsToDisplay + 1 : autoComplete.MaxResultsToDisplay))
                        break;
                }
            }
        }
        return results;
    };
    AutoComplete.FetchResultsFromAPI = function (query, autoComplete) {
        var criteria = new APICriteria.AutocompleteCriteria;
        var enableCaching = true;
        if (query.length >= 3) {
            var callBackArgs_1 = new AutocompleteResultsCallbackArgs();
            callBackArgs_1._this = autoComplete;
            var cultureId_1 = ApplicationState.CultureID;
            var appMode_1 = ApplicationState.CurrentMode;
            var appId = ApplicationConfig.ApplicationID;
            var includeLocations_1 = true;
            if (autoComplete.CurrentAutoCompleteResults && autoComplete.CurrentAutoCompleteResults[0].trim() == autoComplete.CurrentText.trim()) {
                autoComplete.fetchResultsFromAPIHandler(autoComplete.CurrentAutoCompleteResults[1], callBackArgs_1);
                return;
            }
            if (autoComplete.NoLocationAutoCompletePrefix && autoComplete.CurrentText.toLowerCase().indexOf(autoComplete.NoLocationAutoCompletePrefix.toLowerCase()) > -1) {
                includeLocations_1 = false;
            }
            var userLoc = autoComplete.UserLocation.get();
            if (userLoc != null && userLoc != "" && userLoc != "0") {
                var userLocSplit = userLoc.split("/", 2);
                var lat = userLocSplit[0];
                var lon = userLocSplit[1];
                Actions.GetAutocompleteResults({ query: query, includeLocations: includeLocations_1, lat: lat, lon: lon, cultureId: cultureId_1, appMode: appMode_1 }, autoComplete.fetchResultsFromAPIHandler, function (request, textStatus, exception) {
                    Logging.Error("An error with the autocomplete happened: ".concat(exception));
                }, callBackArgs_1);
                //criteria.Query = query;
                //criteria.Latitude = lat;
                //criteria.Longitude = lon;
                //criteria.CultureId = cultureId;
                //criteria.AppMode = appMode;
                //criteria.ApplicationId = appId;
                //APIProxy.autocompleteResults(criteria, autoComplete.fetchResultsFromAPIHandler, callBackArgs, enableCaching, true, "getAutoComplete", null, false);
            }
            else {
                Core.locateUser(function (pos) {
                    var lat = pos.coords.latitude.toString();
                    var lon = pos.coords.longitude.toString();
                    autoComplete.UserLocation.save(lat + "/" + lon);
                    Actions.GetAutocompleteResults({ query: query, includeLocations: includeLocations_1, lat: lat, lon: lon, cultureId: cultureId_1, appMode: appMode_1 }, autoComplete.fetchResultsFromAPIHandler, function (request, textStatus, exception) {
                        Logging.Error("An error with the autocomplete happened: ".concat(exception));
                    }, callBackArgs_1);
                    //criteria.Query = query;
                    //criteria.Latitude = lat;
                    //criteria.Longitude = lon;
                    //criteria.CultureId = cultureId;
                    //criteria.AppMode = appMode;
                    //criteria.ApplicationId = appId;
                    //APIProxy.autocompleteResults(criteria, autoComplete.fetchResultsFromAPIHandler, callBackArgs, enableCaching, true, "getAutoComplete", null, false);
                    return;
                }, function () {
                    var lat = "";
                    var lon = "";
                    Actions.GetAutocompleteResults({ query: query, includeLocations: includeLocations_1, lat: lat, lon: lon, cultureId: cultureId_1, appMode: appMode_1 }, autoComplete.fetchResultsFromAPIHandler, function (request, textStatus, exception) {
                        Logging.Error("An error with the autocomplete happened: ".concat(exception));
                    }, callBackArgs_1);
                    //criteria.Query = query;
                    //criteria.Latitude = "";
                    //criteria.Longitude = "";
                    //criteria.CultureId = cultureId;
                    //criteria.AppMode = appMode;
                    //criteria.ApplicationId = appId;
                    //APIProxy.autocompleteResults(criteria, autoComplete.fetchResultsFromAPIHandler, callBackArgs, enableCaching, true, "getAutoComplete", null, false);
                    return;
                });
            }
        }
        else {
            AutoComplete.hideAllResults(autoComplete);
        }
    };
    AutoComplete.prototype.fetchResultsFromAPIHandler = function (response, callbackArgs) {
        var _a, _b, _c, _d, _e, _f;
        if (response != null) {
            if (response.ErrorCode.Id === 200) {
                callbackArgs._this.CurrentAutoCompleteResults = [callbackArgs._this.CurrentText, response];
                if ((((_a = response === null || response === void 0 ? void 0 : response.ResultsMapBox) === null || _a === void 0 ? void 0 : _a.length) || 0) != 0) { //Results? Remove blocking prefix
                    callbackArgs._this.NoLocationAutoCompletePrefix = "";
                }
                else {
                    if (!((_b = callbackArgs === null || callbackArgs === void 0 ? void 0 : callbackArgs._this) === null || _b === void 0 ? void 0 : _b.NoLocationAutoCompletePrefix) || (((_d = (_c = callbackArgs === null || callbackArgs === void 0 ? void 0 : callbackArgs._this) === null || _c === void 0 ? void 0 : _c.CurrentText) === null || _d === void 0 ? void 0 : _d.toLowerCase().indexOf((_f = (_e = callbackArgs === null || callbackArgs === void 0 ? void 0 : callbackArgs._this) === null || _e === void 0 ? void 0 : _e.NoLocationAutoCompletePrefix) === null || _f === void 0 ? void 0 : _f.toLowerCase())) || 0) != 0) { //No blocking prefix or current text doesn't start with current? Set new blocking prefix.
                        callbackArgs._this.NoLocationAutoCompletePrefix = callbackArgs._this.CurrentText;
                    }
                }
                AutoComplete.LoadResultsFromAPI(response.Results, response.ResultsMapBox, callbackArgs._this);
            }
        }
    };
    AutoComplete.LoadResultsFromAPI = function (results, mapBoxResults, autoComplete) {
        //static LoadResultsFromAPI(results: Array<PublicContracts.AutocompleteResults>, mapBoxResults: PublicContracts.AutocompleteMapBox, autoComplete: AutoComplete) {
        var resultsFromAPI = [];
        if (mapBoxResults != null && mapBoxResults.length > 0) {
            for (var j = 0; j < mapBoxResults.length; j++) {
                var value = {};
                value.Type = AutoCompleteType.Location;
                value.Text = mapBoxResults[j].location;
                value.Icon = '/images/common/icons/svg/map-grayblue.svg';
                var result = new StorageItems.TimestampedItem(value, Date.now());
                resultsFromAPI.push(result);
            }
        }
        //if (mapBoxResults != null && mapBoxResults.features != null && mapBoxResults.features.length > 0) {
        //    for (let j = 0; j < mapBoxResults.features.length; j++) {
        //        if (mapBoxResults.features[j].relevance >= 1) {
        //            const value = {} as IAutoCompleteEntry;
        //            value.Type = AutoCompleteType.Location;
        //            value.Text = (mapBoxResults.features[j].matching_place_name != null ? mapBoxResults.features[j].matching_place_name : mapBoxResults.features[j].place_name);
        //            value.Icon = '/images/common/icons/svg/map-grayblue.svg';
        //            const result = new StorageItems.TimestampedItem<IAutoCompleteEntry>(value, Date.now());
        //            resultsFromAPI.push(result);
        //        }
        //    };
        //}
        if (results != null && results.length > 0) {
            for (var i = 0; i < results.length; i++) {
                var value = {};
                var addlInfo = "";
                value.Type = AutoCompleteType.Listing;
                value.Match = AutoCompleteMatchType.Address;
                if (results[i].isReferenceMatch) {
                    value.Match = AutoCompleteMatchType.Reference;
                    addlInfo = (!!results[i].Address_EN ? " - " : "") + results[i].ReferenceNumber;
                }
                if (results[i].isPostalCodeMatch) {
                    value.Match = AutoCompleteMatchType.PostalCode;
                    addlInfo = ", " + results[i].PostalCode.toUpperCase();
                }
                value.Text = (ApplicationState.CultureID === 1 ? !!results[i].Address_EN ? results[i].Address_EN + ", " : "" : !!results[i].Address_FR ? results[i].Address_FR + ", " : "") + (!!results[i].City ? results[i].City + ", " : "") + results[i].Province + addlInfo;
                value.URL = (ApplicationState.CultureID === 1 ? results[i].RelativeURLEn : results[i].RelativeURLFr);
                //if (results[i].isCommercialProperty) {
                //    value.Icon = '/images/common/icons/svg/commercial-darkgray.svg';
                //} else {
                //    value.Icon = '/images/common/icons/svg/house-gray2.svg';
                //}
                //value.PhotoURL = results[i].PhotoURL;
                var result = new StorageItems.TimestampedItem(value, Date.now());
                resultsFromAPI.push(result);
            }
            ;
        }
        if (resultsFromAPI != null && resultsFromAPI.length > 0) {
            AutoComplete.DisplayAPIResults(resultsFromAPI, autoComplete, true);
            AutoComplete.RefreshPosition(autoComplete.InputId, autoComplete.ResultsDiv.getAttribute("id"), autoComplete.VerticalOffset, autoComplete.WidthPadding);
        }
        else {
            AutoComplete.hideAllResults(autoComplete);
        }
    };
    AutoComplete.DeleteEntry = function (cacheKey, item) {
        var data = AutoComplete.FetchResultsSet();
        var items = data[cacheKey] || [];
        var foundIndex = -1;
        for (var i = 0; i < items.length; i++) {
            if (item.Text.toLowerCase() == items[i].value.Text.toLowerCase()) {
                foundIndex = i;
                break;
            }
        }
        if (foundIndex > -1) {
            Logging.Debug("Found item at index: " + foundIndex + " - removing", LogType.AutoComplete);
            items.splice(foundIndex, 1);
            data[cacheKey] = items;
            AutoComplete.Cache.set(AutoComplete.CacheKey, data);
        }
    };
    /**
     * Stored the results of the autocomplete query into a cache.
     * @param query Search string associated with the results
     * @param results Results to be cached
     * @param maxResults Max result sets to be held in the cache
     */
    AutoComplete.StoreEntry = function (cacheKey, item, maxResults) {
        var data = AutoComplete.FetchResultsSet();
        var items = data[cacheKey] || [];
        item.Text = item.Text.toLowerCase();
        var itemIndex = -1;
        for (var i = 0; i < items.length; i++) {
            if (item.Text.toLowerCase() == items[i].value.Text.toLowerCase()) {
                itemIndex = i;
                break;
            }
        }
        if (itemIndex == -1) {
            if (items.length >= maxResults) {
                Logging.Debug("Deleting oldest result: " + items[items.length - 1].value.Text, LogType.AutoComplete);
                //items = items.splice(-1, 1);
                items.pop();
            }
            items.unshift(new StorageItems.TimestampedItem(item));
            data[cacheKey] = items;
            AutoComplete.Cache.set(AutoComplete.CacheKey, data);
            //LocalStorage.saveObject(cacheKey, data);
        }
        else {
            items[itemIndex].timestamp = new Date().getTime(); //Mark the current existing item as new
            items.sort(function (a, b) { return (a.timestamp < b.timestamp) ? 1 : -1; }); //Move newest to top
            data[cacheKey] = items;
            AutoComplete.Cache.set(AutoComplete.CacheKey, data);
        }
    };
    /**
     * Shows the latest suggestions in the results div.
     * @param predictions
     * @param status
     * @param _this
     */
    AutoComplete.DisplaySuggestions = function (predictions, _this) {
        //for (var i = 0; i < _this.ResultsDiv.children.length; i++) {
        //    _this.ResultsDiv.children[i].remove();
        //}        
        //if (!AutoComplete.AreSuggestionsTheSame(_this.CurrentItems, predictions)) {
        _this.CurrentText = $("#" + _this.InputId).val();
        while (_this.ResultsSuggestionsDiv.firstChild) {
            _this.ResultsSuggestionsDiv.removeChild(_this.ResultsSuggestionsDiv.firstChild);
        }
        while (_this.ResultsResumeLastCon.firstChild) {
            _this.ResultsResumeLastCon.removeChild(_this.ResultsResumeLastCon.firstChild);
        }
        for (var i = 0; i < predictions.length; i++) {
            var item = AutoComplete.CreatePredictionElement(predictions[i].value, _this, predictions[i].value.Type);
            if (predictions[i].value.Type == AutoCompleteType.ResumeLast) {
                _this.ResultsResumeLastCon.appendChild(item);
            }
            else {
                _this.ResultsSuggestionsDiv.appendChild(item);
            }
            $('.autoCompleteItem').unbind("blur").blur(function () {
                AutoComplete.BlurEvent(_this, $('#' + _this.InputId));
            });
        }
        //highlight text
        AutoComplete.HighlightResults(_this.ResultsSuggestionsDiv, _this.CurrentText);
        _this.CurrentItems = predictions;
        //}
        var resultsSuggestionsHeader = $('#' + _this.ResultsSuggestionsHeader.getAttribute('id'));
        if (resultsSuggestionsHeader.hasClass('hidden')) {
            if (predictions.length > 1 || predictions[0].value.Type != AutoCompleteType.ResumeLast) {
                _this.ResultsDiv.classList.remove("hidden");
                resultsSuggestionsHeader.removeClass("hidden");
            }
            else {
                _this.ResultsDiv.classList.add("hidden");
            }
        }
        //_this.ResultsDiv.classList.remove("hidden");
    };
    /**
 * Shows the latest rusults in the results div.
 * @param predictions
 * @param status
 * @param _this
 * @param predictionsFromCache
 */
    AutoComplete.DisplayAPIResults = function (predictions, _this, predictionsFromCache) {
        //for (var i = 0; i < _this.ResultsDiv.children.length; i++) {
        //    _this.ResultsDiv.children[i].remove();
        //}        
        //if (!AutoComplete.AreSuggestionsTheSame(_this.CurrentItems, predictions)) {
        //while (_this.ResultsApiDiv.firstChild) {
        //    _this.ResultsApiDiv.removeChild(_this.ResultsApiDiv.firstChild);
        //}
        _this.CurrentText = $("#" + _this.InputId).val();
        var showLocations = false;
        var showListings = false;
        _this.ResultsApiLocationsDiv.innerHTML = "";
        _this.ResultsApiListingsDiv.innerHTML = "";
        for (var i = 0; i < predictions.length; i++) {
            var item = AutoComplete.CreatePredictionElement(predictions[i].value, _this, predictions[i].value.Type);
            if (predictions[i].value.Type === AutoCompleteType.Location) {
                showLocations = true;
                _this.ResultsApiLocationsDiv.appendChild(item);
            }
            else if (predictions[i].value.Type === AutoCompleteType.Listing) {
                showListings = true;
                _this.ResultsApiListingsDiv.appendChild(item);
            }
            //_this.ResultsApiDiv.appendChild(item);
            $('.autoCompleteItem').unbind("blur").blur(function () {
                AutoComplete.BlurEvent(_this, $('#' + _this.InputId));
            });
        }
        _this.CurrentItems = predictions;
        //}
        _this.ResultsApiDiv.classList.remove("hidden");
        if (showLocations) {
            _this.ResultsApiLocationsHeader.classList.remove("hidden");
            //highlight text
            AutoComplete.HighlightResults(_this.ResultsApiLocationsDiv, _this.CurrentText);
        }
        else {
            _this.ResultsApiLocationsDiv.innerHTML = "";
            _this.ResultsApiLocationsHeader.classList.add("hidden");
        }
        if (showListings) {
            if (ApplicationState.CurrentMode == ApplicationModes.Commercial) {
                _this.ResultsApiListingsHeader.innerHTML = "<span class='autoCompleteIcon'><img style='height:18px; width:18px;' src='/images/common/icons/svg/commercial-darkgray.svg' /></span><span class='autoCompleteText'>" + Translation.get("ListingsAutocomplete") + "</span>";
            }
            else {
                _this.ResultsApiListingsHeader.innerHTML = "<span class='autoCompleteIcon'><img style='height:18px; width:18px;' src='/images/common/icons/svg/house-gray2.svg' /></span><span class='autoCompleteText'>" + Translation.get("ListingsAutocomplete") + "</span>";
            }
            _this.ResultsApiListingsHeader.classList.remove("hidden");
            //highlight text
            AutoComplete.HighlightResults(_this.ResultsApiListingsDiv, _this.CurrentText);
        }
        else {
            _this.ResultsApiListingsDiv.innerHTML = "";
            _this.ResultsApiListingsHeader.classList.add("hidden");
        }
        if (showLocations || showListings) {
            _this.ResultsDiv.classList.remove("hidden");
        }
        else {
            _this.ResultsDiv.classList.add("hidden");
        }
    };
    AutoComplete.HighlightResults = function (resultsDiv, currentText) {
        var searchString = currentText.replace(", ", " ");
        var split = searchString.split(" ", 10);
        for (var j = 0; j < split.length; j++) {
            for (var i = 0; i < resultsDiv.childNodes.length; i++) {
                var oldChild = resultsDiv.childNodes[i];
                var newChild = resultsDiv.childNodes[i];
                newChild.getElementsByClassName("autoCompleteText")[0].innerHTML = Utilities.boldString(oldChild.getElementsByClassName("autoCompleteText")[0].innerHTML, split[j]);
                resultsDiv.replaceChild(newChild, oldChild);
            }
        }
    };
    AutoComplete.AreSuggestionsTheSame = function (list1, list2) {
        if (list1 && list2) {
            if (list1.length == list2.length) {
                for (var i = 0; i < list1.length; i++) {
                    if (list1[i].value.Text != list2[i].value.Text)
                        return false;
                }
                return true;
            }
        }
        return false;
    };
    /**
     * Created the HTMLElement for each autocomplete result entry
     * @param prediction
     * @param field
     * @param itemClickedHandler
     */
    AutoComplete.CreatePredictionElement = function (prediction, field, type) {
        var _this = this;
        var returnValue;
        var fieldDiv = field.ResultsDiv;
        returnValue = document.createElement('a');
        returnValue.className = "autoCompleteItem";
        if (prediction.Type === AutoCompleteType.ResumeLast) {
            returnValue.className = "autoCompleteItem resumeLast";
        }
        var att = document.createAttribute("tabindex");
        att.value = "0";
        returnValue.setAttributeNode(att);
        var itemIcon = document.createElement('span');
        itemIcon.className = "autoCompleteIcon";
        if (prediction.Icon && prediction.Type === AutoCompleteType.ResumeLast)
            itemIcon.innerHTML = "<img style='height:18px; width:18px;' src='" + prediction.Icon + "' />";
        else
            itemIcon.innerText = "";
        var removeIcon = document.createElement('span');
        removeIcon.className = "autoCompleteRemoveIcon";
        if (prediction.Type === AutoCompleteType.Cache) {
            if (ApplicationState.IsMobileDevice)
                removeIcon.innerHTML = "<img src='/images/common/icons/svg/x-gray.svg' alt='' style='height: 17px; width: 17px; vertical-align: middle;'>";
            else
                removeIcon.innerHTML = "<img src='/images/common/icons/svg/x-gray.svg' alt='' style='height: 16px; width: 17px; vertical-align: middle;'>";
        }
        var itemText = document.createElement('span');
        if (type === AutoCompleteType.Cache && prediction.URL) {
            itemText.className = "autoCompleteText link";
            //itemIcon.innerHTML = "<img style='height:18px; width:18px;' src='/images/common/icons/svg/house-gray2.svg' />";
            //itemIcon.innerHTML = "<img style='height:18px; width:18px;' src='" + prediction.Icon + "' /><img style='height:18px; width:18px;' src='/images/common/icons/svg/house-gray2.svg' />";
        }
        else {
            itemText.className = "autoCompleteText";
        }
        //itemText.className = "autoCompleteText";
        itemText.innerText = prediction.Text;
        if (prediction.URL) {
            itemText.setAttribute("href", prediction.URL);
            itemText.className = "autoCompleteText link";
        }
        //var itemPhoto = document.createElement('div');
        //itemPhoto.className = "autoCompletePhoto";
        //itemPhoto.innerHTML = "<img style='height:65px;padding-left:27px;' src='" + prediction.PhotoURL + "' />";
        returnValue.appendChild(itemIcon);
        returnValue.appendChild(itemText);
        if (prediction.Type === AutoCompleteType.Cache) {
            returnValue.appendChild(removeIcon);
        }
        //if (prediction.PhotoURL) {
        //    returnValue.appendChild(itemPhoto);
        //}
        removeIcon.onclick = function () {
            if (prediction.Type === AutoCompleteType.Cache) {
                AutoComplete.DeleteEntry(ApplicationConfig.LocationAutocompleteCacheKey, prediction);
                $(this).parent('.autoCompleteItem').remove();
                var results = AutoComplete.FetchResults($(this).val(), field);
                if (results != null && results.length > 0) {
                    AutoComplete.DisplaySuggestions(results, field);
                }
                else {
                    if (field.ResultsApiListingsDiv.innerHTML == "" && field.ResultsApiLocationsDiv.innerHTML == "") {
                        field.ResultsDiv.classList.add("hidden");
                    }
                }
            }
            field.TextInput.focus();
            return false;
        };
        itemText.onclick =
            itemIcon.onclick = function () {
                if (!prediction.SkipSetTextOnSelect) {
                    $('#' + field.InputId).val(prediction.Text);
                }
                $('#' + field.InputId).focus();
                fieldDiv.classList.add("hidden"); //$('#AutoCompleteCon-' + _this.InputId)
                if (field.ItemClickedHandler != null) {
                    field.ItemClickedHandler(prediction);
                }
                if (prediction.Type === AutoCompleteType.Location || prediction.Type === AutoCompleteType.Cache) {
                    if (prediction.Type === AutoCompleteType.Location) {
                        AutoComplete.StoreEntry(ApplicationConfig.LocationAutocompleteCacheKey, {
                            Text: prediction.Text, Icon: '/images/common/icons/svg/history-green.svg'
                        }, ApplicationConfig.NumAutocompleteResultsToStore);
                    }
                }
                if (prediction.URL) {
                    AutoComplete.StoreEntry(ApplicationConfig.LocationAutocompleteCacheKey, { Text: (prediction.Text == "" ? $('#' + field.InputId).val().trim() : prediction.Text), Icon: '/images/common/icons/svg/history-green.svg', URL: prediction.URL }, ApplicationConfig.NumAutocompleteResultsToStore);
                    window.location.href = prediction.URL;
                }
            };
        $(returnValue).unbind("keydown").keydown(function (e) {
            //console.log('keydown');
            if (e.keyCode == 13) { //enter
                $(this).click();
                //e.preventDefault();
                return false;
            }
            else if (e.keyCode == 40 && e.ctrlKey == false && e.shiftKey == false) { //arrowDown
                var index = $(fieldDiv).find('.autoCompleteItem').index($(this));
                //console.log("index: " + index + " Length: " + $(field.ResultsDiv).find('.autoCompleteItem').length);
                if ($(fieldDiv).find('.autoCompleteItem').length == index + 1) {
                    $(fieldDiv).find('.autoCompleteItem')[0].focus();
                    //console.log("down-next2")
                }
                else {
                    //console.log("down-next: " + (index + 1));
                    $(fieldDiv).find('.autoCompleteItem')[index + 1].focus();
                }
                e.preventDefault();
                return false;
            }
            else if (e.keyCode == 38 && e.ctrlKey == false && e.shiftKey == false) { //arrowUp {
                var index = $(fieldDiv).find('.autoCompleteItem').index($(this));
                if (index == 0) {
                    $('#' + field.InputId).focus();
                }
                else {
                    $(fieldDiv).find('.autoCompleteItem')[index - 1].focus();
                }
                e.preventDefault();
                return false;
            }
        });
        return returnValue;
    };
    AutoComplete.hideAllResults = function (autoComplete) {
        if (autoComplete.ResultsSuggestionsDiv.innerHTML == "") {
            autoComplete.ResultsDiv.classList.add("hidden");
        }
        autoComplete.ResultsApiLocationsDiv.innerHTML = "";
        autoComplete.ResultsApiLocationsHeader.classList.add("hidden");
        autoComplete.ResultsApiListingsDiv.innerHTML = "";
        autoComplete.ResultsApiListingsHeader.classList.add("hidden");
    };
    return AutoComplete;
}());
//# sourceMappingURL=AutoComplete.js.map;
var AutoCompleteKeyword = /** @class */ (function () {
    function AutoCompleteKeyword() {
    }
    Object.defineProperty(AutoCompleteKeyword, "DataLoaded", {
        get: function () {
            return new RealtorEvent("AutoCompleteKeywordDataLoaded");
        },
        enumerable: false,
        configurable: true
    });
    return AutoCompleteKeyword;
}());
//# sourceMappingURL=AutoCompleteKeywordData.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Binding = /** @class */ (function () {
    function Binding() {
    }
    /**
     * Set a controls value and return if the value changed.
     * @param control
     * @param value
     */
    Binding.setControlVal = function (control, value) {
        var valueWasChanged = false;
        if (control.prop('type') == "select-multiple" || control.prop('type') == "select-one") {
            if (ApplicationState.IsMobileDevice == false) {
                if ((control.val() || "") != value) {
                    valueWasChanged = true;
                    DropDown.setSelect2Value(control, value);
                }
            }
            else {
                if (control.val() != null &&
                    control.val().toString() != value.split(',').toString()) {
                    //We want to strip punctuation from keyword searches like Dataprep does for the listing keywords.....
                    if ((control.attr('data-type') || "").toLowerCase() == "keywordsearch") {
                        if (control.val() != null && control.val().toString() != value.split(',').toString()) {
                            value = value.replace(FormValidation.punctuationRegex, " ").replace(/[\s]+/g, " ").trim();
                        }
                    }
                    valueWasChanged = true;
                    control.val(value.split(',')).change();
                }
            }
        }
        else if (control.prop('type') == "checkbox") {
            if ((control.prop("checked") && value != "1") ||
                (control.prop("checked") == false && value != "0" && value != "")) {
                valueWasChanged = true;
                control.prop("checked", value == "1").change();
            }
        }
        else if (control.prop('tagName').toLowerCase() == "table") {
            valueWasChanged = true;
            control.find("[value='" + value + "']").prop("checked", true);
        }
        else if ((control.attr('data-type') || "") == "dayssince" && value != "") { //NumberOfDays                            
            var now = new Date();
            var date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
            date.setDate(date.getDate() - Number(value));
            valueWasChanged = true;
            if (ApplicationState.IsMobileDevice) {
                control.val(date.getFullYear() + "-" + ("0" + (date.getMonth() + 1)).slice(-2) + "-" + ("0" + date.getDate()).slice(-2)); //Throwing error now? -> jquery-1.10.2.min.js?ver=1.0.6837.14475&k=1&lang=en:22 The specified value "09/18/2018" does not conform to the required format, "yyyy-MM-dd".
            }
            else {
                control.val(("0" + (date.getMonth() + 1)).slice(-2) + "/" + ("0" + date.getDate()).slice(-2) + "/" + date.getFullYear());
            }
        }
        else if (control.attr('data-valueclass') != null) {
            var valueClass = control.attr('data-valueclass');
            control.children().removeClass(valueClass);
            control.children('[data-value="' + value + '"]').addClass(valueClass);
        }
        else {
            var currentVal = getValue(control);
            if (currentVal != value) {
                // $(controls[i]).val(decodeURIComponent(hashValues[property])).change();
                valueWasChanged = true;
                control.val(value).change();
            }
        }
        return valueWasChanged;
    };
    Binding.setControlValsFromObjectResetOthers = function (valuesObj, control) {
        Logging.Debug("Binding hash values to controls", LogType.Binding);
        if (control == null) {
            control = $('body');
        }
        for (var j = 0; j < control.length; j++) {
            var controls = $(control[j]).find("[data-hashkey]").addBack("[data-hashkey]");
            for (var i = 0; i < controls.length; i++) {
                var control_1 = $(controls[i]);
                var hashKey = control_1.attr("data-hashkey");
                if (Binding.writeConstraintPasses(control_1, ["visible"], valuesObj)) { //When setting value controls may trigger show/hide, so when setting we can ignore the visible contraint? Fixes isssue with rent min/max non having it's value mantained / set
                    var defaultVal = control_1.attr("data-default");
                    var value = (defaultVal || "");
                    if (valuesObj[hashKey] != null) {
                        value = valuesObj[hashKey];
                    }
                    var valueWasChanged = Binding.setControlVal($(controls[i]), value);
                    if (valueWasChanged) {
                        Logging.Debug("Write new value of '" + value + "' to controls with hashkey of '" + hashKey + "'", LogType.Binding);
                    }
                }
            }
        }
    };
    /**
       * Set's controls values based on the passed querystring (eg. 'param1=val1&param2=val2'), and resets the others.
       * @param control
       */
    Binding.setControlValsFromParamStringResetOthers = function (paramString, control) {
        var paramObject = Utilities.getObjectFromQueryString(paramString);
        Binding.setControlValsFromObjectResetOthers(paramObject, control);
    };
    /**
     * Set's controls values based on the current hash, and resets the others.
     * @param control
     */
    Binding.setControlValsFromHashResetOthers = function (control, hashObject) {
        var hashValues = hashObject || URLHash.getObject();
        Binding.setControlValsFromObjectResetOthers(hashValues, control);
    };
    Binding.setControlValsFromObject = function (values, control) {
        if (control === void 0) { control = null; }
        Logging.Debug("Binding hash values to controls", LogType.Binding);
        for (var property in values) {
            if (values.hasOwnProperty(property)) {
                var controls = void 0;
                if (control != null) {
                    controls = control.find("[data-hashkey='" + property + "']").addBack("[data-hashkey='" + property + "']");
                }
                else {
                    controls = $("[data-hashkey='" + property + "']");
                }
                for (var i = 0; i < controls.length; i++) {
                    if (Binding.writeConstraintPasses($(controls[i]), ["visible"], values)) { //When setting value controls may trigger show/hide, so when setting we can ignore the visible contraint? Fixes isssue with rent min/max non having it's value mantained / set
                        var value = values[property];
                        var valueWasChanged = Binding.setControlVal($(controls[i]), value);
                        if (valueWasChanged) {
                            Logging.Debug("Write '" + value + "' to controls with hashkey of '" + property + "'", LogType.Binding);
                        }
                    }
                }
            }
        }
    };
    /** Sets values of controls via the attribute data-hashkey and the current url's hash*/
    Binding.setControlValsFromHash = function (control) {
        if (control === void 0) { control = null; }
        var hashValues = URLHash.getObject();
        Binding.setControlValsFromObject(hashValues, control);
    };
    /**
     * Checks if the optional html attribute data-binding-constraint-write condition is met - allows for selective binding
     * @param element
     * @param contraintsToIgnore
     */
    Binding.writeConstraintPasses = function (element, contraintsToIgnore, criteriaObject) {
        if (contraintsToIgnore === void 0) { contraintsToIgnore = []; }
        var returnValue = true;
        var contraints = WriteConstraint.getConstraints(element, contraintsToIgnore);
        for (var i = 0; i < contraints.length; i++) {
            if (contraints[i].passes(criteriaObject) == false) {
                Logging.Debug('Write constaint failed: ' + contraints[i].toString(), LogType.Binding);
                returnValue = false;
                break;
            }
        }
        return returnValue;
    };
    /**
     * Checks if the optional html attribute data-binding-constraint condition is met - allows for selective binding
     * @param element
     * @param contraintsToIgnore
     */
    Binding.readConstraintPasses = function (element, contraintsToIgnore) {
        if (contraintsToIgnore === void 0) { contraintsToIgnore = []; }
        var returnValue = true;
        var contraints = ReadConstraint.getConstraints(element, contraintsToIgnore);
        for (var i = 0; i < contraintsToIgnore.length; i++) {
            if (contraints[i].passes() == false) {
                Logging.Debug('Read constaint failed: ' + contraints[i].toString(), LogType.Binding);
                returnValue = false;
                break;
            }
        }
        return returnValue;
    };
    /** Sets current url hash to controls with data-hashkey in the container id passed in*/
    Binding.setHashFromControls = function (containerIds, otherParams, includeInBackButtonHistory) {
        if (otherParams === void 0) { otherParams = null; }
        if (includeInBackButtonHistory === void 0) { includeInBackButtonHistory = true; }
        Logging.Debug("Updating hash via controls", LogType.Binding);
        //if (includeInBackButtonHistory) {
        //    history.pushState("", document.title, window.location.pathname); //clear existing hash
        //}
        for (var _i = 0, containerIds_1 = containerIds; _i < containerIds_1.length; _i++) {
            var containerId = containerIds_1[_i];
            $("#" + containerId).find("[data-hashkey]").each(function (index, elem) {
                var control = $(elem);
                var isWriteOnly = (control.attr("data-hash-writeonly") || "").toLowerCase() == "true";
                if (isWriteOnly == false) {
                    if ($(elem).is(":visible")) {
                        var value = '';
                        var key = control.attr('data-hashkey');
                        if (control.prop('type') == "checkbox") {
                            if ($(elem).is(":checked")) {
                                value = "1";
                            }
                        }
                        else if (control.prop('type') == "select-multiple") {
                            value = (control.val() || []).join(',');
                        }
                        else {
                            value = control.val();
                        }
                        var valueIsNotBlank = (value || '') != '';
                        var valueIsInHash = URLHash.get(key, '') != '';
                        if (value == ' ') {
                            value = '';
                        }
                        ;
                        if (valueIsNotBlank && Binding.readConstraintPasses(control)) {
                            URLHash.setWithNoBackButton(key, value);
                        }
                        else if (valueIsInHash) {
                            URLHash.remove(key, true);
                        }
                    }
                }
            });
        }
        if (otherParams != null) {
            for (var property in otherParams) {
                if (otherParams.hasOwnProperty(property)) {
                    URLHash.setWithNoBackButton(property, otherParams[property]);
                }
            }
        }
        history.replaceState({ id: MasterPages.Phone.smoothStateElementID, title: document.title }, document.title, window.location.href); //Fixes issue with smoothState back button - same as done for map page
    };
    return Binding;
}());
var Constraint = /** @class */ (function () {
    /**
   *
   * @param attribute {Parameter}={value} Eg. "SearchType=Office"
   */
    function Constraint(element, attribute) {
        this.element = null;
        this.parameter = "";
        this.value = "";
        var parts = attribute.split("=");
        this.parameter = parts[0];
        this.value = parts[1];
        this.element = element;
    }
    Constraint.prototype.toString = function () {
        return this.parameter + "=" + this.value + " (" + this.element.attr("id") + ")";
    };
    Constraint.removeIgnoredConstraints = function (constraints, contraintsToIgnore) {
        if (contraintsToIgnore === void 0) { contraintsToIgnore = []; }
        var returnValue = [];
        for (var i = 0; i < constraints.length; i++) {
            if (Utilities.indexOfValue(constraints[i].parameter, contraintsToIgnore) == -1) {
                returnValue.push(constraints[i]);
            }
        }
        return returnValue;
    };
    return Constraint;
}());
/**
 * Generally called from setControlValsFromHash - checks current URL hash for the constaint.
 */
var WriteConstraint = /** @class */ (function (_super) {
    __extends(WriteConstraint, _super);
    function WriteConstraint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WriteConstraint.prototype.passes = function (criteriaObject) {
        var returnValue = true;
        if (this.parameter.toLowerCase() == "visible") {
            returnValue = this.element.is(":visible");
        }
        else { //Checked if the current hash contains the constraints key/value
            var hashContainsParameter = false;
            var hashValue = null;
            if (criteriaObject) {
                hashValue = criteriaObject.getProp(this.parameter);
                hashContainsParameter = hashValue != undefined;
            }
            else {
                hashContainsParameter = (location.hash || '').toLowerCase().indexOf(this.parameter.toLowerCase()) > -1;
                hashValue = URLHash.get(this.parameter, "").toLowerCase();
            }
            if (this.value.toLowerCase() == "null") { //If the constaint is for a value to be null, check if it doesn't exist
                returnValue = hashContainsParameter == false;
            }
            else if (hashContainsParameter == false) {
                returnValue = false;
            }
            else if (hashValue != this.value.toLowerCase()) {
                return false;
            }
        }
        if (returnValue == false) {
            Logging.Debug("Write-Constraint failed '" + this.parameter + "=" + this.value + "'", LogType.Binding);
        }
        return returnValue;
    };
    /**
    * Takes a CSV string of constraints and returns list of Contraint objects
    * @param attributes eg. Param=Value,Param2=Value2
    */
    WriteConstraint.createCollection = function (element, attributes) {
        var returnValue = [];
        var parts = attributes.split(",");
        for (var i = 0; i < parts.length; i++) {
            if (parts[i].trim() != "") {
                returnValue.push(new WriteConstraint(element, parts[i]));
            }
        }
        return returnValue;
    };
    WriteConstraint.getConstraints = function (element, contraintsToIgnore) {
        if (contraintsToIgnore === void 0) { contraintsToIgnore = []; }
        var returnValue = [];
        //let contraintAttrib: string = element.attr('data-binding-constraint') || "";
        var attrib = element.attr('data-binding-constraint-write') || element.attr('data-constraint-write') || "";
        var constraints = WriteConstraint.createCollection(element, attrib);
        returnValue = Constraint.removeIgnoredConstraints(constraints, contraintsToIgnore);
        return returnValue;
    };
    return WriteConstraint;
}(Constraint));
/**
 * Generally called from setHashFromControls - checks control values for the constaint.
 */
var ReadConstraint = /** @class */ (function (_super) {
    __extends(ReadConstraint, _super);
    function ReadConstraint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReadConstraint.prototype.passes = function () {
        var returnValue = true;
        if (this.parameter.toLowerCase() == "visible") {
            returnValue = this.element.is(":visible");
        }
        else { //Use hash values
            var hashContainsParameter = (location.hash || '').toLowerCase().indexOf(this.parameter.toLowerCase()) > -1;
            var hashValue = URLHash.get(this.parameter, "").toLowerCase();
            var controlValue = getValue($('#' + this.parameter)).toString().toLowerCase();
            if (this.value.toLowerCase() == "null") {
                returnValue = hashContainsParameter == false;
            }
            else if (hashContainsParameter == false) {
                returnValue = false;
            }
            else if (hashContainsParameter && hashValue != controlValue) {
                returnValue = false;
            }
            else if ($('#' + this.parameter).length > 0 && controlValue != this.value.toLowerCase()) {
                returnValue = false;
            }
        }
        if (returnValue == false) {
            Logging.Debug("Read-Constraint failed '" + this.parameter + "=" + this.value + "'", LogType.Binding);
        }
        return returnValue;
    };
    ReadConstraint.getConstraints = function (element, contraintsToIgnore) {
        if (contraintsToIgnore === void 0) { contraintsToIgnore = []; }
        var returnValue = [];
        //let contraintAttrib: string = element.attr('data-binding-constraint') || "";
        var attrib = element.attr('data-binding-constraint-read') || element.attr('data-constraint-read') || "";
        var constraints = ReadConstraint.createCollection(element, attrib);
        returnValue = Constraint.removeIgnoredConstraints(constraints, contraintsToIgnore);
        return returnValue;
    };
    /**
   * Takes a CSV string of constraints and returns list of Contraint objects
   * @param attributes eg. Param=Value,Param2=Value2
   */
    ReadConstraint.createCollection = function (element, attributes) {
        var returnValue = [];
        var parts = attributes.split(",");
        for (var i = 0; i < parts.length; i++) {
            if (parts[i].trim() != "") {
                returnValue.push(new ReadConstraint(element, parts[i]));
            }
        }
        return returnValue;
    };
    return ReadConstraint;
}(Constraint));
//# sourceMappingURL=Binding.js.map;
var BroadcastChannels;
(function (BroadcastChannels) {
    function AreSupported() {
        return typeof (BroadcastChannel) != "undefined";
    }
    BroadcastChannels.AreSupported = AreSupported;
    /** Wrapper class for the BroadcastChannel API (https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel) to allow for centralization and static typing of data.
     See: https://developers.google.com/web/updates/2016/09/broadcastchannel for more info */
    var RealtorBroadcastChannel = /** @class */ (function () {
        function RealtorBroadcastChannel(name) {
            var _this = this;
            this.listeners = [];
            if (BroadcastChannels.AreSupported()) {
                this.channel = new BroadcastChannel(name);
                this.channel.onmessage = function (data) {
                    for (var i = 0; i < _this.listeners.length; i++) {
                        var listener = _this.listeners[i];
                        Logging.Debug("Listener '" + listener.name + "' recieved data: " + JSON.stringify((data.data || "")), LogType.BroadcastChannel);
                        listener.handler(data.data);
                    }
                };
            }
        }
        /**
         * Sends data to the cross-tab listeners for the given broadcast channel
         * @param data
         */
        RealtorBroadcastChannel.prototype.sendMessage = function (data) {
            if (BroadcastChannels.AreSupported()) {
                Logging.Debug("Sending: " + JSON.stringify((data || "")), LogType.BroadcastChannel);
                this.channel.postMessage(data);
            }
        };
        /**
         * Adds a listener for the cross-tab broadcast channel
         * @param name Name of listener (for tracking/logging).
         * @param listener
         */
        RealtorBroadcastChannel.prototype.addListener = function (name, listener) {
            if (BroadcastChannels.AreSupported()) {
                this.listeners.push({ name: name, handler: listener });
            }
        };
        return RealtorBroadcastChannel;
    }());
    //Broadcast channel to sync open TOS tabs (when you accept one, accept all)
    BroadcastChannels.TOS = new RealtorBroadcastChannel("TOS");
    //Broadcast channel to sync a user signing in accross tabs 
    BroadcastChannels.SignedInUserData = new RealtorBroadcastChannel("SignedInUserData");
    //Broadcast channel to sync a user signing out accross tabs 
    BroadcastChannels.UserSignOut = new RealtorBroadcastChannel("UserSignOut");
    //Broadcast channel to sync user data counts accross tabs
    BroadcastChannels.UserDataCounts = new RealtorBroadcastChannel("UserDataCounts");
})(BroadcastChannels || (BroadcastChannels = {}));
//# sourceMappingURL=BroadcastChannel.js.map;
var Caching;
(function (Caching) {
    var CacheType;
    (function (CacheType) {
        CacheType[CacheType["LocalStorage"] = 0] = "LocalStorage";
        CacheType[CacheType["SessionStorage"] = 1] = "SessionStorage";
        CacheType[CacheType["Memory"] = 2] = "Memory";
    })(CacheType = Caching.CacheType || (Caching.CacheType = {}));
    var LocalStorageCache = /** @class */ (function () {
        function LocalStorageCache(keyPrefix) {
            if (keyPrefix === void 0) { keyPrefix = "localStorageCache"; }
            this.keyPrefix = "";
            this.keyPrefix = keyPrefix;
        }
        LocalStorageCache.prototype.get = function (key) {
            return LocalStorage.getObject(key);
        };
        LocalStorageCache.prototype.set = function (key, value) {
            LocalStorage.saveObject(key, value);
        };
        LocalStorageCache.prototype.remove = function (key) {
            LocalStorage.removeObject(key);
        };
        LocalStorageCache.prototype.clear = function () {
            var keysToRemove = [];
            for (var i = 0; i < localStorage.length; i++) {
                if (localStorage.key(i).indexOf(this.keyPrefix) == 0) {
                    keysToRemove.push(localStorage.key(i));
                }
            }
            for (var i = 0; i < keysToRemove.length; i++) {
                LocalStorage.removeObject(keysToRemove[i]);
            }
        };
        return LocalStorageCache;
    }());
    Caching.LocalStorageCache = LocalStorageCache;
    var SessionStorageCache = /** @class */ (function () {
        function SessionStorageCache(keyPrefix) {
            if (keyPrefix === void 0) { keyPrefix = "sessionStorageCache"; }
            this.keyPrefix = "";
            this.keyPrefix = keyPrefix;
        }
        SessionStorageCache.prototype.get = function (key) {
            return SessionStorage.getObject(key);
        };
        SessionStorageCache.prototype.set = function (key, value) {
            SessionStorage.saveObject(key, value);
        };
        SessionStorageCache.prototype.remove = function (key) {
            SessionStorage.removeObject(key);
        };
        SessionStorageCache.prototype.clear = function () {
            var keysToRemove = [];
            for (var i = 0; i < sessionStorage.length; i++) {
                if (sessionStorage.key(i).indexOf(this.keyPrefix) == 0) {
                    keysToRemove.push(sessionStorage.key(i));
                }
            }
            for (var i = 0; i < keysToRemove.length; i++) {
                SessionStorage.removeObject(keysToRemove[i]);
            }
        };
        return SessionStorageCache;
    }());
    Caching.SessionStorageCache = SessionStorageCache;
    var MemoryCache = /** @class */ (function () {
        function MemoryCache() {
            this.values = {};
        }
        MemoryCache.prototype.get = function (key) {
            return this.values[key] || "";
        };
        MemoryCache.prototype.set = function (key, value) {
            return this.values[key] = value;
        };
        MemoryCache.prototype.remove = function (key) {
            delete this.values[key];
        };
        MemoryCache.prototype.clear = function () {
            this.values = {};
        };
        return MemoryCache;
    }());
    Caching.MemoryCache = MemoryCache;
})(Caching || (Caching = {}));
//# sourceMappingURL=Caching.js.map;
var Compare = /** @class */ (function () {
    function Compare(id, appMode) {
        this.id = id;
        this.appMode = appMode;
    }
    Compare.prototype.exists = function () {
        if (ApplicationState.UserIsSignedIn) {
            return Cookie.CPCompares.containsValue(this.toString());
        }
        else {
            return Cookie.Compares.containsValue(this.toString());
        }
    };
    Compare.prototype.toString = function () {
        var returnValue = this.id + "_" + this.appMode;
        return returnValue;
    };
    Compare.prototype.save = function () {
        var val = this.toString();
        if (ApplicationState.UserIsSignedIn) {
            Cookie.CPCompares.addValue(val);
        }
        else {
            Cookie.Compares.addValue(val);
        }
    };
    Compare.prototype.delete = function () {
        if (ApplicationState.UserIsSignedIn) {
            Cookie.CPCompares.removeValue(this.toString());
        }
        else {
            Cookie.Compares.removeValue(this.toString());
        }
    };
    Compare.FromString = function (stringVal) {
        var returnValue = new Compare();
        var vals = stringVal.split('_');
        returnValue.id = vals[0];
        returnValue.appMode = Number(vals[1]);
        return returnValue;
    };
    Compare.deleteAll = function (appMode) {
        var compares = Compare.getAll(appMode);
        for (var i = 0; i < compares.length; i++) {
            compares[i].delete();
        }
        Gigya.saveConsumerCompares();
    };
    Compare.getAll = function (appMode, userType) {
        var returnValue = [];
        var cookieVal;
        if (ApplicationState.UserIsSignedIn && userType != UserType.Guest) {
            cookieVal = Cookie.CPCompares.get();
        }
        else {
            cookieVal = Cookie.Compares.get();
        }
        if (cookieVal && cookieVal != null && cookieVal != "null") {
            var vals = cookieVal.split("~");
            for (var i = 0; i < vals.length; i++) {
                if (vals[i] != '') {
                    var obj = Compare.FromString(vals[i]);
                    if (obj.appMode == (appMode || obj.appMode)) {
                        returnValue.push(obj);
                    }
                }
            }
        }
        return returnValue;
    };
    Compare.exists = function (id, appMode) {
        var objs = Compare.getAll(appMode);
        for (var i = 0; i < objs.length; i++) {
            if (objs[i].id == id) {
                return true;
            }
        }
        return false;
    };
    Compare.removeCompareById = function (id) {
        var compares = Compare.getAll(ApplicationState.CurrentMode);
        for (var idx = 0; idx < compares.length; idx++) {
            if (compares[idx].id == id) {
                compares[idx].delete();
            }
        }
    };
    Compare.refreshIcons = function (element) {
        element.find('.compareIcon').each(function (i, text) {
            var dataVal = $(this).attr('data-value');
            if (Compare.exists(dataVal, ApplicationState.CurrentMode)) {
                $(this).find('img').attr('src', Compare.selectedIconURL);
            }
            else {
                $(this).find('img').attr('src', Compare.unSelectedIconURL);
            }
        });
    };
    Compare.Add = function (id, appMode, refreshNotifications, refreshGigya) {
        var compareObj = new Compare(id, (appMode || ApplicationState.CurrentMode));
        if (compareObj.exists()) {
            compareObj.delete();
            //showMessage("CompareRemoved");
            $('.compareIcon[data-value="' + id + '"] img').each(function () {
                $(this).removeClass('bounceIn');
                $(this).addClass('bounceOut');
                $(this).attr('src', Compare.unSelectedIconURL);
                $(this).attr('alt', Translation.get('AddToCompare'));
            });
        }
        else {
            if (Compare.getAll(ApplicationState.CurrentMode).length >= ApplicationConfig.CompareLimit) {
                showMessage(Translation.get('CompareLimit'));
            }
            else {
                compareObj.save();
                //showMessage("CompareAdded");
                $('.compareIcon[data-value="' + id + '"] img').each(function () {
                    $(this).removeClass('bounceOut');
                    $(this).addClass('bounceIn');
                    $(this).attr('src', Compare.selectedIconURL);
                    $(this).attr('alt', Translation.get('RemoveFromCompare'));
                });
                Analytics.log(id, 'compare');
            }
        }
        if (refreshGigya != false || refreshGigya == null) {
            Gigya.saveConsumerCompares();
        }
        //if ($("#js-homepage-flag").length > 0) {
        //    var ddlHome = $("#ddl_HomeView option:selected").val();
        //    if (ddlHome === '3') {
        //        makeAjaxCallCompares();
        //    }
        //}
        //RefreshComparesHeader();
    };
    Compare.selectedIconURL = '/images/common/icons/svg/compare.svg';
    Compare.unSelectedIconURL = '/images/common/icons/svg/compare-empty.svg';
    return Compare;
}());
//function AddToCompare(id, appMode, refreshNotifications, refreshGigya) {
//    var compareObj = new RealtorCompare(null, id, (appMode || ApplicationSettings.ApplicationMode));
//    if (compareObj.exists()) {
//        compareObj.delete();
//        $('img.com-' + id).attr('src', '/Presentation/Images/common/icons/compare_unselected2.png');
//        $('img.com-' + id).attr('alt', Message.AddToCompare);
//        $('#compareTool').attr('title', Message.AddToCompare);
//    }
//    else {
//        if (RealtorCompare.getAll(ApplicationSettings.ApplicationMode).length >= GlobalData.REALTOR_COMPARE_LIMIT) {
//            showMessage(Message.CompareLimit);
//            return false;
//        }
//        else {
//            compareObj.save();
//            $('img.com-' + id).attr('src', '/Presentation/Images/common/icons/compare_selected2.png');
//            $('img.com-' + id).attr('alt', Message.RemoveFromCompare);
//            $('#compareTool').attr('title', Message.RemoveFromCompare);
//            logAnalytics(id, 'compare');
//        }
//    }
//    if (refreshGigya != false || refreshGigya == null) {
//        gigyaPlugins.saveCompares();
//    }
//    if ($("#js-homepage-flag").length > 0) {
//        var ddlHome = $("#ddl_HomeView option:selected").val();
//        if (ddlHome === '3') {
//            makeAjaxCallCompares();
//        }
//    }
//    RefreshComparesHeader();
//    //if (refreshNotifications != false) {
//    //    localStorage.setItem(LocalAccountStorageKeys.CompareNotificationsNeedsRefresh, true);
//    //}
//    // //Let gigya update before calling to get data from gigya
//    // setTimeout( function () {
//    //    RefreshNotifications(null, '2');
//    //}, 3000);
//}
//function RefreshComparesHeader() {
//    var compares = RealtorCompare.getAll(ApplicationSettings.ApplicationMode);
//    if (compares && compares.length > 0) {
//        $("#m_hdr_glb_actions_compare span").show();
//        $("#m_hdr_glb_actions_compare img").attr("src", '/Presentation/Images/common/icons/header_compare_full.png');
//        $("#hdrCompareCountVal").html(compares.length);
//        $("#m_hdr_glb_actions_compare").attr("title", Message.ComparesToolTip);
//        $('#m_hdr_glb_actions_compare').qtip({
//            content: Message.ComparesToolTip, position: {
//                my: 'top right',
//                at: 'bottom left',
//                target: $('.m_hdr_glb_actions_compare')
//            }
//        });
//    }
//    else {
//        $("#m_hdr_glb_actions_compare img").attr("src", '/Presentation/Images/common/icons/header_compare_empty.png');
//        $("#hdrCompareCountVal").html('');
//        $("#m_hdr_glb_actions_compare").attr("title", Message.NoComparesToolTip);
//        $('#m_hdr_glb_actions_compare').qtip({
//            content: Message.NoComparesToolTip, position: {
//                my: 'top right',
//                at: 'bottom left',
//                target: $('.m_hdr_glb_actions_compare')
//            }
//        });
//    }
//}
//function RefreshCompareIcons() {
//    //deselect
//    $("img.compareIcon").each(function () {
//        $(this).attr('src', '/Presentation/Images/common/icons/compare_unselected2.png');
//        $(this).attr('title', Message.AddToCompare);
//        $(this).attr('alt', Message.AddToCompare);
//    });
//    RefreshComparesHeader();
//    var compares = RealtorCompare.getAll(ApplicationSettings.ApplicationMode);
//    for (var i = 0; i < compares.length; i++) {
//        var id = compares[i].id;
//        $("img.com-" + id).each(function () {
//            $(this).attr('src', '/Presentation/Images/common/icons/compare_selected2.png');
//            $(this).attr('alt', Message.RemoveFromCompare);
//            $(this).attr('title', Message.RemoveFromCompare);
//        });
//    }
//}
//function getCompareImage(resultId, favState, id) {
//    var imageid = (id || 'com_img_' + resultId);
//    var description = ''
//    if (favState == '_selected') { description = 'alt="' + Message.RemoveFromCompare + '" title="' + Message.RemoveFromCompare + '"'; }
//    else { description = 'alt="' + Message.AddToCompare + '" title="' + Message.AddToCompare + '"'; }
//    return '<img id="' + imageid + '" class="compareIcon com-' + resultId + '" src="/Presentation/Images/common/icons/compare' + favState + '2.png" ' + description + '/>';
//}
//RealtorCompare.getCompareImg = function (resultId, appId) {
//    if (RealtorCompare.exists(resultId, appId)) {
//        return "/Presentation/Images/common/icons/compare_selected2.png";
//    }
//    else {
//        return "/Presentation/Images/common/icons/compare_unselected2.png";
//    }
//}
//# sourceMappingURL=Compares.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SEOLandingPageNeighbourhoodDetailsArgs = /** @class */ (function () {
    function SEOLandingPageNeighbourhoodDetailsArgs() {
        this.geoId = "";
    }
    return SEOLandingPageNeighbourhoodDetailsArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var SEOLandingPageCityDetailsArgs = /** @class */ (function () {
    function SEOLandingPageCityDetailsArgs() {
        this.cityName = "";
    }
    return SEOLandingPageCityDetailsArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var EmailAFriendControlArgs = /** @class */ (function () {
    function EmailAFriendControlArgs() {
        this.listingId = "";
        this.listingIds = "";
        this.referenceNum = "";
        this.pageName = "";
        this.pageURL = "";
        this.mediaSrc = "";
        this.utmCampaign = "";
        this.utmMedium = "";
        this.sharePage = "";
    }
    return EmailAFriendControlArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var EmailRealtorControlArgs = /** @class */ (function () {
    function EmailRealtorControlArgs() {
        this.listingId = "";
        this.organizationId = "";
        this.contactId = "";
        this.referenceNumber = "";
        this.individualId = "";
        this.bookShowing = false;
        this.customDefaultMessage = "";
        this.findTextToHyperlinksInMsg = "";
        this.hyperlinksToTextInMsg = "";
    }
    return EmailRealtorControlArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var ListingCardCarouselArgs = /** @class */ (function () {
    function ListingCardCarouselArgs() {
        this.criteria = {};
    }
    return ListingCardCarouselArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var SmallListingCardListArgs = /** @class */ (function () {
    function SmallListingCardListArgs() {
        this.criteria = {};
    }
    return SmallListingCardListArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var DemographicsArgs = /** @class */ (function () {
    function DemographicsArgs() {
        this.Latitude = "";
        this.Longitude = "";
        this.ProvinceCode = "";
        this.PropertyTypeId = "";
        this.DisseminationArea = "";
    }
    return DemographicsArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var CalculatorArgs = /** @class */ (function () {
    function CalculatorArgs() {
        //public Price: string = "";
        //public City: string = "";
        //public ProvinceCode: string = "";
        this.listingId = "";
    }
    return CalculatorArgs;
}());
var LatestOffersArgs = /** @class */ (function () {
    function LatestOffersArgs() {
        this.listingId = "";
    }
    return LatestOffersArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var NearbyListingsArgs = /** @class */ (function () {
    function NearbyListingsArgs() {
        this.latitude = "";
        this.longitude = "";
        this.numberOfListings = "";
        this.startingRadius = "1500";
        this.appMode = "1";
        this.currency = "CAD";
    }
    return NearbyListingsArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var BoundryInfoArgs = /** @class */ (function () {
    function BoundryInfoArgs() {
        this.geoId = "";
    }
    return BoundryInfoArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var ListingsCarouselArgs = /** @class */ (function () {
    function ListingsCarouselArgs() {
        this.latitude = "";
        this.longitude = "";
        this.organizationId = "";
        this.individualId = "";
        this.numberOfListings = "";
        this.propertyTypeGroupID = ""; //Needs to be string not number since web methods don't support optional params and JSON.stringify will ignore null numbers
        this.showBullets = true;
        this.randomizeResults = false;
        this.radius = "1500";
    }
    return ListingsCarouselArgs;
}());
////Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
//class EmailRealtorControlArgs {
//    public listingId: string = "";
//    public organizationId: string = "";
//    public contactId: string = "";
//    public referenceNumber: string = "";
//    public individualId: string = "";
//    public cancelButtonHandler: Function = null;
//}
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var RealtorCardCarouselArgs = /** @class */ (function () {
    function RealtorCardCarouselArgs() {
        this.organizationId = null;
        this.ShowBullets = true;
        this.ContinuousSlides = false;
    }
    return RealtorCardCarouselArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var OfficeSearchResultsControlArgs = /** @class */ (function () {
    function OfficeSearchResultsControlArgs() {
        this.name = "";
        this.address = "";
        this.city = "";
        this.postalCode = "";
        this.provinceIDs = null;
        this.organizationTypeIDs = null;
        this.sortBy = null;
        this.sortOrder = "";
        this.recordsPerPage = null;
        this.maxRecords = null;
        this.currentPage = null;
        this.organizationId = null;
        //public applicationId: number;
        //public cultureId: number;
    }
    return OfficeSearchResultsControlArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var DisambiguationBoxControlArgs = /** @class */ (function () {
    function DisambiguationBoxControlArgs() {
        this.area = "";
    }
    return DisambiguationBoxControlArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var RealtorSearchResultsControlArgs = /** @class */ (function () {
    function RealtorSearchResultsControlArgs() {
        this.firstName = "";
        this.lastName = "";
        this.addressLine1 = "";
        this.city = "";
        this.companyName = "";
        this.designations = null;
        this.languages = null;
        this.postalCode = "";
        this.provinceIds = null;
        this.specialties = null;
        this.isCCCMember = null;
        this.currentPage = null;
        this.sortBy = 3; //Last name
        this.sortOrder = "A"; //A->Z
        this.organizationId = "";
        this.recordsPerPage = 20;
        this.maxRecords = null;
        this.showOfficeDetails = null;
        //public applicationId: number;
        //public cultureId: number;
    }
    return RealtorSearchResultsControlArgs;
}());
var SmallListingCardCarouselArgs = /** @class */ (function () {
    function SmallListingCardCarouselArgs() {
        this.criteria = {};
        this.totalResults = "";
        this.controlId = "";
    }
    return SmallListingCardCarouselArgs;
}());
var ScreenMoreInfoControlArgs = /** @class */ (function () {
    function ScreenMoreInfoControlArgs() {
        this.firstName = "";
        this.lastName = "";
        this.email = "";
    }
    return ScreenMoreInfoControlArgs;
}());
var ScreenResendEmailVerificationControlArgs = /** @class */ (function () {
    function ScreenResendEmailVerificationControlArgs() {
        this.UID = "";
        this.regToken = "";
        this.email = "";
    }
    return ScreenResendEmailVerificationControlArgs;
}());
var TabHighlighterArgs = /** @class */ (function () {
    function TabHighlighterArgs() {
    }
    return TabHighlighterArgs;
}());
var ScreenGenericControlArgs = /** @class */ (function () {
    function ScreenGenericControlArgs() {
    }
    return ScreenGenericControlArgs;
}());
var SimilarListingsCarouselControlArgs = /** @class */ (function () {
    function SimilarListingsCarouselControlArgs() {
        this.listingIds = [];
    }
    return SimilarListingsCarouselControlArgs;
}());
var LatestPostControlArgs = /** @class */ (function () {
    function LatestPostControlArgs() {
    }
    return LatestPostControlArgs;
}());
var ScreenSignInArgs = /** @class */ (function () {
    function ScreenSignInArgs() {
    }
    return ScreenSignInArgs;
}());
var ScreenChangePasswordArgs = /** @class */ (function () {
    function ScreenChangePasswordArgs() {
        this.pwrtToken = "";
    }
    return ScreenChangePasswordArgs;
}());
var ScreenChangeAccountPasswordArgs = /** @class */ (function () {
    function ScreenChangeAccountPasswordArgs() {
    }
    return ScreenChangeAccountPasswordArgs;
}());
var ScreenUnsubscribeConfirmationArgs = /** @class */ (function () {
    function ScreenUnsubscribeConfirmationArgs() {
        this.showComm = false;
        this.showNotify = false;
        this.hdn_UserId = "";
        this.redirectToIndex = true;
    }
    return ScreenUnsubscribeConfirmationArgs;
}());
var ConfirmationDialogArgs = /** @class */ (function () {
    function ConfirmationDialogArgs() {
        this.ID = "";
        this.TitleTextID = "";
        this.BodyTextID = "";
        this.ButtonPositiveID = "";
        this.ButtonNegativeID = "";
        this.ButtonPositiveTextID = "";
        this.ButtonNegativeTextID = "";
        this.ButtonPositiveOnClick = "";
        this.ButtonNegativeOnClick = "";
        this.CloseOnClick = "";
        this.ButtonNegativeStyle = "";
        this.BeforeOpen = null;
        this.BeforeClose = null;
        this.AfterOpen = null;
        this.AfterClose = null;
        this.OpenTrigger = "";
        this.CloseTrigger = "";
    }
    return ConfirmationDialogArgs;
}());
var ConfirmationDialog2Args = /** @class */ (function () {
    function ConfirmationDialog2Args() {
    }
    return ConfirmationDialog2Args;
}());
var ModalContentArgs = /** @class */ (function () {
    function ModalContentArgs() {
    }
    return ModalContentArgs;
}());
//Ensure the property names here match the args in ~/Services/ControlFetcher.asmx web method
var RankMyAgentCardArgs = /** @class */ (function () {
    function RankMyAgentCardArgs() {
        this.RankMyAgentKey = "";
    }
    return RankMyAgentCardArgs;
}());
var RealSatisfiedCardArgs = /** @class */ (function () {
    function RealSatisfiedCardArgs() {
        this.RealSatisfiedKey = "";
    }
    return RealSatisfiedCardArgs;
}());
var RealtorRatingArgs = /** @class */ (function () {
    function RealtorRatingArgs() {
    }
    return RealtorRatingArgs;
}());
var AddToCalendarControlArgs = /** @class */ (function () {
    function AddToCalendarControlArgs() {
        this.ListingId = "";
        this.ReferenceNumber = "";
        this.EventTypeId = "";
        this.CtrlDescription = "";
        this.Title = "";
        this.Decription = "";
        this.Location = "";
        this.StartDate = "";
        this.EndDate = "";
        this.TimezoneId = "";
        //public TimezoneOffset: string = "";
        //public TimezoneOffsetRegular: string = "";
        //public TimezoneOffsetDaylight: string = "";
    }
    return AddToCalendarControlArgs;
}());
var TooltipMsgControlArgs = /** @class */ (function () {
    function TooltipMsgControlArgs() {
        this.PositiveBtnText = "";
        this.MainTextContent = "";
        this.TitleText = "";
    }
    return TooltipMsgControlArgs;
}());
var LatestOffersTooltipMsgControlArgs = /** @class */ (function (_super) {
    __extends(LatestOffersTooltipMsgControlArgs, _super);
    function LatestOffersTooltipMsgControlArgs() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.SecondaryTextContent = "";
        return _this;
    }
    return LatestOffersTooltipMsgControlArgs;
}(TooltipMsgControlArgs));
var ControlFetcherArgs = /** @class */ (function () {
    /**
     *
     * @param outputWrapperId Output HTML will be wrapped in this ID - only used for when Controls created on the fly via ControlFetcherJS
     * @param idToOutputResults ID of container to output result HTML to
     */
    function ControlFetcherArgs(outputWrapperId, idToOutputResults, handleResults) {
        this.cancelExistingRequestsToOutputId = true; //Cancel any existing control fetcher calls trying to output to the same Id, stops parallel fetches
        this.fetchDelayInMS = 0;
        /** whether the output can be retrived from the cache */
        this.canRetrieveFromCache = true;
        this.cacheResult = false; //ApplicationState.IsMobileDevice ? true : false;
        this.cacheType = Caching.CacheType.SessionStorage;
        /** Property to allow for overriding cache key, othewise based on criteria and method being called **/
        this.cacheKey = "";
        this.removeFromCacheAfterFetch = false; //Eg. Cache result for realtor search, use cached reponse for results page, then remove
        this.resultsHandler = null;
        this.skipWrappingElement = false; //By default we wrap element in a div and appy the outputWrapperId to it. Set this to false to just keep parent coming back and set it's ID.
        this.refreshIconAnimInOutPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" };
        this.scrollToResults = false;
        this.scrollToPadding = 10;
        this.showLoadingAnimation = true;
        this.showLoadingSpinner = false;
        this.updateLinksToUseSmoothState = true;
        this.contentWapperClass = "loadingIn";
        this.idToOutputResults = "";
        this.handleResults = null;
        this.requestContentType = 'application/x-www-form-urlencoded; charset=UTF-8';
        /** function to handle html output */
        this.postCallHandler = null;
        this.timeoutHandler = function (request, error) {
            //if (ApplicationConfig.IsDebugMode == false) {
            //showMessage('Request Timed Out'); //Fires when cancelled too so remove for now
            //}
            if (this.showLoadingAnimation || this.showLoadingSpinner) {
                $('#' + this.idToOutputResults).html("");
            }
        };
        this.errorHandler = function (request, textStatus, exception) {
            //if (ApplicationConfig.IsDebugMode == false) {
            showMessage('Request failed');
            //}
            if (this.showLoadingAnimation || this.showLoadingSpinner) {
                $('#' + this.idToOutputResults).html("");
            }
        };
        this.outputWrapperId = outputWrapperId;
        //Object.assign(this, init);
        this.idToOutputResults = idToOutputResults;
        this.handleResults = handleResults;
    }
    Object.defineProperty(ControlFetcherArgs.prototype, "cache", {
        get: function () {
            if (this.cacheType == Caching.CacheType.SessionStorage) {
                return ControlFetcher.SessionStorageCache;
            }
            else if (this.cacheType == Caching.CacheType.LocalStorage) {
                return ControlFetcher.LocalStorageCache;
            }
            else if (this.cacheType == Caching.CacheType.Memory) {
                return ControlFetcher.MemoryCache;
            }
        },
        enumerable: false,
        configurable: true
    });
    return ControlFetcherArgs;
}());
/** Fetches controls render on the server - Class to wrap the server side ControlFetcher service to load controls via AJAX  */
var ControlFetcher = /** @class */ (function () {
    function ControlFetcher() {
    }
    //static cacheFetchHandler(url: string, args: Object) {
    //    let returnValue: Object = null;
    //    let valFromSession = sessionStorage.getItem(url);
    //    if (valFromSession != null) {
    //        let urlHash: string = Utilities.hash(url).toString();
    //        let argsHash: string = Utilities.hash(JSON.stringify(args)).toString();
    //        let hash: string = urlHash + argsHash;
    //        let actualValue: StorageItems.HashedItem = <StorageItems.HashedItem>JSON.parse(valFromSession);
    //        if (actualValue.hash == hash) {
    //            returnValue = actualValue.value;
    //        }
    //    }
    //    return returnValue;
    //}
    //static cacheSaveHandler(url: string, args: Object, val: Object) {
    //    let urlHash: string = Utilities.hash(url).toString();
    //    let argsHash: string = Utilities.hash(JSON.stringify(args)).toString();
    //    let hash: string = urlHash + argsHash;
    //    let valueToStore: StorageItems.HashedItem = new StorageItems.HashedItem(hash, JSON.stringify(val));
    //    sessionStorage.setItem(url, JSON.stringify(valueToStore));
    //}
    //static cleanupCache(maxAgeInMinutes: number = 5) {
    //    let newCacheValues = {};
    //    if (ControlFetcher.cache != null) {
    //        for (var property in ControlFetcher.cache) {
    //            if (ControlFetcher.cache.hasOwnProperty(property)) {
    //                let val: StorageItems.VersionedItem = <StorageItems.VersionedItem>ControlFetcher.cache.get(property);
    //                let itemDate: Date = new Date(Number(val.version));
    //                var age: number = new Date().valueOf() - itemDate.valueOf();
    //                let ageVal = new Date(age);
    //                if (val != null && ageVal.getMinutes() < maxAgeInMinutes) {
    //                    //newCacheValues[property] = val;
    //                } else {
    //                    Logging.Debug("Removing value (" + property + ") from cache (expires after " + maxAgeInMinutes.toString() + " minutes)", LogType.ControlFetcher);
    //                }
    //            }
    //        }
    //        ControlFetcher.cache = newCacheValues;
    //    }
    //}
    ControlFetcher.getValueFromCache = function (cache, cacheKey) {
        var returnValue = null;
        returnValue = cache.get(cacheKey);
        if ((returnValue || "") != "") {
            var val = returnValue;
            var itemDate = new Date(Number(val.version));
            var age = new Date().valueOf() - itemDate.valueOf();
            var ageVal = new Date(age);
            if (val != null && ageVal.getMinutes() > ControlFetcher.maxAgeInMinutes) {
                Logging.Debug("Removing value (" + cacheKey + ") from cache (expires after " + ControlFetcher.maxAgeInMinutes.toString() + " minutes)", LogType.ControlFetcher);
                cache.remove(cacheKey);
                returnValue = null;
            }
        }
        if ((returnValue || "") != "") {
            returnValue = returnValue.value;
            Logging.Debug("Item fetched from cache: " + returnValue.toString(), LogType.ControlFetcher);
        }
        else {
            Logging.Debug("Cached version not available", LogType.ControlFetcher);
        }
        return returnValue;
    };
    ControlFetcher.setUILoadingState = function (fetchArgs) {
        if (fetchArgs.idToOutputResults != "") {
            $('#' + fetchArgs.idToOutputResults).addClass("loadingOut");
            $('#' + fetchArgs.idToOutputResults).removeClass(fetchArgs.contentWapperClass);
            if (fetchArgs.showLoadingSpinner) {
                $('#' + fetchArgs.idToOutputResults).html('<div class="screen-placeholder"><div class="sk-spinning-circle" style="text-align:center;margin: 0 auto;margin-top:150px;"></div></div>');
            }
            else if (fetchArgs.showLoadingAnimation) {
                if (ApplicationState.CurrentMode == ApplicationModes.Residential) {
                    $('#' + fetchArgs.idToOutputResults).html('<div class="fadeElementIn" style="text-align:center;width: 50%; margin: 0 auto;"><img class="spinner" style=" width: 25vw; max-width: 150px; margin: 40px auto; display: inline-block;" src="/images/common/icons/svg/house-gray.svg" /></div>');
                }
                else {
                    $('#' + fetchArgs.idToOutputResults).html('<div class="fadeElementIn" style="text-align:center;width: 50%; margin: 0 auto;"><img class="spinner" style=" width: 25vw; max-width: 150px; margin: 40px auto; display: inline-block;" src="/images/common/icons/svg/commercial.svg" /></div>');
                }
            }
        }
    };
    ControlFetcher.fetchControl = function (controlName, args, fetchArgs) {
        var cacheKey = null;
        var valueFromCache = null;
        var isLoadingFromCache = false;
        Logging.Debug("Fetching " + controlName, LogType.ControlFetcher);
        if (fetchArgs.cacheKey) {
            cacheKey = fetchArgs.cacheKey;
        }
        else {
            cacheKey = "ControlFetcher_" + controlName + "_" + ApplicationState.CultureID + "_" + ApplicationState.UserIsSignedIn + "_" + JSON.stringify(args, function (key, value) {
                if (value !== null && value !== "")
                    return value;
            });
        }
        if (fetchArgs.canRetrieveFromCache && fetchArgs.cache) {
            //ControlFetcher.cleanupCache();
            valueFromCache = ControlFetcher.getValueFromCache(fetchArgs.cache, cacheKey);
            isLoadingFromCache = (valueFromCache || "") != "";
        }
        if (isLoadingFromCache == false) {
            ControlFetcher.setUILoadingState(fetchArgs);
        }
        var fullURL = ControlFetcher.controlFetchingURL + '/' + controlName;
        var handler = function (response) {
            var hasResults;
            var htmlResponse = "";
            if (response.d.ExceptionDetails !== undefined && response.d.HTML !== undefined) {
                hasResults = response.d.ExceptionDetails != "NoResults";
                htmlResponse = response.d.HTML;
            }
            else {
                hasResults = response.d != "NoResults";
                htmlResponse = response.d;
            }
            if (hasResults) {
                if (fetchArgs.cacheResult && isLoadingFromCache == false && fetchArgs.cache) {
                    fetchArgs.cache.set(cacheKey, new StorageItems.VersionedItem(new Date().getTime().toString(), response));
                }
                if (fetchArgs.resultsHandler) {
                    fetchArgs.resultsHandler(htmlResponse);
                }
                else if (fetchArgs.idToOutputResults != "") {
                    if (isLoadingFromCache) {
                        $('#' + fetchArgs.idToOutputResults).html(htmlResponse);
                    }
                    else {
                        $('#' + fetchArgs.idToOutputResults).removeClass("loadingOut");
                        $('#' + fetchArgs.idToOutputResults).addClass(fetchArgs.contentWapperClass);
                        $('#' + fetchArgs.idToOutputResults).html(htmlResponse);
                        if (fetchArgs.scrollToResults) {
                            setTimeout(function () { ScrollToElement($('#' + fetchArgs.idToOutputResults), fetchArgs.scrollToPadding * -1); }, 400); //delay to allow animations to finish
                        }
                    }
                }
            }
            else {
                if (fetchArgs.idToOutputResults != "") {
                    $('#' + fetchArgs.idToOutputResults).html('');
                }
            }
            if (fetchArgs.idToOutputResults != "") {
                updateLoadedContent($('#' + fetchArgs.idToOutputResults), fetchArgs.updateLinksToUseSmoothState, fetchArgs.refreshIconAnimInOutPref);
            }
            if (fetchArgs.removeFromCacheAfterFetch && fetchArgs.cache) {
                fetchArgs.cache.remove(cacheKey);
            }
            if (fetchArgs.postCallHandler != null) {
                fetchArgs.postCallHandler(response, fetchArgs.postCallArgs);
            }
            if (fetchArgs.handleResults != null) {
                //fetchArgs.handleResults(response.d || response);
                var content = response.hasOwnProperty("d") ? response.d : response;
                fetchArgs.handleResults(content);
            }
        };
        if ((valueFromCache || "") != "") {
            handler(valueFromCache);
        }
        else {
            window.setTimeout(function () {
                var ajaxArgs = new AjaxCallArgs(handler);
                ajaxArgs.contentType = fetchArgs.requestContentType;
                ajaxArgs.errorHandler = fetchArgs.errorHandler;
                ajaxArgs.cancelExistingRequestsInQueue = true;
                if (fetchArgs.cancelExistingRequestsToOutputId) {
                    ajaxArgs.queueName = fetchArgs.idToOutputResults;
                }
                AjaxEngine.POST(fullURL, JSON.stringify(args), ajaxArgs);
            }, fetchArgs.fetchDelayInMS);
        }
    };
    ControlFetcher.fetchCalculator = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetCalculator", args, fetchArgs);
    };
    ControlFetcher.fetchTabHighlighter = function (fetchArgs) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        fetchArgs.cacheType = Caching.CacheType.LocalStorage;
        fetchArgs.cacheResult = true;
        ControlFetcher.fetchControl("GetTabHighlighter", new TabHighlighterArgs(), fetchArgs);
    };
    ControlFetcher.fetchDemographics = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetDemographics", args, fetchArgs);
    };
    ControlFetcher.fetchLatestOffers = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetLatestOffers", args, fetchArgs);
    };
    ControlFetcher.fetchDisambiguationBox = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetDisambiguationBox", args, fetchArgs);
    };
    ControlFetcher.fetchRealtorResults = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetRealtorResults", args, fetchArgs);
    };
    ControlFetcher.fetchOfficeResults = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetOfficeResults", args, fetchArgs);
    };
    ControlFetcher.fetchNearbyListings = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetNearbyListings", args, fetchArgs);
    };
    ControlFetcher.fetchListingCardCarousel = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetListingsCarousel", args, fetchArgs);
    };
    ControlFetcher.fetchRealtorCardCarousel = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetRealtorCardCarousel", args, fetchArgs);
    };
    ControlFetcher.fetchScreenMoreInfo = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenMoreInfo", args, fetchArgs);
    };
    ControlFetcher.fetchScreenResendEmailVerification = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenResendEmailVerification", args, fetchArgs);
    };
    ControlFetcher.fetchScreenMoreAboutYou = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenMoreAboutYou", args, fetchArgs);
    };
    ControlFetcher.fetchScreenCheckYourEmail = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenCheckYourEmail", args, fetchArgs);
    };
    ControlFetcher.fetchScreenRevisedTerms = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenRevisedTerms", args, fetchArgs);
    };
    ControlFetcher.fetchScreenSocialTerms = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenSocialTerms", args, fetchArgs);
    };
    ControlFetcher.fetchScreenLinkAccounts = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenLinkAccounts", args, fetchArgs);
    };
    ControlFetcher.fetchConfirmationDialog = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetConfirmationDialog", args, fetchArgs);
    };
    ControlFetcher.fetchScreenForgotPassword = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenForgotPassword", args, fetchArgs);
    };
    ControlFetcher.fetchScreenChangePassword = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenChangePassword", args, fetchArgs);
    };
    ControlFetcher.fetchScreenChangeAccountPassword = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenChangeAccountPassword", args, fetchArgs);
    };
    ControlFetcher.fetchScreenChangeAccountEmail = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenChangeAccountEmail", args, fetchArgs);
    };
    ControlFetcher.fetchScreenUnsubscribeConfirmation = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenUnsubscribeConfirmation", args, fetchArgs);
    };
    ControlFetcher.fetchSmallListingCardCarousel = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetSmallListingCardCarousel", args, fetchArgs);
    };
    ControlFetcher.fetchSmallListingCardList = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetSmallListingCardList", args, fetchArgs);
    };
    ControlFetcher.fetchTermsOfUse = function (fetchArgs) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetTermsOfUse", null, fetchArgs);
    };
    ControlFetcher.fetchScreenSignIn = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenSignIn", args, fetchArgs);
    };
    ControlFetcher.fetchSaveMoreFavs = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetScreenSaveMoreFavs", args, fetchArgs);
    };
    ControlFetcher.fetchListingCardsCarousel = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetListingCardCarousel", args, fetchArgs);
    };
    ControlFetcher.fetchEmailRealtor = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetEmailRealtorForm", args, fetchArgs);
    };
    ControlFetcher.fetchEmailAFriend = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetEmailAFriendForm", args, fetchArgs);
    };
    ControlFetcher.fetchLatestPostUC = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetLatestPostUC", args, fetchArgs);
    };
    ControlFetcher.fetchBoundryInfo = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetBoundryInfo", args, fetchArgs);
    };
    ControlFetcher.fetchSEOLandingPageCityDetails = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetSEOLandingPageCityDetails", args, fetchArgs);
    };
    ControlFetcher.fetchSEOLandingPageNeighbourhoodDetails = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetSEOLandingPageNeighbourhoodDetails", args, fetchArgs);
    };
    ControlFetcher.fetchRankMyAgentCard = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetRankMyAgentCard", args, fetchArgs);
    };
    ControlFetcher.fetchRealSatisfiedCard = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetRealSatisfiedCard", args, fetchArgs);
    };
    ControlFetcher.fetchRealtorRating = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetRealtorRating", args, fetchArgs);
    };
    ControlFetcher.fetchAddToCalendar = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetAddToCalendar", args, fetchArgs);
    };
    ControlFetcher.fetchCurrencySelector = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetCurrencySelector", args, fetchArgs);
    };
    ControlFetcher.fetchSimilarListingsCarousel = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetSimilarListingsCarousel", args, fetchArgs);
    };
    ControlFetcher.fetchNewNotificationEmailsMessage = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetNotificationEmailsMessage", args, fetchArgs);
    };
    ControlFetcher.fetchLatestOffersToolTipInfo = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetLatestOffersToolTipInfo", args, fetchArgs);
    };
    ControlFetcher.fetchPublicOffersNewMessage = function (fetchArgs, args) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        ControlFetcher.fetchControl("GetPublicOffersNewMessage", args, fetchArgs);
    };
    ControlFetcher.NoResultsResponse = "NoResults";
    ControlFetcher.controlFetchingURL = "/Services/ControlFetcher.asmx";
    //static cache = {};
    ControlFetcher.CachePrefix = "ControlFetcher";
    ControlFetcher.LocalStorageCache = new Caching.LocalStorageCache(ControlFetcher.CachePrefix);
    ControlFetcher.MemoryCache = new Caching.MemoryCache();
    ControlFetcher.SessionStorageCache = new Caching.SessionStorageCache(ControlFetcher.CachePrefix);
    ControlFetcher.maxAgeInMinutes = 5;
    return ControlFetcher;
}());
//# sourceMappingURL=ControlFetcher.js.map;
/**
 * Class to fetch server controls in template mode, and bind them to the passed in JS Model class
 */
var ControlFetcherJS = /** @class */ (function () {
    function ControlFetcherJS() {
    }
    /**
     * Solves issue with parent div not being bound properly.
     * @param element
     */
    ControlFetcherJS.wrapElement = function (element, controlId) {
        var htmlContents = "";
        element.each(function () {
            htmlContents += $(this).wrap("<div></div>")[0].outerHTML || "";
        });
        var returnValue = $("<div id='" + controlId + "' class='JSControlFetcherWrapper'>" + htmlContents + "</div>");
        return returnValue;
    };
    ControlFetcherJS.fetch = function (fetchArgs, model, htmlResultHandler) {
        fetchArgs.requestContentType = 'application/json; charset=UTF-8';
        var handler = function (result) {
            var resultElement = $(result.ControlHTML);
            var TSNameSpace = result.TSControlNameSpace;
            resultElement = ControlFetcherJS.wrapElement(resultElement, fetchArgs.outputWrapperId);
            if (!fetchArgs.skipWrappingElement) {
                resultElement = ControlFetcherJS.wrapElement(resultElement, fetchArgs.outputWrapperId);
            }
            else {
                resultElement.attr("id", fetchArgs.outputWrapperId);
            }
            var filledTemplate = TemplateBinding.render(resultElement, model);
            filledTemplate = TemplateBinding.aggregateScriptContents(filledTemplate);
            fetchArgs.postCallHandler(filledTemplate); //TODO: Hookup data-binding onclick here?
            if ((TSNameSpace || "") == "") {
                throw "Control is missing TSClass attribute on it's class - can't create TS class intance without it";
            }
            var Class = Utilities.stringToFunction(TSNameSpace);
            var instance = new Class(model, fetchArgs.outputWrapperId); //TODO: check for load function
        };
        htmlResultHandler(handler);
    };
    ControlFetcherJS.fetchConfirmationDialog2 = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchConfirmationDialog2);
    };
    ControlFetcherJS.fetchSmallListingCardsCarousel = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchSmallListingCardsCarousel);
    };
    ControlFetcherJS.fetchListingCardsCarousel = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchListingCardsCarousel);
    };
    ControlFetcherJS.fetchRealtorCardsCarousel = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchRealtorCardsCarousel);
    };
    ControlFetcherJS.fetchSmallListingCard = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchSmallListingCard);
    };
    ControlFetcherJS.fetchListingCard = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchListingCard);
    };
    ControlFetcherJS.fetchSavedSearch = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchSavedSearch);
    };
    ControlFetcherJS.fetchSavedSearchForAccount = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchSavedSearchForAccount);
    };
    ControlFetcherJS.fetchRealtorCard = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchRealtorCard);
    };
    ControlFetcherJS.fetchOfficeCard = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchOfficeCard);
    };
    ControlFetcherJS.fetchListingCards = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchListingCards);
    };
    ControlFetcherJS.fetchSmallListingCards = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchSmallListingCards);
    };
    ControlFetcherJS.fetchPagination = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchPagination);
    };
    ControlFetcherJS.fetchModalContent = function (fetchArgs, model) {
        ControlFetcherJS.fetch(fetchArgs, model, TemplateFetcher.fetchModalContent);
    };
    return ControlFetcherJS;
}());
//# sourceMappingURL=ControlFetcherJS.js.map;
var Cookie = /** @class */ (function () {
    function Cookie(name, expiryInDays) {
        this.name = name;
        this.expiryInDays = expiryInDays;
    }
    Cookie.prototype.save = function (val, forcedExpiryInDays, sameSiteMode) {
        if (sameSiteMode === void 0) { sameSiteMode = 'lax'; }
        //var today = new Date()
        //var expiry = new Date().setDate(today.getDate() + this.expiryInDays)
        var isSecure = ApplicationConfig.UseSecureCookies;
        if ((forcedExpiryInDays || this.expiryInDays) && (forcedExpiryInDays || this.expiryInDays) != 0) {
            Cookies.set(this.name, val, { path: '/', expires: Number((forcedExpiryInDays || this.expiryInDays)), sameSite: sameSiteMode, secure: isSecure });
        }
        else {
            Cookies.set(this.name, val, { path: '/', sameSite: sameSiteMode, secure: isSecure });
        }
    };
    Cookie.prototype.saveObject = function (val, forcedExpiryInDays) {
        if ((val || '') != '') {
            var stringVal = JSON.stringify(val);
            this.save(stringVal, forcedExpiryInDays);
        }
    };
    Cookie.prototype.delete = function (sameSiteMode) {
        if (sameSiteMode === void 0) { sameSiteMode = 'lax'; }
        var isSecure = ApplicationConfig.UseSecureCookies;
        Cookies.set(this.name, null, { path: '/', sameSite: sameSiteMode, secure: isSecure });
        Cookies.remove(this.name, { path: '/' });
    };
    Cookie.prototype.get = function (defaultVal) {
        if (defaultVal === void 0) { defaultVal = ''; }
        return Cookies.get(this.name) || defaultVal;
    };
    Cookie.prototype.getObject = function () {
        var val = this.value;
        if ((val || '') != '') {
            return JSON.parse(decodeURIComponent(Cookies.get(this.name)));
        }
        else {
            return {};
        }
    };
    Cookie.prototype.getArray = function () {
        var cookieValue = this.get();
        if (!cookieValue) {
            return [];
        }
        else {
            var vals = cookieValue.split("~");
            var returnValue = [];
            for (var i = 0; i < vals.length; i++) {
                if (vals[i] != '') {
                    returnValue.push(vals[i]);
                }
            }
            return returnValue;
        }
    };
    Cookie.prototype.removeValueByIndex = function (value) {
        var cookieValues = this.getArray();
        cookieValues.splice(value, 1);
        var newValue = cookieValues.join("~");
        if (newValue != '') {
            newValue += "~";
        }
        this.save(newValue);
    };
    Cookie.prototype.addValue = function (value) {
        var cookieValue = this.get('');
        cookieValue += value + "~";
        this.save(cookieValue);
    };
    Cookie.prototype.prependValue = function (value) {
        var cookieValue = (this.value || '');
        cookieValue = value + "~" + cookieValue;
        this.save(cookieValue);
    };
    Cookie.prototype.removeValue = function (value) {
        var cookieValues = this.getArray();
        var newValues = [];
        for (var index = 0; index < cookieValues.length; index++) {
            if (value != cookieValues[index]) {
                newValues.push(cookieValues[index]);
            }
        }
        var newValue = newValues.join("~");
        if (newValue != '') {
            newValue += "~";
        }
        this.save(newValue);
    };
    Cookie.prototype.containsValue = function (value) {
        var cookieValues = this.getArray();
        for (var index = 0; index < cookieValues.length; index++) {
            if (value == cookieValues[index]) {
                return true;
            }
        }
        return false;
    };
    Cookie.IsEnabled = function () {
        return Cookie.GUID.get('') != '';
    };
    //These values should match the ServerSide version in AppCode/Cookies otherwise you're going to have a bad time
    Cookie.UID = new Cookie('uid', 365);
    Cookie.CRM_UID = new Cookie('crm_uid', 365);
    Cookie.Compares = new Cookie('realtor_compare', 365);
    Cookie.CPCompares = new Cookie('realtor_consumer_compare', 365);
    Cookie.Favourites = new Cookie('realtor_favorites', 365);
    //static CPFavourites: Cookie = new Cookie('realtor_consumer_favorites', 365);
    Cookie.PreferredMeasurementUnits = new Cookie('PreferredMeasurementUnits', 365);
    Cookie.Language = new Cookie('Language', 365);
    Cookie.GUID = new Cookie('GUID', 365);
    Cookie.RefreshConsumerProfile = new Cookie('refresh_consumer', 0);
    Cookie.HasNotifications = new Cookie('HasNotifications', 365);
    Cookie.InvalidLoginCount = new Cookie('invalidLoginCount', 1);
    Cookie.LoginCaptchaRequired = new Cookie('login_captcha_required', 1);
    Cookie.SocialSignin = new Cookie('consumer_social_signin', 365);
    Cookie.FWDAccountURL = new Cookie('fwdaccounturl', 365);
    Cookie.FirstMapViewChange = new Cookie('consumer_map_view_change', 365);
    Cookie.ApplicationMode = new Cookie('app_mode', 365);
    Cookie.MapSidebarVisible = new Cookie('mapSideBarVis', 365);
    //Lets us render header server side since the actual data is stored elsewhere
    Cookie.FavouriteCount = new Cookie('FavCount', 365);
    //Lets us render header server side since the actual data is stored elsewhere
    Cookie.SavedSearchCount = new Cookie('SSCount', 365);
    //Lets us render header server side since the actual data is stored elsewhere
    Cookie.NotificationCount = new Cookie('NotifCount', 365);
    //Lets us render header server side since the actual data is stored elsewhere
    Cookie.RecentlyViewedListingsCount = new Cookie('ViewedListings', 365);
    Cookie.PromoBannerShown = new Cookie('PromoBannerShown', 365);
    Cookie.MobileRedirectionChoice = new Cookie('FWD_MOBILE');
    Cookie.TermsOfUse = new Cookie('TermsOfUseAgreement', 30);
    Cookie.TargetPage = new Cookie('TargetPage');
    Cookie.TargetPageFr = new Cookie('TargetPageFr');
    Cookie.PolygonClearingMessage = new Cookie('PolygonClearingMessage', 60);
    Cookie.Currency = new Cookie('Currency', 365);
    Cookie.TDCustomer = new Cookie('TDCustomer', 30);
    Cookie.COVID = new Cookie('COVID', 0);
    Cookie.ReactivateUID = new Cookie('ReactivateUID', 0);
    Cookie.ReactivateCRMUID = new Cookie('ReactivateCRMUID', 0);
    Cookie.ReactivateCondition = new Cookie('ReactivateCondition', 0);
    Cookie.ReactivateStatus = new Cookie('ReactivateStatus', 0);
    return Cookie;
}());
//# sourceMappingURL=Cookies.js.map;
//The place for <i>generic</i> base functionality like control binding (UI functions should be in UIHelpers, not in here). 
var Core;
(function (Core) {
    function locateUser(locationFoundHandler, locationCannotBeFoundHandler) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(locationFoundHandler, function (error) {
                locationCannotBeFoundHandler();
            }, { maximumAge: 15000 });
        }
        else {
            locationCannotBeFoundHandler();
        }
    }
    Core.locateUser = locateUser;
    function redirectTo(targetPage, pushState) {
        if (pushState === void 0) { pushState = true; }
        if (ApplicationState.IsMobileDevice) {
            if (!pushState) {
                window.history.replaceState({ id: MasterPages.Phone.smoothStateElementID }, null, targetPage);
                MasterPages.Phone.smoothState.load(targetPage, pushState);
            }
            else {
                MasterPages.Phone.smoothState.load(targetPage);
            }
        }
        else {
            //TODO: better way to do this?
            if (window.location.href == targetPage) {
                location.reload();
            }
            else {
                window.location.href = targetPage;
            }
        }
    }
    Core.redirectTo = redirectTo;
    ///**
    // * 
    // * @param targetPage
    // */
    //export function CheckTOSAcceptance(targetPage: string): void {
    //    console.log('redirectToDisclaimer to: ' + targetPage);
    //    if (UserNeedsToAcceptTOS()) {
    //        //if (targetPage.substring(0, 1) == "/") {
    //        //    targetPage = targetPage.substring(1);
    //        //}            
    //        //LocalStorage.TargetPage.save(targetPage);
    //        Cookie.TargetPage.save(targetPage);
    //        targetPage = RouteHelper.getURL("terms-of-use") + "?accept=true";
    //    }
    //    //if (prependURLMode) {
    //    //    targetPage = PrependCurrentMode(targetPage);
    //    //}
    //    if (ApplicationState.IsMobileDevice) {
    //        let reloadPageOnHashChange: boolean = needToReloadPageOnHashChange(targetPage);
    //        if (reloadPageOnHashChange) {
    //            window.location.replace(targetPage);
    //        } else {
    //            //debugger;
    //            //MasterPages.Phone.smoothState.load(targetPage);
    //            MasterPages.Phone.smoothState.loadWithAlter(targetPage);
    //            //window.location.href = targetPage;
    //        }
    //    } else {
    //        window.location.href = targetPage;
    //    }
    //}
    function GoToPage(targetPage) {
        if (ApplicationState.IsMobileDevice) {
            var reloadPageOnHashChange = needToReloadPageOnHashChange(targetPage);
            if (reloadPageOnHashChange) {
                window.location.replace(targetPage);
            }
            else {
                //debugger;
                //MasterPages.Phone.smoothState.load(targetPage);
                MasterPages.Phone.smoothState.loadWithAlter(targetPage);
                //window.location.href = targetPage;
            }
        }
        else {
            window.location.href = targetPage;
        }
    }
    Core.GoToPage = GoToPage;
    /**
     * Returns wether or not a user needs to accept the TOS/Disclaimer
     */
    function UserNeedsToAcceptTOS() {
        //return LocalStorage.TermsOfUse.get('') !== ApplicationConfig.TOSDate && ApplicationState.UserIsSignedIn == false;
        return Cookie.TermsOfUse.get('') !== ApplicationConfig.TOSDate && ApplicationState.UserIsSignedIn == false;
    }
    Core.UserNeedsToAcceptTOS = UserNeedsToAcceptTOS;
    /*If the target page is the same as the current page, and only the hash is changing, the page won't reload itself - hence this function.*/
    function needToReloadPageOnHashChange(targetPageIn) {
        var currentPage = window.location.href.indexOf('#') > -1 ? window.location.href.substring(0, window.location.href.indexOf('#')) : window.location.href;
        var targetPage = targetPageIn.indexOf('#') > -1 ? targetPageIn.substring(0, targetPageIn.indexOf('#')) : targetPageIn;
        var currentHash = window.location.href.indexOf('#') > -1 ? window.location.href.substring(window.location.href.indexOf('#') + 1) : "";
        var targetHash = targetPageIn.indexOf('#') > -1 ? targetPageIn.substring(targetPageIn.indexOf('#') + 1) : "";
        if (Utilities.endsWith(currentPage.toLowerCase(), targetPage.toLowerCase()) && currentHash.toLowerCase() != targetHash.toLowerCase()) {
            return true;
        }
        return false;
    }
    Core.needToReloadPageOnHashChange = needToReloadPageOnHashChange;
    function PrependCurrentMode(val) {
        var returnValue = "";
        if (val != undefined) {
            if (val.toLowerCase().indexOf(window.location.protocol) == -1) {
                var prependVal = '/' + ApplicationState.ApplicationModeString.toLowerCase() + '/';
                if (val.substring(0, prependVal.length).toLowerCase() == prependVal.toLowerCase()) {
                    returnValue = val;
                }
                else {
                    if (val.substring(0, 1) == "/") {
                        returnValue = '/' + ApplicationState.ApplicationModeString + val;
                    }
                    else {
                        returnValue = '/' + ApplicationState.ApplicationModeString + "/" + val;
                    }
                }
            }
            else {
                returnValue = val;
            }
        }
        return returnValue;
    }
    Core.PrependCurrentMode = PrependCurrentMode;
    /**
     * Function used to perform a listing search from pages other than the map.
     * @param value
     */
    function PerformListingSearch(searchInput, position, criteria, allowNullLocation, subAreaFoundCallback, listingFoundCallback, idToReset) {
        if (allowNullLocation === void 0) { allowNullLocation = false; }
        var value = searchInput.val();
        if (value == "") {
            if (position == null && allowNullLocation == false) { //When it's denied we just get an empty object
                Core.locateUser(function (pos) {
                    Core.PerformListingSearch(searchInput, pos, criteria, false, null, null, idToReset);
                    return;
                }, function () {
                    $('body').scrollTop(0); //Make room for tooltip
                    if (searchInput.attr("data-tooltipid") == null) {
                        searchInput.attr('data-tooltipid', "GeolocationDisabled");
                    }
                    ToolTip.show(searchInput);
                    searchInput.focus();
                    if (idToReset != null) {
                        $("#" + idToReset).removeClass("loading");
                    }
                    return;
                });
                return;
            }
            else {
                var mapURL = RouteHelper.getURL("map");
                if (criteria != null) {
                    Core.GoToPage(mapURL + "#" + $.param(criteria));
                }
                else {
                    Core.GoToPage(mapURL);
                }
                return;
            }
        }
        var subAreaHandler = function (results) {
            if (results.SubArea.length == 0) {
                showMessage(Translation.get("NoResults"));
                if (idToReset != null) {
                    $("#" + idToReset).removeClass("loading");
                }
            }
            else {
                if (subAreaFoundCallback != null) {
                    subAreaFoundCallback();
                }
                if (results.SubArea.length == 1 && results.SubArea[0].GEOId) {
                    var mapURL = RouteHelper.getURL("map");
                    Core.GoToPage(mapURL + "#CenterPGeo=1&PGeoIds=" + results.SubArea[0].GEOId + "&GeoName=" + encodeURIComponent(Utilities.tidyGeoName(results.SubArea[0].Location)) + "&" + $.param(criteria || {})); //Remove accents since safari "can't even" deal with them in a URL
                }
                else {
                    var mapURL = RouteHelper.getURL("map");
                    Core.GoToPage(mapURL + "#Area=" + Utilities.removeAccents(value) + "&" + $.param(criteria || {})); //Remove accents since safari "can't even" deal with them in a URL
                }
            }
        };
        //check MLS Number -> check subarea
        var mlsSearchHandler = function (results) {
            var activeListings = results.Results.filter(function (item) {
                return item.StatusId == ListingStatus.Active.toString();
            });
            var tombstonedListings = results.Results.filter(function (item) {
                return item.StatusId == ListingStatus.Tombstone.toString();
            });
            if (activeListings.length == 1) {
                var url = Utilities.ConvertModelessListingDetailsURL(activeListings[0].RelativeDetailsURL);
                //MasterPages.Phone.smoothState.loadWithAlter(url);
                if (listingFoundCallback != null) {
                    listingFoundCallback();
                }
                Core.GoToPage(url);
            }
            else if (activeListings.length > 1) {
                if (listingFoundCallback != null) {
                    listingFoundCallback();
                }
                var mapURL = RouteHelper.getURL("map");
                Core.GoToPage(mapURL + "#ReferenceNumber=" + Utilities.removeAccents(value) + "&view=list&" + $.param(criteria || "")); //Remove accents since safari "can't even" deal with them in a URL
            }
            else if (tombstonedListings.length == 1) {
                var url = Utilities.ConvertModelessListingDetailsURL(tombstonedListings[0].RelativeDetailsURL);
                Core.GoToPage(url);
            }
            else {
                APIProxy.subAreaSearch({ Area: value }, subAreaHandler, undefined, function (request, exception) {
                    showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                });
            }
            if (idToReset != null) {
                $("#" + idToReset).removeClass("loading");
            }
        };
        if (value.trim().indexOf(" ") > -1) {
            APIProxy.subAreaSearch({ Area: value }, subAreaHandler);
        }
        else {
            APIProxy.propertySearch({ ReferenceNumber: value, IncludeTombstones: "1", IncludePins: "1" }, mlsSearchHandler);
        }
    }
    Core.PerformListingSearch = PerformListingSearch;
})(Core || (Core = {}));
//# sourceMappingURL=Core.js.map;
var CurrencyRefreshArgs = /** @class */ (function () {
    function CurrencyRefreshArgs() {
        this.removeExact = true;
    }
    return CurrencyRefreshArgs;
}());
var SetCurrencyCallbackArgs = /** @class */ (function () {
    function SetCurrencyCallbackArgs() {
        this.functionCalls = function () { };
        this.removeExact = true;
    }
    return SetCurrencyCallbackArgs;
}());
var Currency = /** @class */ (function () {
    function Currency() {
    }
    //CAD label on PDP, after Maint. Fee, Annual Tax, Operating Cost.. etc
    Currency.refreshCADLabels = function () {
        var label = $(".listingCADLabel");
        if (ApplicationState.CurrencyID != 0) {
            label.show();
        }
        else {
            label.hide();
        }
    };
    Currency.refreshSortDropdown = function (elementId) {
        var me = this;
        if (location.href.toLowerCase().indexOf(RouteHelper.getURL("my-account")) < 0) { //exclude my-account out of scope
            var options_1 = [];
            $(elementId).find("option").each(function (i, option) {
                options_1.push(option);
            });
            //me.updateOptionsLables(options);
            me.ddlListViewSortSelectedVal = $(elementId).val();
            $(elementId).empty().append(options_1);
            $(elementId).val(me.ddlListViewSortSelectedVal);
        }
    };
    //private static updateOptionsLables(options: Array<HTMLOptionElement>) {
    //    options.forEach(function (option: HTMLOptionElement) {
    //        if (option.value == '1-A' || option.value == '1-D') {
    //            option.text = option.text.replace(/\((.+?)\)/g, "(" + Utilities.CurrencyToDisplayString(ApplicationState.CurrencyValue, true, true) + ")")
    //        }
    //    });
    //}
    Currency.refreshPriceDropdown = function () {
        var me = this;
        var SavedSearchLoadFirstTime = SessionStorage.SavedSearchLoadFirstTime.get();
        var isSavedSearchModeFirstTime = (SavedSearchLoadFirstTime != null && SavedSearchLoadFirstTime.length > 0);
        if (location.href.toLowerCase().indexOf(RouteHelper.getURL("my-account")) < 0) { //exclude my-account out of scope
            if (ApplicationState.CurrencyMultiplier != null && isNaN(ApplicationState.CurrencyMultiplier) != true) {
                this.prepPriceDropdownRefresh(me);
                var dropDowns = [];
                dropDowns.push($('#' + me.ddlMaxPriceTop));
                dropDowns.push($('#' + me.ddlMinPriceTop));
                dropDowns.push($('#' + me.ddlMaxPrice));
                dropDowns.push($('#' + me.ddlMinPrice));
                dropDowns.push($('#' + me.ddlMaxRentTop));
                dropDowns.push($('#' + me.ddlMinRentTop));
                dropDowns.push($('#' + me.ddlMaxRent));
                dropDowns.push($('#' + me.ddlMinRent));
                var _loop_1 = function (j) {
                    var element = dropDowns[j];
                    newOptions = [];
                    element.find("option").each(function (i, option) {
                        var originalValue = option.getAttribute('data-cad') || option.value;
                        //let isExactValue: boolean = (option.getAttribute('data-cad-exact') && option.getAttribute('data-cad-exact').length > 0);
                        var newValue = -1;
                        //decision to not use exact rate at this time
                        //if (isExactValue) {
                        //    newValue = Math.round(Number(originalValue) / ApplicationState.CurrencyRate);
                        //} else {
                        //    newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        //}
                        if (isSavedSearchModeFirstTime) {
                            newValue = Math.round(Number(originalValue));
                        }
                        else {
                            newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        }
                        var newText = Math.round(newValue).toLocaleString(ApplicationState.LanguageAttribute);
                        if (newValue === 0) { //Handle Max Price 'Unlimited' label              
                            if (element.attr('id') == me.ddlMaxPriceTop || element.attr('id') == me.ddlMaxPrice || element.attr('id') == me.ddlMaxRentTop || element.attr('id') == me.ddlMaxRent) {
                                newText = Translation.get("Unlimited");
                            }
                        }
                        var el = new Option(newText, newValue.toString(), false, false);
                        el.setAttribute('data-cad', originalValue);
                        //if (isExactValue) {
                        //    el.setAttribute('data-cad-exact', 'true');
                        //}
                        newOptions.push(el);
                    });
                    element.empty().append(newOptions);
                    if (!ApplicationState.IsMobileDevice) {
                        if (element.attr('id') == me.ddlMaxPriceTop) {
                            Events.Fire(Currency.currencyDropdownUpdated, me.ddlMaxPriceTop);
                        }
                        if (element.attr('id') == me.ddlMinPriceTop) {
                            Events.Fire(Currency.currencyDropdownUpdated, me.ddlMinPriceTop);
                        }
                        if (element.attr('id') == me.ddlMaxRentTop) {
                            Events.Fire(Currency.currencyDropdownUpdated, me.ddlMaxRentTop);
                        }
                        if (element.attr('id') == me.ddlMinRentTop) {
                            Events.Fire(Currency.currencyDropdownUpdated, me.ddlMinRentTop);
                        }
                    }
                    if (element.attr('id') == me.ddlMaxPrice) {
                        Events.Fire(Currency.currencyDropdownUpdated, me.ddlMaxPrice);
                    }
                    if (element.attr('id') == me.ddlMinPrice) {
                        Events.Fire(Currency.currencyDropdownUpdated, me.ddlMinPrice);
                    }
                    if (element.attr('id') == me.ddlMaxRent) {
                        Events.Fire(Currency.currencyDropdownUpdated, me.ddlMaxRent);
                    }
                    if (element.attr('id') == me.ddlMinRent) {
                        Events.Fire(Currency.currencyDropdownUpdated, me.ddlMinRent);
                    }
                };
                var newOptions;
                for (var j = 0; j <= dropDowns.length - 1; j++) {
                    _loop_1(j);
                }
                for (var k = 0; k <= dropDowns.length - 1; k++) {
                    var element = dropDowns[k];
                    if (!ApplicationState.IsMobileDevice) {
                        if (element.attr('id') == me.ddlMaxPriceTop) {
                            $("#" + me.ddlMaxPriceTop + " option[data-cad='" + me.MaxPriceTopSelectedVal + "']").prop("selected", true).trigger('change');
                        }
                        if (element.attr('id') == me.ddlMinPriceTop) {
                            $("#" + me.ddlMinPriceTop + " option[data-cad='" + me.MinPriceTopSelectedVal + "']").prop("selected", true).trigger('change');
                        }
                        if (element.attr('id') == me.ddlMaxRentTop) {
                            $("#" + me.ddlMaxRentTop + " option[data-cad='" + me.MaxRentTopSelectedVal + "']").prop("selected", true).trigger('change');
                        }
                        if (element.attr('id') == me.ddlMinRentTop) {
                            $("#" + me.ddlMinRentTop + " option[data-cad='" + me.MinRentTopSelectedVal + "']").prop("selected", true).trigger('change');
                        }
                    }
                    if (element.attr('id') == me.ddlMaxPrice) {
                        $("#" + me.ddlMaxPrice + " option[data-cad='" + me.MaxPriceSelectedVal + "']").prop("selected", true).trigger('change');
                    }
                    if (element.attr('id') == me.ddlMinPrice) {
                        $("#" + me.ddlMinPrice + " option[data-cad='" + me.MinPriceSelectedVal + "']").prop("selected", true).trigger('change');
                    }
                    if (element.attr('id') == me.ddlMaxRent) {
                        $("#" + me.ddlMaxRent + " option[data-cad='" + me.MaxRentSelectedVal + "']").prop("selected", true).trigger('change');
                    }
                    if (element.attr('id') == me.ddlMinRent) {
                        $("#" + me.ddlMinRent + " option[data-cad='" + me.MinRentSelectedVal + "']").prop("selected", true).trigger('change');
                    }
                }
                //Mobile view Exact values
                if (ApplicationState.IsMobileDevice) {
                    if (URLHash.get("PriceMinExact") == "1" || $("#chkManualMinPrice").is(':checked')) {
                        var exactValue = $("#txtMinPriceCADExact").val();
                        var originalValue = "";
                        //let isDropdownValue: boolean = $("#" + me.ddlMinPrice + "option[value='" + $("#" + me.txtMinPrice).val() + "']").length > 0
                        if ((exactValue || "") != "") {
                            originalValue = exactValue;
                        }
                        else {
                            if (isSavedSearchModeFirstTime) {
                                originalValue = (Number($("#" + me.txtMinPrice).val() || URLHash.get("PriceMin"))).toString();
                            }
                            else {
                                originalValue = (Number($("#" + me.txtMinPrice).val() || URLHash.get("PriceMin")) * ApplicationState.CurrencyMultiplier).toString();
                            }
                            $("#txtMinPriceCADExact").val(originalValue);
                        }
                        //let newValue: number = Math.round(Number(originalValue) / ApplicationState.CurrencyRate);
                        var newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        if ((exactValue || "") != "") {
                            $("#txtMinPriceCADExactSet").val("true");
                        }
                        $("#" + me.txtMinPrice).val(newValue.toString()).trigger('change');
                    }
                    if (URLHash.get("PriceMaxExact") == "1" || $("#chkManualMaxPrice").is(':checked')) {
                        var exactValue = $("#txtMaxPriceCADExact").val();
                        var originalValue = "";
                        if ((exactValue || "") != "") {
                            originalValue = exactValue;
                        }
                        else {
                            if (isSavedSearchModeFirstTime) {
                                originalValue = (Number($("#" + me.txtMaxPrice).val() || URLHash.get("PriceMax"))).toString();
                            }
                            else {
                                originalValue = (Number($("#" + me.txtMaxPrice).val() || URLHash.get("PriceMax")) * ApplicationState.CurrencyMultiplier).toString();
                            }
                            $("#txtMaxPriceCADExact").val(originalValue);
                        }
                        var newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        if ((exactValue || "") != "") {
                            $("#txtMaxPriceCADExactSet").val("true");
                        }
                        $("#" + me.txtMaxPrice).val(newValue.toString()).trigger('change');
                    }
                    if (URLHash.get("RentMinExact") == "1" || $("#chkManualMinRent").is(':checked')) {
                        var exactValue = $("#txtMinRentCADExact").val();
                        var originalValue = "";
                        if ((exactValue || "") != "") {
                            originalValue = exactValue;
                        }
                        else {
                            if (isSavedSearchModeFirstTime) {
                                originalValue = (Number($("#" + me.txtMinRent).val() || URLHash.get("RentMin"))).toString();
                            }
                            else {
                                originalValue = (Number($("#" + me.txtMinRent).val() || URLHash.get("RentMin")) * ApplicationState.CurrencyMultiplier).toString();
                            }
                            $("#txtMinRentCADExact").val(originalValue);
                        }
                        var newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        if ((exactValue || "") != "") {
                            $("#txtMinRentCADExactSet").val("true");
                        }
                        $("#" + me.txtMinRent).val(newValue.toString()).trigger('change');
                    }
                    if (URLHash.get("RentMaxExact") == "1" || $("#chkManualMaxRent").is(':checked')) {
                        var exactValue = $("#txtMaxRentCADExact").val();
                        var originalValue = "";
                        if ((exactValue || "") != "") {
                            originalValue = exactValue;
                        }
                        else {
                            if (isSavedSearchModeFirstTime) {
                                originalValue = (Number($("#" + me.txtMaxRent).val() || URLHash.get("RentMax"))).toString();
                            }
                            else {
                                originalValue = (Number($("#" + me.txtMaxRent).val() || URLHash.get("RentMax")) * ApplicationState.CurrencyMultiplier).toString();
                            }
                            $("#txtMaxRentCADExact").val(originalValue);
                        }
                        var newValue = Math.round(Number(originalValue) * ApplicationState.CurrencyMultiplier);
                        if ((exactValue || "") != "") {
                            $("#txtMinRentCADExactSet").val("true");
                        }
                        $("#" + me.txtMaxRent).val(newValue.toString()).trigger('change');
                    }
                }
            }
        }
        if (isSavedSearchModeFirstTime) {
            SessionStorage.SavedSearchLoadFirstTime.delete();
            URLHash.remove("SearchName", true);
        }
    };
    //in order to refresh price dropdowns, save selected values and reset selections
    Currency.prepPriceDropdownRefresh = function (me) {
        me.MaxPriceTopSelectedVal = ($('#' + me.ddlMaxPriceTop + ' option:selected').attr('data-cad') || ($('#' + me.ddlMaxPriceTop).val() || "0")); //me.getIndexByVal($('#' + me.ddlMaxPriceTop).val(), $('#' + me.ddlMaxPriceTop));//$('#' + me.ddlMaxPriceTop).prop('selectedIndex');
        me.MinPriceTopSelectedVal = ($('#' + me.ddlMinPriceTop + ' option:selected').attr('data-cad') || ($('#' + me.ddlMinPriceTop).val() || "0")); //me.getIndexByVal($('#' + me.ddlMinPriceTop).val(), $('#' + me.ddlMinPriceTop));//$('#' + me.ddlMinPriceTop).prop('selectedIndex');
        me.MaxPriceSelectedVal = ($('#' + me.ddlMaxPrice + ' option:selected').attr('data-cad') || ($('#' + me.ddlMaxPrice).val() || "0")); //me.getIndexByVal($('#' + me.ddlMaxPrice).val(), $('#' + me.ddlMaxPrice));//$('#' + me.ddlMaxPrice).prop('selectedIndex');
        me.MinPriceSelectedVal = ($('#' + me.ddlMinPrice + ' option:selected').attr('data-cad') || ($('#' + me.ddlMinPrice).val() || "0")); //me.getIndexByVal($('#' + me.ddlMinPrice).val(), $('#' + me.ddlMinPrice));//$('#' + me.ddlMinPrice).prop('selectedIndex');
        $('#' + me.ddlMaxPriceTop + ',#' + me.ddlMinPriceTop + ',#' + me.ddlMaxPrice + ',#' + me.ddlMinPrice).val(null).trigger('change'); //deselect to reset dropdown price binding
        this.MaxRentTopSelectedVal = ($('#' + me.ddlMaxRentTop + ' option:selected').attr('data-cad') || ($('#' + me.ddlMaxRentTop).val() || "0")); //me.getIndexByVal($('#' + me.ddlMaxRentTop).val(), $('#' + me.ddlMaxRentTop));//$('#' + this.ddlMaxRentTop).prop('selectedIndex');
        this.MinRentTopSelectedVal = ($('#' + me.ddlMinRentTop + ' option:selected').attr('data-cad') || ($('#' + me.ddlMinRentTop).val() || "0")); //me.getIndexByVal($('#' + me.ddlMinRentTop).val(), $('#' + me.ddlMinRentTop));//$('#' + this.ddlMinRentTop).prop('selectedIndex');
        this.MaxRentSelectedVal = ($('#' + me.ddlMaxRent + ' option:selected').attr('data-cad') || ($('#' + me.ddlMaxRent).val() || "0")); //me.getIndexByVal($('#' + me.ddlMaxRent).val(), $('#' + me.ddlMaxRent));//$('#' + this.ddlMaxRent).prop('selectedIndex');
        this.MinRentSelectedVal = ($('#' + me.ddlMinRent + ' option:selected').attr('data-cad') || ($('#' + me.ddlMinRent).val() || "0")); //me.getIndexByVal($('#' + me.ddlMinRent).val(), $('#' + me.ddlMinRent));//$('#' + this.ddlMinRent).prop('selectedIndex');
        $('#' + this.ddlMaxRentTop + ',#' + this.ddlMinRentTop + ',#' + this.ddlMaxRent + ',#' + this.ddlMinRent).val(null).trigger('change'); //deselect to reset dropdown price binding
    };
    //public static refreshListingCardPrice(element: JQuery, className?: string): void {
    //    element.find(className || '.listingCardPrice').each(function (i, text) {
    //        let dataVal: string = $(this).attr('data-value');
    //        let currency: string = CurrencyType[ApplicationState.CurrencyID];
    //        let price = $(this).title;
    //        let priceCAD = $(this).attr('data-value-cad');
    //        if (ApplicationState.CurrencyID != 0) {
    //            let fxPrices = dataVal.split('_');
    //            for (let i: number = 0; i < fxPrices.length; i++) {
    //                if (fxPrices[i].indexOf(currency) > -1) {
    //                    price = fxPrices[i].split(currency)[1];
    //                    break;
    //                }
    //            }
    //        } else {
    //            price = priceCAD;
    //        }
    //        $(this).html(price);
    //    });
    //}
    Currency.refreshListingPrice = function (el) {
        var element = el || $("#listingPrice");
        var dataVal = element.attr('data-value');
        var currency = CurrencyType[ApplicationState.CurrencyID];
        var price = element.find("#listingPriceValue").val();
        var priceCAD = element.attr('data-value-cad');
        if (ApplicationState.CurrencyID != 0) {
            if ((dataVal || "") != "") {
                var fxPrices = dataVal.split('_');
                for (var i = 0; i < fxPrices.length; i++) {
                    if (fxPrices[i].indexOf(currency) > -1) {
                        price = fxPrices[i].split(currency)[1];
                        break;
                    }
                }
            }
            if (price == null || price == "") {
                price = priceCAD;
            }
        }
        else {
            price = priceCAD;
        }
        element.find("#listingPriceValue").html(price); //update listing price display
        //$(".listingPriceCAD").remove();
        //if (ApplicationState.CurrencyID != 0) {
        //    let originalPriceHTML = "<div class='listingPriceCAD'>" + priceCAD + "</div>";
        //    $(originalPriceHTML).insertAfter(element);
        //}
        //update calculator price
        //let view: string = URLHash.get("view", "").toLowerCase();
        //if (view === "calc") {
        //    var currentCurrencyPrice = price.replace(Utilities.CurrencyToDisplayString(currency), "").trim();
        //    $("#ask").val(price.replace(Utilities.CurrencyToDisplayString(currency), "").trim()).trigger("change");
        //    if (typeof loadWidget != 'undefined' && loadWidget != null) {
        //        updateCalculations();
        //    }
        //}
    };
    Currency.refreshPublicOfferPrices = function () {
        var changePriceMethod = function (priceContainObj, priceValueSelector) {
            for (var index = 0; index < priceContainObj.length; index++) {
                var dataVal = $(priceContainObj[index]).attr('data-value');
                var currency = CurrencyType[ApplicationState.CurrencyID];
                var price = $(priceContainObj[index]).find(priceValueSelector).val();
                var priceCAD = $(priceContainObj[index]).attr('data-value-cad');
                if (ApplicationState.CurrencyID != 0) {
                    if ((dataVal || "") != "") {
                        var fxPrices = dataVal.split('_');
                        for (var i = 0; i < fxPrices.length; i++) {
                            if (fxPrices[i].indexOf(currency) > -1) {
                                price = fxPrices[i].split(currency)[1];
                                break;
                            }
                        }
                    }
                    if (price == null || price == "") {
                        price = priceCAD;
                    }
                }
                else {
                    price = priceCAD;
                }
                if (!!price)
                    $(priceContainObj[index]).find(priceValueSelector).html(price);
            }
        };
        //Change the public offer price at the top next to listing price
        changePriceMethod($("#publicOfferPrice"), "#publicOfferPriceValue");
        //Change offers table prices
        changePriceMethod($(".publicOfferContainer"), ".publicOffer");
        //Change the offers price tag at top of the offer table
        changePriceMethod($("#HighestOrAcceptedtag"), ".HighestOrAccpetedPrice");
        //Change the callout tag price in the Pdp callout for LatestOffers
        changePriceMethod($("#publicOfferCallOutTag"), "#publicOffercalloutTagPriceValue");
    };
    //Will check for referrer from country landing pages (once per session)
    Currency.setReferrerCurrency = function () {
        if (SessionStorage.SetReferrerCurrency.get() != "true") {
            if (ApplicationState.IsMobileDevice) {
                if (document.referrer != null && document.referrer.length > 0) {
                    if (document.referrer.indexOf("usa.realtor.ca") !== -1) {
                        Controls.Phone.CurrencySelector.SetCurrency("FXUSDCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("china.realtor.ca") !== -1) {
                        Controls.Phone.CurrencySelector.SetCurrency("FXCNYCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("india.realtor.ca") !== -1) {
                        Controls.Phone.CurrencySelector.SetCurrency("FXINRCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("philippines.realtor.ca") !== -1) {
                        Controls.Phone.CurrencySelector.SetCurrency("FXUSDCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                }
            }
            else {
                if (document.referrer != null && document.referrer.length > 0) {
                    if (document.referrer.indexOf("usa.realtor.ca") !== -1) {
                        Controls.Desktop.CurrencyCtrl.SetCurrency("FXUSDCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("china.realtor.ca") !== -1) {
                        Controls.Desktop.CurrencyCtrl.SetCurrency("FXCNYCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("india.realtor.ca") !== -1) {
                        Controls.Desktop.CurrencyCtrl.SetCurrency("FXINRCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                    if (document.referrer.indexOf("philippines.realtor.ca") !== -1) {
                        Controls.Desktop.CurrencyCtrl.SetCurrency("FXUSDCAD");
                        SessionStorage.SetReferrerCurrency.save("true");
                    }
                }
            }
        }
    };
    Currency.currencyCalculatorUpdated = 'currencyCalculatorUpdated';
    Currency.currencyDropdownUpdated = 'currencyDropdownUpdated';
    Currency.ddlMaxPriceTop = 'ddlMaxPriceTop';
    Currency.ddlMinPriceTop = 'ddlMinPriceTop';
    Currency.ddlMaxPrice = 'ddlMaxPrice';
    Currency.ddlMinPrice = 'ddlMinPrice';
    Currency.ddlMaxRentTop = 'ddlMaxRentTop';
    Currency.ddlMinRentTop = 'ddlMinRentTop';
    Currency.ddlMaxRent = 'ddlMaxRent';
    Currency.ddlMinRent = 'ddlMinRent';
    Currency.txtMinPrice = 'txtMinPrice';
    Currency.txtMaxPrice = 'txtMaxPrice';
    Currency.txtMinRent = 'txtMinRent';
    Currency.txtMaxRent = 'txtMaxRent';
    Currency.sortResults = 'sortResults';
    Currency.ddlListResultsSort = 'ddlListResultsSort';
    Currency.ddlListViewSort = 'ddlListViewSort';
    return Currency;
}());
//# sourceMappingURL=Currency.js.map;
/**
 * Wrapper class for the google analytics/datalayer
 */
var DataLayer = /** @class */ (function () {
    function DataLayer() {
    }
    /**
     * Wrapper for google dataLayer.push
     * @param event Event to be pushed
     */
    DataLayer.push = function (eventObj) {
        if (typeof dataLayer !== 'undefined' && dataLayer && dataLayer.push && eventObj) {
            Logging.Debug("Pushing to datalayer: " + JSON.stringify(eventObj), LogType.DataLayer);
            dataLayer.push(eventObj);
        }
    };
    /**
     * Raw object push to google dataLayer
     * @param eventObj
     */
    DataLayer.pushData = function (eventObj) {
        if (typeof dataLayer !== 'undefined' && dataLayer && dataLayer.push && eventObj) {
            Logging.Debug("Pushing to datalayer: " + JSON.stringify(eventObj), LogType.DataLayer);
            dataLayer.push(eventObj);
        }
    };
    /**
     * Allows the call to only be fired once per {timing}. Useful for when an event might be triggered multiple times in quick succession but you only want one datalayer push.
     * @param eventObj
     * @param timing
     */
    DataLayer.throttledPush = function (eventObj, timing) {
        var key = JSON.stringify(eventObj) + timing.toString();
        if (!DataLayer.throttledCalls[key]) {
            var throttledCall = Utilities.throttle(function () {
                DataLayer.push(eventObj);
            }, timing);
            DataLayer.throttledCalls[key] = throttledCall;
        }
        DataLayer.throttledCalls[key]();
    };
    /**
     * Add notification status change to datalayer
     * @param {DataLayerNotificationObj} data
     */
    DataLayer.handleNotificationProfileToDataLayer = function (data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        var predicateNotif = function (value) {
            return value.method == NotificationMethod.Email;
        };
        //Datalayer object's static properties
        var dataLayerLocationValue = null;
        if (location.href.indexOf(RouteHelper.getURL('map')) > -1) {
            dataLayerLocationValue = DataLayerEventsValue.SaveSearchOverlayPage;
        }
        else if (location.href.indexOf(RouteHelper.getURL('my-saved-searches')) > -1) {
            dataLayerLocationValue = DataLayerEventsValue.MySavedSearchSettingsPage;
        }
        else if (location.href.indexOf(RouteHelper.getURL('my-account')) > -1) {
            dataLayerLocationValue = DataLayerEventsValue.NotificationSettingsPage;
        }
        else if (location.href.indexOf(RouteHelper.getURL('unsubscribe')) > -1) {
            dataLayerLocationValue = DataLayerEventsValue.UnsubscribeSettingsPage;
        }
        //Datalayer Objects
        var notificationDataLayer = {
            event: null,
            visitor: {
                savedSearchDailyNotification: null,
                savedSearchInstantNotification: null
            }
        };
        if (data.additionalEvent) {
            notificationDataLayer.event = data.additionalEvent;
        }
        else {
            delete notificationDataLayer.event;
        }
        //Put the changed and prev savedsearches in dictionaries to ease the searching...
        var changedSavedSearchDict = new Dictionary();
        var savedSearchKeys = new Array();
        if (((_a = data.changedSavedSearches) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            for (var x = 0; x < data.changedSavedSearches.length; x++) {
                savedSearchKeys.push(data.changedSavedSearches[x].name);
            }
            changedSavedSearchDict.AddList(data.changedSavedSearches, savedSearchKeys);
        }
        var previousSavedSearchDict = new Dictionary();
        savedSearchKeys = new Array();
        if (((_b = data.previousSavedSearches) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            for (var x = 0; x < data.previousSavedSearches.length; x++) {
                savedSearchKeys.push(data.previousSavedSearches[x].name);
            }
            previousSavedSearchDict.AddList(data.previousSavedSearches, savedSearchKeys);
        }
        //Variables to know savedsearches are added or removed
        var nbChangedSavedSearch = ((_c = data.changedSavedSearches) === null || _c === void 0 ? void 0 : _c.length) > 0 ? (_d = data.changedSavedSearches) === null || _d === void 0 ? void 0 : _d.length : 0;
        var nbPrevSavedSearch = ((_e = data.previousSavedSearches) === null || _e === void 0 ? void 0 : _e.length) > 0 ? data.previousSavedSearches.length : 0;
        if (nbPrevSavedSearch > nbChangedSavedSearch) { //Deletion of savedsearches
            for (var x = 0; x < data.previousSavedSearches.length; x++) {
                var prevFrequency = ((_h = (_g = (_f = data.previousSavedSearches[x].notifications) === null || _f === void 0 ? void 0 : _f.filter(predicateNotif)) === null || _g === void 0 ? void 0 : _g.shift()) === null || _h === void 0 ? void 0 : _h.frequency)
                    || NotificationFrequency.Never;
                if (!changedSavedSearchDict.Item(data.previousSavedSearches[x].name)) {
                    //User level status change check
                    if (!notificationDataLayer.visitor.savedSearchDailyNotification) {
                        notificationDataLayer.visitor.savedSearchDailyNotification =
                            prevFrequency == NotificationFrequency.Daily &&
                                !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Daily) ? 'no' : null;
                    }
                    if (!notificationDataLayer.visitor.savedSearchInstantNotification) {
                        notificationDataLayer.visitor.savedSearchInstantNotification =
                            prevFrequency == NotificationFrequency.Instant
                                && !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Instant) ? 'no' : null;
                    }
                    if (prevFrequency != NotificationFrequency.Never)
                        notificationDataLayer.savedSearchNotificationOffLocation = dataLayerLocationValue;
                }
            }
        }
        //Notif is on/off -> existing savedsearches, map page overlay
        if (nbChangedSavedSearch > 0 && nbPrevSavedSearch >= 0) {
            for (var x = 0; x < data.changedSavedSearches.length; x++) {
                var prevFrequency = ((_m = (_l = (_k = (_j = previousSavedSearchDict.Item(data.changedSavedSearches[x].name)) === null || _j === void 0 ? void 0 : _j.notifications) === null || _k === void 0 ? void 0 : _k.filter(predicateNotif)) === null || _l === void 0 ? void 0 : _l.shift()) === null || _m === void 0 ? void 0 : _m.frequency) || NotificationFrequency.Never;
                var changedFrequency = ((_q = (_p = (_o = data.changedSavedSearches[x].notifications) === null || _o === void 0 ? void 0 : _o.filter(predicateNotif)) === null || _p === void 0 ? void 0 : _p.shift()) === null || _q === void 0 ? void 0 : _q.frequency)
                    || NotificationFrequency.Never;
                //Added savedsearch on map page
                if (nbChangedSavedSearch > nbPrevSavedSearch && !previousSavedSearchDict.Item(data.changedSavedSearches[x].name)) {
                    if (changedFrequency != NotificationFrequency.Never) {
                        //User level status change check
                        if (!notificationDataLayer.visitor.savedSearchDailyNotification) {
                            notificationDataLayer.visitor.savedSearchDailyNotification =
                                changedFrequency == NotificationFrequency.Daily &&
                                    !SavedSearch.HasNotificationFrequency(data.previousSavedSearches, NotificationFrequency.Daily, [data.changedSavedSearches[x]]) ? 'yes' : null;
                        }
                        if (!notificationDataLayer.visitor.savedSearchInstantNotification) {
                            notificationDataLayer.visitor.savedSearchInstantNotification =
                                changedFrequency == NotificationFrequency.Instant
                                    && !SavedSearch.HasNotificationFrequency(data.previousSavedSearches, NotificationFrequency.Instant, [data.changedSavedSearches[x]]) ? 'yes' : null;
                        }
                        notificationDataLayer.savedSearchNotificationOnLocation = dataLayerLocationValue;
                    }
                    //Changed to an off notification
                }
                else if (prevFrequency != changedFrequency && changedFrequency == NotificationFrequency.Never) {
                    //User level status change check - Daily to instant or never, Instant to daily or never                   
                    //Checking for an off notification
                    if (!notificationDataLayer.visitor.savedSearchDailyNotification) {
                        notificationDataLayer.visitor.savedSearchDailyNotification = prevFrequency == NotificationFrequency.Daily &&
                            !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Daily, [previousSavedSearchDict.Item(data.previousSavedSearches[x].name)]) ? 'no' : null;
                        notificationDataLayer.savedSearchNotificationOffLocation = dataLayerLocationValue;
                    }
                    if (!notificationDataLayer.visitor.savedSearchInstantNotification) {
                        notificationDataLayer.visitor.savedSearchInstantNotification = prevFrequency == NotificationFrequency.Instant &&
                            !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Instant, [previousSavedSearchDict.Item(data.previousSavedSearches[x].name)]) ? 'no' : null;
                        notificationDataLayer.savedSearchNotificationOffLocation = dataLayerLocationValue;
                    }
                    //Changed to an on notification and possibly off location as well
                }
                else if (prevFrequency != changedFrequency && changedFrequency != NotificationFrequency.Never) {
                    //User level status change check
                    //On location check
                    if (!notificationDataLayer.visitor.savedSearchDailyNotification) {
                        notificationDataLayer.visitor.savedSearchDailyNotification = changedFrequency == NotificationFrequency.Daily &&
                            !SavedSearch.HasNotificationFrequency(data.previousSavedSearches, NotificationFrequency.Daily, [data.changedSavedSearches[x]]) ? 'yes' : null;
                        notificationDataLayer.savedSearchNotificationOnLocation = dataLayerLocationValue;
                    }
                    if (!notificationDataLayer.visitor.savedSearchInstantNotification) {
                        notificationDataLayer.visitor.savedSearchInstantNotification = changedFrequency == NotificationFrequency.Instant
                            && !SavedSearch.HasNotificationFrequency(data.previousSavedSearches, NotificationFrequency.Instant, [data.changedSavedSearches[x]]) ? 'yes' : null;
                        notificationDataLayer.savedSearchNotificationOnLocation = dataLayerLocationValue;
                    }
                    //Off location check
                    if (!notificationDataLayer.visitor.savedSearchDailyNotification && prevFrequency != NotificationFrequency.Never) {
                        notificationDataLayer.visitor.savedSearchDailyNotification = prevFrequency == NotificationFrequency.Daily &&
                            !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Daily, [data.changedSavedSearches[x]]) ? 'no' : null;
                        notificationDataLayer.savedSearchNotificationOffLocation = dataLayerLocationValue;
                    }
                    if (!notificationDataLayer.visitor.savedSearchInstantNotification && prevFrequency != NotificationFrequency.Never) {
                        notificationDataLayer.visitor.savedSearchInstantNotification = prevFrequency == NotificationFrequency.Instant &&
                            !SavedSearch.HasNotificationFrequency(data.changedSavedSearches, NotificationFrequency.Instant, [data.changedSavedSearches[x]]) ? 'no' : null;
                        notificationDataLayer.savedSearchNotificationOffLocation = dataLayerLocationValue;
                    }
                }
            }
        }
        //Notif is on/off -> favourites
        if (data.changedFavNotification != null && data.previousFavNotification != null) {
            //Notif on-> notification setting
            if (data.changedFavNotification.frequency != NotificationFrequency.Never &&
                data.changedFavNotification.frequency != data.previousFavNotification.frequency) {
                //Status level change notification
                notificationDataLayer.visitor.favouritesDailyNotification =
                    data.previousFavNotification.frequency != NotificationFrequency.Daily &&
                        data.changedFavNotification.frequency == NotificationFrequency.Daily ? 'yes' : null;
                notificationDataLayer.visitor.favouritesInstantNotification =
                    data.previousFavNotification.frequency != NotificationFrequency.Instant &&
                        data.changedFavNotification.frequency == NotificationFrequency.Instant ? 'yes' : null;
                notificationDataLayer.favouritesNotificationOnLocation = dataLayerLocationValue;
                //Notif off Favourites-> notification setting, unsubscribe
            }
            else if (data.changedFavNotification.frequency == NotificationFrequency.Never &&
                data.changedFavNotification.frequency != data.previousFavNotification.frequency) {
                notificationDataLayer.visitor.favouritesDailyNotification =
                    data.previousFavNotification.frequency == NotificationFrequency.Daily ? 'no' : null;
                notificationDataLayer.visitor.favouritesInstantNotification =
                    data.previousFavNotification.frequency == NotificationFrequency.Instant ? 'no' : null;
                notificationDataLayer.favouritesNotificationOffLocation = dataLayerLocationValue;
            }
        }
        //Notification user level status push
        if (!!notificationDataLayer.savedSearchNotificationOnLocation ||
            !!notificationDataLayer.savedSearchNotificationOffLocation ||
            !!notificationDataLayer.event ||
            !!notificationDataLayer.favouritesNotificationOffLocation ||
            !!notificationDataLayer.favouritesNotificationOnLocation) {
            DataLayer.pushData(notificationDataLayer);
        }
    };
    DataLayer.throttledCalls = {};
    return DataLayer;
}());
//# sourceMappingURL=DataLayer.js.map;
var EmailHelper;
(function (EmailHelper) {
    function addDteBookShow(ShowingDateTimes, initNew) {
        if (initNew === void 0) { initNew = true; }
        var oldZIndex = 0;
        var isMobileDevice = ApplicationState.IsMobileDevice;
        var maxDateFieldCount = 3;
        var dateFieldCount = ShowingDateTimes.length || 0;
        var dateField = '';
        var dateFieldPlaceholder = Translation.get("AnyDate");
        var displayAction = "inline-block";
        if (initNew && dateFieldCount <= maxDateFieldCount) {
            ShowingDateTimes.push({ "id": ShowingDateTimes.length + 1, "date": "", "time": 0, "actionIcon1": "fa-plus", "actionClass1": "addShowing", "actionIcon2": "", "actionClass2": "" });
            dateFieldCount += 1;
        }
        if (dateFieldCount <= maxDateFieldCount) {
            $("#BookShowingDateCon").empty();
            for (var i = 0; i < ShowingDateTimes.length; i++) {
                if (!isMobileDevice) {
                    $("#dteBookShowingDate" + ShowingDateTimes[i].id).datepicker("destroy");
                }
                ShowingDateTimes[i].actionIcon1 = "fa-plus";
                ShowingDateTimes[i].actionClass1 = "addShowing";
                ShowingDateTimes[i].actionIcon2 = "";
                ShowingDateTimes[i].actionClass2 = "";
                displayAction = "inline-block";
                if (i < dateFieldCount - 1) {
                    ShowingDateTimes[i].actionIcon1 = "fa-minus";
                    ShowingDateTimes[i].actionClass1 = "removeShowing";
                }
                else if (i === dateFieldCount - 1 && i >= 1 && i < maxDateFieldCount - 1) {
                    ShowingDateTimes[i].actionIcon2 = "fa-minus";
                    ShowingDateTimes[i].actionClass2 = "removeShowing";
                }
                else if (i === maxDateFieldCount - 1) {
                    ShowingDateTimes[i].actionIcon1 = "fa-minus";
                    ShowingDateTimes[i].actionClass1 = "removeShowing";
                }
                if (ShowingDateTimes[i].actionClass2 === "") {
                    displayAction = "none";
                }
                if (!isMobileDevice) {
                    dateField = '<div class="multiInputCon-2">\
                            <div class="inputCon f40">\
                                <div id="dteBookShowingDateCon' + i + '" class="bookShowingDate"><input readonly="readonly" placeholder="' + dateFieldPlaceholder + '" type="text" id="dteBookShowingDate' + i + '" data-id="' + i + '" data-validation="date" /><img src="/images/common/icons/svg/calendar-black.svg" width="25" class="inputDateIcon"></div>\
                            </div>\
                            <div class="inputCon f40">\
                                <div id="dteBookShowingTimeCon' + i + '" class="bookShowingTime">\
                                    <select id="ddl_bookShowTime' + i + '" class="ddlEmailRealtor" data-id="' + i + '"><option value="0">' + Translation.get("AnyTime") + '</option><option value="1">' + Translation.get("Morning") + '</option><option value="2">' + Translation.get("Afternoon") + '</option><option value="3">' + Translation.get("Evening") + '</option></select>\
                                </div>\
                            </div>\
                            <div class="inputCon f20">\
                                <div class="' + ShowingDateTimes[i].actionClass2 + '" data-id="' + i + '" style="display:' + displayAction + '">\
                                    <div class="materialIconCon"><span class="addRemoveShowing m_al fa ' + ShowingDateTimes[i].actionIcon2 + '" data-id="' + i + '"></span></div>\
                                </div>\
                                <div class="' + ShowingDateTimes[i].actionClass1 + '" data-id="' + i + '">\
                                    <div class="materialIconCon"><span class="addRemoveShowing m_al fa ' + ShowingDateTimes[i].actionIcon1 + '" data-id="' + i + '"></span></div>\
                                </div>\
                            </div>\
                        </div>';
                }
                else {
                    var MobileDateDropdownOptions = GetMobileDropdownOptions(14);
                    dateField = '<div class="multiInputCon-2">\
                        <div class="inputShowingDateTime">\
                            <div class="inputCon showing">\
                                <div id="dteBookShowingDateCon' + i + '" class="bookShowingDate"><select id="dteBookShowingDate' + i + '" data-id="' + i + '" class="dteBookShowing">' + MobileDateDropdownOptions + '</select></div>\
                            </div>\
                            <div class="inputCon showing">\
                                <div id="dteBookShowingTimeCon' + i + '" class="bookShowingTime">\
                                    <select id="ddl_bookShowTime' + i + '" class="ddlEmailRealtor" data-id="' + i + '"><option value="0">' + Translation.get("AnyTime") + '</option><option value="1">' + Translation.get("Morning") + '</option><option value="2">' + Translation.get("Afternoon") + '</option><option value="3">' + Translation.get("Evening") + '</option></select>\
                                </div>\
                            </div>\
                        </div>\
                        <div class="inputAction">\
                            <div class="inputCon center">\
                                <div class="' + ShowingDateTimes[i].actionClass2 + '" data-id="' + i + '" style="display:' + displayAction + '">\
                                    <div class="materialIconCon"><span class="addRemoveShowing m_al fa ' + ShowingDateTimes[i].actionIcon2 + '" data-id="' + i + '"></span></div>\
                                </div>\
                                <div class="' + ShowingDateTimes[i].actionClass1 + '" data-id="' + i + '">\
                                    <div class="materialIconCon"><span class="addRemoveShowing m_al fa ' + ShowingDateTimes[i].actionIcon1 + '" data-id="' + i + '"></span></div>\
                                </div>\
                            </div>\
                        </div>\
                        </div>';
                }
                $("#BookShowingDateCon").append(dateField);
                if (!isMobileDevice) {
                    DropDown.loadSelect2($('#ddl_bookShowTime' + i), {
                        tags: false,
                        closeOnSelect: true,
                        containerCssClass: "homeFilter",
                        dropdownCssClass: "homeFilterItemsCon"
                    });
                    EmailHelper.initDteBookShow($("#dteBookShowingDate" + i), ShowingDateTimes);
                    $("#dteBookShowingDate" + i).datepicker("setDate", ShowingDateTimes[i].date);
                }
                else {
                    //let now: Date = new Date();
                    //let future3M: Date = new Date(now.getFullYear(), now.getMonth() + 3, now.getDate());
                    //$("#dteBookShowingDate" + i).attr("max", dateToString2(future3M));
                    //$("#dteBookShowingDate" + i).attr("min", dateToString2(new Date()));
                    EmailHelper.setMobileDate(ShowingDateTimes, $("#dteBookShowingDate" + i));
                    $("#dteBookShowingDate" + i).val(ShowingDateTimes[i].date);
                }
                $("#ddl_bookShowTime" + i).val(ShowingDateTimes[i].time).trigger('change');
                $('.addShowing[data-id="' + i + '"]').off("click").click(function () {
                    EmailHelper.addDteBookShow(ShowingDateTimes);
                    return false;
                });
                $('.removeShowing[data-id="' + i + '"]').off("click").click(function () {
                    EmailHelper.removeDteBookShow(Number($(this).attr("data-id")), ShowingDateTimes);
                    return false;
                });
                if (!isMobileDevice) {
                    $("#ddl_bookShowTime" + i).off("select2:select").on('select2:select', function () {
                        ShowingDateTimes[Number($(this).attr("data-id"))].time = $(this).val();
                        $(this).trigger('change');
                    });
                }
                else {
                    $("#ddl_bookShowTime" + i).off("change").on('change', function () {
                        ShowingDateTimes[Number($(this).attr("data-id"))].time = $(this).val();
                    });
                }
            }
        }
    }
    EmailHelper.addDteBookShow = addDteBookShow;
    function GetMobileDropdownOptions(numberOfDays) {
        var returnVal = "";
        function pad(n) { return n < 10 ? '0' + n : n; }
        ;
        var monthNamesEN = ["January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        var monthNamesFR = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin',
            'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'
        ];
        //const dayNamesEN = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        //const dayNamesFR = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
        var date = new Date();
        returnVal += '<option value="" selected="selected" >' + Translation.get("AnyDate") + '</option>';
        for (var count = 0; count < numberOfDays + 1; count++) {
            var optionElement = "";
            var formattedDate = "";
            var valueDate = "";
            valueDate = pad(date.getUTCDate()) + '/' + pad(date.getUTCMonth() + 1) + '/' + date.getUTCFullYear();
            if (ApplicationState.CultureID == 1) {
                formattedDate = pad(date.getUTCDate()) + ' ' + monthNamesEN[Number(pad(date.getUTCMonth()))] + ', ' + date.getUTCFullYear();
            }
            else {
                formattedDate = pad(date.getUTCDate()) + ' ' + monthNamesFR[Number(pad(date.getUTCMonth()))] + ' ' + date.getUTCFullYear();
            }
            optionElement += "<option value=" + valueDate + ">" + formattedDate + "</option>";
            date.setDate(date.getDate() + 1);
            returnVal += optionElement;
        }
        return returnVal;
    }
    EmailHelper.GetMobileDropdownOptions = GetMobileDropdownOptions;
    function setMobileDate(ShowingDateTimes, control) {
        control.off("change").on('change', function () {
            ShowingDateTimes[Number($(this).attr("data-id"))].date = control.val();
        });
    }
    EmailHelper.setMobileDate = setMobileDate;
    function removeDteBookShow(id, ShowingDateTimes) {
        for (var i = 0; i < ShowingDateTimes.length; i++) {
            if (i === id) {
                ShowingDateTimes.splice(i, 1);
            }
        }
        $("#BookShowingDateCon").empty();
        EmailHelper.addDteBookShow(ShowingDateTimes, false);
        return false;
    }
    EmailHelper.removeDteBookShow = removeDteBookShow;
    function getShowingDates(ShowingDateTimes) {
        var returnVal = "";
        //const isMobileDevice = ApplicationState.IsMobileDevice;
        if ($("#chkBookShowing").is(":checked")) {
            ShowingDateTimes.forEach(function (showing) {
                var showingDate = "";
                showing.date === "" ? showingDate = "any" : showingDate = showing.date;
                //if (isMobileDevice) {
                //    if (showingDate != "any") {
                //        let date: Date = stringToDate2(showingDate);
                //        showingDate = dateToString3(date);
                //    }
                //}
                returnVal += showingDate + "-" + showing.time + ",";
            });
            returnVal = returnVal.replace(/,\s*$/, "");
        }
        return returnVal;
    }
    EmailHelper.getShowingDates = getShowingDates;
    function getWorkingRealtorName() {
        var returnVal = "";
        if ($("#chkWorkingRealtor").is(":checked")) {
            returnVal = $("#txtWorkingRealtorName").val();
        }
        return returnVal;
    }
    EmailHelper.getWorkingRealtorName = getWorkingRealtorName;
    function initDteBookShow(control, ShowingDateTimes, nbMonthsDisplay) {
        if (nbMonthsDisplay === void 0) { nbMonthsDisplay = 1; }
        var oldZindex;
        var now = new Date();
        var future3M = new Date(now.getFullYear(), now.getMonth() + 3, now.getDate());
        control.datepicker({
            dateFormat: "dd/mm/yy",
            showOn: "both",
            showButtonPanel: true,
            numberOfMonths: nbMonthsDisplay,
            maxDate: future3M,
            minDate: 0,
            buttonImageOnly: true,
            buttonImage: "/images/common/icons/svg/ArrowDown.svg",
            buttonText: "Calendar",
            beforeShow: function (input, inst) {
                if ($(this).parent().children('.ui-datepicker-trigger').hasClass('ui-datepicker-arrow-up')) {
                    $(this).parent().children('.ui-datepicker-trigger').removeClass('ui-datepicker-arrow-up');
                }
                else {
                    $(this).parent().children('.ui-datepicker-trigger').addClass('ui-datepicker-arrow-up');
                }
                setTimeout(function () {
                    var buttonPane = $(input).datepicker("widget").find(".ui-datepicker-buttonpane");
                    $("<button>", {
                        text: Translation.get('ClearDate'), click: function () {
                            $.datepicker._clearDate(input);
                        }
                    }).addClass('clearDateBtn').attr('id', 'clearDateBtn').appendTo(buttonPane);
                    //Add an event handler for the todays button to be handled
                    var todayBtn = $(buttonPane.find(':button[data-handler=today]')[0]);
                    if (todayBtn.length > 0) {
                        todayBtn.click(function (e) {
                            var todayDate = new Date();
                            $(input).val(todayDate.getUTCMonth() + "/" + (todayDate.getUTCDate()) + "/" + todayDate.getUTCFullYear());
                            $(input).datepicker('setDate', todayDate);
                            $(input).datepicker("hide");
                        });
                    }
                    if ($("#EmailRealtor_con").is(":visible")) {
                        oldZindex = $("#EmailRealtor_con").css("z-index");
                        var newZindex = Number(oldZindex) - 2;
                        reduceLightBoxPageElements([$("#EmailRealtor_con")], newZindex.toString());
                    }
                    else if ($("#EmailOffice_con").is(":visible")) {
                        oldZindex = $("#EmailOffice_con").css("z-index");
                        var newZindex = Number(oldZindex) - 2;
                        reduceLightBoxPageElements([$("#EmailOffice_con")], newZindex.toString());
                    }
                }, 1);
            },
            onClose: function (dateText, inst) {
                $(this).parent().children('.ui-datepicker-trigger').removeClass('ui-datepicker-arrow-up');
                if ($("#EmailRealtor_con").is(":visible")) {
                    increaseLightBoxPageElements([$("#EmailRealtor_con")], oldZindex);
                }
                else if ($("#EmailOffice_con").is(":visible")) {
                    increaseLightBoxPageElements([$("#EmailOffice_con")], oldZindex);
                }
            },
            onSelect: function () {
                var control = $("#dteBookShowingDate" + $(this).attr('data-id'));
                ShowingDateTimes[Number($(this).attr("data-id"))].date = control.val();
            }
        }, $.datepicker.regional[ApplicationState.CultureID == 1 ? "en-CA" : "fr-CA"]).mask('99/99/9999', {
            placeholder: 'dd/mm/yyyy',
            showMaskOnHover: true,
            showMaskOnFocus: true
        });
    }
    EmailHelper.initDteBookShow = initDteBookShow;
    function swapMessage(ctrlMessageCTA, ctrlMessage) {
        if (ctrlMessageCTA.is(':visible')) {
            ctrlMessageCTA.hide();
            ctrlMessage.show();
            ctrlMessage.focus();
            ctrlMessage.val(ctrlMessage.val() + '\n\n');
            var len = ctrlMessage.val().length;
            ctrlMessage[0].setSelectionRange(len, len);
            ctrlMessage.scrollTop(ctrlMessage[0].scrollHeight);
        }
    }
    EmailHelper.swapMessage = swapMessage;
})(EmailHelper || (EmailHelper = {}));
//# sourceMappingURL=EmailHelper.js.map;
var ConsumerNotificationTypes;
(function (ConsumerNotificationTypes) {
    ConsumerNotificationTypes[ConsumerNotificationTypes["Null"] = 0] = "Null";
    ConsumerNotificationTypes[ConsumerNotificationTypes["Search"] = 1] = "Search";
    ConsumerNotificationTypes[ConsumerNotificationTypes["Compare"] = 2] = "Compare";
    ConsumerNotificationTypes[ConsumerNotificationTypes["Favourite"] = 3] = "Favourite";
})(ConsumerNotificationTypes || (ConsumerNotificationTypes = {}));
var ActionType;
(function (ActionType) {
    ActionType[ActionType["Modal"] = 0] = "Modal";
    ActionType[ActionType["NewPage"] = 1] = "NewPage";
    ActionType[ActionType["Redirect"] = 2] = "Redirect";
})(ActionType || (ActionType = {}));
var ModalDisplayTypes;
(function (ModalDisplayTypes) {
    ModalDisplayTypes[ModalDisplayTypes["Featherlight"] = 0] = "Featherlight";
    ModalDisplayTypes[ModalDisplayTypes["LightboxMe"] = 1] = "LightboxMe";
})(ModalDisplayTypes || (ModalDisplayTypes = {}));
var InfoBoxTypes;
(function (InfoBoxTypes) {
    InfoBoxTypes[InfoBoxTypes["Single"] = 0] = "Single";
    InfoBoxTypes[InfoBoxTypes["Cluster"] = 1] = "Cluster";
})(InfoBoxTypes || (InfoBoxTypes = {}));
var Campaign;
(function (Campaign) {
    Campaign[Campaign["ListingLink"] = 0] = "ListingLink";
    Campaign[Campaign["FavouriteListings"] = 1] = "FavouriteListings";
    Campaign[Campaign["FindanOffice"] = 2] = "FindanOffice";
    Campaign[Campaign["TipsForBuyers"] = 3] = "TipsForBuyers";
    Campaign[Campaign["TipsForSellers"] = 4] = "TipsForSellers";
    Campaign[Campaign["CommercialResources"] = 5] = "CommercialResources";
    Campaign[Campaign["CommercialGlossary"] = 6] = "CommercialGlossary";
    Campaign[Campaign["CommercialServices"] = 7] = "CommercialServices";
    Campaign[Campaign["FindaRealtor"] = 8] = "FindaRealtor";
    Campaign[Campaign["Blog"] = 9] = "Blog";
    Campaign[Campaign["MtgCalculators"] = 10] = "MtgCalculators";
    Campaign[Campaign["RealtorDetails"] = 11] = "RealtorDetails";
    Campaign[Campaign["OfficeDetails"] = 12] = "OfficeDetails";
    Campaign[Campaign["CityLanding"] = 13] = "CityLanding";
    Campaign[Campaign["ProvincialLanding"] = 14] = "ProvincialLanding";
})(Campaign || (Campaign = {}));
var InfoBoxVerticalLocations;
(function (InfoBoxVerticalLocations) {
    InfoBoxVerticalLocations[InfoBoxVerticalLocations["Top"] = 0] = "Top";
    InfoBoxVerticalLocations[InfoBoxVerticalLocations["Middle"] = 1] = "Middle";
    InfoBoxVerticalLocations[InfoBoxVerticalLocations["Bottom"] = 2] = "Bottom";
})(InfoBoxVerticalLocations || (InfoBoxVerticalLocations = {}));
var InfoBoxRelativePositions;
(function (InfoBoxRelativePositions) {
    InfoBoxRelativePositions[InfoBoxRelativePositions["TopLeft"] = 0] = "TopLeft";
    InfoBoxRelativePositions[InfoBoxRelativePositions["TopRight"] = 1] = "TopRight";
    InfoBoxRelativePositions[InfoBoxRelativePositions["Left"] = 2] = "Left";
    InfoBoxRelativePositions[InfoBoxRelativePositions["Right"] = 3] = "Right";
    InfoBoxRelativePositions[InfoBoxRelativePositions["BottomLeft"] = 4] = "BottomLeft";
    InfoBoxRelativePositions[InfoBoxRelativePositions["BottomRight"] = 5] = "BottomRight";
})(InfoBoxRelativePositions || (InfoBoxRelativePositions = {}));
var EntryAnimations;
(function (EntryAnimations) {
    EntryAnimations[EntryAnimations["fadeIn"] = 0] = "fadeIn";
    EntryAnimations[EntryAnimations["fadeInUp"] = 1] = "fadeInUp";
    EntryAnimations[EntryAnimations["fadeInLeft"] = 2] = "fadeInLeft";
    EntryAnimations[EntryAnimations["fadeInRight"] = 3] = "fadeInRight";
    EntryAnimations[EntryAnimations["flipInX"] = 4] = "flipInX";
    EntryAnimations[EntryAnimations["flipInY"] = 5] = "flipInY";
    EntryAnimations[EntryAnimations["bounceIn"] = 6] = "bounceIn";
    EntryAnimations[EntryAnimations["slideUp"] = 7] = "slideUp";
})(EntryAnimations || (EntryAnimations = {}));
var ExitAnimations;
(function (ExitAnimations) {
    ExitAnimations[ExitAnimations["fadeOut"] = 0] = "fadeOut";
    ExitAnimations[ExitAnimations["fadeOutDown"] = 1] = "fadeOutDown";
    ExitAnimations[ExitAnimations["fadeOutLeft"] = 2] = "fadeOutLeft";
    ExitAnimations[ExitAnimations["fadeOutRight"] = 3] = "fadeOutRight";
    ExitAnimations[ExitAnimations["fadeOutUp"] = 4] = "fadeOutUp";
    ExitAnimations[ExitAnimations["flipOutX"] = 5] = "flipOutX";
    ExitAnimations[ExitAnimations["flipOutY"] = 6] = "flipOutY";
    ExitAnimations[ExitAnimations["bounceOut"] = 7] = "bounceOut";
})(ExitAnimations || (ExitAnimations = {}));
var TransitionTiming;
(function (TransitionTiming) {
    TransitionTiming[TransitionTiming["ease"] = 0] = "ease";
    TransitionTiming[TransitionTiming["linear"] = 1] = "linear";
    TransitionTiming[TransitionTiming["ease_in"] = 2] = "ease_in";
    TransitionTiming[TransitionTiming["ease_out"] = 3] = "ease_out";
    TransitionTiming[TransitionTiming["ease_in_out"] = 4] = "ease_in_out";
    TransitionTiming[TransitionTiming["step_start"] = 5] = "step_start";
    TransitionTiming[TransitionTiming["step_end"] = 6] = "step_end";
})(TransitionTiming || (TransitionTiming = {}));
var MeasurementUnits;
(function (MeasurementUnits) {
    MeasurementUnits[MeasurementUnits["Imperial"] = 2] = "Imperial";
    MeasurementUnits[MeasurementUnits["Metric"] = 1] = "Metric";
})(MeasurementUnits || (MeasurementUnits = {}));
var Device;
(function (Device) {
    Device[Device["Phone"] = 1] = "Phone";
    Device[Device["Tablet"] = 2] = "Tablet";
    Device[Device["Desktop"] = 3] = "Desktop";
})(Device || (Device = {}));
var DemographicsChartTypes;
(function (DemographicsChartTypes) {
    DemographicsChartTypes[DemographicsChartTypes["Bar"] = 0] = "Bar";
    DemographicsChartTypes[DemographicsChartTypes["Column"] = 1] = "Column";
    DemographicsChartTypes[DemographicsChartTypes["Pie"] = 2] = "Pie";
})(DemographicsChartTypes || (DemographicsChartTypes = {}));
var FavouriteState;
(function (FavouriteState) {
    FavouriteState[FavouriteState["Added"] = 1] = "Added";
    FavouriteState[FavouriteState["Removed"] = 2] = "Removed";
})(FavouriteState || (FavouriteState = {}));
var PropertyTypes;
(function (PropertyTypes) {
    PropertyTypes[PropertyTypes["Agricultural"] = 302] = "Agricultural";
    PropertyTypes[PropertyTypes["Business"] = 306] = "Business";
    PropertyTypes[PropertyTypes["Industrial"] = 307] = "Industrial";
    PropertyTypes[PropertyTypes["Institutional"] = 309] = "Institutional";
    PropertyTypes[PropertyTypes["Land"] = 303] = "Land";
    PropertyTypes[PropertyTypes["MultiTenant"] = 310] = "MultiTenant";
    PropertyTypes[PropertyTypes["Office"] = 304] = "Office";
    PropertyTypes[PropertyTypes["Other"] = 311] = "Other";
    PropertyTypes[PropertyTypes["Parking"] = 308] = "Parking";
    PropertyTypes[PropertyTypes["Recreational"] = 301] = "Recreational";
    PropertyTypes[PropertyTypes["Retail"] = 305] = "Retail";
    PropertyTypes[PropertyTypes["SingleFamily"] = 300] = "SingleFamily";
    PropertyTypes[PropertyTypes["Hospitality"] = 312] = "Hospitality";
})(PropertyTypes || (PropertyTypes = {}));
var ApplicationModes;
(function (ApplicationModes) {
    ApplicationModes[ApplicationModes["Residential"] = 1] = "Residential";
    ApplicationModes[ApplicationModes["Commercial"] = 2] = "Commercial";
})(ApplicationModes || (ApplicationModes = {}));
var LocalStorageItems;
(function (LocalStorageItems) {
    LocalStorageItems[LocalStorageItems["RealtorSearchResults"] = 0] = "RealtorSearchResults";
    LocalStorageItems[LocalStorageItems["OfficeSearchResults"] = 1] = "OfficeSearchResults";
    LocalStorageItems[LocalStorageItems["Template"] = 2] = "Template";
})(LocalStorageItems || (LocalStorageItems = {}));
var PhoneType;
(function (PhoneType) {
    PhoneType[PhoneType["Telephone"] = 1] = "Telephone";
    PhoneType[PhoneType["Mobile"] = 2] = "Mobile";
    PhoneType[PhoneType["Pager"] = 3] = "Pager";
    PhoneType[PhoneType["Fax"] = 4] = "Fax";
    PhoneType[PhoneType["TollFree"] = 5] = "TollFree";
    PhoneType[PhoneType["SMS"] = 6] = "SMS";
    PhoneType[PhoneType["Unknown"] = 7] = "Unknown";
})(PhoneType || (PhoneType = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["SaleOrRent"] = 1] = "SaleOrRent";
    TransactionType[TransactionType["Sale"] = 2] = "Sale";
    TransactionType[TransactionType["Rent"] = 3] = "Rent";
})(TransactionType || (TransactionType = {}));
var SearchType;
(function (SearchType) {
    SearchType[SearchType["All"] = 0] = "All";
    SearchType[SearchType["Residential"] = 1] = "Residential";
    SearchType[SearchType["Recreational"] = 2] = "Recreational";
    SearchType[SearchType["Condo"] = 3] = "Condo";
    SearchType[SearchType["Agricultural"] = 4] = "Agricultural";
    SearchType[SearchType["Parking"] = 5] = "Parking";
    SearchType[SearchType["Land"] = 6] = "Land";
    SearchType[SearchType["Business"] = 7] = "Business";
    SearchType[SearchType["Multifamily"] = 8] = "Multifamily";
    SearchType[SearchType["Retail"] = 9] = "Retail";
    SearchType[SearchType["Industrial"] = 10] = "Industrial";
    SearchType[SearchType["Office"] = 11] = "Office";
    SearchType[SearchType["Hospitality"] = 12] = "Hospitality";
    SearchType[SearchType["Institutional"] = 13] = "Institutional";
})(SearchType || (SearchType = {}));
var WebSiteType;
(function (WebSiteType) {
    WebSiteType[WebSiteType["Website"] = 1] = "Website";
    WebSiteType[WebSiteType["Facebook"] = 2] = "Facebook";
    WebSiteType[WebSiteType["LinkedIn"] = 3] = "LinkedIn";
    WebSiteType[WebSiteType["Twitter"] = 4] = "Twitter";
    WebSiteType[WebSiteType["Instagram"] = 5] = "Instagram";
})(WebSiteType || (WebSiteType = {}));
var ListingStatus;
(function (ListingStatus) {
    ListingStatus[ListingStatus["Active"] = 1] = "Active";
    ListingStatus[ListingStatus["Closed"] = 2] = "Closed";
    ListingStatus[ListingStatus["Expired"] = 3] = "Expired";
    ListingStatus[ListingStatus["OffMarket"] = 4] = "OffMarket";
    ListingStatus[ListingStatus["Pending"] = 5] = "Pending";
    ListingStatus[ListingStatus["Cancelled"] = 6] = "Cancelled";
    ListingStatus[ListingStatus["Sold"] = 7] = "Sold";
    ListingStatus[ListingStatus["Unknown"] = 8] = "Unknown";
    ListingStatus[ListingStatus["Draft"] = 9] = "Draft";
    ListingStatus[ListingStatus["Tombstone"] = 10] = "Tombstone";
})(ListingStatus || (ListingStatus = {}));
var URLParamType;
(function (URLParamType) {
    URLParamType[URLParamType["Query"] = 1] = "Query";
    URLParamType[URLParamType["Hash"] = 2] = "Hash";
})(URLParamType || (URLParamType = {}));
var UserType;
(function (UserType) {
    UserType[UserType["Guest"] = 1] = "Guest";
    UserType[UserType["Consumer"] = 2] = "Consumer";
})(UserType || (UserType = {}));
var DeviceTypes;
(function (DeviceTypes) {
    DeviceTypes[DeviceTypes["Phone"] = 0] = "Phone";
    DeviceTypes[DeviceTypes["Tablet"] = 1] = "Tablet";
    DeviceTypes[DeviceTypes["Desktop"] = 2] = "Desktop";
})(DeviceTypes || (DeviceTypes = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder[SortOrder["Ascending"] = 0] = "Ascending";
    SortOrder[SortOrder["Descending"] = 1] = "Descending";
})(SortOrder || (SortOrder = {}));
var CacheType;
(function (CacheType) {
    CacheType[CacheType["None"] = -1] = "None";
    CacheType[CacheType["LocalStorage"] = 0] = "LocalStorage";
    CacheType[CacheType["SessionStorage"] = 1] = "SessionStorage";
    CacheType[CacheType["Memory"] = 2] = "Memory";
})(CacheType || (CacheType = {}));
var Language;
(function (Language) {
    Language[Language["English"] = 1] = "English";
    Language[Language["French"] = 2] = "French";
})(Language || (Language = {}));
var RatingType;
(function (RatingType) {
    RatingType[RatingType["Rank"] = 0] = "Rank";
    RatingType[RatingType["RealSatisfied"] = 1] = "RealSatisfied";
})(RatingType || (RatingType = {}));
var ToolTipArrowDirection;
(function (ToolTipArrowDirection) {
    ToolTipArrowDirection[ToolTipArrowDirection["up"] = 0] = "up";
    ToolTipArrowDirection[ToolTipArrowDirection["down"] = 1] = "down";
})(ToolTipArrowDirection || (ToolTipArrowDirection = {}));
var CurrencyType;
(function (CurrencyType) {
    CurrencyType[CurrencyType["CAD"] = 0] = "CAD";
    CurrencyType[CurrencyType["FXAUDCAD"] = 1] = "FXAUDCAD";
    CurrencyType[CurrencyType["FXBRLCAD"] = 2] = "FXBRLCAD";
    CurrencyType[CurrencyType["FXCNYCAD"] = 3] = "FXCNYCAD";
    CurrencyType[CurrencyType["FXEURCAD"] = 4] = "FXEURCAD";
    CurrencyType[CurrencyType["FXHKDCAD"] = 5] = "FXHKDCAD";
    CurrencyType[CurrencyType["FXINRCAD"] = 6] = "FXINRCAD";
    CurrencyType[CurrencyType["FXIDRCAD"] = 7] = "FXIDRCAD";
    CurrencyType[CurrencyType["FXJPYCAD"] = 8] = "FXJPYCAD";
    CurrencyType[CurrencyType["FXMYRCAD"] = 9] = "FXMYRCAD";
    CurrencyType[CurrencyType["FXMXNCAD"] = 10] = "FXMXNCAD";
    CurrencyType[CurrencyType["FXNZDCAD"] = 11] = "FXNZDCAD";
    CurrencyType[CurrencyType["FXNOKCAD"] = 12] = "FXNOKCAD";
    CurrencyType[CurrencyType["FXPENCAD"] = 13] = "FXPENCAD";
    CurrencyType[CurrencyType["FXRUBCAD"] = 14] = "FXRUBCAD";
    CurrencyType[CurrencyType["FXSARCAD"] = 15] = "FXSARCAD";
    CurrencyType[CurrencyType["FXSGDCAD"] = 16] = "FXSGDCAD";
    CurrencyType[CurrencyType["FXZARCAD"] = 17] = "FXZARCAD";
    CurrencyType[CurrencyType["FXKRWCAD"] = 18] = "FXKRWCAD";
    CurrencyType[CurrencyType["FXSEKCAD"] = 19] = "FXSEKCAD";
    CurrencyType[CurrencyType["FXCHFCAD"] = 20] = "FXCHFCAD";
    CurrencyType[CurrencyType["FXTWDCAD"] = 21] = "FXTWDCAD";
    CurrencyType[CurrencyType["FXTHBCAD"] = 22] = "FXTHBCAD";
    CurrencyType[CurrencyType["FXTRYCAD"] = 23] = "FXTRYCAD";
    CurrencyType[CurrencyType["FXGBPCAD"] = 24] = "FXGBPCAD";
    CurrencyType[CurrencyType["FXUSDCAD"] = 25] = "FXUSDCAD";
    CurrencyType[CurrencyType["FXVNDCAD"] = 26] = "FXVNDCAD";
})(CurrencyType || (CurrencyType = {}));
var SocialShareProvider;
(function (SocialShareProvider) {
    SocialShareProvider["facebook"] = "facebook";
    SocialShareProvider["pinterest"] = "pinterest";
    SocialShareProvider["messenger"] = "messenger";
    SocialShareProvider["whatsapp"] = "whatsapp";
    SocialShareProvider["sms"] = "sms";
    SocialShareProvider["twitter"] = "twitter";
    SocialShareProvider["linkedin"] = "linkedin";
    SocialShareProvider["wechat"] = "wechat";
})(SocialShareProvider || (SocialShareProvider = {}));
var ShareaholicShortenErrorCode;
(function (ShareaholicShortenErrorCode) {
    ShareaholicShortenErrorCode["shorteningIssue"] = "150";
    ShareaholicShortenErrorCode["invalidURL"] = "145";
})(ShareaholicShortenErrorCode || (ShareaholicShortenErrorCode = {}));
var ShareaholicShortenService;
(function (ShareaholicShortenService) {
    ShareaholicShortenService["tinyurl"] = "tinyurl";
    ShareaholicShortenService["bitly"] = "bitly";
    ShareaholicShortenService["jmp"] = "jmp";
    ShareaholicShortenService["shrlc"] = "shrlc";
})(ShareaholicShortenService || (ShareaholicShortenService = {}));
var RealEstateType;
(function (RealEstateType) {
    RealEstateType[RealEstateType["Agricultural"] = 302] = "Agricultural";
    RealEstateType[RealEstateType["Business"] = 306] = "Business";
    RealEstateType[RealEstateType["Industrial"] = 307] = "Industrial";
    RealEstateType[RealEstateType["Institutional"] = 309] = "Institutional";
    RealEstateType[RealEstateType["Land"] = 303] = "Land";
    RealEstateType[RealEstateType["MultiTenant"] = 310] = "MultiTenant";
    RealEstateType[RealEstateType["Office"] = 304] = "Office";
    RealEstateType[RealEstateType["Other"] = 311] = "Other";
    RealEstateType[RealEstateType["Parking"] = 308] = "Parking";
    RealEstateType[RealEstateType["Recreational"] = 301] = "Recreational";
    RealEstateType[RealEstateType["Retail"] = 305] = "Retail";
    RealEstateType[RealEstateType["SingleFamily"] = 300] = "SingleFamily";
    RealEstateType[RealEstateType["Hospitality"] = 312] = "Hospitality";
})(RealEstateType || (RealEstateType = {}));
var OwnershipTypeGroup;
(function (OwnershipTypeGroup) {
    OwnershipTypeGroup[OwnershipTypeGroup["Freehold"] = 1] = "Freehold";
    OwnershipTypeGroup[OwnershipTypeGroup["CondoStrata"] = 2] = "CondoStrata";
    OwnershipTypeGroup[OwnershipTypeGroup["TimeshareFractional"] = 3] = "TimeshareFractional";
    OwnershipTypeGroup[OwnershipTypeGroup["Leasehold"] = 4] = "Leasehold";
})(OwnershipTypeGroup || (OwnershipTypeGroup = {}));
var WindowHttpParamNames;
(function (WindowHttpParamNames) {
    WindowHttpParamNames["UniqueWindowId"] = "UniqueWindowId";
})(WindowHttpParamNames || (WindowHttpParamNames = {}));
var W3cExceptionError;
(function (W3cExceptionError) {
    W3cExceptionError["SecurityError"] = "SecurityError";
    W3cExceptionError["NetworkError"] = "NetworkError";
    W3cExceptionError["AbortError"] = "AbortError";
    W3cExceptionError["TimeoutError"] = "TimeoutError";
    W3cExceptionError["InvalidStateError"] = "InvalidStateError";
    W3cExceptionError["NotAllowedError"] = "NotAllowedError";
    W3cExceptionError["DataError"] = "DataError";
    W3cExceptionError["OperationError"] = "OperationError";
    W3cExceptionError["UnknownError"] = "UnknownError";
    W3cExceptionError["EncodingError"] = "EncodingError";
    W3cExceptionError["URLMismatchError"] = "URLMismatchError";
    W3cExceptionError["SyntaxError"] = "SyntaxError";
    W3cExceptionError["NotFoundError"] = "NotFoundError";
    W3cExceptionError["InvalidCharacterError"] = "InvalidCharacterError";
})(W3cExceptionError || (W3cExceptionError = {}));
var BlogPostQuizEvents;
(function (BlogPostQuizEvents) {
    BlogPostQuizEvents["ctaAnchors"] = "ctaAnchors";
    BlogPostQuizEvents["scrollTopQuiz"] = "scrollTopQuiz";
})(BlogPostQuizEvents || (BlogPostQuizEvents = {}));
var EmailContactPreferredOptionType;
(function (EmailContactPreferredOptionType) {
    EmailContactPreferredOptionType[EmailContactPreferredOptionType["Email"] = 1] = "Email";
    EmailContactPreferredOptionType[EmailContactPreferredOptionType["Phone"] = 0] = "Phone";
    EmailContactPreferredOptionType[EmailContactPreferredOptionType["Text"] = 2] = "Text";
})(EmailContactPreferredOptionType || (EmailContactPreferredOptionType = {}));
var DisambiguationBoxLinkType;
(function (DisambiguationBoxLinkType) {
    DisambiguationBoxLinkType[DisambiguationBoxLinkType["GeoIDS"] = 0] = "GeoIDS";
    DisambiguationBoxLinkType[DisambiguationBoxLinkType["AreaOnly"] = 1] = "AreaOnly";
    DisambiguationBoxLinkType[DisambiguationBoxLinkType["AreaWithZoom"] = 2] = "AreaWithZoom";
})(DisambiguationBoxLinkType || (DisambiguationBoxLinkType = {}));
var BoardListingWidgetEvents;
(function (BoardListingWidgetEvents) {
    BoardListingWidgetEvents["BoardListingHeightUpdate"] = "BoardListingHeightUpdate";
    BoardListingWidgetEvents["BoardListingScrollToPosition"] = "BoardListingScrollToPosition";
    BoardListingWidgetEvents["BoardListingMainDocumentClick"] = "BoardListingMainDocumentClick";
})(BoardListingWidgetEvents || (BoardListingWidgetEvents = {}));
var AutoCompleteType;
(function (AutoCompleteType) {
    AutoCompleteType[AutoCompleteType["Listing"] = 0] = "Listing";
    AutoCompleteType[AutoCompleteType["Location"] = 1] = "Location";
    AutoCompleteType[AutoCompleteType["Individual"] = 2] = "Individual";
    AutoCompleteType[AutoCompleteType["Cache"] = 3] = "Cache";
    AutoCompleteType[AutoCompleteType["ResumeLast"] = 4] = "ResumeLast";
})(AutoCompleteType || (AutoCompleteType = {}));
var AutoCompleteMatchType;
(function (AutoCompleteMatchType) {
    AutoCompleteMatchType[AutoCompleteMatchType["Address"] = 0] = "Address";
    AutoCompleteMatchType[AutoCompleteMatchType["Reference"] = 1] = "Reference";
    AutoCompleteMatchType[AutoCompleteMatchType["PostalCode"] = 2] = "PostalCode";
})(AutoCompleteMatchType || (AutoCompleteMatchType = {}));
var ListingSectionHash;
(function (ListingSectionHash) {
    ListingSectionHash["details"] = "details";
    ListingSectionHash["neighbourhood"] = "neighbourhood";
    ListingSectionHash["stats"] = "stats";
    ListingSectionHash["calc"] = "calc";
    ListingSectionHash["offers"] = "offers";
})(ListingSectionHash || (ListingSectionHash = {}));
var NotificationMethod;
(function (NotificationMethod) {
    NotificationMethod[NotificationMethod["Email"] = 1] = "Email";
    NotificationMethod[NotificationMethod["App"] = 2] = "App";
})(NotificationMethod || (NotificationMethod = {}));
var NotificationFrequency;
(function (NotificationFrequency) {
    NotificationFrequency[NotificationFrequency["Never"] = 0] = "Never";
    NotificationFrequency[NotificationFrequency["Instant"] = 1] = "Instant";
    NotificationFrequency[NotificationFrequency["Daily"] = 2] = "Daily";
    NotificationFrequency[NotificationFrequency["Weekly"] = 3] = "Weekly";
})(NotificationFrequency || (NotificationFrequency = {}));
var SavedSearchesSortOrder;
(function (SavedSearchesSortOrder) {
    SavedSearchesSortOrder["DateSavedAscending"] = "6-D";
    SavedSearchesSortOrder["DateSavedDescending"] = "6-A";
    SavedSearchesSortOrder["NameAscending"] = "2-A";
    SavedSearchesSortOrder["NameDescending"] = "2-D";
})(SavedSearchesSortOrder || (SavedSearchesSortOrder = {}));
var PageSlideInParam;
(function (PageSlideInParam) {
    PageSlideInParam["default"] = "PageSlideIn";
})(PageSlideInParam || (PageSlideInParam = {}));
var BackBtnSubSectionParam;
(function (BackBtnSubSectionParam) {
    BackBtnSubSectionParam["BackToCallingPage"] = "BackToCallingPage";
})(BackBtnSubSectionParam || (BackBtnSubSectionParam = {}));
var DataLayerEventsValue;
(function (DataLayerEventsValue) {
    DataLayerEventsValue["SaveSearchOverlayPage"] = "savesearchoverlay";
    DataLayerEventsValue["MySavedSearchSettingsPage"] = "mysavedsearchsettings";
    DataLayerEventsValue["NotificationSettingsPage"] = "notificationsettings";
    DataLayerEventsValue["UnsubscribeSettingsPage"] = "unsubscribesettings";
    DataLayerEventsValue["SavedSearchCreatedEvent"] = "e_savedSearchCreated";
    DataLayerEventsValue["SavedSearchDeleteEvent"] = "e_savedSearchDelete";
    DataLayerEventsValue["SavedSearchDeleteAllEvent"] = "e_savedSearchDeleteAll";
    DataLayerEventsValue["SaveNotificationPrefEvent"] = "e_saveNotificationPreferences";
    DataLayerEventsValue["UnsubscribeSubmitEvent"] = "e_unsubscribeSubmit";
})(DataLayerEventsValue || (DataLayerEventsValue = {}));
var PublicOfferPeriodStatus;
(function (PublicOfferPeriodStatus) {
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["None"] = 0] = "None";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Active"] = 1] = "Active";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Pending"] = 4] = "Pending";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Closed"] = 5] = "Closed";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Withdrawn"] = 6] = "Withdrawn";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Draft"] = 7] = "Draft";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["Expired"] = 9] = "Expired";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["UnderReview"] = 8] = "UnderReview";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["UnderContract"] = 3] = "UnderContract";
    PublicOfferPeriodStatus[PublicOfferPeriodStatus["FinalOfferStage"] = 2] = "FinalOfferStage";
})(PublicOfferPeriodStatus || (PublicOfferPeriodStatus = {}));
var PublicOfferStatus;
(function (PublicOfferStatus) {
    PublicOfferStatus[PublicOfferStatus["Activated"] = 1] = "Activated";
    PublicOfferStatus[PublicOfferStatus["Withdrawn"] = 2] = "Withdrawn";
})(PublicOfferStatus || (PublicOfferStatus = {}));
var PublicOfferPeriodStatusState;
(function (PublicOfferPeriodStatusState) {
    PublicOfferPeriodStatusState[PublicOfferPeriodStatusState["AcceptingOffers"] = 1] = "AcceptingOffers";
    PublicOfferPeriodStatusState[PublicOfferPeriodStatusState["ReviewingOffers"] = 2] = "ReviewingOffers";
    PublicOfferPeriodStatusState[PublicOfferPeriodStatusState["OfferAccepted"] = 3] = "OfferAccepted";
})(PublicOfferPeriodStatusState || (PublicOfferPeriodStatusState = {}));
var ListingTagType;
(function (ListingTagType) {
    ListingTagType[ListingTagType["TimeOnRealtor"] = 1] = "TimeOnRealtor";
    ListingTagType[ListingTagType["PublicOffer"] = 2] = "PublicOffer";
    ListingTagType[ListingTagType["ConditionallySold"] = 3] = "ConditionallySold";
})(ListingTagType || (ListingTagType = {}));
var TimeZoneNames;
(function (TimeZoneNames) {
    TimeZoneNames["EasternStandardTime"] = "easternstandardtime";
    TimeZoneNames["EasternDaylightTime"] = "easterndaylighttime";
    TimeZoneNames["NewfoundlandStandardTime"] = "newfoundlandstandardtime";
    TimeZoneNames["NewfoundlandDaylightTime"] = "NewfoundlandStandardTime";
    TimeZoneNames["AtlanticStandardTime"] = "atlanticstandardtime";
    TimeZoneNames["AtlanticDaylightTime"] = "atlanticdaylighttime";
    TimeZoneNames["CentralStandardTime"] = "centralstandardtime";
    TimeZoneNames["CentralDaylightTime"] = "centraldaylighttime";
    TimeZoneNames["MountainStandardTime"] = "mountainstandardtime";
    TimeZoneNames["MountainDaylightTime"] = "mountaindaylighttime";
    TimeZoneNames["PacificStandardTime"] = "pacificstandardtime";
    TimeZoneNames["PacificDaylightTime"] = "pacificdaylighttime";
})(TimeZoneNames || (TimeZoneNames = {}));
var TimeZoneCodesEn;
(function (TimeZoneCodesEn) {
    TimeZoneCodesEn["EasternStandardTime"] = "EST";
    TimeZoneCodesEn["EasternDaylightTime"] = "EDT";
    TimeZoneCodesEn["NewfoundlandStandardTime"] = "NST";
    TimeZoneCodesEn["NewfoundlandDaylightTime"] = "NDT";
    TimeZoneCodesEn["AtlanticStandardTime"] = "AST";
    TimeZoneCodesEn["AtlanticDaylightTime"] = "ADT";
    TimeZoneCodesEn["CentralStandardTime"] = "CST";
    TimeZoneCodesEn["CentralDaylightTime"] = "CDT";
    TimeZoneCodesEn["MountainStandardTime"] = "MST";
    TimeZoneCodesEn["MountainDaylightTime"] = "MDT";
    TimeZoneCodesEn["PacificStandardTime"] = "PST";
    TimeZoneCodesEn["PacificDaylightTime"] = "PDT";
})(TimeZoneCodesEn || (TimeZoneCodesEn = {}));
var TimeZoneCodesFr;
(function (TimeZoneCodesFr) {
    TimeZoneCodesFr["EasternStandardTime"] = "HNE";
    TimeZoneCodesFr["EasternDaylightTime"] = "HAE";
    TimeZoneCodesFr["NewfoundlandStandardTime"] = "HNT";
    TimeZoneCodesFr["NewfoundlandDaylightTime"] = "HAT";
    TimeZoneCodesFr["AtlanticStandardTime"] = "HNA";
    TimeZoneCodesFr["AtlanticDaylightTime"] = "HAA";
    TimeZoneCodesFr["CentralStandardTime"] = "HNC";
    TimeZoneCodesFr["CentralDaylightTime"] = "HAC";
    TimeZoneCodesFr["MountainStandardTime"] = "HNR";
    TimeZoneCodesFr["MountainDaylightTime"] = "HAR";
    TimeZoneCodesFr["PacificStandardTime"] = "HNP";
    TimeZoneCodesFr["PacificDaylightTime"] = "HAP";
})(TimeZoneCodesFr || (TimeZoneCodesFr = {}));
var AjaxTextStatusError;
(function (AjaxTextStatusError) {
    AjaxTextStatusError["Abort"] = "abort";
    AjaxTextStatusError["Timeout"] = "timeout";
    AjaxTextStatusError["NotModified"] = "notmodified";
    AjaxTextStatusError["ParseError"] = "parseerror";
})(AjaxTextStatusError || (AjaxTextStatusError = {}));
var ListingImageGalleryView;
(function (ListingImageGalleryView) {
    ListingImageGalleryView[ListingImageGalleryView["List"] = 0] = "List";
    ListingImageGalleryView[ListingImageGalleryView["Grid"] = 1] = "Grid";
})(ListingImageGalleryView || (ListingImageGalleryView = {}));
//# sourceMappingURL=Enums.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* Wrapper for firing custom events*/
var Events = /** @class */ (function () {
    function Events() {
    }
    ///**
    // * Global function to disaptch window events
    // * @param name
    // * @param detail
    // */
    //static Fire(name: string, detail?: Object) {
    //    Logging.Debug("Fired: " + name, LogType.Event);
    //    var event = new CustomEvent(name, { 'detail': detail });
    //    window.dispatchEvent(event);
    //}
    /**
     * Global function to disaptch window events
     * @param name
     * @param detail
     */
    Events.Fire = function (name, detail) {
        Logging.Debug("Fired: " + name, LogType.Event);
        var event = new CustomEvent(name, { 'detail': detail });
        window.dispatchEvent(event);
    };
    /**
    * Will listen for a single firing of an event, and then remove itself.
    * @param name
    * @param handler
    * @param scope The Scope of the listener, non-global will be cleared when a new page is loaded (via smoothState)
    */
    Events.ListenOnce = function (name, handler, args) {
        var newHandler = function (e) {
            handler(e);
            var params = Object.assign({
                name: name,
                handler: newHandler,
                scope: Events.ListenerScope.Page
            }, args);
            Events.RemoveListeners(params);
        };
        return Events.Listen(name, newHandler, args);
    };
    ///**
    // * Removes specified event listener.
    // * @param name
    // * @param handler
    // * @param scope
    // */
    //static RemoveListener(name: string, handler: (e: CustomEvent) => any, args?: { scope?: Events.ListenerScope, namespace?: string, uniqueKey?: string }): void {
    //    let index: number = -1;
    //    const params = Object.assign({    
    //        scope: "",
    //        uniqueKey: true,
    //        nameSpace: ""
    //    }, args);
    //    if (Events.Listeners != null) {
    //        window.removeEventListener(name, handler);
    //        for (var i = 0; i < Events.Listeners.length; i++) {
    //            if (Events.Listeners[i].name == name && Events.Listeners[i].handler == handler && Events.Listeners[i].scope == scope) {
    //                index = i;
    //                break;
    //            } else if (Events.Listeners[i].name == name && Events.Listeners[i].uniqueKey == uniqueKey && Events.Listeners[i].scope == scope) {
    //                index = i;
    //                window.removeEventListener(name, Events.Listeners[i].handler);
    //                break;
    //            }
    //        }
    //        if (index > -1) {
    //            Logging.Debug("Removing '" + name + "' event listener (unique name: '" + uniqueKey + "')" )
    //            Events.Listeners.splice(index, 1);
    //        }
    //    }
    //}
    /**
     * Removes the event listeners matching all the critera passed in the params
     * @param params Criteria to match events to be removed against
     */
    Events.RemoveListeners = function (params) {
        var paramVals = Object.assign({
            name: null,
            handler: null,
            scope: null,
            uniqueKey: null,
            nameSpace: null
        }, params);
        if (Events.Listeners) {
            var indexesToRemove = [];
            for (var i = Events.Listeners.length - 1; i >= 0; i--) {
                var currentEvent = Events.Listeners[i];
                if (currentEvent.name == (paramVals.name || currentEvent.name) &&
                    currentEvent.handler == (paramVals.handler || currentEvent.handler) &&
                    currentEvent.scope == (paramVals.scope || currentEvent.scope) &&
                    currentEvent.nameSpace == (paramVals.nameSpace || currentEvent.nameSpace) &&
                    currentEvent.uniqueKey == (paramVals.uniqueKey || currentEvent.uniqueKey)) {
                    Logging.Debug("Removing event listener: " + JSON.stringify(currentEvent));
                    window.removeEventListener(currentEvent.name, currentEvent.handler);
                    indexesToRemove.push(i);
                }
            }
            for (var i = 0; i < indexesToRemove.length; i++) {
                Events.Listeners.splice(indexesToRemove[i], 1);
            }
        }
    };
    /**
     * Global function to attach window event listers. (initially created so smoothstate can detach when a new page loads in)
     * @param name
     * @param handler
     * @param scope The Scope of the listener, non-global will be cleared when a new page is loaded (via smoothState)
     */
    Events.Listen = function (name, handler, args) {
        var params = Object.assign({
            scope: Events.ListenerScope.Page,
            uniqueKey: "",
            nameSpace: ""
        }, args);
        if (params.uniqueKey != "") {
            this.RemoveListeners({ name: name, uniqueKey: params.uniqueKey });
        }
        Logging.Debug("Adding listener for event: " + name + "(" + JSON.stringify(params) + ")", LogType.Event);
        window.addEventListener(name, handler);
        var listenerObj = new EventListenerObj(name, handler, args);
        Events.Listeners.push(listenerObj);
        return listenerObj;
    };
    /**
     * Clears all the window event listeners added via Events.Listen
     */
    Events.ClearListeners = function (scope, nameSpace) {
        for (var i = Events.Listeners.length - 1; i >= 0; i--) {
            var listener = Events.Listeners[i];
            if (listener.scope == (scope || listener.scope) && listener.nameSpace == (nameSpace || listener.nameSpace)) {
                Logging.Debug("Removing listener for event: " + listener.name + " with scope of " + Events.ListenerScope[listener.scope].toLocaleString() + " and namespace of " + listener.nameSpace, LogType.Event);
                window.removeEventListener(listener.name, listener.handler);
                Events.Listeners.splice(i, 1);
            }
        }
    };
    Events.Listeners = [];
    return Events;
}());
var RealtorControlEventArgs = /** @class */ (function (_super) {
    __extends(RealtorControlEventArgs, _super);
    function RealtorControlEventArgs(Control, Args) {
        var _this = _super.call(this) || this;
        _this.control = Control;
        _this.args = Args;
        return _this;
    }
    return RealtorControlEventArgs;
}(Object));
/**
 * Event class for WebControls events
 */
var RealtorControlEvent = /** @class */ (function () {
    function RealtorControlEvent(Control, Name) {
        this.name = Name + "_" + Control.clientId;
    }
    RealtorControlEvent.prototype.Fire = function (Control, args) {
        var eventArgs = new RealtorControlEventArgs(Control, args);
        Events.Fire(this.name, eventArgs);
    };
    RealtorControlEvent.prototype.Listen = function (handler, scope) {
        if (scope === void 0) { scope = Events.ListenerScope.Page; }
        Events.Listen(this.name, handler, { scope: scope });
    };
    RealtorControlEvent.prototype.ListenOnce = function (handler, scope) {
        if (scope === void 0) { scope = Events.ListenerScope.Page; }
        Events.ListenOnce(this.name, handler, { scope: scope });
    };
    return RealtorControlEvent;
}());
var EventTimings = {};
/**
 * Generic event
 */
var RealtorEvent = /** @class */ (function () {
    function RealtorEvent(Name) {
        this.name = Name;
    }
    /**
     *
     * @param detail Details for the event
     * @param throttle Number of MS to throttle firings to (eg. pass in 1000 and the event is fired 4 times in one second? only actually fires once).
     */
    RealtorEvent.prototype.Fire = function (detail, throttle) {
        var _this = this;
        if (throttle) {
            if (EventTimings[this.name]) {
                window.clearTimeout(EventTimings[this.name]);
            }
            EventTimings[this.name] = window.setTimeout(function () {
                Events.Fire(_this.name, detail);
            }, throttle);
        }
        else {
            Events.Fire(this.name, detail);
        }
    };
    RealtorEvent.prototype.Listen = function (handler, args) {
        return Events.Listen(this.name, handler, args);
    };
    RealtorEvent.prototype.ListenOnce = function (handler, args) {
        return Events.ListenOnce(this.name, handler, args);
    };
    return RealtorEvent;
}());
var Realtor7Event = /** @class */ (function (_super) {
    __extends(Realtor7Event, _super);
    function Realtor7Event() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.detail = null;
        return _this;
    }
    return Realtor7Event;
}(CustomEvent));
(function (Events) {
    var ListenerScope;
    (function (ListenerScope) {
        ListenerScope[ListenerScope["Page"] = 1] = "Page";
        ListenerScope[ListenerScope["Global"] = 2] = "Global";
    })(ListenerScope = Events.ListenerScope || (Events.ListenerScope = {}));
})(Events || (Events = {}));
var EventListenerObj = /** @class */ (function () {
    function EventListenerObj(Name, Handler, args) {
        var params = Object.assign({
            scope: Events.ListenerScope.Page,
            uniqueKey: "",
            nameSpace: ""
        }, args);
        this.name = Name;
        this.handler = Handler;
        this.scope = params.scope;
        this.uniqueKey = params.uniqueKey;
        this.nameSpace = params.nameSpace;
    }
    return EventListenerObj;
}());
//# sourceMappingURL=Events.js.map;
var JSException = /** @class */ (function () {
    function JSException(errorMessage, url, lineNumber, column, errorObj) {
        this.ErrorMessage = "";
        this.Url = "";
        this.LineNumber = null;
        this.Column = null;
        this.ErrorObj = null;
        this.ErrorMessage = errorMessage;
        this.Url = url;
        this.LineNumber = lineNumber;
        this.Column = column;
        this.ErrorObj = errorObj;
    }
    JSException.windowError = 'windowError';
    return JSException;
}());
window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
    Events.Fire(JSException.windowError, new JSException(errorMsg, url, lineNumber, column, errorObj));
    if (ApplicationConfig.IsDebugMode) {
        alert('Error: ' + (errorMsg || '') + ' Script: ' + (url || '') + ' Line: ' + (lineNumber || '') + ' Column: ' + (column || '') + ' StackTrace: ' + (errorObj || ''));
        throw errorObj;
    }
    console.log('Error: ' + (errorMsg || '') + ' Script: ' + (url || '') + ' Line: ' + (lineNumber || '') + ' Column: ' + (column || '') + ' StackTrace: ' + (errorObj || ''));
    if (typeof MasterPages !== undefined && MasterPages != null && MasterPages.Phone != null) {
        hideLoadingBar(); //TODO: needs to make this device agnostic? Or is loading bar for all devices and can be moved to UIHelper?
    }
};
//# sourceMappingURL=Exceptions.js.map;
var FavouriteAddedArgs = /** @class */ (function () {
    function FavouriteAddedArgs() {
    }
    return FavouriteAddedArgs;
}());
var FavouriteRemovedArgs = /** @class */ (function () {
    function FavouriteRemovedArgs() {
    }
    return FavouriteRemovedArgs;
}());
var FavouriteRefreshArgs = /** @class */ (function () {
    function FavouriteRefreshArgs() {
    }
    return FavouriteRefreshArgs;
}());
var Favourite = /** @class */ (function () {
    function Favourite(id, lat, lon, appMode) {
        this.id = id;
        this.latitude = lat;
        this.longitude = lon;
        this.appMode = appMode;
    }
    Favourite.prototype.toString = function () {
        var returnValue = this.id + "_" + this.latitude + "_" + this.longitude + "_" + this.appMode;
        return returnValue;
    };
    Favourite.fromObject = function (objectVal) {
        var returnValue = new Favourite();
        for (var prop in objectVal)
            returnValue[prop] = objectVal[prop];
        return returnValue;
    };
    Favourite.fromString = function (stringVal) {
        var returnValue = new Favourite();
        var vals = stringVal.split('_');
        returnValue.id = vals[0];
        returnValue.latitude = vals[1];
        returnValue.longitude = vals[2];
        returnValue.appMode = Number(vals[3]);
        return returnValue;
    };
    Favourite.prototype.save = function () {
        if (ApplicationState.UserIsSignedIn) {
            var val = Favourite.getAll();
            val.push(this);
            LocalAccountStorage.FavouritesCP.saveObject(val);
            //Favourite.incrementCPCount(ApplicationState.CurrentMode); //Cookies.CPFavourites.addValue(val.toString());
        }
        else {
            Cookie.Favourites.addValue(this.toString());
        }
        var totalCount = (Favourite.getAll().length);
        var args = { id: this.id, lat: Number(this.latitude), lon: Number(this.longitude), total: totalCount };
        Events.Fire(Favourite.favouriteAddedEvent, args);
        DataLayer.push({ event: 'e_favouriteClicked' });
        var faveRefreshArgs = new FavouriteRefreshArgs();
        faveRefreshArgs.total = totalCount;
        Favourite.favouritesRefreshEvent.Fire(faveRefreshArgs);
    };
    Favourite.prototype.exists = function () {
        if (ApplicationState.UserIsSignedIn) {
            var favObjs = Favourite.getAll();
            for (var i = 0; i < favObjs.length; i++) {
                if (favObjs[i].id == this.id) {
                    return true;
                }
            }
            return false;
        }
        else {
            return Cookie.Favourites.containsValue(this.toString());
        }
    };
    Favourite.prototype.delete = function () {
        if (ApplicationState.UserIsSignedIn) {
            var val = Favourite.getAll();
            for (var i = 0; i < val.length; i++) {
                if (val[i].id == this.id) {
                    val.splice(i, 1);
                    //Favourite.decrementCPCount(); //Cookies.CPFavourites.removeValue(val.toString());                
                }
            }
            LocalAccountStorage.FavouritesCP.saveObject(val);
        }
        else {
            Cookie.Favourites.removeValue(this.toString());
        }
        var totalCount = Favourite.getAll().length;
        var args = { id: this.id, lat: Number(this.latitude), lon: Number(this.longitude), total: totalCount };
        Events.Fire(Favourite.favouriteRemovedEvent, args);
        var faveRefreshArgs = new FavouriteRefreshArgs();
        faveRefreshArgs.total = totalCount;
        Favourite.favouritesRefreshEvent.Fire(faveRefreshArgs);
    };
    //static decrementCPCount(appMode: number) {
    //    appMode = appMode || ApplicationState.CurrentMode;
    //    var currentVal = Cookie.CPFavourites.getObject();
    //    var countForMode = currentVal[appMode] || 0;
    //    if (countForMode > 1)
    //        countForMode--;
    //    currentVal[appMode] = countForMode;
    //    Cookie.CPFavourites.saveObject(currentVal);
    //}
    //static incrementCPCount(appMode: number) {
    //    appMode = appMode || ApplicationState.CurrentMode;
    //    var currentVal = Cookie.CPFavourites.getObject();
    //    var countForMode = currentVal[appMode] || 0;
    //    countForMode++;
    //    currentVal[appMode] = countForMode;
    //    Cookie.CPFavourites.saveObject(currentVal);
    //}
    Favourite.getAll = function (appMode, userType, modeLess) {
        var returnValue = [];
        var cookieVal = "";
        if (ApplicationState.UserIsSignedIn && userType != UserType.Guest) {
            var val = LocalAccountStorage.FavouritesCP.get("");
            if (val != "") {
                var jsonObjs = JSON.parse(val);
                for (var i = 0; i < jsonObjs.length; i++) {
                    if (jsonObjs[i].appMode == (appMode || jsonObjs[i].appMode) && !modeLess) {
                        jsonObjs[i].appMode = jsonObjs[i].appMode.toString();
                        returnValue.push(Favourite.fromObject(jsonObjs[i]));
                    }
                    else if (modeLess) {
                        returnValue.push(Favourite.fromObject(jsonObjs[i]));
                    }
                }
            }
        }
        else {
            cookieVal = Cookie.Favourites.get("");
            if (cookieVal != "") {
                var vals = cookieVal.split("~");
                for (var i = 0; i < vals.length; i++) {
                    if (vals[i] != '') {
                        var obj = Favourite.fromString(vals[i]);
                        if (obj.appMode == (appMode || obj.appMode) && !modeLess) {
                            returnValue.push(obj);
                        }
                        else if (modeLess) {
                            returnValue.push(obj);
                        }
                    }
                }
            }
        }
        return returnValue;
    };
    Favourite.getFromString = function (favIds, appMode) {
        var returnValue = [];
        var vals = favIds.split(",");
        for (var i = 0; i < vals.length; i++) {
            if (vals[i] != '') {
                var obj = Favourite.fromString(vals[i]);
                obj.appMode = (appMode || obj.appMode);
                returnValue.push(obj);
            }
        }
        return returnValue;
    };
    Favourite.exists = function (id, appMode) {
        var favObjs = Favourite.getAll(appMode);
        for (var i = 0; i < favObjs.length; i++) {
            if (favObjs[i].id == id) {
                return true;
            }
        }
        return false;
    };
    Favourite.refreshIcons = function (element, animInOutClassPref) {
        if (animInOutClassPref === void 0) { animInOutClassPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" }; }
        element.find('.favouriteIcon').each(function (i, text) {
            var dataVal = $(this).attr('data-value');
            var id = dataVal.split('_')[0];
            var mode = parseInt(dataVal.split('_')[3]);
            var AppMode = null;
            if (mode == 1 || mode == 2) {
                AppMode = mode;
            }
            if (Favourite.exists(id)) {
                $(this).find('img').attr('src', Favourite.selectedIconURL);
                $(this).addClass("favouritedIcon");
            }
            else {
                $(this).find('img').attr('src', Favourite.unSelectedIconURL);
                $(this).removeClass("favouritedIcon");
            }
        });
        Favourite.rebindFavouriteEvents(element, animInOutClassPref);
    };
    Favourite.rebindFavouriteEvents = function (element, animInOutClassPref) {
        if (animInOutClassPref === void 0) { animInOutClassPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" }; }
        element.find('.favouriteIcon').each(function (i, text) {
            $(this).unbind('click').click(function () {
                favouriteIconClicked($(this), animInOutClassPref);
                return false;
            });
            $(this).find('img').unbind('hover').hover(function (e) {
                $(e.target).attr('src', Favourite.selectedIconURL);
                $(e.target).attr('alt', Translation.get('RemoveFromFavourites'));
            }, function (e) {
                if (!$(e.target).parent().hasClass("favouritedIcon")) {
                    $(e.target).attr('src', Favourite.unSelectedIconURL);
                    $(e.target).attr('alt', Translation.get('AddToFavorites'));
                }
            });
        });
    };
    Favourite.Add = function (favouriteObj, eventSourcePageName, inAnimClass) {
        var favouriteCount = 0;
        if (ApplicationState.UserIsSignedIn) {
            var val = LocalAccountStorage.FavouritesCP.get("");
            if (val != "") {
                var jsonObjs = JSON.parse(val);
                favouriteCount = jsonObjs.length;
            }
        }
        else {
            favouriteCount = Cookie.Favourites.getArray().length;
        }
        if (ApplicationState.UserIsSignedIn) {
            if (favouriteCount >= ConsumerProfile.UserAccountSettings.FavouriteLimit) {
                Favourite.maxSignedInCountEvent.Fire();
                return;
            }
        }
        else {
            if (favouriteCount >= ApplicationConfig.FavouriteLimit) {
                Favourite.maxCountEvent.Fire();
                return;
            }
        }
        favouriteObj.save();
        $('.favouriteIcon[data-value="' + favouriteObj.id + '_' + favouriteObj.latitude + '_' + favouriteObj.longitude + '_' + favouriteObj.appMode + '"] img').each(function () {
            if (inAnimClass)
                addAnimationClass($(this), inAnimClass);
            $(this).attr('src', Favourite.selectedIconURL);
            $(this).attr('alt', Translation.get('RemoveFromFavourites'));
            $(this).parent().addClass("favouritedIcon");
        });
        $('#favouriteTool').attr('title', Translation.get('RemoveFromFavourites'));
        Analytics.log(favouriteObj.id, 'favorite');
    };
    Favourite.Remove = function (favouriteObj, eventSourcePageName, outAnimClass) {
        if (eventSourcePageName != 'AddNotes') { //don't remove favourite if we are calling this from the add notes tool
            if (Note.exists(favouriteObj.id)) {
                Gigya.unfavouriteNoteConfirmation(favouriteObj);
            }
            else {
                favouriteObj.delete();
                $('.favouriteIcon[data-value="' + favouriteObj.id + '_' + favouriteObj.latitude + '_' + favouriteObj.longitude + '_' + favouriteObj.appMode + '"] img').each(function () {
                    addAnimationClass($(this), outAnimClass);
                    $(this).attr('src', Favourite.unSelectedIconURL);
                    $(this).attr('alt', Translation.get('AddToFavorites'));
                    $(this).parent().removeClass("favouritedIcon");
                });
            }
        }
    };
    Favourite.AddOrRemove = function (id, lat, lon, eventSourcePageName, appMode, refreshNotifications, refreshGigya, animInOutClassPref) {
        if (refreshGigya === void 0) { refreshGigya = true; }
        if (animInOutClassPref === void 0) { animInOutClassPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" }; }
        var returnValue;
        var iterate = 0;
        var favouriteObj = new Favourite(id, lat, lon, (appMode || ApplicationState.CurrentMode));
        if (Favourite.exists(id)) {
            Favourite.Remove(favouriteObj, eventSourcePageName, animInOutClassPref.animOutFavClass);
            returnValue = FavouriteState.Removed;
        }
        else {
            Favourite.Add(favouriteObj, eventSourcePageName, animInOutClassPref.animInFavClass);
            returnValue = FavouriteState.Added;
        }
        if (refreshGigya != false) {
            Gigya.saveConsumerFavourites();
        }
        return returnValue;
    };
    Favourite.getById = function (id) {
        var returnValue = null;
        if (ApplicationState.UserIsSignedIn) {
            var favs = LocalAccountStorage.FavouritesCP.getObjects(Favourite.fromObject);
            if (favs.length > 0) {
                for (var idx = 0; idx < favs.length; idx++) {
                    if (favs[idx].id == id) {
                        returnValue = favs[idx];
                    }
                }
            }
        }
        else {
            var favsCookieArray = Cookie.Favourites.getArray();
            for (var idx = 0; idx < favsCookieArray.length; idx++) {
                var favourite = Favourite.fromString(favsCookieArray[idx]);
                if (favourite.id == id) {
                    returnValue = favourite;
                    break;
                }
            }
        }
        return returnValue;
    };
    /**
     * Remove a favourite by ID
     * @param id
     */
    Favourite.removeById = function (id) {
        var fav = Favourite.getById(id);
        if (fav)
            fav.delete();
    };
    /**
     * Removes favourites that exist in the passed in API results
     * @param results
     * @param removeIfNotInResults wether or not to remove any favourites not in the passed in results (only set to true when ALL favs should be in results)
     */
    Favourite.removeTombstonedFavourites = function (results) {
        if (results.ErrorCode.Id != PublicContracts.ErrorCodeId.OK) {
            return;
        }
        //let favourites: Array<Favourite> = this.favourites_propIds != null && this.favourites_propIds.length > 0 ? this.favourites_propIds : Favourite.getAll(ApplicationState.CurrentMode);            
        var favIdsToRemove = [];
        var favs = Favourite.getAll();
        var favouriteNoLongerAvailable = false;
        for (var i = 0; i < results.Results.length; i++) {
            if (results.Results[i].StatusId && Number(results.Results[i].StatusId) != Number(ListingStatus.Active)) {
                favIdsToRemove.push(results.Results[i].Id);
            }
        }
        //if (removeIfNotInResults) {
        //    if (results.Paging.TotalRecords != favs.length) {
        //        for (var i = 0; i < favs.length; i++) {
        //            let foundResult: PublicContracts.ListingBasicDetails[] = results.Results.filter((val) => val.Id == favs[i].id);
        //            if (foundResult == null || foundResult.length == 0) {
        //                favIdsToRemove.push(favs[i].id);
        //                favouriteNoLongerAvailable = true;
        //            }
        //        }
        //    }
        //}
        if (favIdsToRemove.length > 0) {
            for (var i = 0; i < favIdsToRemove.length; i++) {
                Favourite.removeById(favIdsToRemove[i]);
            }
            if (favouriteNoLongerAvailable) {
                Favourite.favouriteNoLongerAvailable.Fire();
            }
            Gigya.saveConsumerFavourites(); //TODO: Fire event here that gigya class listens for instead of direct call (to remove dependency)
        }
    };
    Favourite.favouriteAddedEvent = 'favouriteAdded';
    Favourite.favouriteRemovedEvent = 'favouriteRemoved';
    //public static favouritesRefreshEvent: string = 'favouritesRefresh';    
    Favourite.favouritesRefreshEvent = new RealtorEvent("favouritesRefreshEvent");
    Favourite.favouriteNoLongerAvailable = new RealtorEvent("favouriteNoLongerAvailable");
    Favourite.maxSignedInCountEvent = new RealtorEvent("maxSignedInCountEvent");
    Favourite.maxCountEvent = new RealtorEvent("maxCountEvent");
    Favourite.selectedIconURL = '/images/common/icons/svg/heart.svg';
    Favourite.unSelectedIconURL = '/images/common/icons/svg/heart-empty.svg';
    return Favourite;
}());
//# sourceMappingURL=Favourites.js.map;
var FormValidation = /** @class */ (function () {
    function FormValidation() {
    }
    FormValidation.removeValidatorFromField = function (inputCon, validatorToRemove) {
        var validatorAttribute = inputCon.attr('data-validation') || "";
        if (validatorAttribute.toLowerCase().indexOf(validatorToRemove.toLowerCase()) == -1) {
            return;
        }
        else if (validatorAttribute != "") {
            inputCon.attr('data-validation', validatorAttribute.replace(validatorToRemove, "").replace(",,", ",").replace(/\,$/, ''));
        }
        var inputId = (inputCon.attr("id") || "");
        if (validatorToRemove.toLowerCase().indexOf("required") > -1 && inputId != "") {
            $('label[for="' + inputId + '"').removeClass("required");
        }
    };
    FormValidation.addValidatorToField = function (inputCon, validatorToAdd) {
        var validatorAttribute = inputCon.attr('data-validation') || "";
        if (validatorAttribute.toLowerCase().indexOf(validatorToAdd.toLowerCase()) > -1) {
            return;
        }
        else if (validatorAttribute != "") {
            inputCon.attr('data-validation', validatorAttribute + "," + validatorToAdd);
        }
        else {
            inputCon.attr('data-validation', validatorToAdd);
        }
        var inputId = (inputCon.attr("id") || "");
        if (validatorToAdd.toLowerCase().indexOf("required") > -1 && inputId != "") {
            $('label[for="' + inputId + '"').addClass("required");
        }
        else {
            $('label[for="' + inputId + '"').removeClass("required");
        }
    };
    FormValidation.validateForm = function (formElement, markAsInvalid, clearFieldValidation, manualValidators) {
        if (markAsInvalid === void 0) { markAsInvalid = FormValidation.markFieldAsInvalid; }
        if (clearFieldValidation === void 0) { clearFieldValidation = FormValidation.clearFieldValidation; }
        var returnValue = true;
        FormValidation.clearFieldValidation(formElement);
        formElement.find('[data-validation]').each(function (i, element) {
            var validators = FormValidation.getValidators($(this));
            Logging.Debug(validators.length + " validators found for field " + $(this).attr("id"), LogType.Validation);
            for (var i = 0; i < validators.length; i++) {
                var validationMessage = validators[i].Validatate();
                if ((validationMessage || "") != "") { //TODO: support multiple failures?
                    if (validators[i].Options != "noMark") {
                        FormValidation.markFieldAsInvalid($(this), validationMessage);
                    }
                    returnValue = false;
                    break; //Don't append all validation messages - matches r6 
                }
            }
        });
        if (manualValidators != null) {
            for (var i = 0; i < manualValidators.length; i++) {
                var validationMessage = manualValidators[i].Validatate();
                if ((validationMessage || "") != "") { //TODO: support multiple failures?                
                    FormValidation.markFieldAsInvalid($(this), validationMessage);
                    returnValue = false;
                }
            }
        }
        return returnValue;
    };
    FormValidation.getValidators = function (element) {
        var returnValue = [];
        var validationAttribute = element.attr('data-validation');
        var validationOptions = element.attr('data-validation-options') || "";
        var vals = validationAttribute.split(","); //TODO: handle escaped commas?
        var valOptions = validationOptions.split(",");
        for (var i = 0; i < vals.length; i++) {
            var validatorName = vals[i];
            var validatorArgs = "";
            var validatorHasArgs = validatorName.indexOf("(") > -1;
            if (validatorHasArgs) {
                validatorArgs = FormValidation.valueInBracketsRegex.exec(validatorName)[1];
                validatorName = validatorName.replace("(" + validatorArgs + ")", "");
            }
            var validatorFunction = FormValidation.getValidator(validatorName, element, validatorArgs, valOptions);
            if (validatorFunction != null) { //TODO: add handling for nulls
                returnValue.push(validatorFunction);
            }
        }
        return returnValue;
    };
    FormValidation.getValidator = function (type, field, args, options) {
        var returnValue;
        switch (type.toLowerCase()) {
            case "startswithletter": //I can't even... 
                returnValue = new InputValidator('startswithletter', field, args, FormValidation.validateStartWithLetter);
                break;
            case "nourls":
                returnValue = new InputValidator('nourls', field, args, FormValidation.validateNoURLs);
                break;
            case "date":
                returnValue = new InputValidator('date', field, args, FormValidation.validateDate);
                break;
            case "email":
                returnValue = new InputValidator('email', field, args, FormValidation.validateEmail);
                break;
            case "emailr6":
                returnValue = new InputValidator('emailr6', field, args, FormValidation.validateEmailR6);
                break;
            case "email_reenter":
                returnValue = new InputValidator('email_reenter', field, args, FormValidation.validateEmailReEnter);
                break;
            case "email_valid_consumer":
                returnValue = new InputValidator('email_valid_consumer', field, args, FormValidation.validateEmailConsumer);
                break;
            case "blockchars":
                returnValue = new InputValidator('blockchars', field, args, FormValidation.validateChars);
                break;
            case "phone":
                returnValue = new InputValidator('phone', field, args, FormValidation.validatePhone);
                break;
            case "required":
                returnValue = new InputValidator('required', field, args, FormValidation.validateRequired);
                break;
            case "required_if_visible":
                returnValue = new InputValidator('required_if_visible', field, args, FormValidation.validateRequiredIfVisible);
                break;
            case "keywords":
                returnValue = new InputValidator('keywords', field, args, FormValidation.validateKeywords);
                break;
            case "lessthan":
                break;
            case "greaterthan":
                break;
            case "consumer_password":
                returnValue = new InputValidator('consumer_password', field, args, FormValidation.validateConsumerPassword);
                break;
            case "consumer_password_reenter":
                returnValue = new InputValidator('consumer_password_reenter', field, args, FormValidation.validateConsumerPasswordReEnter);
                break;
            case "firstlast_name":
                returnValue = new InputValidator('firstlast_name', field, args, FormValidation.validateFirstLastName);
                break;
            case "last_name":
                returnValue = new InputValidator('last_name', field, args, FormValidation.validateLastName);
                break;
            case "first_name":
                returnValue = new InputValidator('first_name', field, args, FormValidation.validateFirstName);
                break;
            case 'savedsearchname':
                returnValue = new InputValidator("savedsearchname", field, args, FormValidation.validateSavedSearchName);
                break;
            case 'postalcode':
                returnValue = new InputValidator("postalcode", field, args, FormValidation.validatePostalCode);
                break;
            case 'nodefault':
                returnValue = new InputValidator("nodefault", field, args, FormValidation.validateNoDefault);
                break;
            case 'captcha':
                returnValue = new InputValidator("captcha", field, args, FormValidation.validateCaptcha);
                break;
            case "required_tou":
                returnValue = new InputValidator('required_tou', field, args, FormValidation.validateRequiredToU, undefined, options);
                break;
            ////Disabled as part of PRB_0012027
            //case "cctofrom":
            //    returnValue = new InputValidator("cctofrom", field, args, FormValidation.validateCCToFrom);
            //    break;
            default:
                returnValue = null;
        }
        return returnValue;
    };
    FormValidation.markFieldAsInvalid = function (field, message) {
        if (field.is("select") && field.siblings(".select2-container").length > 0) {
            field = field.siblings(".select2-container");
        }
        else if (field.find('#captcha').length > 0) {
            field = $(field.find("iframe")[0]);
        }
        field.addClass("validationFailed");
        field.after(" <span class='validationFailedMessage' data-validation-for='" + field.attr('id') + "'>" + message + '</span>');
    };
    FormValidation.clearFieldValidation = function (form) {
        form.find(".validationFailed").removeClass("validationFailed");
        form.find('.validationFailedMessage').remove();
    };
    FormValidation.throwFieldAsInvalid = function (field, message, style) {
        if (style === void 0) { style = ""; }
        if (field.find('.validationFailedMessage ' + style + '').length > 0) {
            field.find('.validationFailedMessage ' + style + '').text(message);
        }
        else {
            var label = $("label[for='" + field.attr('id') + "']");
            label.after("<span class='validationFailedMessage " + style + "'>" + message + '</span>');
        }
    };
    FormValidation.validateStartWithLetter = function (formElement, args) {
        var returnValue = "";
        if (formElement.val() != "") {
            if (formElement.val().match(FormValidation.numberStartRegEx)) {
                returnValue = Translation.get("MessageMustStartWithLetter");
            }
        }
        return returnValue;
    };
    FormValidation.validateNoURLs = function (formElement, args) {
        var returnValue = "";
        if (formElement.val() != "") {
            if (formElement.val().match(FormValidation.noUrlRegEx)) {
                returnValue = Translation.get("URLNotAllowed");
            }
        }
        return returnValue;
    };
    FormValidation.validateDate = function (formElement, args) {
        var returnValue = "";
        if (formElement.val() != "") {
            var value = void 0;
            if (formElement.attr("type") == "date") {
                value = stringToDate2(formElement.val());
            }
            else {
                value = stringToDate(formElement.val());
            }
            var minVal = new Date(formElement.attr("min"));
            minVal = new Date(minVal.getUTCFullYear(), minVal.getUTCMonth(), minVal.getUTCDate());
            var maxVal = new Date(formElement.attr("max"));
            maxVal = new Date(maxVal.getUTCFullYear(), maxVal.getUTCMonth(), maxVal.getUTCDate());
            if (value < minVal || value > maxVal || value.toString() == "Invalid Date") {
                returnValue = Translation.get("InvalidDate");
            }
        }
        return returnValue;
    };
    FormValidation.validateEmail = function (formElement, args) {
        var returnValue = "";
        var emailVal = getValue(formElement);
        if (!emailVal.match(FormValidation.emailValidRegEx)) {
            returnValue = Translation.get("InvalidEmail");
        }
        if (FormValidation.noHtmlTagRegEx.test(emailVal)) {
            returnValue = Translation.get("TheFollowingCharsAreNotAllowed").replace("{0}", "< >");
        }
        if (emailVal.length < 8) {
            returnValue = Translation.get("EmailLength");
        }
        return returnValue;
    };
    ////Disabled as part of PRB_0012027
    //static validateCCToFrom(formElement: JQuery, args: string): string {
    //    let returnValue: string = "";
    //    let val: string = getValue(formElement);
    //    //I hate this more than
    //    let tovalue: string = $("#" +args.split("|")[0]).val();
    //    let fromvalue: string = $("#" + args.split("|")[1]).val();
    //    let ccvalue: Boolean = $("#" + args.split("|")[2]).is(':checked');
    //    if ((fromvalue == tovalue) && (ccvalue)) {
    //        returnValue = Translation.get("CCAndToFieldCannotBeTheSame");
    //    }
    //    return returnValue;
    //}
    FormValidation.validateEmailR6 = function (formElement, args) {
        var returnValue = "";
        var emailVal = getValue(formElement);
        if (!emailVal.match(FormValidation.emailValidRegEx)) {
            returnValue = Translation.get("InvalidEmail");
        }
        if (FormValidation.noHtmlTagRegEx.test(emailVal)) {
            returnValue = Translation.get("TheFollowingCharsAreNotAllowed").replace("{0}", "< >");
        }
        return returnValue;
    };
    FormValidation.validatePhone = function (formElement, args) {
        var returnValue = "";
        var emailVal = getValue(formElement);
        if (emailVal != "") {
            if (!emailVal.match(FormValidation.phoneRegEx)) {
                returnValue = Translation.get("InvalidPhone"); //Switching back to this after speaking with SA
                //returnValue = Translation.get("TheFollowingCharsAreNotAllowed").replace("{0}", "< >"); //TODO: fix this, higherups decided they just wanted it like R6 even if it didn't make sense
            }
        }
        return returnValue;
    };
    FormValidation.validateKeywords = function (formElement, args) {
        var returnValue = "";
        var inputValue = getValue(formElement);
        var currentKeywordsInputArr = inputValue.split(",");
        var currentKeywordsArray = (AutoCompleteKeywordData || "").replace(/\"/g, "").split('|');
        var currentSelect2Dict = new Dictionary();
        currentSelect2Dict.AddList(currentKeywordsArray, currentKeywordsArray);
        if (inputValue != "") {
            if (currentKeywordsInputArr.length > 5) { //TODO make config?
                returnValue = Translation.get("KeywordTooMany");
            }
            else {
                for (var i = 0; i < currentKeywordsInputArr.length; i++) {
                    //Verify that the length of the keyword exceeds in length
                    //and its inexistence in the autocomplete list
                    if (currentKeywordsInputArr[i].trim().length > 30 &&
                        !currentSelect2Dict.ContainsKey(currentKeywordsInputArr[i].trim())) {
                        returnValue = Translation.get("KeywordTooLong");
                        break;
                    }
                }
            }
        }
        return returnValue;
    };
    FormValidation.validateChars = function (formElement, args, addInput) {
        var returnValue = "";
        var value = getValue(formElement);
        if (value != null && value.length > 0) {
            for (var i = 0; i < args.length; i++) {
                var blockedLetter = args.substring(i, i + 1);
                if (value.indexOf(blockedLetter) > -1) {
                    returnValue = Translation.get("TheFollowingCharsAreNotAllowed").replace("{0}", args);
                }
            }
        }
        if (addInput != null) {
            value = addInput;
            for (var i = 0; i < args.length; i++) {
                var blockedLetter = args.substring(i, i + 1);
                if (value.indexOf(blockedLetter) > -1) {
                    returnValue = Translation.get("TheFollowingCharsAreNotAllowed").replace("{0}", args);
                }
            }
        }
        return returnValue;
    };
    FormValidation.validateRequired = function (formElement) {
        var returnValue = "";
        var value = getValue(formElement);
        if (value == "" || (value == "0" && formElement[0].tagName.toLowerCase() == "select")) {
            returnValue = Translation.get("ThisIsAMandatoryField");
        }
        return returnValue;
    };
    FormValidation.validateRequiredIfVisible = function (formElement) {
        var returnValue = "";
        if (formElement.is(":visible")) {
            var value = getValue(formElement);
            if (value == "" || (value == "0" && formElement[0].tagName.toLowerCase() == "select")) {
                returnValue = Translation.get("ThisIsAMandatoryField");
            }
        }
        return returnValue;
    };
    FormValidation.validateConsumerPassword = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        if (!value.match(FormValidation.consumerPasswordRegex)) {
            returnValue = Translation.get("PasswordStrength");
        }
        return returnValue;
    };
    FormValidation.validateConsumerPasswordReEnter = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        var oldvalue = $("#" + args).val();
        if (value != oldvalue) {
            returnValue = Translation.get("PasswordNoMatch");
        }
        return returnValue;
    };
    FormValidation.validateEmailReEnter = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        var oldvalue = $("#" + args).val();
        if (value != oldvalue) {
            returnValue = Translation.get("EmailNoMatch");
        }
        return returnValue;
    };
    FormValidation.validateSavedSearchName = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        if (SavedSearch.IsSearchNameIsUnique(value) == false) {
            returnValue = Translation.get("SaveSearchNameMustBeUnique");
        }
        return returnValue;
    };
    FormValidation.validateFirstLastName = function (formElement, args, addInput) {
        var returnValue = "";
        var value = getValue(formElement).charAt(0).trim();
        if (getValue(formElement).trim().length == 0 ||
            (value.match(FormValidation.numberStartRegEx) ||
                !value.match(FormValidation.validFirstLastNameRegEx))) {
            returnValue = Translation.get("FirstLastNameValidationError");
        }
        if (addInput != null && value.length == 0) {
            value = addInput === null || addInput === void 0 ? void 0 : addInput.trim();
            if (value.length == 0 || (value.match(FormValidation.numberStartRegEx) ||
                !value.match(FormValidation.validFirstLastNameRegEx))) {
                returnValue = Translation.get("FirstLastNameValidationError");
            }
        }
        return returnValue;
    };
    FormValidation.validateFirstName = function (formElement, args, addInput) {
        var returnValue = "";
        var value = getValue(formElement).charAt(0).trim();
        if (getValue(formElement).trim().length == 0 || (value.match(FormValidation.numberStartRegEx)
            || !value.match(FormValidation.validFirstLastNameRegEx))) {
            returnValue = Translation.get("FirstNameValidationError");
        }
        if (addInput != null && value.length == 0) {
            value = addInput === null || addInput === void 0 ? void 0 : addInput.trim();
            if (value.length == 0 || (value.match(FormValidation.numberStartRegEx)
                || !value.match(FormValidation.validFirstLastNameRegEx))) {
                returnValue = Translation.get("FirstNameValidationError");
            }
        }
        return returnValue;
    };
    FormValidation.validateLastName = function (formElement, args, addInput) {
        var returnValue = "";
        var value = getValue(formElement).charAt(0).trim();
        if (getValue(formElement).trim().length == 0 || (value.match(FormValidation.numberStartRegEx)
            || !value.match(FormValidation.validFirstLastNameRegEx))) {
            returnValue = Translation.get("LastNameValidationError");
        }
        if (addInput != null && value.length == 0) {
            value = addInput === null || addInput === void 0 ? void 0 : addInput.trim();
            if (value.length > 0 || (value.match(FormValidation.numberStartRegEx)
                || !value.match(FormValidation.validFirstLastNameRegEx))) {
                returnValue = Translation.get("LastNameValidationError");
            }
        }
        return returnValue;
    };
    FormValidation.validatePostalCode = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        var country = $("#" + args).val();
        if (value != "") {
            if (country == '1' && !value.match(FormValidation.postalCodeRegex)) {
                returnValue = Translation.get("PleaseEnterPostalCodeCorrectFormat");
            }
        }
        return returnValue;
    };
    FormValidation.validateNoDefault = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        var defaultVal = args;
        if (value == defaultVal) {
            returnValue = Translation.get("ThisIsAMandatoryField");
        }
        return returnValue;
    };
    FormValidation.validateCaptcha = function (formElement, args) {
        var returnValue = "";
        var opt_widget_id = ($("#" + args).attr('data-captcha-widget-id'));
        var value = grecaptcha.getResponse(((opt_widget_id || "") != "" ? +opt_widget_id : null));
        //let defaultVal: string = args;
        if (value == "") {
            returnValue = Translation.get("ThisIsAMandatoryField");
        }
        return returnValue;
    };
    FormValidation.validateRequiredToU = function (formElement, formField) {
        var returnValue = "";
        var value = getValue(formElement);
        if (value == "" || (value == "0" && formElement[0].tagName.toLowerCase() == "select")) {
            FormValidation.throwFieldAsInvalid($('#' + formField), Translation.get("TermsOfUseError"));
            returnValue = Translation.get("TermsOfUseError");
        }
        return returnValue;
    };
    FormValidation.validateEmailConsumer = function (formElement, args) {
        var returnValue = "";
        var value = getValue(formElement);
        if (value != null && value.match(FormValidation.emailInvalidRegex)) {
            returnValue = Translation.get("PleaseEnterValidEmailPrefix");
        }
        return returnValue;
    };
    // Actual implementation that is a true representation of all the cases the function body needs to handle
    FormValidation.noUrlRegEx = /(ftp(s|):\/\/|http(s|):\/\/|http(s|):\/\/www\.|www\.)(([0-9]{1,3}\.){3}[0-9]{1,3}|.+?\.(ca|org|com|biz|ru|net|de|jp|uk|br|pl|in))/gi;
    FormValidation.validFirstLastNameRegEx = /^[a-zà-ÿ() ,.'-]+/gi;
    FormValidation.numberStartRegEx = /^[0-9].*$/;
    FormValidation.emailValidRegEx = /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/gi;
    FormValidation.noHtmlTagRegEx = /[\<\>]/;
    FormValidation.phoneRegEx = /^[0-9+\(\)\s\/-]+$/;
    FormValidation.valueInBracketsRegex = /\(([^)]+)\)/;
    FormValidation.consumerPasswordRegex = /^(?=(.*[\d]))(?=(.*[\W]){1,})(?!.*\s).{8,}$/i;
    FormValidation.postalCodeRegex = /^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$/;
    FormValidation.emailInvalidRegex = /(?:^|(?=\s))(?=admin@|email@|info@|mail@|marketing@|none@|orders@|sales@|support@|test@|webmaster@)(\w[\w\.]*@\w+\.[\w\.]+)\b/gi;
    FormValidation.punctuationRegex = /[\u0021-\u002B-\u002D-\u002F-\u003A-\u0040-\u005B-\u0060-\u007B-\u007E-\u00A0-\u00BF-\u02B0-\u02FF-\u2013-\u204A]+/g;
    return FormValidation;
}());
var InputValidator = /** @class */ (function () {
    function InputValidator(name, field, args, validator, addInput, options) {
        this.Validator = validator;
        this.Field = field;
        this.Args = args;
        this.Name = name;
        this.AddInput = addInput;
        this.Options = options;
    }
    InputValidator.prototype.Validatate = function () {
        var returnValue = this.Validator(this.Field, this.Args, this.AddInput, this.Options);
        if (returnValue != "") {
            Logging.Debug("Validator '" + this.Name + "' failed for '" + this.Field.attr("id") + "' with args '" + this.Args.toString() + "'", LogType.Validation);
        }
        return returnValue;
    };
    InputValidator.manageValidation = function (inputs, event) {
        for (var i = 0; i < inputs.length; i++) {
            var validationMessage = inputs[i].Validatate();
            if ((validationMessage || "") != "") {
                FormValidation.markFieldAsInvalid(inputs[i].Field, validationMessage);
                event.preventDefault();
                return false;
            }
        }
        return true;
    };
    return InputValidator;
}());
(function (FormValidation) {
    var FieldType;
    (function (FieldType) {
        FieldType[FieldType["Unknown"] = 0] = "Unknown";
        FieldType[FieldType["Textbox"] = 1] = "Textbox";
        FieldType[FieldType["Dropdown"] = 2] = "Dropdown";
        FieldType[FieldType["Multiselect"] = 3] = "Multiselect";
        FieldType[FieldType["InputList"] = 4] = "InputList";
        FieldType[FieldType["CheckBoxOrRadio"] = 5] = "CheckBoxOrRadio";
    })(FieldType = FormValidation.FieldType || (FormValidation.FieldType = {}));
})(FormValidation || (FormValidation = {}));
//# sourceMappingURL=FormValidation.js.map;
/**
 * Created for Email forms to default values via previously used values
 */
var FormValueStorage = /** @class */ (function () {
    function FormValueStorage() {
    }
    /**
    * Get current cache busting form param value
    */
    FormValueStorage.getCurrentFormCacheParam = function () {
        //Clear old Form value in Local storage if they exist
        if (ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",") != null &&
            ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",").length == 2) {
            return ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",")[1];
        }
        return "";
    };
    /**
    * Get previous cache busting form param value
    */
    FormValueStorage.getPreviousFormCacheParam = function () {
        //Clear old Form value in Local storage if they exist
        if (ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",") != null &&
            ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",").length == 2) {
            return ApplicationConfig.FormValueStorageCacheParamOldAndNew.split(",")[0];
        }
        return "";
    };
    /**
     * Clear old form data that we dont want the users to have anymore
     */
    FormValueStorage.clearOldFormData = function () {
        //Clear old Form value in Local storage if they exist
        localStorage.removeItem(EmailRealtorModel.EmailFirstNameKeyBinding +
            FormValueStorage.getPreviousFormCacheParam());
        localStorage.removeItem(EmailRealtorModel.EmailLastNameKeyBinding +
            FormValueStorage.getPreviousFormCacheParam());
        localStorage.removeItem(EmailRealtorModel.MyEmailKeyBinding +
            FormValueStorage.getPreviousFormCacheParam());
        localStorage.removeItem(EmailRealtorModel.MyPhoneKeyBinding +
            FormValueStorage.getPreviousFormCacheParam());
        localStorage.removeItem(EmailRealtorModel.WorkingRealtorNameKeyBinding +
            FormValueStorage.getPreviousFormCacheParam());
    };
    /**
     * Take element and fill val of controls with data-sessionstorage-key set from session storage
     * @param form
     */
    FormValueStorage.fillForm = function (form) {
        form.find("[" + FormValueStorage.FormDataStorageKeyBinding + "]").each(function (i, text) {
            var key = $(this).attr(FormValueStorage.FormDataStorageKeyBinding) + FormValueStorage.getCurrentFormCacheParam();
            var valueFromSession = localStorage.getItem(key);
            var valueFromModel = $(this).attr('value');
            if ((ApplicationState.UserIsSignedIn == false && (valueFromSession || "") != "") || (ApplicationState.UserIsSignedIn == true && (valueFromModel || "") == "")) {
                $(this).val(valueFromSession);
            }
        });
    };
    /**
     *
     * @param form
     */
    FormValueStorage.saveForm = function (form) {
        form.find("[" + FormValueStorage.FormDataStorageKeyBinding + "]").each(function (i, text) {
            var key = $(this).attr(FormValueStorage.FormDataStorageKeyBinding) + FormValueStorage.getCurrentFormCacheParam();
            var value = $(this).val() || "";
            if (value != "") {
                localStorage.setItem(key, value);
            }
        });
    };
    FormValueStorage.FormDataStorageKeyBinding = 'data-storage-key';
    return FormValueStorage;
}());
//# sourceMappingURL=FormValueStorage.js.map;
/** This file is used to add 'typings/definitions' for external javascript libraries so that Typescript knows about them and they can be called inside typecript
Should only be used when there are no typescript defitions available via nuget package (like there is for major libraries like jquery **/
var Dictionary = /** @class */ (function () {
    function Dictionary() {
        this.items = {};
        this.count = 0;
    }
    Dictionary.prototype.ContainsKey = function (key) {
        return this.items.hasOwnProperty(key);
    };
    Dictionary.prototype.Count = function () {
        return this.count;
    };
    Dictionary.prototype.Add = function (key, value) {
        if (!this.items.hasOwnProperty(key))
            this.count++;
        this.items[key] = value;
    };
    Dictionary.prototype.AddList = function (values, keys) {
        if (keys != null && keys.length == values.length) {
            for (var value in values) {
                if (!this.items.hasOwnProperty(keys[value]))
                    this.count++;
                this.items[keys[value]] = values[value];
            }
        }
        else {
            for (var value in values) {
                if (!this.items.hasOwnProperty(values[value.toString()]))
                    this.count++;
                this.items[values[value.toString()]] = values[value];
            }
        }
    };
    Dictionary.prototype.Remove = function (key) {
        var val = this.items[key];
        delete this.items[key];
        this.count--;
        return val;
    };
    Dictionary.prototype.Item = function (key) {
        return this.items[key];
    };
    Dictionary.prototype.Keys = function () {
        var keySet = [];
        for (var prop in this.items) {
            if (this.items.hasOwnProperty(prop)) {
                keySet.push(prop);
            }
        }
        return keySet;
    };
    Dictionary.prototype.Values = function () {
        var values = [];
        for (var prop in this.items) {
            if (this.items.hasOwnProperty(prop)) {
                values.push(this.items[prop]);
            }
        }
        return values;
    };
    return Dictionary;
}());
var DialogOpenedEventArgs = /** @class */ (function () {
    function DialogOpenedEventArgs(id, closer) {
        this.Id = id;
        this.Closer = closer;
    }
    return DialogOpenedEventArgs;
}());
var DialogClosedEventArgs = /** @class */ (function () {
    function DialogClosedEventArgs(id) {
        this.Id = id;
    }
    return DialogClosedEventArgs;
}());
Number.prototype.format99Plus = function () {
    if (this > 99) {
        return "99+";
    }
    else {
        return this.toString();
    }
};
//# sourceMappingURL=Interfaces.js.map;
var selectorCache = {};
/**
 * Wrapper for jquery selector that stores the result in a simple global cache.
 * Meant for selectors used in repetitive sections like window scroll events.
 * @param selector
 */
function jCache(selector) {
    var val = selectorCache[selector];
    if (val != null) {
        return val;
    }
    else {
        val = $(selector);
        selectorCache[selector] = val;
        return val;
    }
}
/**
 * Clears the global jQuery cache.
 */
function clearjCache() {
    selectorCache = {};
}
//# sourceMappingURL=JQueryCache.js.map;
/************************
This script contains all the necessary code to run the map assistant.
Feel free to modify any of it's content to adapt it to your needs.
************************/
var locallogic = /** @class */ (function () {
    function locallogic() {
    }
    Object.defineProperty(locallogic, "zoomInBtn", {
        get: function () {
            return $('#ll-zoomInToView');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "heatmapLegend", {
        get: function () {
            return $('#ll-heatmapLegend');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "mapAssistantContainer", {
        get: function () {
            return $('.crea-map-assistant');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "mapAssistantToggle", {
        get: function () {
            return $('.map-assistant-toggle');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "mapAssistantToggleCon", {
        get: function () {
            return $('.map-assistant-toggle-con');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "heatMapsEnabled", {
        get: function () {
            return window.llHeatmaps.isEnable();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(locallogic, "schoolsEnabled", {
        get: function () {
            return window.llSchools.isEnable();
        },
        enumerable: false,
        configurable: true
    });
    locallogic.createMapAssistant = function (options) {
        document.addEventListener('ll-heatmaps-exceeded-max-viewport', function () {
            if (window.llHeatmaps.isEnable()) {
                locallogic.HeatmapViewportUnsupported = true;
                locallogic.refreshUI();
                //locallogic.handleExceededViewport('heatmaps');
            }
        });
        document.addEventListener('ll-schools-exceeded-max-viewport', function () {
            if (window.llSchools.isEnable()) {
                locallogic.SchoolViewportUnsupported = true;
                locallogic.refreshUI();
                //locallogic.handleExceededViewport('schools');
            }
        });
        document.addEventListener('ll-heatmaps-within-max-viewport', function () {
            if (window.llHeatmaps.isEnable()) {
                locallogic.HeatmapViewportUnsupported = false;
                locallogic.refreshUI();
                //locallogic.handleViewportFits('heatmaps');
            }
        });
        document.addEventListener('ll-schools-within-max-viewport', function () {
            if (window.llSchools.isEnable()) {
                locallogic.SchoolViewportUnsupported = false;
                locallogic.refreshUI();
                //locallogic.handleViewportFits('schools');
            }
        });
        ///////////////////////////////////////////////////////////
        // Variables
        ///////////////////////////////////////////////////////////
        var locale = options.locale || 'en';
        locallogic.map = options.googleMapsMap;
        locallogic.mapContainer = options.mapContainer;
        var checkmarkSvg = '<svg viewBox="0 0 20 20"><path d="M7.629,14.566c0.125,0.125,0.291,0.188,0.456,0.188c0.164,0,0.329-0.062,0.456-0.188l8.219-8.221c0.252-0.252,0.252-0.659,0-0.911c-0.252-0.252-0.659-0.252-0.911,0l-7.764,7.763L4.152,9.267c-0.252-0.251-0.66-0.251-0.911,0c-0.252,0.252-0.252,0.66,0,0.911L7.629,14.566z"></path></svg>';
        var toggleButtonIcon = '<span class="crea-map-assistant-icon"><span class="crea-map-assistant-icon-item"></span><span class="crea-map-assistant-icon-item"></span><span class="crea-map-assistant-icon-item"></span></span>';
        ///////////////////////////////////////////////////////////
        // Create the containers and toggle button
        ///////////////////////////////////////////////////////////     
        var $mapAssistantOuterContainer = jQuery('<div>', {
            class: 'map-assistant-popup-con'
        });
        var $mapAssistantInnerContainer = jQuery('<div>', {
            class: 'map-assistant-popup'
        });
        var $mapAssistantToggleCon = jQuery('<div>', {
            class: 'map-assistant-toggle-con'
        });
        var $mapAssistantToggle = jQuery('<span>', {
            class: 'map-assistant-toggle',
            html: toggleButtonIcon,
            click: locallogic.toggleAssistant
        });
        var $mapAssistantContainer = jQuery('<div>', { class: locallogic.assistantDivClass });
        if (ApplicationState.IsMobileDevice == false) {
            $mapAssistantToggleCon.attr("title", Translation.get("LocalLogicMapToggleLabel"));
        }
        $mapAssistantToggleCon.addClass("hide");
        $mapAssistantToggle.appendTo($mapAssistantToggleCon);
        $mapAssistantInnerContainer.appendTo($mapAssistantOuterContainer);
        $mapAssistantOuterContainer.appendTo($mapAssistantContainer);
        $mapAssistantToggleCon.appendTo($mapAssistantContainer);
        ///////////////////////////////////////////////////////////////////////////////////
        // This method creates the custom UI using the methods of the LocalLogic SDK  
        // @id string: 'heatmaps' or 'schools'
        // @llWidget object: an instance of locallogic.LocalMaps or locallogic.LocalSchools 
        // @bTitles boolean: specify whether or not to display the category titles
        // @bCheckmarks boolean: specify whether or not to checkmark icons, 
        // if false, LocalLogic icons will be used
        ///////////////////////////////////////////////////////////////////////////////////
        function createFilterUI(id, llWidget, bTitles, bCheckmarks) {
            //Too late to catch the first firing all the time (race condition)
            //document.addEventListener('ll-' + id + '-exceeded-max-viewport', function () {
            //    console.log('The map viewport is too large to display the ' + id);
            //    locallogic.ViewportUnsupported = true;
            //    locallogic.refreshUI();
            //    locallogic.ViewportTooLarge.Fire({ id: id });
            //});
            //document.addEventListener('ll-' + id + '-within-max-viewport', function () {
            //    console.log('The map viewport is small enough to display the ' + id);
            //    locallogic.ViewportUnsupported = false;
            //    locallogic.refreshUI();
            //    locallogic.ViewportCorrect.Fire({ id: id });
            //});
            function toggleFilters(e) {
                var $this = jQuery(e.target);
                if (jQuery('input[name=' + id + 'OnOff]:checked').val() === 'on') {
                    llWidget.enable();
                    $container.addClass('activated');
                    locallogic.FilterToggled.Fire({ id: id, enabled: true });
                    locallogic.refreshUI();
                }
                else {
                    llWidget.disable();
                    $container.removeClass('activated');
                    locallogic.FilterToggled.Fire({ id: id, enabled: false });
                    locallogic.refreshUI();
                }
            }
            function toggleSelection(e) {
                var $this = jQuery(e.target);
                var score = $this.prop('value');
                $this.parent().toggleClass('filter-selected');
                if (!$container.hasClass('activated')) {
                    llWidget.enable();
                    $container.addClass('activated');
                    $onRadio.prop('checked', true);
                    $offRadio.prop('checked', false);
                }
                if (jQuery(e.target).prop('checked')) {
                    llWidget.selectionAdd(score);
                    locallogic.FilterOptionToggled.Fire({ id: id, enabled: true });
                }
                else {
                    llWidget.selectionRemove(score);
                    locallogic.FilterOptionToggled.Fire({ id: id, enabled: false });
                }
            }
            var $container = jQuery('<div>', {
                class: (llWidget.isEnable()) ? id + '-container activated' : id + '-container'
            });
            var $onOff = jQuery('<fieldset>', {
                id: id + 'OnOff',
                class: 'filters-on-off'
            });
            var $on = jQuery('<label>', {
                text: locallogic._dictionary[id][locale],
            });
            var $onRadio = jQuery('<input>', {
                type: 'radio',
                value: 'on',
                name: id + 'OnOff',
                checked: llWidget.isEnable(),
                change: toggleFilters
            });
            var $off = jQuery('<label>', {
                text: locallogic._dictionary[id][locale]
            });
            var $offRadio = jQuery('<input>', {
                type: 'radio',
                value: 'off',
                name: id + 'OnOff',
                checked: (!llWidget.isEnable()),
                change: toggleFilters
            });
            $onRadio.appendTo($on);
            $offRadio.appendTo($off);
            $on.appendTo($onOff);
            $off.appendTo($onOff);
            $onOff.appendTo($container);
            var $categoriesList = jQuery('<fieldset>', { class: 'filters' });
            if (llWidget.categories) {
                jQuery.each(llWidget.categories(), function (index, category) {
                    if (bTitles) {
                        var $title = jQuery('<span>', { class: 'category-title' });
                        $title.text(locallogic._dictionary[category.title][locale]);
                        $title.appendTo($categoriesList);
                    }
                    jQuery.each(category.scores, function (index, score) {
                        var $filterItem = jQuery('<label>', {
                            class: (llWidget.selectionHas(score)) ? id + '-filter filter-selected' : id + '-filter',
                            text: locallogic._dictionary[score][locale]
                        });
                        var $filterItemCheckbox = jQuery('<input>', {
                            value: score,
                            type: 'checkbox',
                            checked: llWidget.selectionHas(score),
                            change: toggleSelection
                        });
                        var $filterItemIcon = jQuery('<span>', {
                            html: (bCheckmarks) ? checkmarkSvg : locallogic._icons[score]
                        });
                        $filterItemIcon.appendTo($filterItem);
                        $filterItemCheckbox.appendTo($filterItem);
                        $filterItem.appendTo($categoriesList);
                    });
                });
                $categoriesList.appendTo($container);
            }
            return $container;
        }
        /////////////////////////////////////////////
        // Create the Local Logic instances
        // Create a custom UIs for each instance 
        // Append the custom UI to the Map Assistant
        // Add the Map Assistant as a map control
        //////////////////////////////////////////////  
        window.llHeatmaps = new locallogic.LocalMaps({
            googleMapsMap: locallogic.map,
            locale: locale,
            disable: true
        });
        window.llSchools = new locallogic.LocalSchools({
            googleMapsMap: locallogic.map,
            locale: locale,
            color: '#23A1C0' //,
            //detailsMapPosition: 'BOTTOM_CENTER'
        });
        //window.llNeighbourhoods = new locallogic.LocalBoundaries({
        //    googleMapsMap: locallogic.map,
        //    locale: locale,
        //    color: '#23A1C0',
        //    detailsMapPosition: 'TOP_RIGHT',
        //    disable: true
        //});
        //////////////////////////////////////////////////
        // Important: check that the widgets are ready
        // before using the methods.
        //////////////////////////////////////////////////
        var isReadyInterval = window.setInterval(function () {
            if (window.llHeatmaps.isReady() && window.llSchools.isReady()) {
                window.clearInterval(isReadyInterval);
                //Return if the control has already been added
                var controlArray = locallogic.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].j;
                if (controlArray && controlArray.length > 0) {
                    for (var i = 0; i < controlArray.length; i++) {
                        if (controlArray[i].classList && controlArray[i].classList.contains(locallogic.assistantDivClass)) {
                            return;
                        }
                    }
                }
                $mapAssistantInnerContainer.append(createFilterUI('schools', window.llSchools, true, true));
                $mapAssistantInnerContainer.append(createFilterUI('heatmaps', window.llHeatmaps, false, false));
                //$mapAssistantInnerContainer.append(createFilterUI('neighbourhoods', window.llNeighbourhoods, false, false));
                var footerimage = jQuery('<img>', {
                    src: '/images/' + ApplicationState.LanguageAttribute + '-ca/powered_by_locallogic.svg'
                });
                var footerimagecon = jQuery('<a>', {
                    class: 'll-logo-con',
                    href: 'https://www.locallogic.co/' + ApplicationState.LanguageAttribute,
                    target: '_blank',
                    rel: 'noopener noreferrer'
                });
                footerimage.appendTo(footerimagecon);
                $mapAssistantInnerContainer.append(footerimagecon);
                locallogic.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push($mapAssistantContainer[0]);
                var appendedLayerIconControls = window.setInterval(function () {
                    if ($('.map-assistant-toggle-con').length > 0 && locallogic.AssistantIsLoaded == false) {
                        window.clearInterval(appendedLayerIconControls);
                        $('.map-assistant-toggle-con').append('<div id="ll-heatmapLegend"><img src="/images/common/icons/svg/lifestyle_legend.svg" /><span>' + Translation.get('Best') + '</span></div>');
                        $('.map-assistant-toggle-con').append('<div id="ll-zoomInToView"><div class="localLogicStyleBtn">' + Translation.get('ZoomToView') + '</div></div>');
                        //vclick info https://stackoverflow.com/questions/6235794/jquery-mobile-for-every-live-tap-event-should-there-be-an-equivalent-click-even
                        locallogic.zoomInBtn.on("click vclick", function () {
                            locallogic.zoomInBtn.toggleClass("show", false);
                            locallogic.ZoomInClicked.Fire();
                        });
                        locallogic.addEvents();
                        locallogic.refreshUI();
                        locallogic.refreshFilterConMaxHeight();
                        locallogic.mapAssistantToggleCon.removeClass("hide");
                        //console.log('z' + locallogic.AssistantIsLoaded);
                        locallogic.AssistantIsLoaded = true;
                        locallogic.AssistantLoaded.Fire();
                    }
                }, 100);
            }
        }, 100);
    };
    locallogic.addEvents = function () {
        var attributeName = "data-ll-mapevents";
        if (!document.querySelector('body').getAttribute(attributeName)) {
            document.addEventListener('ll-select-school', function (e) {
                DataLayer.throttledPush({ event: "e_school_icon" }, 1000);
                locallogic.SchoolSelected.Fire(e.detail);
            });
            document.addEventListener('ll-unselect-school', function (e) { locallogic.SchoolUnselected.Fire(); });
            document.addEventListener('ll-select-boundary', function (e) { locallogic.BoundrySelected.Fire(e.detail); });
            document.addEventListener('ll-unselect-boundary', function (e) { locallogic.BoundryUnSelected.Fire(e.detail); });
            document.addEventListener('ll-force-collapse-school-details', function () {
                locallogic.SchoolDetailsHidden.Fire();
            });
            locallogic.map.addListener('maptypeid_changed', function () {
                locallogic.refreshUI();
            });
            $(document).on('click', function (event) {
                if ($('.crea-map-assistant.assistant-open').length && !$(event.target).closest('.crea-map-assistant').length) {
                    locallogic.toggleAssistant(event);
                }
            });
            document.querySelector('body').setAttribute(attributeName, "1");
        }
    };
    //static handleExceededViewport(id: string) {
    //    locallogic.ViewportUnsupported = true;
    //    locallogic.refreshUI();
    //    //locallogic.ViewportTooLarge.Fire({ id: id });
    //}
    //static handleViewportFits(id: string) {
    //    locallogic.ViewportUnsupported = false;
    //    locallogic.refreshUI();
    //    //locallogic.ViewportCorrect.Fire({ id: id });
    //}
    locallogic.refreshUI = function () {
        var isUILoaded = $('#ll-zoomInToView').length > 0 && $('#ll-heatmapLegend').length > 0;
        if (isUILoaded) {
            var showZoomInButton = (locallogic.HeatmapViewportUnsupported && locallogic.heatMapsEnabled) || (locallogic.SchoolViewportUnsupported && locallogic.schoolsEnabled);
            var showHeatmapLegend = locallogic.heatMapsEnabled && showZoomInButton == false && window.llHeatmaps.selection().length > 0;
            if (locallogic.CurrentUIStateKey != (showZoomInButton + "_" + showHeatmapLegend)) {
                if (showHeatmapLegend)
                    locallogic.zoomInBtn.hide();
                if (showZoomInButton)
                    locallogic.heatmapLegend.hide();
                locallogic.toggleHeatmapLegend(showHeatmapLegend);
                locallogic.toggleZoomIn(showZoomInButton);
            }
            locallogic.CurrentUIStateKey = showZoomInButton + "_" + showHeatmapLegend;
        }
    };
    locallogic.toggleAssistant = function (e) {
        if (e === void 0) { e = null; }
        //Not sure why this is here. Commenting out since it stops the promo qtip from disapearing (event won't bubble to document.click)
        //if (e) {
        //    e.stopPropagation();
        //}
        locallogic.mapAssistantContainer.toggleClass('assistant-open');
        locallogic.refreshUI();
        locallogic.refreshFilterConMaxHeight();
        locallogic.AssistantToggled.Fire();
    };
    locallogic.toggleZoomIn = function (show) {
        window.clearTimeout(locallogic.showZoomInBtnTimeout);
        window.clearTimeout(locallogic.hideZoomInBtnTimeout);
        if (show) {
            locallogic.zoomInBtn.show();
            locallogic.mapAssistantContainer.toggleClass("disabled", true);
            locallogic.showZoomInBtnTimeout = window.setTimeout(function () {
                if (!locallogic.zoomInBtn.hasClass("show"))
                    locallogic.zoomInBtn.toggleClass("show", true);
            });
        }
        else {
            locallogic.zoomInBtn.toggleClass("show", false);
            locallogic.mapAssistantContainer.toggleClass("disabled", false);
            locallogic.hideZoomInBtnTimeout = window.setTimeout(function () {
                locallogic.zoomInBtn.hide();
            }, 300);
        }
    };
    locallogic.hidePromo = function () {
        if (ApplicationConfig.EnableLocalLogicMapLayers && jQuery.fn.qtip) {
            locallogic.mapAssistantToggle.qtip("hide");
        }
    };
    locallogic.showPromo = function () {
        if (LocalStorage.ShowLocalLogicMapLayersPromo.get("true") != "false") {
            if (ApplicationState.IsMobileDevice && !jQuery.fn.qtip) {
                Promise.all([
                    ResourceFetcher.fetchCSS("/css/desktop/qtip.css"),
                    ResourceFetcher.fetchJS("/scripts/desktop/qtip.js")
                ]).then(function () { locallogic.showPromo(); });
                return;
            }
            if (!locallogic.mapAssistantToggle.data('qtip')) {
                locallogic.mapAssistantToggle.qtip({
                    content: '<div id="ll-maplayers-promo-con">' + Translation.get("LocalLogicLayersPromo") + '</div>',
                    style: {
                        tip: {
                            width: 24,
                            height: 15
                        },
                        classes: 'popIn'
                    },
                    position: {
                        my: 'bottom left',
                        at: 'top center',
                        target: $('.map-assistant-toggle'),
                        container: $('#mapCon')
                    },
                    show: {
                        modal: false,
                        ready: false
                    },
                    events: {
                        show: function (event, api) {
                            $('#ll-maplayers-promo-con .calloutCloseBtn').click(function () {
                                locallogic.mapAssistantToggle.qtip("destroy");
                            });
                            $('#ll-maplayers-promo-con .btn').click(function () {
                                locallogic.mapAssistantToggle.qtip("destroy");
                                LocalStorage.ShowLocalLogicMapLayersPromo.save("false");
                            });
                        }
                    },
                    hide: false // Don't specify a hide event
                });
                $(document).on('click', function (event) {
                    if (!$(event.target).closest('#ll-maplayers-promo-con').length) {
                        locallogic.hidePromo();
                    }
                });
            }
            locallogic.mapAssistantToggle.qtip("show");
        }
    };
    locallogic.refreshFilterConMaxHeight = function () {
        //Set height/width of popup/assistant
        var maxHeight = locallogic.mapContainer.height() - 85;
        $('.map-assistant-popup').css({ 'max-height': maxHeight + "px" });
        if ($('.crea-map-assistant').hasClass('assistant-open')) {
            $('.crea-map-assistant').css("width", "");
            window.clearTimeout(locallogic.assistantWidthTimeout);
        }
        else {
            locallogic.assistantWidthTimeout = window.setTimeout(function () {
                $('.crea-map-assistant').css("width", "0px");
            }, 300);
        }
    };
    locallogic.toggleHeatmapLegend = function (show) {
        var heatmapLegend = $('#ll-heatmapLegend');
        window.clearTimeout(locallogic.hideHeatmapLegendTimeout);
        window.clearTimeout(locallogic.showHeatmapLegendTimeout);
        if (show) {
            heatmapLegend.show();
            locallogic.showHeatmapLegendTimeout = window.setTimeout(function () {
                if (!heatmapLegend.hasClass("show"))
                    heatmapLegend.toggleClass("show", true);
            });
        }
        else {
            heatmapLegend.toggleClass("show", false);
            locallogic.hideHeatmapLegendTimeout = window.setTimeout(function () {
                heatmapLegend.hide();
            }, 300);
        }
    };
    locallogic.AssistantToggled = new RealtorEvent("LocalLogic_AssistantToggled");
    locallogic.AssistantLoaded = new RealtorEvent("LocalLogic_AssistantLoaded");
    //public static ViewportTooLarge: RealtorEvent<{ id: string }> = new RealtorEvent<{ id: string }>("LocalLogic_ViewportTooLarge");
    //public static ViewportCorrect: RealtorEvent<{ id: string }> = new RealtorEvent<{ id: string }>("LocalLogic_ViewportCorrect");
    locallogic.SchoolDetailsHidden = new RealtorEvent("LocalLogic_SchoolDetailsHidden");
    locallogic.SchoolSelected = new RealtorEvent("LocalLogic_SchoolSelected");
    locallogic.SchoolUnselected = new RealtorEvent("LocalLogic_SchoolUnselected");
    locallogic.BoundrySelected = new RealtorEvent("LocalLogic_BoundrySelected");
    locallogic.BoundryUnSelected = new RealtorEvent("LocalLogic_BoundryUnSelected");
    locallogic.FilterToggled = new RealtorEvent("LocalLogic_FilterToggled");
    locallogic.FilterOptionToggled = new RealtorEvent("LocalLogic_FilterOptionToggled");
    locallogic.ZoomInClicked = new RealtorEvent("LocalLogic_ZoomInClicked");
    locallogic.CurrentUIStateKey = "";
    locallogic.AssistantIsLoaded = false;
    locallogic.HeatmapViewportUnsupported = false;
    locallogic.SchoolViewportUnsupported = false;
    locallogic.assistantDivClass = "crea-map-assistant";
    return locallogic;
}());
//# sourceMappingURL=LocalLogic.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LocalStorage = /** @class */ (function () {
    function LocalStorage(key, value, expiryInDays) {
        if (value === void 0) { value = ''; }
        if (expiryInDays === void 0) { expiryInDays = null; }
        this.keyBase = "";
        this.expiryInDays = null;
        this.keyBase = key;
        this.expiryInDays = expiryInDays;
    }
    LocalStorage.prototype.getKey = function () {
        return this.keyBase;
    };
    LocalStorage.prototype.save = function (value) {
        if (this.expiryInDays != null) {
            localStorage.setItem(this.getKey(), JSON.stringify(new StorageItems.TimestampedItem(value)));
        }
        else {
            localStorage.setItem(this.getKey(), value);
        }
    };
    LocalStorage.prototype.saveObject = function (value) {
        if (this.expiryInDays != null) {
            localStorage.setItem(this.getKey(), JSON.stringify(new StorageItems.TimestampedItem(JSON.stringify(value))));
        }
        else {
            localStorage.setItem(this.getKey(), JSON.stringify(value));
        }
    };
    LocalStorage.prototype.getObject = function () {
        var returnValue = LocalStorage.getObject(this.getKey());
        if (this.expiryInDays != null && returnValue != null) {
            var value = LocalStorage.getObject(this.getKey());
            if (Utilities.isOlderThan(value.timestamp, this.expiryInDays)) {
                this.delete();
                return null;
            }
            else {
                returnValue = value.value;
            }
        }
        return returnValue;
    };
    /**
     *
     * @param def Default value to return if the actual value is null
     */
    LocalStorage.prototype.get = function (def) {
        if (def === void 0) { def = ""; }
        var returnValue = localStorage.getItem(this.getKey()) || def;
        if (returnValue.toLowerCase() == "null") {
            returnValue = def;
        }
        else if (this.expiryInDays != null && returnValue != "") {
            var value = void 0;
            try {
                value = JSON.parse(returnValue);
            }
            catch ( //Need this for old TOS that are just strings, need to convert
            _a) { //Need this for old TOS that are just strings, need to convert
                //value = new StorageItems.TimestampedItem<string>(returnValue);
                //this.saveObject(value);
                returnValue = def;
            }
            if (returnValue != def) {
                if (Utilities.isOlderThan(value.timestamp, this.expiryInDays)) {
                    this.delete();
                    returnValue = def;
                }
                else {
                    returnValue = value.value;
                }
            }
        }
        return returnValue;
    };
    LocalStorage.prototype.delete = function () {
        localStorage.removeItem(this.getKey());
    };
    /**
     * Returns an array of specified objects.
     */
    LocalStorage.prototype.getObjects = function (factory) {
        var returnValue = [];
        var stringVal = this.get("");
        returnValue = Utilities.CreateObjectArrayFromJSONString(stringVal, factory);
        return returnValue;
    };
    LocalStorage.IsEnabled = function () {
        var returnValue = false;
        if (typeof localStorage !== 'undefined') {
            try {
                localStorage.setItem(LocalStorage.EnabledTest.getKey(), 'yes');
                if (LocalStorage.EnabledTest.get('') === 'yes') {
                    LocalStorage.EnabledTest.delete();
                    returnValue = true;
                }
                else {
                    // localStorage is disabled
                }
            }
            catch (e) {
                // localStorage is disabled
            }
        }
        else {
            // localStorage is not available
        }
        return returnValue;
    };
    LocalStorage.getObject = function (storageKey) {
        var returnValue = null;
        var strValFromLocalStorage;
        try {
            strValFromLocalStorage = localStorage.getItem(storageKey);
        }
        catch (e) {
            showMessage("Unable to fetch value from local storage.", MessageType.Error);
            throw e; //So AppInsights can log
        }
        if (strValFromLocalStorage != null && strValFromLocalStorage != '') {
            returnValue = JSON.parse(strValFromLocalStorage);
        }
        return returnValue;
    };
    LocalStorage.saveObject = function (storageKey, object) {
        if (object != null && jQuery.isEmptyObject((object || {})) == false) { //Don't store calls with criteria 
            try {
                localStorage.setItem(storageKey, JSON.stringify(object));
            }
            catch (e) {
                showMessage("Unable to save value to local storage.", MessageType.Error);
                throw e; //So AppInsights can log
                //if (e.code == 22) {
                //    showMessage("Local strorage limit has been reached. Please contact CREA.",MessageType.Error);
                //}
            }
        }
    };
    LocalStorage.removeObject = function (storageKey) {
        localStorage.removeItem(storageKey);
    };
    LocalStorage.EnabledTest = new LocalStorage("Test");
    //static TermsOfUse: LocalStorage = new LocalStorage("TermsOfUseAccepted", null, 30);
    LocalStorage.TargetPage = new LocalStorage("TargetPage");
    LocalStorage.Geolocation = new LocalStorage("Geolocation");
    LocalStorage.SavedSearches = new LocalStorage("RealtorSavedSearches");
    LocalStorage.GoogleAutoComplete = new LocalStorage("GoogleAutoCompleteResults");
    LocalStorage.AutoComplete = new LocalStorage("AutoCompleteData");
    LocalStorage.ListingHistory = new LocalStorage("ListingHistory");
    LocalStorage.SchoolsCallout = new LocalStorage("SchoolsCallout");
    LocalStorage.ShowLocalLogicMapLayersPromo = new LocalStorage("ShowLLMapLayersPromo");
    LocalStorage.MyEmail = new LocalStorage("MyEmail");
    LocalStorage.FriendsEmail = new LocalStorage("FriendsEmail");
    LocalStorage.EmailFullName = new LocalStorage("EmailFullName");
    LocalStorage.EmailFirstName = new LocalStorage("EmailFirstName");
    LocalStorage.EmailLastName = new LocalStorage("EmailLastName");
    LocalStorage.R6DataImported = new LocalStorage("R6DataImported");
    LocalStorage.IENotSupportedSeen = new LocalStorage("IENotSupportedSeen");
    LocalStorage.LastLoginTypeList = new LocalStorage("LastLoginTypeList");
    LocalStorage.SortOrderMessageGotIt = new LocalStorage("SortOrderMessageGotIt");
    LocalStorage.NotificationNewEmails = new LocalStorage("NotificationNewEmails");
    LocalStorage.PublicOffersNewMsgs = new LocalStorage("PublicOffersNewMsgs");
    //Keys defined here will be made User Profile specific via a postfix and localStorage override that stores values into a singular json object (ONLY SUPPORT get/set Item and not square operator which isn't allowed by spec (ex. localStorage[key])
    //static LocalAccountStorageKeys: Object = new Object();
    //LocalAccountStorageKeys.NotificationSavesSearchInfo = 'NotificationSavesSearchInfo';
    LocalStorage.LocalStorageKeys = new Object();
    return LocalStorage;
}());
var LocalAccountStorage = /** @class */ (function (_super) {
    __extends(LocalAccountStorage, _super);
    function LocalAccountStorage(key, value) {
        if (value === void 0) { value = ''; }
        return _super.call(this, key) || this;
    }
    LocalAccountStorage.prototype.getKey = function () {
        return this.keyBase + '-' + ConsumerProfile.UserAccountSettings.UserHashId;
    };
    LocalAccountStorage.FavNotificationsNeedsRefresh = new LocalAccountStorage("FavNotificationsNeedsRefresh");
    LocalAccountStorage.CompareNotificationsNeedsRefresh = new LocalAccountStorage("CompareNotificationsNeedsRefresh");
    LocalAccountStorage.NotificationsAjaxResponse = new LocalAccountStorage("NotificationsAjaxResponse");
    LocalAccountStorage.FavouritesCP = new LocalAccountStorage("RealtorCPFavourites");
    LocalAccountStorage.NotesCP = new LocalAccountStorage("RealtorCPNotes");
    LocalAccountStorage.SavedSearchesCP = new LocalAccountStorage("RealtorSavedSearchesCP");
    LocalAccountStorage.ViewPrefCP = new LocalAccountStorage("RealtorCPViewPref");
    LocalAccountStorage.ConsumerDisplayName = new LocalAccountStorage("ConsumerDisplayName");
    LocalAccountStorage.LastMapSearch = new LocalAccountStorage("LastMapSearch");
    return LocalAccountStorage;
}(LocalStorage));
//# sourceMappingURL=LocalStorage.js.map;
var Logging = /** @class */ (function () {
    function Logging() {
    }
    Logging.Debug = function (value, type) {
        if (type === void 0) { type = LogType.Other; }
        if ((ApplicationConfig.IsDebugMode || ApplicationConfig.IsQAMode) && type.enabled) {
            console.log("%c" + type.name + ": %c" + value, "color:" + type.color + ";", "color:gray;");
        }
    };
    Logging.Error = function (value) {
        var _a;
        console.log("%c" + value, "color:red;");
        if (ApplicationConfig.IsDebugMode) {
            //showMessage("Error logged to console"); //Can't see on phone
            showMessage("Error: " + value.toString(), null, DisplayType.Lightbox);
            debugger;
        }
        else {
            (_a = window === null || window === void 0 ? void 0 : window.appInsights) === null || _a === void 0 ? void 0 : _a.trackException(value);
            //throw value; //To be picked up by AI?
        }
    };
    return Logging;
}());
var LogType = /** @class */ (function () {
    function LogType(name, color, enabled) {
        this.name = name;
        this.color = color;
        this.enabled = enabled;
    }
    LogType.ControlLoaded = new LogType("ControlLoaded", "blue", true);
    LogType.ControlFetcher = new LogType("ControlFetcher", "blue", true);
    LogType.PageLoaded = new LogType("PageLoaded", "blue", true);
    LogType.MasterLoaded = new LogType("MasterLoaded", "blue", true);
    LogType.TemplateBinding = new LogType("TemplateBinding", "blue", false);
    LogType.TemplateFetching = new LogType("TemplateFetching", "blue", true);
    LogType.SmoothState = new LogType("SmoothState", "blue", true);
    LogType.ScrollState = new LogType("ScrollState", "green", true);
    LogType.AJAXEngine = new LogType("AJAXEngine", "blue", true);
    LogType.Event = new LogType("Event", "yellow", true);
    LogType.Validation = new LogType("Form Validation", "green", true);
    LogType.DataLayer = new LogType("DataLayer", "green", true);
    LogType.APIProxy = new LogType("API Proxy", "brown", true);
    LogType.Map = new LogType("Map", "purple", true);
    LogType.Binding = new LogType("Binding", "orange", true);
    LogType.AutoComplete = new LogType("AutoComplete", "purple", true);
    LogType.Animation = new LogType("Animation", "purple", true);
    LogType.BroadcastChannel = new LogType("BroadcastChannel", "blue", true);
    LogType.History = new LogType("History", "green", true);
    LogType.Multimedia = new LogType("Multimedia", "green", true);
    LogType.MapPin = new LogType("MapPin", "green", true);
    LogType.Gigya = new LogType("Gigya", "green", true);
    LogType.Other = new LogType("Other", "blue", true);
    return LogType;
}());
//# sourceMappingURL=Logging.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MapCriteria = /** @class */ (function (_super) {
    __extends(MapCriteria, _super);
    function MapCriteria() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapCriteria.getPropertyNames = function () {
        return [nameof("Center"), nameof("view"), nameof("SearchName"), nameof("GeoName"), nameof("Area"), nameof("PGeoIds")];
    };
    MapCriteria.isStaticSearch = function (criteria) {
        return criteria.IndividualId != null || criteria.OrganizationId != null || criteria.ReferenceNumber != null;
    };
    /**
     * Removes the properties for the map bounding box/center/zoom level
     * @param criteria
     */
    MapCriteria.deleteBounds = function (criteria) {
        delete criteria.LatitudeMin;
        delete criteria.LatitudeMax;
        delete criteria.LongitudeMin;
        delete criteria.LongitudeMax;
        delete criteria.Center;
        delete criteria.ZoomLevel;
    };
    return MapCriteria;
}(APICriteria.PropertySearchCriteria));
//# sourceMappingURL=MapCriteria.js.map;
//type MapPageView = "map" | "list";
//type SortDirection = "desc" | "asc";
//type PropertyMode = "res" | "com";
//class MapPageState {
//    //incoming events (sinks)
//    SearchText: RealtorEvent<{ value: string }> = new RealtorEvent("TextSearch");
//    SelectPin: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    UnSelectPin: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    ResetFilters: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    ShowFilters: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    SaveSearch: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    ShowCommercialFilters: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    ShowResidentialFilters: RealtorEvent<{ value: string }> = new RealtorEvent("PinSelected");
//    //Outgoing events (streams)
//    CriteriaChanged: RealtorEvent<{ propertyName: string, value: any }> = new RealtorEvent("CriteriaChanged");
//    BoundsChanged: RealtorEvent<{ value: google.maps.LatLngBounds }> = new RealtorEvent("BoundsChanged");
//    ResultsUpdated: RealtorEvent<{ results: APIReturnValues.ListingSearchResults }> = new RealtorEvent("ResultsUpdated");
//    PinsUpdated: RealtorEvent<{ pins: Array<google.maps.Marker> }> = new RealtorEvent("ResultsUpdated");
//    FiltersUpdated: RealtorEvent<{ filters: Array<string> }> = new RealtorEvent("PinsUpdated");
//    PinOpened: RealtorEvent<{ filters: Array<string> }> = new RealtorEvent("PinOpened");
//    PinClosed: RealtorEvent<{ filters: Array<string> }> = new RealtorEvent("PinClosed");
//    PinPagingUpdated: RealtorEvent<{ filters: Array<string> }> = new RealtorEvent("PinPagingUpdated");
//    SortingUpdated: RealtorEvent<{ sort: string, direction: SortDirection }> = new RealtorEvent("SortingUpdated");
//    ResultsPagingUpdated: RealtorEvent<{ currentPage: number }> = new RealtorEvent("ResultsPagingUpdated");
//    SEOLandingPageEntered: RealtorEvent<{ name: string }> = new RealtorEvent("SEOLandingPageEntered");
//    SEOLandingPageExited: RealtorEvent<{ name: string }> = new RealtorEvent("SEOLandingPageExited");
//    PropertyModeChanged: RealtorEvent<{ mode: PropertyMode }> = new RealtorEvent("PropertyModeChanged");
//    ShowMoreFilters: RealtorEvent = new RealtorEvent("ShowMoreFilters");
//    HideMoreFilters: RealtorEvent = new RealtorEvent("HideMoreFilters");
//    SearchFiring: RealtorEvent = new RealtorEvent("SearchFiring");
//    StaticSearchEntered: RealtorEvent = new RealtorEvent("StaticSearchEntered");
//    StaticSearchExited: RealtorEvent = new RealtorEvent("StaticSearchExited");
//    private _SEOLandingPageTitle: string;
//    get SEOLandingPageTitle(): string {
//        return this._SEOLandingPageTitle;
//    }
//    set SEOLandingPageTitle(value: string) {
//        this._SEOLandingPageTitle = value;
//        if ((value || "") != "") {
//            this.SEOLandingPageEntered.Fire({ name: value });
//        } else {
//            this.SEOLandingPageExited.Fire({ name: value });
//        }
//    }
//    private _criteria: APICriteria.PropertySearchCriteria;
//    Criteria: APICriteria.PropertySearchCriteria;
//    Filters: Array<string> = [];
//    View: MapPageState;
//    Pins: Array<google.maps.Marker> = [];
//    CurrentMode: PropertyMode = "res";
//    CurrentResults: APIReturnValues.ListingSearchResults = null;
//    SideBarVisible: boolean = true;
//    constructor() {
//        this._criteria = new APICriteria.PropertySearchCriteria();
//        this.Criteria = <APICriteria.PropertySearchCriteria>observe(this._criteria, (prop, val) => { }, (prop, oldVal, val) => {
//            switch (prop) {
//                case nameof<APICriteria.PropertySearchCriteria>("LatitudeMax"):
//                case nameof<APICriteria.PropertySearchCriteria>("LatitudeMin"):
//                case nameof<APICriteria.PropertySearchCriteria>("LongitudeMax"):
//                case nameof<APICriteria.PropertySearchCriteria>("LongitudeMin"):
//                    {
//                        this.BoundsChanged.Fire({ value: this.Criteria.getBounds() }, 25);
//                    }
//                    break;
//                //case nameof<APICriteria.PropertySearchCriteria>("SortBy"):
//                //case nameof<APICriteria.PropertySearchCriteria>("SortOrder"):
//                case nameof<APICriteria.PropertySearchCriteria>("Sort"):
//                    {
//                        if (val && val.toString().indexOf("-") > -1) {
//                            this.SortingUpdated.Fire({ sort: val.split("-")[0], direction: val.split("-")[1].toLowerCase() == "a" ? "asc" : "desc" }, 25);
//                        }
//                    }
//                    break;
//                case nameof<APICriteria.PropertySearchCriteria>("PropertyTypeGroupID"):
//                case nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"):
//                case nameof<APICriteria.PropertySearchCriteria>("PropertyTypeID"):
//                    {
//                        this.FiltersUpdated.Fire()
//                    }
//                    break;
//                case nameof<APICriteria.PropertySearchCriteria>("OrganizationId"):
//                case nameof<APICriteria.PropertySearchCriteria>("IndividualId"):
//                case nameof<APICriteria.PropertySearchCriteria>("ReferenceNumber"):
//                    {
//                        if (this.Criteria.OrganizationId || this.Criteria.IndividualId || this.Criteria.ReferenceNumber) {
//                            this.StaticSearchEntered.Fire();
//                        } else {
//                            this.StaticSearchExited.Fire();
//                        }
//                    }
//                    break;
//            }
//            this.CriteriaChanged.Fire({ propertyName: prop, value: val }, 25);
//        });
//    }
//    getFiltersToShow() {
//        let returnValue: Array<string> = [];
//        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PropertyTypeID"));
//        switch (Number(this.Criteria.PropertyTypeGroupID)) {
//            case SearchType.Residential:
//            case SearchType.Recreational: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                } else {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BedroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BathroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingTypeIds"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ConstructionStyleId"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;
//            case SearchType.Condo: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                } else {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BedroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BathroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingTypeIds"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ConstructionStyleId"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;
//            case SearchType.Multifamily: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                } else {
//                    if (this.CurrentMode == "res") {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                    }
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("UnitRange"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingSizeRange"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;
//            case SearchType.Agricultural: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                } else {
//                    if (this.CurrentMode == "res") {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                    }
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("FarmTypeId"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BedroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BathroomRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingTypeIds"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ConstructionStyleId"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;
//            case SearchType.Parking: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                } else {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ParkingTypeIds"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//            case SearchType.All: {
//                if (this.CurrentMode == "res") {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                    if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                    } else {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                    }
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//                } else {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                    if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingSizeRange"));
//                    }
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//                }
//            }
//            case SearchType.Land: {
//                if (this.CurrentMode == "res") {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                    if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                    } else {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("RentMax"));
//                    }
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ZoningTypeGroupIds"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("OpenHouse"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//                } else {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                    if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                    }
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("ZoningTypeGroupIds"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//                }
//            }
//            case SearchType.Business:
//            case SearchType.Office:
//            case SearchType.Retail:
//                {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                    if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                        returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingSizeRange"));
//                    }
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//                }
//                break;
//            case SearchType.Institutional: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingSizeRange"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;
//            case SearchType.Hospitality:
//            case SearchType.Industrial: {
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("TransactionTypeID"));
//                if (TransactionType[this.Criteria.TransactionTypeID] == TransactionType.Sale) {
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMin"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("PriceMax"));
//                    returnValue.push(nameof<APICriteria.PropertySearchCriteria>("BuildingSizeRange"));
//                }
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("LandSizeRange"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("NumberOfDays"));
//                returnValue.push(nameof<APICriteria.PropertySearchCriteria>("KeyWords"));
//            }
//                break;          
//        }   
//        return returnValue;
//    }
//}
//# sourceMappingURL=MapPageState.js.map;
/**
 * Functions related to pin handling so as not to pollute Map.ts.
 */
var MapPinHelper = /** @class */ (function () {
    function MapPinHelper() {
    }
    MapPinHelper.findPinById = function (listingId, pins) {
        var retPin;
        for (var i = 0; i < pins.length; i++) {
            if (pins[i].propertyId == listingId) {
                retPin = pins[i];
                break;
            }
        }
        return retPin;
    };
    MapPinHelper.indexOfPin = function (pin, pins) {
        for (var i = 0; i < pins.length; i++) {
            if (pins[i].hash == pin.hash) {
                return i;
            }
        }
        return -1;
    };
    MapPinHelper.getPinsToRemove = function (existingPins, newPins) {
        var returnValue = [];
        for (var i = 0; i < existingPins.length; i++) {
            if (MapPinHelper.indexOfPin(existingPins[i], newPins) == -1) {
                returnValue.push(existingPins[i]);
            }
        }
        return returnValue;
    };
    MapPinHelper.getPinsToAdd = function (newPins, existingPins) {
        var returnValue = [];
        for (var i = 0; i < newPins.length; i++) {
            if (MapPinHelper.indexOfPin(newPins[i], existingPins) == -1) {
                returnValue.push(existingPins[i]);
            }
        }
        return returnValue;
    };
    MapPinHelper.createPin = function (pin) {
        var iconSize = null;
        var icon = null;
        var clickHandler = null;
        var hoverHandler = null;
        var returnValue = null;
        var markerImageId = (pin.key || (pin.propertyId || ''));
        returnValue = new google.maps.Marker({
            position: new google.maps.LatLng(pin.latitude, pin.longitude),
            clickable: true,
            title: "Pin",
            //map: this.map,
            icon: icon
            //markerImageId: markerImageId
        });
        returnValue.favouriteCount = pin.favouriteCount || 0;
        returnValue.text = pin.count.toString();
        returnValue.key = pin.key;
        returnValue.listingId = pin.propertyId;
        //returnValue.hash = Utilities.createHash(returnValue.favouriteCount + returnValue.text + returnValue.key + returnValue.listingId);
        return returnValue;
    };
    MapPinHelper.refreshFavoritePins = function (clusterer, markers) {
        if (clusterer != null && clusterer.clusters_ != null) {
            for (var idx = 0; idx < clusterer.clusters_.length; idx++) {
                var cluster = clusterer.clusters_[idx];
                var div = cluster.clusterIcon_.div_;
                if (div != null) { //Sometimes it's null? Not sure why. Yo Yo its the clusters didnt render yet.
                    if (cluster.favouriteCount > 0) {
                        if (div.className.indexOf("favouritePin") == -1) {
                            div.className += ' favouritePin';
                        }
                        div.style["backgroundImage"] = "url('/images/common/icons/svg/pin-filled-red.svg')";
                    }
                    else {
                        div.style["backgroundImage"] = "url('/images/common/icons/svg/pin-filled-purple.svg')";
                        div.className = div.className.replace(" favouritePin", "");
                    }
                }
            }
        }
    };
    MapPinHelper.findClusterByKey = function (key, clusterer) {
        for (var idx = 0; idx < clusterer.clusters_.length; idx++) {
            if ((clusterer.clusters_[idx].key || "").indexOf(key) > -1) {
                return clusterer.clusters_[idx];
            }
        }
        return null;
    };
    MapPinHelper.getNumberOfSignificantDigits = function (clusters) {
        var returnValue = 0;
        if (clusters != null) {
            for (var idx = 0; idx < clusters.length; idx++) {
                var reg = new RegExp(/\.\d+/g); //Get all decimal parts
                var matches = clusters[idx].key.match(reg);
                var longest = 0;
                if (matches != null)
                    longest = matches.sort(function (a, b) { return b.length - a.length; })[0].toString().length - 1; //Get the longest decimal part
                if (longest > returnValue)
                    returnValue = longest;
            }
        }
        return returnValue;
    };
    MapPinHelper.findPinsCluster = function (lat, lon, clusterer) {
        if (clusterer.clusters_ && clusterer.clusters_.length > 0) {
            //eg. L1|49|-87,L1|49|-82,L1|50|-87,L1
            var numSignificantDigits = this.getNumberOfSignificantDigits(clusterer.clusters_);
            //var firstKeyLat = this.markerClusterer.clusters_[0].key.split(",")[0].split("|")[1];
            //var numSignificantDigits = countDecimals(firstKeyLat);
            lat = Number(Number(lat).toFixed(numSignificantDigits)).toString();
            lon = Number(Number(lon).toFixed(numSignificantDigits)).toString();
            //eg. L1|47|-65,L1|46|-63
            var key = "|" + lat + "|" + lon;
            for (var idx = 0; idx < clusterer.clusters_.length; idx++) {
                if ((clusterer.clusters_[idx].key || "").indexOf(key) > -1) {
                    return clusterer.clusters_[idx];
                }
            }
        }
    };
    MapPinHelper.findMarkerInArray = function (id, markers) {
        for (var idx = 0; idx < markers.length; idx++) {
            if (markers[idx].listingId == id) {
                return markers[idx];
            }
        }
        return null;
    };
    MapPinHelper.getClosestGroupedKey = function (pin, latitude, longitude) {
        //find closed from all clusters eg. a key of 'L1|46|-75,L1|46|-73,L1|45|-73'
        var distanceFromPin = Number.MAX_VALUE;
        var keys = pin.key.split(',');
        for (var index = 0; index < keys.length; index++) {
            var lat = keys[index].split('|')[1];
            var long = keys[index].split('|')[2];
            var distanceFromClusterPin = MapPinHelper.lineDistance(Number(latitude), Number(longitude), lat, long);
            if (distanceFromClusterPin < distanceFromPin) {
                distanceFromPin = distanceFromClusterPin;
            }
        }
        return distanceFromPin;
    };
    MapPinHelper.getClosestPin = function (pins, latitude, longitude) {
        if (pins != null) {
            var closestPoints = [];
            var closestDistance = Number.MAX_VALUE;
            for (var index = 0; index < pins.length; index++) {
                var pin = pins[index];
                var distanceFromPin = 0;
                if (pin.key && pin.key != '') {
                    distanceFromPin = MapPinHelper.getClosestGroupedKey(pin, latitude, longitude);
                }
                else {
                    //Use actual point
                    distanceFromPin = MapPinHelper.lineDistance(Number(latitude), Number(longitude), pin.getPosition().lng(), pin.getPosition().lng());
                }
                if (distanceFromPin <= closestDistance) {
                    if (distanceFromPin == closestDistance) {
                        closestPoints.push(pin);
                    }
                    else {
                        closestPoints = [];
                        closestPoints.push(pin);
                        closestDistance = distanceFromPin;
                    }
                }
            }
            return closestPoints;
        }
        return null;
    };
    MapPinHelper.lineDistance = function (longitude1, latitude1, longitude2, latitude2) {
        var xs = 0;
        var ys = 0;
        xs = longitude2 - longitude1;
        xs = xs * xs;
        ys = latitude2 - latitude1;
        ys = ys * ys;
        return Math.sqrt(xs + ys);
    };
    MapPinHelper.findClusteredMarkerWithListingId = function (id, clusterer) {
        if (clusterer != null) {
            for (var idx = 0; idx < clusterer.clusters_.length; idx++) {
                //if (clusterer.clusters_[idx].markers_.length > 1) {
                var marker = MapPinHelper.findMarkerInArray(id, clusterer.clusters_[idx].markers_);
                if (marker) {
                    return clusterer.clusters_[idx];
                }
                //}
            }
        }
        return null;
    };
    MapPinHelper.getMarkerById = function (id, latitude, longitude, markers, clusterer) {
        if (latitude == "undefined" || longitude == "undefined" || !clusterer) { //'Property not mapped' scenario || map not loaded scenario
            return null;
        }
        var clusteredPinWithListing = MapPinHelper.findClusteredMarkerWithListingId(id, clusterer);
        if (clusteredPinWithListing)
            return clusteredPinWithListing;
        var closestNonClusteredPin = this.getClosestPin(markers, latitude, longitude) || [];
        if (closestNonClusteredPin.length > 0) {
            return MapPinHelper.findClusterByKey(closestNonClusteredPin[0].key, clusterer);
        }
        else {
            return null;
        }
    };
    return MapPinHelper;
}());
//# sourceMappingURL=MapPinHelper.js.map;
var NoteAddedArgs = /** @class */ (function () {
    function NoteAddedArgs() {
    }
    return NoteAddedArgs;
}());
var NoteRemovedArgs = /** @class */ (function () {
    function NoteRemovedArgs() {
    }
    return NoteRemovedArgs;
}());
var Note = /** @class */ (function () {
    function Note(id, note) {
        this.id = id;
        this.note = note;
    }
    Note.fromObject = function (objectVal) {
        var returnValue = new Note();
        for (var prop in objectVal)
            returnValue[prop] = objectVal[prop];
        return returnValue;
    };
    Note.prototype.save = function () {
        if (ApplicationState.UserIsSignedIn) {
            var val = Note.getAll();
            val.push(this);
            LocalAccountStorage.NotesCP.save(JSON.stringify(val));
        }
        var totalCount = (Note.getAll(ApplicationState.CurrentMode).length);
        //let args: NoteAddedArgs = { id: this.id, total: totalCount };
        //Events.Fire(Note.noteAddedEvent, args);
        Note.noteAddedEvent.Fire({ id: this.id, total: totalCount });
    };
    Note.prototype.exists = function () {
        if (ApplicationState.UserIsSignedIn) {
            var favObjs = Note.getAll(ApplicationState.CurrentMode);
            for (var i = 0; i < favObjs.length; i++) {
                if (favObjs[i].id == this.id) {
                    return true;
                }
            }
            return false;
        }
    };
    Note.prototype.existsShared = function () {
        var favObjs = Note.getAllShared(ApplicationState.CurrentMode);
        for (var i = 0; i < favObjs.length; i++) {
            if (favObjs[i].id == this.id) {
                return true;
            }
        }
        return false;
    };
    Note.prototype.delete = function () {
        if (ApplicationState.UserIsSignedIn) {
            var val = Note.getAll();
            for (var i = 0; i < val.length; i++) {
                if (val[i].id == this.id) {
                    val.splice(i, 1);
                }
            }
            LocalAccountStorage.NotesCP.save(JSON.stringify(val));
        }
        var totalCount = Note.getAll(ApplicationState.CurrentMode).length;
        //let args: NoteRemovedArgs = { id: this.id, total: totalCount };
        Note.noteRemovedEvent.Fire({ id: this.id, total: totalCount });
        //Events.Fire(Note.noteRemovedEvent, args);
    };
    Note.prototype.update = function () {
        if (ApplicationState.UserIsSignedIn) {
            var val = Note.getAll();
            for (var i = 0; i < val.length; i++) {
                if (val[i].id == this.id) {
                    val[i].note = this.note;
                }
            }
            LocalAccountStorage.NotesCP.save(JSON.stringify(val));
        }
    };
    Note.getAll = function (appMode) {
        var returnValue = [];
        var cookieVal;
        if (ApplicationState.UserIsSignedIn) {
            var val = LocalAccountStorage.NotesCP.get();
            if (val && val != null && val != "null") {
                var jsonObjs = JSON.parse(val);
                for (var i = 0; i < jsonObjs.length; i++) {
                    //if (jsonObjs[i].appMode == (appMode || jsonObjs[i].appMode)) {
                    //jsonObjs[i].appMode = jsonObjs[i].appMode.toString();
                    returnValue.push(Note.fromObject(jsonObjs[i]));
                    //}
                }
            }
        }
        return returnValue;
    };
    Note.getAllShared = function (appMode) {
        var returnValue = [];
        var cookieVal;
        var val = AccountSessionStorage.SharedNotes.get();
        if (val && val != null && val != "null") {
            var jsonObjs = JSON.parse(val);
            $.each(JSON.parse(jsonObjs.note), function (i, note) {
                returnValue.push(Note.fromObject(note));
            });
        }
        return returnValue;
    };
    Note.getById = function (id) {
        var returnValue;
        if (ApplicationState.UserIsSignedIn) {
            var val = Note.getAll();
            for (var i = 0; i < val.length; i++) {
                if (val[i].id == id) {
                    returnValue = val[i];
                }
            }
        }
        return returnValue;
    };
    Note.getSharedById = function (id) {
        var returnValue;
        var val = Note.getAllShared();
        for (var i = 0; i < val.length; i++) {
            if (val[i].id == id) {
                returnValue = val[i];
            }
        }
        return returnValue;
    };
    Note.getSharedDisplayName = function () {
        var returnValue;
        var val = AccountSessionStorage.SharedNotes.get();
        if (val && val != null && val != "null") {
            var jsonObjs = JSON.parse(val);
            returnValue = jsonObjs.displayName;
        }
        return returnValue;
    };
    Note.exists = function (id) {
        var favObjs = Note.getAll();
        for (var i = 0; i < favObjs.length; i++) {
            if (favObjs[i].id == id) {
                return true;
            }
        }
        return false;
    };
    Note.existsShared = function (id) {
        var favObjs = Note.getAllShared();
        for (var i = 0; i < favObjs.length; i++) {
            if (favObjs[i].id == id) {
                return true;
            }
        }
        return false;
    };
    Note.refreshIcons = function (element, isPDP) {
        if (isPDP === void 0) { isPDP = false; }
        element.find('.noteIcon').each(function (i, text) {
            var dataVal = $(this).attr('data-value');
            var pieces = dataVal.split("_");
            var id = pieces[0];
            var address = pieces[1];
            var lat = pieces[2];
            var lon = pieces[3];
            if (ApplicationState.UserIsSignedIn) {
                $(this).show();
                if (isPDP) {
                    $("#listingNotesText").show();
                }
                if (Note.exists(id)) {
                    $(this).find('img').attr('src', Note.selectedIconURL);
                    $(this).addClass(Note.hasNotesClass);
                }
                else {
                    if (!isPDP) {
                        $(this).hide();
                    }
                    ;
                    $(this).find('img').attr('src', Note.unSelectedIconURL);
                    $(this).removeClass(Note.hasNotesClass);
                }
            }
            else {
                if (isPDP) {
                    $("#listingNotesIconCon").hide();
                }
                $(this).hide();
            }
            if (Note.existsShared(id)) {
                $(this).attr('shareNoteId', id);
                $(this).show();
                if (isPDP) {
                    $("#listingNotesText").html(Translation.get("ViewNotes"));
                    $("#listingNotesIconCon").show();
                    $("#listingNotesText").show();
                }
                $(this).find('img').attr('src', Note.selectedIconURL);
                $(this).addClass(Note.hasNotesClass);
            }
        });
        Note.rebindNoteEvents(element, isPDP);
    };
    Note.rebindNoteEvents = function (element, isPDP) {
        if (isPDP === void 0) { isPDP = false; }
        element.find('.noteIcon').each(function (i, text) {
            $(this).unbind('click').click(function () {
                noteIconClicked($(this), isPDP);
                return false;
            });
        });
    };
    Note.showPrintNoteSection = function (id, element) {
        if (ApplicationState.UserIsSignedIn) {
            var noteExists = Note.exists(id);
            var sharedNoteExists = Note.existsShared(id);
            if (noteExists) {
                element.find('.notePrintTitle')[0].innerText = Translation.get("MyNotes");
                element.find('.notePrintText')[0].innerText = Note.getById(id).note;
            }
            if (sharedNoteExists) {
                element.find('.noteSharedTitle')[0].innerText = Note.getSharedDisplayName();
                element.find('.noteSharedText')[0].innerText = Note.getSharedById(id).note;
            }
            if (noteExists || sharedNoteExists) {
                element.show();
            }
        }
    };
    Note.updateHTML = function (id, note) {
    };
    Note.Edit = function (id, address, lat, lon, appMode, sharednoteid, isPDP) {
        if (isPDP === void 0) { isPDP = false; }
        if (ApplicationState.UserIsSignedIn) {
            if (id != sharednoteid) {
                var totalFaves = Favourite.getAll().length;
                var isFave = Favourite.exists(id, ApplicationState.CurrentMode);
                var isNote = Note.exists(id);
                if (totalFaves >= ConsumerProfile.UserAccountSettings.FavouriteLimit && isNote != true && isFave != true) {
                    var totalFavesInCurrentMode = Favourite.getAll(ApplicationState.CurrentMode).length;
                    if (totalFavesInCurrentMode == ConsumerProfile.UserAccountSettings.FavouriteLimit) {
                        showMessage(Translation.get("M76"), MessageType.Error, DisplayType.Lightbox);
                    }
                    else {
                        showMessage(Translation.get("M77"), MessageType.Error, DisplayType.Lightbox);
                    }
                }
                else {
                    var args = new DialogEditNoteArgs();
                    args.ID = id;
                    args.Address = address;
                    args.Lat = lat;
                    args.Lon = lon;
                    args.appMode = appMode;
                    args.isPDP = isPDP;
                    Gigya.showDialogEditNote(args);
                }
            }
            else {
                //shared note
                var args = new DialogEditNoteArgs();
                args.ID = id;
                args.Address = address;
                args.Lat = lat;
                args.Lon = lon;
                args.appMode = appMode;
                args.isSharedNote = true;
                args.isPDP = isPDP;
                Gigya.showDialogEditNote(args);
            }
        }
        else {
            if (sharednoteid == id) {
                //login
                SessionStorage.PostLoginRedirect.save(location.href);
                if (ApplicationState.IsMobileDevice) {
                    MasterPages.Phone.smoothState.load(RouteHelper.getURL("sign-in"));
                }
                else {
                    showMessage(Translation.get("M66"), MessageType.Error, DisplayType.Lightbox);
                }
            }
        }
    };
    Note.Add = function (id, note, lat, lon, eventSourcePageName, refreshGigya, postCallHandler) {
        if (refreshGigya === void 0) { refreshGigya = true; }
        var iterate = 0;
        var noteObj = new Note(id, note);
        if (Note.exists(id)) {
            noteObj.update();
            Note.updateHTML(id, note);
            Note.saveConsumerNotesCall(refreshGigya, postCallHandler);
        }
        else {
            if (ApplicationState.UserIsSignedIn) {
                noteObj.save();
                $('.noteIcon[data-value^="' + id + '_"]').each(function () {
                    $(this).addClass(Note.hasNotesClass);
                    var img = $(this).find('img');
                    addAnimationClass(img, 'bounceIn');
                    img.attr('src', Note.selectedIconURL);
                    img.attr('alt', Translation.get('EditNotes'));
                    img.attr('title', Translation.get('EditNotes'));
                });
                Note.saveConsumerNotesCall(refreshGigya, postCallHandler);
                //Add to Fave
                if (Favourite.exists(id) == false) {
                    Favourite.AddOrRemove(id, lat, lon, "", ApplicationState.CurrentMode, true, true);
                }
                iterate = 1;
                Analytics.log(id, 'note');
            }
        }
    };
    Note.saveConsumerNotesCall = function (refreshGigya, postCallHandler) {
        if (refreshGigya === void 0) { refreshGigya = true; }
        if (refreshGigya != false) {
            Gigya.saveConsumerNotes(false, postCallHandler);
        }
        else {
            if (postCallHandler != null) {
                postCallHandler();
            }
        }
    };
    Note.DeleteConfirmation = function (id, note, eventSourcePageName, parentControl, isPDP) {
        if (isPDP === void 0) { isPDP = false; }
        var args = new ConfirmationDialog2Args();
        args.ID = "note_" + id + "_deleteconfirm";
        args.TitleText = Translation.get("DeleteNotesHeader");
        args.BodyContent = $("<span>" + Translation.get("DeleteNotesAreYouSure") + "</span>");
        args.ButtonPositiveText = Translation.get("Yes");
        args.ButtonPositiveOnClick = function (e, control) {
            Note.Delete(id, note, "", true, isPDP);
            control.Featherlight.close();
            parentControl.Featherlight.close();
        };
        args.ButtonNegativeText = Translation.get("No");
        args.ButtonNegativeOnClick = function (e, control) {
            control.Featherlight.close();
            if (ApplicationState.IsMobileDevice) {
                parentControl.Featherlight.close();
            }
        };
        var model = new ConfirmationDialogModel2(args.ID, args.TitleText, args.BodyContent, args.ButtonPositiveText, args.ButtonPositiveOnClick, args.ButtonNegativeText, args.ButtonNegativeOnClick);
        model.ShowCloseButton = false;
        showConfirmationDialog2(model);
    };
    Note.Delete = function (id, note, eventSourcePageName, refreshGigya, isPDP) {
        if (refreshGigya === void 0) { refreshGigya = true; }
        if (isPDP === void 0) { isPDP = false; }
        var noteObj = new Note(id, note);
        noteObj.delete();
        if (refreshGigya != false) {
            Gigya.saveConsumerNotes(true);
        }
        $('.noteIcon[data-value^="' + id + '_"]').each(function () {
            $(this).removeClass(Note.hasNotesClass);
            var img = $(this).find('img');
            var icon = $(this).find('.listingCardNoteIcon');
            if (isPDP) {
                addAnimationClass(img, 'bounceOut');
                img.attr('src', Note.unSelectedIconURL);
                img.attr('alt', Translation.get('AddNotes'));
            }
            else {
                img.remove();
                icon.remove();
            }
        });
    };
    Note.noteAddedEvent = new RealtorEvent('noteAdded');
    Note.noteRemovedEvent = new RealtorEvent('noteRemoved');
    Note.selectedIconURL = '/images/common/icons/svg/note2.svg';
    Note.unSelectedIconURL = '/images/common/icons/svg/note2-empty.svg';
    Note.hasNotesClass = 'hasNotes';
    return Note;
}());
//# sourceMappingURL=Notes.js.map;
var ConsumerProfile;
(function (ConsumerProfile) {
    var NotificationsRefreshArgs = /** @class */ (function () {
        function NotificationsRefreshArgs() {
        }
        return NotificationsRefreshArgs;
    }());
    ConsumerProfile.NotificationsRefreshArgs = NotificationsRefreshArgs;
    var Notifications = /** @class */ (function () {
        //constructor();
        function Notifications(JSONObj, timestamp, favouriteNotifications, compareNotifications, savedSearchNotifications) {
            if (JSONObj) {
                for (var prop in JSONObj)
                    this[prop] = JSONObj[prop];
            }
            else {
                this.timestamp = timestamp;
                this.favouriteNotifications = favouriteNotifications;
                this.compareNotifications = compareNotifications;
                this.savedSearchNotifications = savedSearchNotifications;
            }
        }
        Notifications.prototype.hasNotifications = function (modeId) {
            //if (modeId == null)
            //modeId = ApplicationState.CurrentMode;
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) {
                for (var index = 0; index < this.favouriteNotifications.length; index++) {
                    if (modeId == null || this.favouriteNotifications[index].appMode == modeId)
                        return true;
                }
            }
            if (ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled) {
                for (var index = 0; index < this.compareNotifications.length; index++) {
                    if (modeId == null || this.compareNotifications[index].appMode == modeId)
                        return true;
                }
            }
            if (ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
                for (var index = 0; index < this.savedSearchNotifications.length; index++) {
                    if (modeId == null || this.savedSearchNotifications[index].appMode == modeId)
                        return true;
                }
            }
            return false;
        };
        Notifications.prototype.getListingCount = function (notificationId, modeId, type) {
            var returnValue = 0;
            var index = 0;
            if (type == ConsumerNotificationTypes.Search) {
                for (var parentIndex = 0; parentIndex < this.savedSearchNotifications.length; parentIndex++) {
                    var textId = this.savedSearchNotifications[parentIndex].text;
                    var thisId = "";
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-search-listings';
                    thisId = 'galleryViewContent_' + subId + textId + index.toString();
                    index++;
                    if (thisId == notificationId) {
                        returnValue = this.savedSearchNotifications[parentIndex].listingIds.length;
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Compare) {
                for (var parentIndex = 0; parentIndex < this.compareNotifications.length; parentIndex++) {
                    var textId = this.compareNotifications[parentIndex].text;
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-comp';
                    var thisId = 'galleryViewContent_' + subId + textId + this.compareNotifications[parentIndex].appMode.toString() + parentIndex.toString();
                    if (thisId == notificationId) {
                        returnValue = this.compareNotifications[parentIndex].listingIds.length;
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Favourite) //Favourites
             {
                for (var parentIndex = 0; parentIndex < this.favouriteNotifications.length; parentIndex++) {
                    var textId = this.favouriteNotifications[parentIndex].text;
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-faves';
                    var thisId = 'galleryViewContent_' + subId + textId + parentIndex.toString();
                    if (thisId == notificationId) {
                        returnValue = this.favouriteNotifications[parentIndex].listingIds.length;
                    }
                }
            }
            else {
                Logging.Error("Unable to get notification listing count for: " + type);
            }
            return returnValue;
        };
        Notifications.prototype.getNotificationCount = function (modeId, type) {
            var returnValue = 0;
            if (type == ConsumerNotificationTypes.Search) //Saved Search
             {
                for (var parentIndex = 0; parentIndex < this.savedSearchNotifications.length; parentIndex++) {
                    if (modeId == null || this.savedSearchNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Compare) //Compares
             {
                for (var parentIndex = 0; parentIndex < this.compareNotifications.length; parentIndex++) {
                    if (modeId == null || this.compareNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Favourite) //Favourites
             {
                for (var parentIndex = 0; parentIndex < this.favouriteNotifications.length; parentIndex++) {
                    if (modeId == null || this.favouriteNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            return returnValue;
        };
        Notifications.prototype.getAllNotificationListingsCount = function (modeId) {
            var returnValue = 0;
            if (ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
                for (var parentIndex = 0; parentIndex < this.savedSearchNotifications.length; parentIndex++) {
                    if (modeId == null || this.savedSearchNotifications[parentIndex].appMode == modeId) {
                        returnValue += this.savedSearchNotifications[parentIndex].listingIds.length;
                    }
                }
            }
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) {
                for (var parentIndex = 0; parentIndex < this.favouriteNotifications.length; parentIndex++) {
                    if (modeId == null || this.favouriteNotifications[parentIndex].appMode == modeId) {
                        returnValue += this.favouriteNotifications[parentIndex].listingIds.length;
                    }
                }
            }
            return returnValue;
        };
        Notifications.prototype.getAllNotificationCount = function (modeId) {
            var returnValue = 0;
            if (ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
                for (var parentIndex = 0; parentIndex < this.savedSearchNotifications.length; parentIndex++) {
                    if (modeId == null || this.savedSearchNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            if (ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled) {
                for (var parentIndex = 0; parentIndex < this.compareNotifications.length; parentIndex++) {
                    if (modeId == null || this.compareNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) {
                for (var parentIndex = 0; parentIndex < this.favouriteNotifications.length; parentIndex++) {
                    if (modeId == null || this.favouriteNotifications[parentIndex].appMode == modeId) {
                        returnValue++;
                    }
                }
            }
            return returnValue;
        };
        Notifications.prototype.getListingIds = function (notificationId, modeId, type, pageNumber, itemsPerPage) {
            var startIndex = (pageNumber - 1) * itemsPerPage;
            var count = itemsPerPage * (pageNumber);
            var index = 0;
            var returnValue = [];
            if (type == ConsumerNotificationTypes.Search) {
                for (var parentIndex = 0; parentIndex < this.savedSearchNotifications.length; parentIndex++) {
                    var thisId = "";
                    var textId = this.savedSearchNotifications[parentIndex].text;
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-search-listings';
                    thisId = 'galleryViewContent_' + subId + textId + index.toString();
                    index++;
                    if (thisId == notificationId) {
                        for (var index = startIndex; index < Math.min(this.savedSearchNotifications[parentIndex].listingIds.length, count); index++) {
                            returnValue.push(this.savedSearchNotifications[parentIndex].listingIds[index]);
                        }
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Compare) {
                for (var parentIndex = 0; parentIndex < this.compareNotifications.length; parentIndex++) {
                    var textId = this.compareNotifications[parentIndex].text;
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-comp';
                    var thisId = 'galleryViewContent_' + subId + textId + this.compareNotifications[parentIndex].appMode.toString() + parentIndex.toString();
                    if (thisId == notificationId) {
                        for (var index = startIndex; index < Math.min(this.compareNotifications[parentIndex].listingIds.length, count); index++) {
                            returnValue.push(this.compareNotifications[parentIndex].listingIds[index]);
                        }
                    }
                }
            }
            else if (type == ConsumerNotificationTypes.Favourite) {
                for (var parentIndex = 0; parentIndex < this.favouriteNotifications.length; parentIndex++) {
                    var textId = this.favouriteNotifications[parentIndex].text;
                    textId = Notifications.formatNotificationTextId(textId);
                    var subId = 'accrd-faves';
                    var thisId = 'galleryViewContent_' + subId + textId + parentIndex.toString();
                    if (thisId == notificationId) {
                        for (var index = startIndex; index < Math.min(this.favouriteNotifications[parentIndex].listingIds.length, count); index++) {
                            returnValue.push(this.favouriteNotifications[parentIndex].listingIds[index]);
                        }
                    }
                }
            }
            return returnValue;
        };
        Notifications.prototype.getAllNotificationsSorted = function (modeId) {
            var returnVal = [];
            if (ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
                for (var index = 0; index < this.savedSearchNotifications.length; index++) {
                    if (modeId == null || this.savedSearchNotifications[index].appMode == modeId)
                        if (this.savedSearchNotifications[index].listingIds != null && this.savedSearchNotifications[index].listingIds.length > 0) {
                            returnVal.push(this.savedSearchNotifications[index]);
                        }
                }
            }
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) {
                for (var index = 0; index < this.favouriteNotifications.length; index++) {
                    if (modeId == null || this.favouriteNotifications[index].appMode == modeId)
                        if (this.favouriteNotifications[index].listingIds != null && this.favouriteNotifications[index].listingIds.length > 0) {
                            returnVal.push(this.favouriteNotifications[index]);
                        }
                }
            }
            if (ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled) {
                for (var index = 0; index < this.compareNotifications.length; index++) {
                    if (modeId == null || this.compareNotifications[index].appMode == modeId)
                        if (this.compareNotifications[index].listingIds != null && this.compareNotifications[index].listingIds.length > 0) {
                            returnVal.push(this.compareNotifications[index]);
                        }
                }
            }
            return returnVal;
        };
        Notifications.prototype.getFaveNotificationsCount = function () {
            var returnValue = 0;
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) {
                returnValue = this.favouriteNotifications.length;
            }
            return returnValue;
        };
        Notifications.prototype.getTimeStampString = function () {
            if (this.timestamp != null) {
                var utcSeconds = Number(this.timestamp);
                var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
                d.setUTCSeconds(utcSeconds);
                var monthNames_EN = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
                var monthNames_FR = ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"];
                var dateStr = '';
                if (ApplicationState.CultureID == 1) {
                    dateStr = monthNames_EN[d.getMonth()] + " " + d.getDate() + ", " + d.getFullYear();
                }
                else {
                    dateStr = d.getDate() + ' ' + monthNames_FR[d.getMonth()] + " " + d.getFullYear();
                }
                return dateStr;
            }
        };
        Notifications.forceFetchAsync = function (handler, types) {
            if (types === void 0) { types = []; }
            //var criteria = {};
            var criteria = new GetNotificationsArgs();
            var idsCSV = '';
            if (types != null) {
                idsCSV = types.join(",");
                //criteria['TypeIds'] = forceFetchTypeIds;
                criteria.TypeIds = types;
            }
            var wrapper = function (response) {
                Notifications.fetchAsync(handler, response, (idsCSV.length > 0 ? idsCSV : null));
            };
            Actions.getConsumerNotifications(criteria, wrapper, function (request, textStatus, exception) {
                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
            }, null, true);
        };
        Notifications.fetchAsync = function (handler, ajaxResponse, forceFetchTypeIds) {
            var ConsumerNotificationObj = null;
            if (Notifications.cache['Notifications'] != null && forceFetchTypeIds == null) { //Fav/compare adding can cause multiple calls per page load, don't use memory cache
                ConsumerNotificationObj = Notifications.cache['Notifications' + forceFetchTypeIds];
            }
            else if (ajaxResponse != null) {
                ConsumerNotificationObj = Notifications.CreateConsumerNotificationObj(ajaxResponse);
                Notifications.cache['Notifications' + forceFetchTypeIds] = ConsumerNotificationObj;
            }
            else {
                var wrapper = function (response) {
                    Notifications.fetchAsync(handler, response, null);
                };
                var criteria = new GetNotificationsArgs();
                criteria.TypeIds = null;
                Actions.getConsumerNotifications(criteria, wrapper, function (request, textStatus, exception) {
                    showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                });
                return;
            }
            handler(ConsumerNotificationObj);
        };
        /**
         * Handler for caching the fetching of the notification response
         * @param url
         */
        Notifications.cacheFetch = function (url, args) {
            var returnValue = null;
            var templates = LocalAccountStorage.NotificationsAjaxResponse.getObject() || {};
            var cacheKey = TemplateFetcher.getCacheKey(url);
            if (templates != null) {
                var value = templates[cacheKey];
                if ((value || "") != "") {
                    var valueObj = JSON.parse(value);
                    if (valueObj.version == ApplicationState.BuildVersion) {
                        returnValue = valueObj.value;
                    }
                }
            }
            return returnValue;
        };
        /**
        * Handler for saving the fetched notification response
        * @param url
        */
        Notifications.cacheSave = function (url, args, value) {
            var templates = LocalAccountStorage.NotificationsAjaxResponse.getObject() || {};
            var valueObj = new StorageItems.VersionedItem(ApplicationState.BuildVersion, value);
            var cacheKey = TemplateFetcher.getCacheKey(url);
            templates[cacheKey] = JSON.stringify(valueObj);
            LocalAccountStorage.NotificationsAjaxResponse.saveObject(templates);
        };
        //static mergeConsumerNotificationPartialResponse(response, typeId) {
        //}
        Notifications.GetOnlyCurrentCulture = function (stringValue, cultureIdNum) {
            if (stringValue != null && cultureIdNum != null) {
                var goodTransRegex = '';
                if (cultureIdNum == 1) {
                    stringValue = stringValue.replace(/<\[2\|(.*?)\]>/g, '');
                    stringValue = stringValue.replace(/<\[1\|(.*?)\]>/g, "$1");
                }
                else if (cultureIdNum == 2) {
                    stringValue = stringValue.replace(/<\[1\|(.*?)\]>/g, '');
                    stringValue = stringValue.replace(/<\[2\|(.*?)\]>/g, "$1");
                }
            }
            return stringValue;
        };
        Notifications.CreateConsumerNotificationObj = function (response) {
            var returnValue;
            if (response != null && response.ErrorCode != null && response.ErrorCode.Id == PublicContracts.ErrorCodeId.OK && response.Notifications != null) { //&& response.TimestampUTCEpoch != null) {
                var favouriteNotifications = [];
                var savedSearchNotifications = [];
                var compareNotifications = [];
                for (var i = 0; i < response.Notifications.length; i++) {
                    var JSONNotification = response.Notifications[i];
                    if (JSONNotification != null) {
                        if (JSONNotification.Type == "1" && JSONNotification.ListingIds != null && JSONNotification.ListingIds.length > 0)
                            savedSearchNotifications.push(new ConsumerProfile.Notification(null, JSONNotification.Type, Notifications.GetOnlyCurrentCulture(JSONNotification.Text, ApplicationState.CultureID), JSONNotification.ListingIds, JSONNotification.ApplicationMode, JSONNotification.ActionData, JSONNotification.SearchDate));
                        //else if (JSONNotification.Type == "2" && JSONNotification.ListingIds != null && JSONNotification.ListingIds.length > 0)
                        //    compareNotifications.push(new ConsumerProfile.Notification(
                        //        null,
                        //        JSONNotification.Type,
                        //        Notifications.GetOnlyCurrentCulture(JSONNotification.Text, ApplicationState.CultureID),
                        //        JSONNotification.ListingIds,
                        //        JSONNotification.ApplicationMode,
                        //        JSONNotification.ActionData,null));
                        else if (JSONNotification.Type == "3" && JSONNotification.ListingIds != null && JSONNotification.ListingIds.length > 0)
                            favouriteNotifications.push(new ConsumerProfile.Notification(null, JSONNotification.Type, Notifications.GetOnlyCurrentCulture(JSONNotification.Text, ApplicationState.CultureID), JSONNotification.ListingIds.reverse(), JSONNotification.ApplicationMode, JSONNotification.ActionData, null));
                    }
                }
                returnValue = new Notifications(null, response.TimestampUTCEpoch, favouriteNotifications, compareNotifications, savedSearchNotifications);
            }
            return returnValue;
        };
        Notifications.RefreshNotifications = function (notificationsObj, forceTypeIds) {
            if (ApplicationState.UserIsSignedIn) {
                //Notifications.SetNotificationIconTooltip(Translation.get("ClickForNotifications")); //TODO: break out into event handler, UI doesn't belong in here
                if (ConsumerProfile.UserAccountSettings.NotificationsEnabled) {
                    if (notificationsObj == null) {
                        if (forceTypeIds != null) {
                            ConsumerProfile.Notifications.forceFetchAsync(Notifications.RefreshNotifications, forceTypeIds);
                        }
                        else if (LocalAccountStorage.CompareNotificationsNeedsRefresh.get('false') == 'true') {
                            LocalAccountStorage.CompareNotificationsNeedsRefresh.save('false');
                            ConsumerProfile.Notifications.forceFetchAsync(Notifications.RefreshNotifications, [ConsumerNotificationTypes.Compare]);
                        }
                        else if (LocalAccountStorage.FavNotificationsNeedsRefresh.get('false') == 'true') {
                            LocalAccountStorage.FavNotificationsNeedsRefresh.save('false');
                            ConsumerProfile.Notifications.forceFetchAsync(Notifications.RefreshNotifications, [ConsumerNotificationTypes.Favourite]);
                        }
                        else {
                            ConsumerProfile.Notifications.fetchAsync(Notifications.RefreshNotifications, null, null);
                        }
                        return;
                    }
                    else {
                        ConsumerProfile.UserAccountSettings.Notifications = notificationsObj;
                        var _notificationsObj = new ConsumerProfile.Notifications(notificationsObj);
                        var hasNotifications = _notificationsObj.hasNotifications(null);
                        ConsumerProfile.UserAccountSettings.HasNotifications = hasNotifications;
                        if (Notifications.functionCallsToMakeAfterNotificationsFetched != null && Notifications.functionCallsToMakeAfterNotificationsFetched.length > 0) {
                            for (var index = 0; index < Notifications.functionCallsToMakeAfterNotificationsFetched.length; index++) {
                                Notifications.functionCallsToMakeAfterNotificationsFetched[index](notificationsObj);
                            }
                        }
                        Notifications.functionCallsToMakeAfterNotificationsFetched = [];
                        if (hasNotifications) {
                            if (Cookie.HasNotifications.containsValue(ApplicationState.CurrentMode.toString()) == false) {
                                Cookie.HasNotifications.addValue(ApplicationState.CurrentMode.toString());
                            }
                            //$('#lblNoNotifications').hide();
                            $('.m_hdr_glb_actions_notifications').attr('src', '/images/common/icons/svg/bell.svg');
                            //Notifications.SetNotificationIconTooltip(Translation.get("ClickToViewNotifications"));
                        }
                        else {
                            if (Cookie.HasNotifications.containsValue(ApplicationState.CurrentMode.toString())) {
                                Cookie.HasNotifications.removeValue(ApplicationState.CurrentMode.toString());
                            }
                            //SetNotificationIconTooltip(Message.ClickForNotifications);
                            //$('#lblNoNotifications').show();
                            //$('.m_hdr_glb_actions_notifications').attr('src', '/Presentation/Images/common/icons/bell_empty.png');
                        }
                        //Notification.ListingPageHasBeenLoaded = true;
                        var args = { NotificationObj: notificationsObj };
                        Events.Fire(Notifications.notificationsRefreshEvent, args);
                    }
                }
                else {
                    Notifications.BlankOutHeaderBell();
                }
            }
            else {
                //Notifications.SetNotificationIconTooltip(Translation.get("SignUpToGetNotifications"));
            }
        };
        Notifications.BlankOutHeaderBell = function () {
        };
        Notifications.GetNotificationSummaryHTML = function (id, index, count, itemLink, itemText, mode, timestamp, type, pageNumber, searchDate) {
            var textId = itemText;
            textId = Notifications.formatNotificationTextId(textId);
            var btnText = "";
            if (id === 'accrd-search-listings') {
                btnText = Translation.get("T597");
            }
            else if (id === 'accrd-comp') {
                btnText = Translation.get("T599");
                if (mode == 1) {
                    itemLink = "/" + Translation.get("ResidentialMode") + "/Compares.aspx";
                }
                else {
                    itemLink = "/" + Translation.get("CommercialMode") + "/Compares.aspx";
                }
            }
            else {
                btnText = Translation.get("T598");
                itemLink = RouteHelper.getURL("my-favourites");
            }
            var notificationCountTxt = "0";
            if (count <= 99) {
                notificationCountTxt = count.toString();
            }
            else {
                notificationCountTxt = "99+";
            }
            var itemDisplayText = itemText;
            if (ApplicationState.IsMobileDevice) {
                var notificationId = "galleryViewContent_" + id + textId + index.toString();
                return '<a class="profileSectionLinkCon" id="lnk_' + id + textId + index.toString() + '" data-section="' + id + '" data-link="' + itemLink + '" data-nid="' + notificationId + '"  data-ntitle="' + itemText + '" data-ntype="' + ConsumerNotificationTypes[type] + '" data-nmode="' + mode + '" data-npageNumber="' + pageNumber + '" > ' +
                    '<div class="notificationCountImgCon"><div id="accrd_num_' + index + '" class="smallCountCircle">' + notificationCountTxt + '</div><img id="notificationBell' + id + '" class="accrd-bell" src="/images/common/icons/svg/bell.svg" alt="" /></div><div class="profileSectionLink">' + itemDisplayText + '</div>' +
                    '<div class="profileSectionLinkChevron"><img src="/images/common/icons/svg/next-arrow2-grayblue.svg" /></div>' +
                    '</a>';
            }
            else {
                var notificationId = "galleryViewContent_" + id + textId + index.toString();
                var itemDisplayHTML = '';
                if (type == ConsumerNotificationTypes.Search) {
                    itemDisplayHTML = '<div class="profileSectionLink"> ' + itemDisplayText + ' <div class="searchDate" > ' + stringToInputDate(searchDate).toString() + ' </div></div>';
                }
                else {
                    itemDisplayHTML = '<div class="profileSectionLink"> ' + itemDisplayText + '</div>';
                }
                return '<div class="profileSectionLinkCon" id="' + notificationId + '" data-section="' + id + '" data-link="' + itemLink + '" data-nid="' + notificationId + '"  data-ntitle="' + itemText + '" data-ntype="' + ConsumerNotificationTypes[type] + '" data-nmode="' + mode + '" data-npageNumber="' + pageNumber + '" > ' +
                    '<div class="accrd-hdr">' +
                    '<div class="notificationCountImgCon"><div id="accrd_num_' + index + '" class="smallCountCircleRight notifications">' + notificationCountTxt + '</div><img id="notificationBell' + id + '" class="accrd-bell" src="/images/common/icons/svg/bell.svg" alt="" /></div>' + itemDisplayHTML +
                    '</div>' +
                    '</div>';
            }
        };
        Notifications.RenderNotificationListings = function (sectionId, itemLink, type, mode, notificationId, pageNumber, title, postContentCallHandler) {
            var RecordsPerPage = ApplicationConfig.PropertySearchRecordPerPage;
            var _notificationsObjs = new Notifications(ConsumerProfile.UserAccountSettings.Notifications);
            var totalListingCount = _notificationsObjs.getListingCount(notificationId, mode, type);
            var wrappedHandler = function (response) {
                Notifications.buildSummaryListingsHTML(response, sectionId, itemLink, notificationId, type, mode, totalListingCount, pageNumber, title);
                if (postContentCallHandler != null) {
                    postContentCallHandler();
                }
            }; //response, item, mode, type, total listing Count, pageNumber
            var listingsIds = _notificationsObjs.getListingIds(notificationId, mode, type, pageNumber, ApplicationConfig.PropertySearchRecordPerPage);
            var idsCSV = listingsIds.join(",");
            var fetchNotificationsListings = function () { APIProxy.propertySearch({ ListingIds: idsCSV, IncludeTombstones: "0", IncludePins: "0", RecordsPerPage: RecordsPerPage.toString(), MaxRecords: "150", Currency: ApplicationState.CurrencyValue || "CAD" }, wrappedHandler, this); };
            Notifications.functionCallsToMakeAfterNotificationsFetched.push(fetchNotificationsListings);
            if (Notifications.functionCallsToMakeAfterNotificationsFetched != null && Notifications.functionCallsToMakeAfterNotificationsFetched.length > 0) {
                for (var index = 0; index < Notifications.functionCallsToMakeAfterNotificationsFetched.length; index++) {
                    Notifications.functionCallsToMakeAfterNotificationsFetched[index](ConsumerProfile.UserAccountSettings.Notifications);
                }
            }
            Notifications.functionCallsToMakeAfterNotificationsFetched = [];
        };
        Notifications.RenderNotificationListingsDesktop = function (sectionId, itemLink, type, mode, notificationId, pageNumber, timestamp, postContentCallHandler) {
            var RecordsPerPage = 4;
            var _notificationsObjs = new Notifications(ConsumerProfile.UserAccountSettings.Notifications);
            var totalListingCount = _notificationsObjs.getListingCount(notificationId, mode, type);
            var wrappedHandler = function (response) {
                Notifications.buildSummaryListingsHTML(response, sectionId, itemLink, notificationId, type, mode, totalListingCount, pageNumber, null, timestamp);
                if (postContentCallHandler != null) {
                    postContentCallHandler();
                }
            }; //response, item, mode, type, total listing Count, pageNumber
            var listingsIds = _notificationsObjs.getListingIds(notificationId, mode, type, pageNumber, RecordsPerPage);
            var idsCSV = listingsIds.join(",");
            var fetchNotificationsListings = function () { APIProxy.propertySearch({ ListingIds: idsCSV, IncludeTombstones: "0", IncludePins: "0", RecordsPerPage: RecordsPerPage.toString(), MaxRecords: "150", Currency: ApplicationState.CurrencyValue || "CAD" }, wrappedHandler, this); };
            Notifications.functionCallsToMakeAfterNotificationsFetched.push(fetchNotificationsListings);
        };
        Notifications.buildSummaryListingsHTML = function (response, sectionId, itemLink, notificationId, type, mode, total, pageNumber, title, timestamp) {
            if (response) {
                Notifications.generateGalleryPage(response, sectionId, itemLink, notificationId, type, mode, total, pageNumber, title, timestamp);
            }
        };
        Notifications.generateGalleryPage = function (response, sectionId, itemLink, notificationId, type, mode, total, pageNumber, title, timestamp) {
            var results = response;
            var RecordsPerPage = ApplicationState.IsMobileDevice ? ApplicationConfig.PropertySearchRecordPerPage : 4;
            if (results.Paging.TotalRecords > 0) {
                var btnText = "";
                var msgText = "";
                if (sectionId === 'accrd-search-listings') {
                    btnText = Translation.get("T597");
                    if (total === 1) {
                        msgText = Translation.get("T626").replace(/\[0]/gi, total.toString()).replace(/\[1]/gi, timestamp);
                    }
                    else {
                        msgText = Translation.get("T595").replace(/\[0]/gi, total.toString()).replace(/\[1]/gi, timestamp);
                    }
                }
                else if (sectionId === 'accrd-comp') {
                    btnText = Translation.get("T599");
                }
                else {
                    btnText = Translation.get("T598");
                    itemLink = RouteHelper.getURL("my-favourites");
                    msgText = Translation.get("T596").replace(/\[0]/gi, total.toString()).replace(/\[1]/gi, timestamp);
                }
                if (ApplicationState.IsMobileDevice) {
                    if ($('#' + notificationId).length <= 0) {
                        $("#notify_listings_results").append('<div id="' + notificationId + '" class="galleryViewContent" style="display: none;"></div>');
                        $('#' + notificationId).html('<a class="subSectionBackLink notifications" id="lnk' + notificationId + 'Back" data-nid="' + notificationId + '" onclick=""><div class="subSectionBackCon"> <img src="/images/common/icons/svg/next-arrow2-grayblue.svg" alt="" class="subSectionBackArrowIcon" /> <div class="subSectionBackText">' + Translation.get("Back") + '</div></div></a><a class="notificationItemLink" href="' + itemLink + '"><div id="notify-summary-link" class="NotificationSettingsLink"> ' + btnText + '</div></a><div id="notify-title" class="subSectionTitle">' + title + '</div>');
                    }
                }
                else {
                    $('#' + notificationId).append('<div id="cardCon_' + notificationId + '" class="galleryViewContent"></div>');
                    if ($('#' + notificationId + " .galleryHeaderContent").length <= 0) {
                        if (type == ConsumerNotificationTypes.Search) {
                            $('#' + notificationId + " .galleryViewContent").html('<div class="galleryHeaderContent"><div class="notificationItemInfo">' + msgText + '</div><a class="notificationItemLink" href="' + itemLink + '"><div class="SavedSearchExecuteButton" style="float: right;"><span class="SavedSearchExecuteIconWrapper btn"><img src="/images/common/icons/svg/search-white.svg" class="SavedSearchExecuteIcon" style="height: 30px; width: 30px; padding: 5px;" /></span></div><div style="clear:both;"></div></a></div>');
                        }
                        else {
                            $('#' + notificationId + " .galleryViewContent").html('<div class="galleryHeaderContent"><div class="notificationItemInfo">' + msgText + '</div><a class="notificationItemLink" href="' + itemLink + '"><div id="notify-summary-link" class="btn greenRoundedBtn narrowButton"> ' + btnText + '</div><div style="clear:both;"></div></a></div>');
                        }
                    }
                }
                var cards = [];
                for (var _i = 0, _a = results.Results; _i < _a.length; _i++) {
                    var val = _a[_i];
                    cards.push(new ListingCardModel(val));
                }
                var model = new ListingResultsModel(cards);
                var args = new ControlFetcherArgs("notificationSummaryListViewContents" + notificationId + pageNumber.toString());
                args.postCallHandler = function (html) {
                    if (ApplicationState.IsMobileDevice) {
                        $('#' + notificationId).append(html);
                    }
                    else {
                        $('#cardCon_' + notificationId).append(html);
                        var isAccordionInit = $(".accrd-notify-summary").hasClass("ui-accordion");
                        if (isAccordionInit) {
                            $(".accrd-notify-summary").accordion("refresh");
                        }
                        ;
                        $("#" + notificationId + "pageInfo" + (pageNumber - 1).toString()).remove(); //remove previous page info
                        if ($('#cardCon_' + notificationId).is(":visible")) {
                            setConsistantHeights('.smallListingCard');
                        }
                    }
                    if (total > (RecordsPerPage * pageNumber)) {
                        if (ApplicationState.IsMobileDevice) {
                            $(".notificationListPageInfo").remove();
                            $('#' + notificationId).append('<div class="notificationListPageInfo" id="' + notificationId + 'pageInfo" data-nid="' + notificationId + '" data-ntype="' + ConsumerNotificationTypes[type] + '" data-ntitle="' + title + '" data-nmode="' + mode + '" data-npageNumber="' + pageNumber + '"/>');
                            $("#" + notificationId + "pageInfo" + (pageNumber - 1).toString()).remove(); //remove previous page info
                        }
                        else {
                            $("#notificationSummaryListViewContents" + notificationId + pageNumber.toString()).append('<div class="notificationListPageInfo" id="' + notificationId + 'pageInfo' + pageNumber + '" data-nid="' + notificationId + '" data-ntype="' + ConsumerNotificationTypes[type] + '" data-ntitle="' + title + '" data-nmode="' + mode + '" data-npageNumber="' + pageNumber + '">' + Translation.get("ShowMore") + '<span style="font-size: 18px; color: #23A1C0; padding-left:10px;" class="m_al fa fa-plus-circle"></span></div>');
                        }
                    }
                    if (ApplicationState.IsMobileDevice) {
                        window.setTimeout(function () {
                            Notifications.functionCallsAfterNotificationHTML();
                            Notifications.ListingPageHasBeenLoaded = true;
                        }, 250);
                    }
                };
                ControlFetcherJS.fetchSmallListingCards(args, model);
            }
        };
        Notifications.functionCallsAfterNotificationHTML = function () {
            if (Notifications.pageCallsToMakeAfterNotificationsHTML != null && Notifications.pageCallsToMakeAfterNotificationsHTML.length > 0) {
                for (var index = 0; index < Notifications.pageCallsToMakeAfterNotificationsHTML.length; index++) {
                    Notifications.pageCallsToMakeAfterNotificationsHTML[index].registerEventHandlers();
                }
            }
            Notifications.pageCallsToMakeAfterNotificationsHTML = [];
        };
        Notifications.formatNotificationTextId = function (textId) {
            //remvoe spaces, special ks, etc
            return textId.replace(/\s/g, '-').replace(/[^a-z0-9\s]/gi, '').replace(/[_\s]/g, '-');
        };
        Notifications.refreshNotificationCon = function (element) {
            if (ApplicationState.UserIsSignedIn) {
                element.find('.notificationCon').each(function (i, text) {
                    var notificationText = "";
                    var dataVal = $(this).attr('data-value').toLowerCase();
                    var id = dataVal.split('_')[0];
                    var HasOpenHouseUpdate = (dataVal.split('_')[1] == 'true');
                    var HasPriceUpdate = (dataVal.split('_')[2] == 'true');
                    var HasNewImageUpdate = (dataVal.split('_')[3] == 'true');
                    var AppMode = parseInt(dataVal.split('_')[4]);
                    var HasLiveStreamUpdate = (dataVal.split('_')[5] == 'true');
                    var HasNotifications = false;
                    var parts = [];
                    if (HasPriceUpdate) {
                        parts.push(Translation.get("PriceChange"));
                    }
                    ;
                    if (HasOpenHouseUpdate) {
                        parts.push(Translation.get("OpenHouseChange"));
                    }
                    ;
                    if (HasLiveStreamUpdate) {
                        parts.push(Translation.get("LiveStreams"));
                    }
                    ;
                    if (HasNewImageUpdate) {
                        parts.push(Translation.get("ImageChange"));
                    }
                    ;
                    notificationText = parts.join(", ");
                    HasNotifications = HasPriceUpdate || HasOpenHouseUpdate || HasNewImageUpdate || HasLiveStreamUpdate;
                    if ((HasNotifications && Favourite.exists(id, AppMode) && ConsumerProfile.UserAccountSettings.FavNotificationsEnabled)) { // || (HasNotifications && Compare.exists(id, AppMode) && ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled)) {
                        $(this).find('.m_notification_pill').html(Translation.get("UPDATED") + ":");
                        $(this).find(".m_listingCardNotificationsText").html(notificationText);
                        $(this).show();
                    }
                    else if ((HasNotifications && ConsumerProfile.UserAccountSettings.FavNotificationsEnabled) || (HasNotifications && ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled)) { // || (HasNotifications && ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled)) {
                        $(this).find('.m_notification_pill').html(Translation.get("NEW"));
                        $(this).show();
                    }
                });
            }
        };
        Notifications.notificationsRefreshEvent = 'notificationsRefresh';
        //Function calls to make to update UI after the notifications are fetch via notifications AJAX fetch call. Functions will be called with NotificationObj arg.
        Notifications.functionCallsToMakeAfterNotificationsFetched = [];
        Notifications.pageCallsToMakeAfterNotificationsHTML = [];
        Notifications.ListingPageHasBeenLoaded = true;
        //Cache notifcations object in memoery cache in case multiple calls are made.
        Notifications.cache = {};
        return Notifications;
    }());
    ConsumerProfile.Notifications = Notifications;
    var Notification = /** @class */ (function () {
        function Notification(JSONObj, type, text, listingIds, appMode, actionData, searchDate) {
            if (JSONObj) {
                for (var prop in JSONObj)
                    this[prop] = JSONObj[prop];
            }
            else {
                switch (type) {
                    case "1":
                        this.type = ConsumerNotificationTypes.Search;
                        break;
                    case "2":
                        this.type = ConsumerNotificationTypes.Compare;
                        break;
                    case "3":
                        this.type = ConsumerNotificationTypes.Favourite;
                        break;
                    default:
                        this.type = ConsumerNotificationTypes.Null;
                }
                this.text = text;
                this.listingIds = listingIds;
                this.appMode = appMode == "1" ? ApplicationModes.Residential : ApplicationModes.Commercial;
                this.actionData = actionData;
                this.searchDate = searchDate;
            }
        }
        return Notification;
    }());
    ConsumerProfile.Notification = Notification;
})(ConsumerProfile || (ConsumerProfile = {}));
//# sourceMappingURL=Notifications.js.map;
var ObjectCompare;
(function (ObjectCompare) {
    var CompareResultType;
    (function (CompareResultType) {
        CompareResultType[CompareResultType["DifferentValue"] = 0] = "DifferentValue";
        CompareResultType[CompareResultType["SourceValueMissing"] = 1] = "SourceValueMissing";
        CompareResultType[CompareResultType["CompareValueMissing"] = 2] = "CompareValueMissing";
    })(CompareResultType || (CompareResultType = {}));
    var CompareResult = /** @class */ (function () {
        function CompareResult(type, propertyName) {
            this.Type = type;
            this.PropertyName = propertyName;
        }
        return CompareResult;
    }());
    ObjectCompare.CompareResult = CompareResult;
    /**
     * Returns true if both object have the same property but with different values
     * @param val1
     * @param val2
     * @param ignoreProperties
     */
    function doObjectsHaveSamePropertyWithDifferentValue(val1, val2, ignoreProperties) {
        if (ignoreProperties === void 0) { ignoreProperties = []; }
        var returnValue = false;
        val1 = val1 || {};
        val2 = val2 || {};
        for (var key in val1) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (key in val2 && val1[key] !== val2[key]) {
                    return true;
                }
            }
        }
        return returnValue;
    }
    ObjectCompare.doObjectsHaveSamePropertyWithDifferentValue = doObjectsHaveSamePropertyWithDifferentValue;
    /**
     * Returns list of CompareResults for the
     * @param val1
     * @param val2
     * @param ignoreProperties
     */
    function getChangedProperties(val1, val2, ignoreProperties) {
        if (ignoreProperties === void 0) { ignoreProperties = []; }
        var returnValue = [];
        val1 = val1 || {};
        val2 = val2 || {};
        for (var key in val1) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in val2)) {
                    returnValue.push(new CompareResult(CompareResultType.CompareValueMissing, key));
                }
                else if (val1[key] !== val2[key]) {
                    returnValue.push(new CompareResult(CompareResultType.DifferentValue, key));
                }
            }
        }
        for (var key in val2) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in val1)) {
                    returnValue.push(new CompareResult(CompareResultType.SourceValueMissing, key));
                }
                else if (val1[key] !== val2[key]) {
                    returnValue.push(new CompareResult(CompareResultType.DifferentValue, key));
                }
            }
        }
        return returnValue;
    }
    ObjectCompare.getChangedProperties = getChangedProperties;
    /**
     * Returns if the two passed in objects are equal (same properties with same values)
     * @param val1
     * @param val2
     * @param ignoreProperties
     * @param differingProperty byref array that will contain the first property that's in-equal (it's an array only because otherwise it would be passe byval, only obj and arrays are byref in JS)
     */
    function areEqual(val1, val2, ignoreProperties, differingProperty) {
        if (ignoreProperties === void 0) { ignoreProperties = []; }
        if (differingProperty === void 0) { differingProperty = []; }
        val1 = val1 || {};
        val2 = val2 || {};
        for (var key in val1) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in val2) || val1[key] !== val2[key]) {
                    differingProperty.push(key);
                    return false;
                }
            }
        }
        for (var key in val2) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in val1) || val1[key] !== val2[key]) {
                    differingProperty.push(key);
                    return false;
                }
            }
        }
        return true;
    }
    ObjectCompare.areEqual = areEqual;
    /**
     * Returns if the two passed in objects are equal (same properties with same values)
     * @param object1
     * @param object2
     * @param ignoreProperties
     * @param differingProperty byref array that will contain the first property that's in-equal (it's an array only because otherwise it would be passe byval, only obj and arrays are byref in JS)
     */
    function getInequalProperties(object1, object2, ignoreProperties) {
        if (ignoreProperties === void 0) { ignoreProperties = []; }
        var returnValue = [];
        object1 = object1 || {};
        object2 = object2 || {};
        for (var key in object1) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in object2) || object1[key] !== object2[key]) {
                    returnValue.push(key);
                }
            }
        }
        for (var key in object2) {
            if (ignoreProperties.indexOf(key) == -1) {
                if (!(key in object1) || object1[key] !== object2[key]) {
                    returnValue.push(key);
                }
            }
        }
        return returnValue;
    }
    ObjectCompare.getInequalProperties = getInequalProperties;
})(ObjectCompare || (ObjectCompare = {}));
//# sourceMappingURL=ObjectCompare.js.map;
/** This file is used "polyfill" javscript functionality not available to older browsers because they don't support X version of EMCA standards  **/
//https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill
if (typeof Object.assign != 'function') {
    Object.assign = function (target, varArgs) {
        'use strict';
        if (target == null) { // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }
        var to = Object(target);
        for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];
            if (nextSource != null) { // Skip over if undefined or null
                for (var nextKey in nextSource) {
                    // Avoid bugs when hasOwnProperty is shadowed
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    };
}
// Production steps of ECMA-262, Edition 5, 15.4.4.17
// Reference: http://es5.github.io/#x15.4.4.17
if (!Array.prototype.some) {
    Array.prototype.some = function (fun /*, thisArg*/) {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.some called on null or undefined');
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;
        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(thisArg, t[i], i, t)) {
                return true;
            }
        }
        return false;
    };
}
/* HTML encode for display */
if (!String.prototype.HTMLSafe) {
    String.prototype.HTMLSafe = function (uriDecode) {
        if (uriDecode === void 0) { uriDecode = true; }
        if (uriDecode) {
            var i;
            try {
                i = decodeURIComponent(this);
            }
            catch (err) {
                i = this;
            }
            ;
            return $('<div/>').text(i).html();
        }
        else {
            return $('<div/>').text(this).html();
        }
    };
}
if (!Date.prototype.toCREAString) {
    Date.prototype.toCREAString = function (spacer) {
        if (spacer === void 0) { spacer = " - "; }
        return this.getUTCFullYear() + spacer + (this.getUTCMonth() + 1) + spacer + this.getUTCDate();
    };
}
$.fn.checkExists = function () {
    if (!this.length || this.length == 0)
        throw new Error("No elements matched by " + this.selector);
    return this;
};
$.fn.exists = function () {
    return !this.length || this.length > 0;
};
/** To get full html of all elements in JQuery selector obj **/
$.fn.outerHTML = function () {
    var returnVal = "";
    $(this).each(function (index) {
        returnVal += $('<div />').append($(this).clone()).html();
    });
    return returnVal;
};
/** Like .show() but uses the visibility css property not display:block/none **/
$.fn.visible = function () {
    $(this).css("visibility", "visible");
    return $(this);
};
/** Like .hide() but uses the visibility css property not display:block/none **/
$.fn.hidden = function () {
    $(this).css("visibility", "hidden");
    return $(this);
};
(function () {
    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }
    ;
    CustomEvent.prototype = Event.prototype;
    window.CustomEvent = CustomEvent;
})();
//https://stackoverflow.com/questions/12484386/access-javascript-property-case-insensitively
Object.defineProperty(Object.prototype, "getProp", {
    value: function (prop) {
        var key, self = this;
        for (key in self) {
            if (key.toLowerCase() == prop.toLowerCase()) {
                return self[key];
            }
        }
        return undefined;
    },
    //this keeps jquery happy
    enumerable: false
});
//# sourceMappingURL=Polyfills.js.map;
function observe(o, preSet, postSet) {
    return new Proxy(o, {
        set: function (target, property, value) {
            var currentVal = target[property];
            preSet(property, value);
            target[property] = value;
            postSet(property, currentVal, value);
        },
    });
}
//# sourceMappingURL=Proxy.js.map;
var RecentlyViewedListing = /** @class */ (function () {
    //appMode: number = ApplicationState.CurrentMode;
    function RecentlyViewedListing(id) {
        this.timestamp = new Date().getTime().toString();
        this.id = "";
        this.id = (id || "");
    }
    RecentlyViewedListing.save = function (id, timestamp) {
        var objects = LocalStorage.ListingHistory.getObjects(RecentlyViewedListing.CreateFromJSON);
        if (objects == null) {
            objects = [];
        }
        var index = RecentlyViewedListing.getIndexOf(id);
        if (index > -1) {
            RecentlyViewedListing.delete(id);
            objects = LocalStorage.ListingHistory.getObjects(RecentlyViewedListing.CreateFromJSON);
        }
        var newEntry = new RecentlyViewedListing(id);
        if ((timestamp || "") != "") {
            newEntry.timestamp = timestamp;
        }
        objects.unshift(newEntry);
        if (objects.length > RecentlyViewedListing.maxListings) {
            objects.splice(RecentlyViewedListing.maxListings, objects.length - RecentlyViewedListing.maxListings);
        }
        LocalStorage.ListingHistory.saveObject(objects);
        Cookie.RecentlyViewedListingsCount.save(objects.length.toString());
    };
    RecentlyViewedListing.delete = function (id) {
        var objects = LocalStorage.ListingHistory.getObjects(RecentlyViewedListing.CreateFromJSON);
        var index = RecentlyViewedListing.getIndexOf(id);
        objects.splice(index, 1);
        LocalStorage.ListingHistory.saveObject(objects);
        //Reflect the number of Recently viewed on the user cookie
        Cookie.RecentlyViewedListingsCount.save(objects.length.toString());
    };
    RecentlyViewedListing.getIndexOf = function (id) {
        var objects = LocalStorage.ListingHistory.getObjects(RecentlyViewedListing.CreateFromJSON);
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].id == id) {
                return i;
            }
        }
        return -1;
    };
    RecentlyViewedListing.CreateFromJSON = function (value) {
        var returnValue = new RecentlyViewedListing();
        for (var prop in value)
            returnValue[prop] = value[prop];
        return returnValue;
    };
    RecentlyViewedListing.getAllIds = function (sortOrder) {
        if (sortOrder === void 0) { sortOrder = SortOrder.Descending; }
        var returnValue = new Array();
        var values = RecentlyViewedListing.GetAll(sortOrder);
        for (var i = 0; i < values.length; i++) {
            returnValue.push(values[i].id);
        }
        return returnValue;
    };
    RecentlyViewedListing.GetAll = function (sortOrder) {
        if (sortOrder === void 0) { sortOrder = SortOrder.Ascending; }
        var returnValue = LocalStorage.ListingHistory.getObjects(RecentlyViewedListing.CreateFromJSON);
        returnValue.sort(function (a, b) {
            return Number(a.timestamp) - Number(b.timestamp);
        });
        if (sortOrder === SortOrder.Descending) {
            returnValue.reverse();
        }
        //Reflect the number of Recently viewed on the cookie before returning
        Cookie.RecentlyViewedListingsCount.save(returnValue.length.toString());
        return returnValue;
    };
    RecentlyViewedListing.recentlyViewedListingsAddedEvent = 'recentlyViewedListingsAddedEvent';
    RecentlyViewedListing.maxListings = 12;
    return RecentlyViewedListing;
}());
//# sourceMappingURL=RecentlyViewedListings.js.map;
/**
 * Loader Class
 */
var ResourceFetcher = /** @class */ (function () {
    function ResourceFetcher() {
    }
    ResourceFetcher.fetchCSS = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._load("link", url, resolve, reject);
        });
    };
    ResourceFetcher.fetchJS = function (url) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._load("script", url, resolve, reject);
        });
    };
    ResourceFetcher._load = function (tag, url, resolve, reject) {
        var element = document.createElement(tag);
        var attr;
        var parent;
        // resolve and reject for the promise
        element.addEventListener("load", function () {
            resolve(url);
        });
        element.addEventListener("error", function () {
            reject(url);
        });
        // set different attributes depending on tag type
        switch (tag) {
            case "script":
                parent = "body";
                attr = "src";
                element.async = false;
                break;
            case "link":
                parent = "head";
                attr = "href";
                element.type = "text/css";
                element.rel = "stylesheet";
                break;
            default:
                throw new Error("Unsupported tag.");
        }
        // set the url for the element
        element[attr] = url;
        // initiate the loading of the element
        document[parent].appendChild(element);
    };
    return ResourceFetcher;
}());
///*
// Loader Usage
// */
//Promise.all([
//    Loader.css("https://rawgit.com/CodeSeven/toastr/master/build/toastr.min.css"),
//    Loader.js("https://code.jquery.com/jquery-3.3.1.min.js"),
//    Loader.js("https://rawgit.com/CodeSeven/toastr/master/build/toastr.min.js")
//])
//    .then(messages => {
//        console.log("Resolved!", messages);
//        toastr.info("Are you the 6 fingered man?");
//    })
//    .catch(error => {
//        console.error("Rejected!", error);
//    });
//# sourceMappingURL=ResourceFetcher.js.map;
//TS Equivalent of the server side class of the same name.
var RouteHelper = /** @class */ (function () {
    function RouteHelper() {
    }
    RouteHelper.replacePlaceholders = function (stringVal, replacements) {
        var returnValue = stringVal;
        for (var property in replacements) {
            if (replacements.hasOwnProperty(property)) {
                var pattern = "{" + property + "}";
                returnValue = returnValue.replace("{" + property + "}", replacements[property]);
            }
        }
        return returnValue;
    };
    RouteHelper.getURL = function (key, absolutePath, forcedCultureID, replacementValues) {
        if (absolutePath === void 0) { absolutePath = true; }
        if (forcedCultureID === void 0) { forcedCultureID = null; }
        if (replacementValues === void 0) { replacementValues = null; }
        var record = ApplicationState.RoutingDictionary[key.toLowerCase()];
        var returnValue = "";
        if (record != null) {
            if ((forcedCultureID || ApplicationState.CultureID) == 2) {
                returnValue = decodeURIComponent(record.FrenchRoute);
            }
            else {
                returnValue = decodeURIComponent(record.EnglishRoute);
            }
            var finalReplacements = record.DefaultValues || {}; //Hold the defaults with any replacement overwrites 
            if (replacementValues != null) {
                for (var property in replacementValues) {
                    if (replacementValues.hasOwnProperty(property)) {
                        finalReplacements[property] = replacementValues[property];
                    }
                }
            }
            returnValue = RouteHelper.replacePlaceholders(returnValue, finalReplacements);
        }
        else {
            Logging.Error("(RouteHelper) URL Route does not exists for key: " + key);
        }
        if (absolutePath) {
            returnValue = location.origin + "/" + returnValue;
        }
        else {
            returnValue = "/" + returnValue;
        }
        return returnValue;
    };
    //public static getRouteFromRedirect(redirectURL: string): string {
    //    //Values in RoutingDictionary are now encoded, so to match we need to encode this as well
    //    redirectURL = encodeURIComponent(redirectURL);
    //    if (ApplicationState.RoutingDictionary != null) {
    //        for (let key in ApplicationState.RoutingDictionary) {
    //            if (ApplicationState.RoutingDictionary[key].EnglishRedirect == redirectURL) {
    //                return decodeURIComponent(ApplicationState.RoutingDictionary[key].EnglishRoute);
    //            } else if (ApplicationState.RoutingDictionary[key].FrenchRedirect == redirectURL) {
    //                return decodeURIComponent(ApplicationState.RoutingDictionary[key].FrenchRoute);
    //            }
    //        }
    //    }
    //    return "";
    //}
    RouteHelper.getRedirectionFromRoute = function (route) {
        //Values in RoutingDictionary are now encoded, so to match we need to encode this as well
        route = encodeURIComponent(route);
        if (ApplicationState.RoutingDictionary != null) {
            for (var key in ApplicationState.RoutingDictionary) {
                if (ApplicationState.RoutingDictionary[key].EnglishRoute == route) {
                    return decodeURIComponent(ApplicationState.RoutingDictionary[key].EnglishRedirect);
                }
                else if (ApplicationState.RoutingDictionary[key].FrenchRoute == route) {
                    return decodeURIComponent(ApplicationState.RoutingDictionary[key].FrenchRedirect);
                }
            }
        }
        return "";
    };
    RouteHelper.getRedirection = function (key) {
        var record = ApplicationState.RoutingDictionary[key.toLowerCase()];
        var returnValue = "";
        if (record != null) {
            if (ApplicationState.CultureID == 2) {
                returnValue = record.FrenchRedirect;
            }
            else {
                returnValue = record.EnglishRedirect;
            }
        }
        return returnValue;
    };
    return RouteHelper;
}());
var RoutingRecord = /** @class */ (function () {
    function RoutingRecord(key, englishRoute, frenchRoute, englishRedirect, frenchRedirect, defaultValues) {
        this.EnglishRoute = "";
        this.FrenchRoute = "";
        this.EnglishRedirect = "";
        this.FrenchRedirect = "";
        this.DefaultValues = {};
        this.Key = "";
        this.Key = key;
        this.EnglishRoute = englishRoute;
        this.FrenchRoute = frenchRoute;
        this.EnglishRedirect = englishRedirect;
        this.FrenchRedirect = frenchRedirect;
        if (defaultValues != null) {
            this.DefaultValues = defaultValues;
        }
    }
    return RoutingRecord;
}());
//# sourceMappingURL=RouteHelper.js.map;
//localStorage key 
var RealtorSavedSearch_StorageKey = "RealtorSavedSearches";
var SavedSearchUpdatedArgs = /** @class */ (function () {
    function SavedSearchUpdatedArgs() {
        this.updateGigya = false;
    }
    return SavedSearchUpdatedArgs;
}());
var SavedSearchRefreshArgs = /** @class */ (function () {
    function SavedSearchRefreshArgs() {
    }
    return SavedSearchRefreshArgs;
}());
var SavedSearch = /** @class */ (function () {
    function SavedSearch(name, url, appMode, savedDate, viewedDate, notify, hasNotifications) {
        /** Casing needs to match Searches class of consumer profile :( hope you like camels **/
        this.name = "";
        this.url = "";
        this.appMode = ApplicationState.CurrentMode;
        this.notify = false;
        this.name = (name || "");
        this.url = (url || "");
        this.savedDate = (savedDate || new Date());
        this.viewedDate = (viewedDate || new Date());
        this.appMode = (appMode || ApplicationState.CurrentMode);
        this.notify = (notify || false);
    }
    SavedSearch.prototype.UpdateNotificationFrequencyLocally = function (method, frequency) {
        var _a;
        var currentEmailNotifications = (_a = this.notifications) === null || _a === void 0 ? void 0 : _a.filter(function (value) { return value.method == NotificationMethod.Email; });
        if ((currentEmailNotifications === null || currentEmailNotifications === void 0 ? void 0 : currentEmailNotifications.length) > 0) {
            var indexOfSavedSearch = this.notifications.indexOf(currentEmailNotifications[0]);
            if (frequency == NotificationFrequency.Never) {
                this.notifications.splice(indexOfSavedSearch, 1);
            }
            else {
                this.notifications[indexOfSavedSearch].frequency = frequency;
            }
        }
        else if (!this.notifications) {
            this.notifications = [new NotificationSetting({ method: NotificationMethod.Email, frequency: frequency })];
        }
        else {
            if (frequency != NotificationFrequency.Never) {
                this.notifications.push(new NotificationSetting({ method: NotificationMethod.Email, frequency: frequency }));
            }
        }
    };
    SavedSearch.prototype.HasNotification = function (applicationMode) {
        var Notifications = ConsumerProfile.UserAccountSettings.Notifications;
        if (Notifications != null && ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
            for (var i = 0; i < Notifications.savedSearchNotifications.length; i++) {
                var notification = Notifications.savedSearchNotifications[i];
                if (notification.text == Utilities.HTMLDecode(this.name) && notification.appMode == this.appMode)
                    return true;
            }
        }
        return false;
    };
    SavedSearch.HasNotificationFrequency = function (savedSearchesSearchIn, notifFreq, excluded) {
        var _a;
        var savedSearches = savedSearchesSearchIn === null || savedSearchesSearchIn === void 0 ? void 0 : savedSearchesSearchIn.filter(function (value) {
            return value.name != ((excluded === null || excluded === void 0 ? void 0 : excluded.filter(function (exclude) {
                return exclude.name == value.name;
            }).length) > 0 ? excluded === null || excluded === void 0 ? void 0 : excluded.filter(function (exclude) {
                return exclude.name == value.name;
            })[0].name : null);
        });
        return ((_a = savedSearches === null || savedSearches === void 0 ? void 0 : savedSearches.filter(function (value) {
            var _a;
            return ((_a = value.notifications) === null || _a === void 0 ? void 0 : _a.filter(function (value) {
                return value.method == NotificationMethod.Email && notifFreq == value.frequency;
            }).length) > 0;
        })) === null || _a === void 0 ? void 0 : _a.length) > 0;
    };
    SavedSearch.prototype.HTMLEncodedName = function () {
        return Utilities.HTMLEncode(this.name);
    };
    SavedSearch.prototype.DisplaySafeName = function () {
        return Utilities.HTMLDecode(this.name);
    };
    SavedSearch.prototype.Save = function (updateGigya) {
        if (updateGigya === void 0) { updateGigya = true; }
        var searches = SavedSearch.GetAll();
        var SavedSearchResult = { errorId: SavedSearchError.None, errorValue: null, searches: searches };
        //With mode removal we'll maintain concept via the search type (commercial = propertytypegroupid=2, residential = propertytypegroupid=1)
        this.appMode = this.url.toLowerCase().indexOf("propertytypegroupid=2") > -1 ? ApplicationModes.Commercial : ApplicationModes.Residential;
        if (ApplicationState.UserIsSignedIn) {
            if (searches.length == ConsumerProfile.UserAccountSettings.SearchLimit) {
                SavedSearchResult.errorId = SavedSearchError.SearchLimitConsumer;
                SavedSearchResult.errorValue = Translation.get("M61");
            }
        }
        else {
            if (searches.length == ApplicationConfig.SearchLimit) {
                SavedSearchResult.errorId = SavedSearchError.SearchLimitGuest;
                SavedSearchResult.errorValue = Translation.get("SearchLimit");
            }
        }
        if (SavedSearchResult.errorId === SavedSearchError.None && SavedSearch.IsSearchNameIsUnique(this.name)) {
            searches.push(this);
            SavedSearch.GetStorageItem().saveObject(searches);
            var args = { updateGigya: updateGigya };
            SavedSearch.savedSearchesCountUpdated.Fire({ count: searches.length });
            Events.Fire(SavedSearch.savedSearchesUpdated, args);
        }
        return SavedSearchResult;
    };
    SavedSearch.prototype.Update = function (updateGigya) {
        if (updateGigya === void 0) { updateGigya = true; }
        var searches = SavedSearch.GetAll();
        var indexOfSearch = -1;
        var args = { updateGigya: updateGigya };
        for (var i = 0; i < searches.length; i++) {
            if (searches[i].name == this.name) {
                indexOfSearch = i;
                break;
            }
        }
        if (indexOfSearch > -1) {
            searches[indexOfSearch] = this;
            SavedSearch.GetStorageItem().saveObject(searches);
            if (updateGigya) {
                Events.Fire(SavedSearch.savedSearchesUpdated, args);
                SavedSearch.savedSearchesCountUpdated.Fire({ count: searches.length });
            }
            return true;
        }
        return false;
    };
    SavedSearch.prototype.Delete = function (updateGigya) {
        if (updateGigya === void 0) { updateGigya = true; }
        var searches = SavedSearch.GetAll();
        for (var i = 0; i < searches.length; i++) {
            if (searches[i].name == this.name && searches[i].url == this.url && this.appMode == searches[i].appMode) {
                searches.splice(i, 1);
            }
        }
        SavedSearch.GetStorageItem().saveObject(searches);
        var args = { updateGigya: updateGigya };
    };
    SavedSearch.CreateFromJSON = function (value) {
        var returnValue = new SavedSearch();
        for (var prop in value)
            returnValue[prop] = value[prop];
        return returnValue;
    };
    SavedSearch.GetAll = function (appMode, sortOrder, userType) {
        if (appMode === void 0) { appMode = null; }
        if (sortOrder === void 0) { sortOrder = SavedSearchesSortOrder.DateSavedAscending; }
        var objects = SavedSearch.GetStorageItem(userType).getObjects(SavedSearch.CreateFromJSON);
        var returnValue = [];
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].appMode == (appMode || objects[i].appMode)) {
                returnValue.push(objects[i]);
            }
        }
        if (sortOrder === SavedSearchesSortOrder.DateSavedDescending) {
            returnValue.sort(function (a, b) {
                var c = new Date(b.savedDate);
                var d = new Date(a.savedDate);
                return d - c;
            });
        }
        else if (sortOrder === SavedSearchesSortOrder.DateSavedAscending) {
            returnValue.sort(function (a, b) {
                var c = new Date(a.savedDate);
                var d = new Date(b.savedDate);
                return d - c;
            });
        }
        else if (sortOrder === SavedSearchesSortOrder.NameAscending) {
            returnValue.sort(function (a, b) {
                if (a.name.toLowerCase() < b.name.toLowerCase()) {
                    return -1;
                }
                if (a.name.toLowerCase() > b.name.toLowerCase()) {
                    return 1;
                }
                return 0;
            });
        }
        else if (sortOrder === SavedSearchesSortOrder.NameDescending) {
            returnValue.sort(function (a, b) {
                if (a.name.toLowerCase() > b.name.toLowerCase()) {
                    return -1;
                }
                if (a.name.toLowerCase() < b.name.toLowerCase()) {
                    return 1;
                }
                return 0;
            });
        }
        return returnValue;
    };
    SavedSearch.GetAllSearchResults = function (appMode, sortOrder, userType) {
        if (appMode === void 0) { appMode = null; }
        if (sortOrder === void 0) { sortOrder = SavedSearchesSortOrder.DateSavedAscending; }
        var searches = SavedSearch.GetAll(appMode, sortOrder, userType);
        var SavedSearchResult = { errorId: SavedSearchError.None, errorValue: null, searches: searches };
        if (ApplicationState.UserIsSignedIn) {
            if (searches.length == ConsumerProfile.UserAccountSettings.SearchLimit) {
                SavedSearchResult.errorId = SavedSearchError.SearchLimitConsumer;
                SavedSearchResult.errorValue = Translation.get("SearchLimitCTA", RouteHelper.getURL("my-saved-searches"));
            }
        }
        else {
            if (searches.length == ApplicationConfig.SearchLimit) {
                SavedSearchResult.errorId = SavedSearchError.SearchLimitGuest;
                SavedSearchResult.errorValue = Translation.get("SearchLimitGuestCTA", RouteHelper.getURL("my-saved-searches"));
            }
        }
        return SavedSearchResult;
    };
    /**
     * OLD function for old notifications.
     * @param name
     * @param hasNotifications
     * @param appMode
     * @param updateGigya
     */
    SavedSearch.UpdateNotify = function (name, hasNotifications, appMode, updateGigya) {
        var search = SavedSearch.GetByName(name);
        if (search != null) {
            search.notify = hasNotifications;
            //updateGigya bool - sometimes we don't want to sync to gigya right away otherwise get flooded with calls
            search.Delete();
            search.Save(updateGigya);
        }
    };
    SavedSearch.UpdateEmailNotificationFrequency = function (searchName, frequency, updateGigya) {
        var _a;
        if (updateGigya === void 0) { updateGigya = true; }
        var searchObj = SavedSearch.GetByName(searchName);
        var emailNotification = ((_a = searchObj === null || searchObj === void 0 ? void 0 : searchObj.notifications) === null || _a === void 0 ? void 0 : _a.filter(function (element) { return element.method == NotificationMethod.Email; })) || [];
        if (emailNotification.length == 1) { //Already have email notification and want to update
            var index = searchObj.notifications.indexOf(emailNotification[0]);
            if (frequency == NotificationFrequency.Never) {
                searchObj.notifications.splice(index, 1);
            }
            else {
                searchObj.notifications[index].frequency = frequency;
            }
            searchObj.Update(updateGigya);
        }
        else if (frequency != NotificationFrequency.Never) { //No email notifications and want to add one
            if (!searchObj.notifications)
                searchObj.notifications = [];
            //Commenting out for now since there could be a push notification - also I'm not sure why we need to check at all given the above if?
            //if (searchObj.notifications.length == 0) {
            searchObj.notifications.push(new NotificationSetting({ method: NotificationMethod.Email, frequency: frequency }));
            searchObj.Update(updateGigya);
            //}
        }
    };
    SavedSearch.GetFormattedDate = function (inDate, spacer) {
        if (spacer === void 0) { spacer = "-"; }
        var inDateString = "";
        if (inDate != null && inDate != undefined) {
            try {
                inDate = new Date(inDate.toString());
                inDateString = inDate.toCREAString(spacer);
            }
            catch (err) {
                inDateString = inDate.toString();
            }
        }
        var currentDate = new Date();
        var currentDateString = currentDate.toCREAString(spacer);
        var yesterdayDate = new Date();
        yesterdayDate.setDate(yesterdayDate.getDate() - 1);
        var yesterdayDateString = yesterdayDate.toCREAString(spacer);
        if (inDateString == currentDateString) {
            return Translation.get('Today');
        }
        else if (inDateString == yesterdayDateString) {
            return Translation.get('Yesterday');
        }
        else {
            return inDateString;
        }
    };
    SavedSearch.DeleteAll = function (appMode) {
        var searches = SavedSearch.GetAll();
        for (var i = searches.length - 1; i >= 0; i--) {
            if (searches[i].appMode == (appMode || searches[i].appMode)) {
                searches.splice(i, 1);
            }
        }
        SavedSearch.GetStorageItem().saveObject(searches);
        var args = { updateGigya: true };
    };
    SavedSearch.GetByName = function (name) {
        var searches = SavedSearch.GetAll();
        for (var i = 0; i < searches.length; i++) {
            if (searches[i].name.toString().toLowerCase() == name.toLowerCase())
                return searches[i];
        }
        return null;
    };
    SavedSearch.IsSearchNameIsUnique = function (name) {
        var returnValue = true;
        returnValue = SavedSearch.GetByName(name) == null;
        return returnValue;
    };
    SavedSearch.UpdateViewDate = function (name) {
        var search = SavedSearch.GetByName(name);
        if (search != null) {
            search.viewedDate = new Date();
            search.Delete();
            search.Save(true);
        }
    };
    SavedSearch.UpdateName = function (newName) {
        var searches = SavedSearch.GetAll();
        for (var i = 0; i < searches.length; i++) {
            if (searches[i].name == newName) {
                searches[i].name = newName;
            }
        }
        SavedSearch.GetStorageItem().saveObject(searches);
        var args = { updateGigya: true };
    };
    SavedSearch.Delete = function (name) {
        var searches = SavedSearch.GetAll();
        var index = -1;
        for (var i = 0; i < searches.length; i++) {
            if ((Utilities.IsEncoded(searches[i].name) ? Utilities.DecodeString(searches[i].name) : searches[i].name || '') == name) { // && searches[i].AppMode == (appMode || searches[i].AppMode)) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            searches.splice(index, 1);
        }
        SavedSearch.GetStorageItem().saveObject(searches);
        var args = { updateGigya: true };
    };
    SavedSearch.GetStorageItem = function (userType) {
        if (ApplicationState.UserIsSignedIn && userType != UserType.Guest) {
            return LocalAccountStorage.SavedSearchesCP;
        }
        else {
            return LocalStorage.SavedSearches;
        }
    };
    SavedSearch.detectedSavedSearchesDiff = function (savedSearchesPage, savedSearchesAccount, detectDateDiff) {
        var _a, _b, _c;
        if (detectDateDiff === void 0) { detectDateDiff = false; }
        if ((savedSearchesPage === null || savedSearchesPage === void 0 ? void 0 : savedSearchesPage.length) != (savedSearchesAccount === null || savedSearchesAccount === void 0 ? void 0 : savedSearchesAccount.length)) {
            return true;
        }
        var savedSearchesPageDict = new Dictionary();
        savedSearchesPageDict.AddList(savedSearchesPage, savedSearchesAccount.map(function (value) { return value.name; }));
        for (var x = 0; x < savedSearchesAccount.length; x++) {
            var savedSearchAccountSetting = (_a = savedSearchesAccount[x].notifications) === null || _a === void 0 ? void 0 : _a.filter(function (value) { return value.method == NotificationMethod.Email; });
            var savedSearchPageSetting = (_c = (_b = savedSearchesPageDict.Item(savedSearchesAccount[x].name)) === null || _b === void 0 ? void 0 : _b.notifications) === null || _c === void 0 ? void 0 : _c.filter(function (value) { return value.method == NotificationMethod.Email; });
            var savedSearchAccountFreq = ((!!savedSearchPageSetting && savedSearchPageSetting.length > 0) ?
                savedSearchPageSetting[0].frequency : NotificationFrequency.Never);
            var savedSearchPageFreq = ((!!savedSearchAccountSetting && savedSearchAccountSetting.length > 0) ?
                savedSearchAccountSetting[0].frequency : NotificationFrequency.Never);
            var savedAccountDate = savedSearchesAccount[x].savedDate.toString();
            var savedPageDate = savedSearchesPageDict.Item(savedSearchesAccount[x].name).savedDate.toString();
            if ((savedSearchPageFreq != savedSearchAccountFreq) || (detectDateDiff && savedAccountDate != savedPageDate)) {
                return true;
            }
        }
        return false;
    };
    SavedSearch.savedSearchesUpdated = 'savedSearchesUpdated'; //Only fire once all operations are completed - updates gigya every time
    //public static savedSearchesCountUpdated: string = 'savedSearchesCountUpdated';
    SavedSearch.savedSearchesCountUpdated = new RealtorEvent("savedSearchesCountUpdated");
    SavedSearch.consumerSavedSearchesSuccess = new RealtorEvent("consumerSavedSearchesSuccess");
    return SavedSearch;
}());
var SavedSearchError;
(function (SavedSearchError) {
    SavedSearchError[SavedSearchError["None"] = 0] = "None";
    SavedSearchError[SavedSearchError["SearchLimitGuest"] = 1] = "SearchLimitGuest";
    SavedSearchError[SavedSearchError["SearchLimitConsumer"] = 2] = "SearchLimitConsumer";
})(SavedSearchError || (SavedSearchError = {}));
//# sourceMappingURL=SavedSearches.js.map;
var ScrollLocation = /** @class */ (function () {
    function ScrollLocation() {
    }
    ScrollLocation.get = function () {
        var returnValue = [];
        var rawValue = sessionStorage.getItem(ScrollLocation.storageKey);
        if ((rawValue || "") != "") {
            returnValue = JSON.parse(rawValue);
        }
        return returnValue;
    };
    ScrollLocation.Refresh = function () {
        if (ScrollLocation.RestoreNext) {
            var actualValue = ScrollLocation.get();
            var scrollLocation = 0;
            for (var i = 0; i < actualValue.length; i++) {
                if (actualValue[i].URL == window.location.toString()) {
                    scrollLocation = actualValue[i].Location;
                    break;
                }
            }
            if (scrollLocation) {
                Logging.Debug("Refreshing to: " + scrollLocation.toString(), LogType.ScrollState);
                if (ApplicationState.CurrentSlideInPageContainerId != null) {
                    $("#" + ApplicationState.CurrentSlideInPageContainerId).scrollTop(scrollLocation);
                }
                else {
                    window.scrollTo(0, scrollLocation);
                }
            }
        }
        else {
            Logging.Debug("Not Refreshing RestoreNext set to false", LogType.ScrollState);
            ScrollLocation.RestoreNext = true;
        }
    };
    ScrollLocation.Set = function (urlToSetScroll) {
        if (urlToSetScroll === void 0) { urlToSetScroll = null; }
        var actualValue = ScrollLocation.get();
        var updated = false;
        var scrolledValue;
        if (ApplicationState.CurrentSlideInPageContainerId != null) {
            scrolledValue = $("#" + ApplicationState.CurrentSlideInPageContainerId).scrollTop();
        }
        else {
            scrolledValue = document.documentElement.scrollTop || document.body.scrollTop;
        }
        urlToSetScroll = urlToSetScroll != null && urlToSetScroll != window.location.toString() ?
            urlToSetScroll : window.location.toString();
        if (actualValue != null) {
            for (var i = 0; i < actualValue.length; i++) {
                if (actualValue[i].URL == urlToSetScroll) {
                    actualValue[i].Location = scrolledValue;
                    Logging.Debug("Updating to " + actualValue[i].Location + " (" + window.location.toString(), LogType.ScrollState);
                    updated = true;
                    break;
                }
            }
        }
        else {
            actualValue = [];
        }
        if (updated == false) {
            Logging.Debug("Adding " + scrolledValue + " (" + urlToSetScroll + ")", LogType.ScrollState);
            actualValue.push({ URL: urlToSetScroll, TimeStamp: Date.now(), Location: scrolledValue });
        }
        sessionStorage.setItem(ScrollLocation.storageKey, JSON.stringify(actualValue));
    };
    ScrollLocation.storageKey = "ScrollLocations";
    ScrollLocation.RestoreNext = false; //When going to a new page set to true so any existing scroll location isn't maintained.
    return ScrollLocation;
}());
var ScrollLocationEntry = /** @class */ (function () {
    function ScrollLocationEntry() {
    }
    return ScrollLocationEntry;
}());
//# sourceMappingURL=ScrollLocation.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SessionStorage = /** @class */ (function () {
    function SessionStorage(key, value) {
        if (value === void 0) { value = ''; }
        this.keyBase = "";
        this.keyBase = key;
    }
    SessionStorage.prototype.getKey = function () {
        return this.keyBase;
    };
    SessionStorage.prototype.save = function (value, uniqueKey) {
        sessionStorage.setItem(uniqueKey || this.getKey(), value);
    };
    SessionStorage.prototype.saveObject = function (value) {
        sessionStorage.setItem(this.getKey(), JSON.stringify(value));
    };
    SessionStorage.prototype.get = function (def) {
        if (def === void 0) { def = ""; }
        return sessionStorage.getItem(this.getKey()) || def;
    };
    SessionStorage.prototype.getWithKey = function (key) {
        if (key === void 0) { key = ""; }
        return sessionStorage.getItem(key);
    };
    SessionStorage.prototype.delete = function () {
        sessionStorage.removeItem(this.getKey());
    };
    /**
     * Returns an
     * @param storageKey
     */
    SessionStorage.prototype.getObject = function (factory) {
        var returnValue = null;
        var strValFromStorage = this.get("");
        if (strValFromStorage != '') {
            returnValue = Utilities.CreateObjectFromJSONString(strValFromStorage, factory);
        }
        return returnValue;
    };
    /**
    * Returns an array of specified objects.
    */
    SessionStorage.prototype.getObjects = function (factory) {
        var returnValue = [];
        var stringVal = this.get("");
        returnValue = Utilities.CreateObjectArrayFromJSONString(stringVal, factory);
        return returnValue;
    };
    SessionStorage.clear = function () {
        sessionStorage.clear();
    };
    SessionStorage.IsEnabled = function () {
        var returnValue = false;
        if (typeof sessionStorage !== 'undefined') {
            try {
                sessionStorage.setItem(SessionStorage.EnabledTest.getKey(), 'yes');
                if (SessionStorage.EnabledTest.get('') === 'yes') {
                    SessionStorage.EnabledTest.delete();
                    returnValue = true;
                }
                else {
                    // localStorage is disabled
                }
            }
            catch (e) {
                // localStorage is disabled
            }
        }
        else {
            // localStorage is not available
        }
        return returnValue;
    };
    SessionStorage.saveObject = function (storageKey, object) {
        if (object != null && jQuery.isEmptyObject((object || {})) == false) { //Don't store calls with criteria 
            try {
                sessionStorage.setItem(storageKey, JSON.stringify(object));
            }
            catch (e) {
                showMessage("Unable to save value to session storage.", MessageType.Error);
                throw e; //So AppInsights can log
            }
        }
    };
    SessionStorage.getObject = function (storageKey) {
        var returnValue = null;
        var strValFromStorage;
        try {
            strValFromStorage = sessionStorage.getItem(storageKey);
        }
        catch (e) {
            showMessage("Unable to save value to session storage.", MessageType.Error);
            throw e; //So AppInsights can log
        }
        if (strValFromStorage != null && strValFromStorage != '') {
            returnValue = JSON.parse(strValFromStorage);
        }
        return returnValue;
    };
    SessionStorage.removeObject = function (storageKey) {
        sessionStorage.removeItem(storageKey);
    };
    SessionStorage.EnabledTest = new SessionStorage("Test");
    SessionStorage.MessageToShowOnNextPage = new SessionStorage("MessageOnLoad");
    SessionStorage.ToastToShowOnNextPage = new SessionStorage("ToastOnLoad");
    SessionStorage.ConsumerImport = new SessionStorage("consumer_import");
    SessionStorage.SharedNotes = new SessionStorage("RealtorSharedNotesFave");
    SessionStorage.PostLoginRedirect = new SessionStorage("postLoginRedirect");
    SessionStorage.LoginAttempts = new SessionStorage("loginAttempts");
    SessionStorage.ForeseeFeedBackClosed = new SessionStorage("ForeseeFeedBackClosed");
    SessionStorage.SavedSearchLoadFirstTime = new SessionStorage("SavedSearchLoadFirstTime");
    SessionStorage.SetReferrerCurrency = new SessionStorage("SetReferrerCurrency");
    SessionStorage.MobileSortMessageQueued = new SessionStorage("MobileSortMessageQueued");
    return SessionStorage;
}());
var AccountSessionStorage = /** @class */ (function (_super) {
    __extends(AccountSessionStorage, _super);
    function AccountSessionStorage(key, value) {
        if (value === void 0) { value = ''; }
        return _super.call(this, key) || this;
    }
    AccountSessionStorage.prototype.getKey = function () {
        return this.keyBase + '-' + ConsumerProfile.UserAccountSettings.UserHashId;
    };
    //static CREAMailUpdates_Profile: AccountSessionStorage = new AccountSessionStorage("pCREA_mail_updates");
    //static REALTORMailUpdates_Profile: AccountSessionStorage = new AccountSessionStorage("pREALTOR_mail_updates"); 
    AccountSessionStorage.REALTORMail_Profile = new AccountSessionStorage("pREALTOR_mail");
    AccountSessionStorage.EmailRealtorConfirmation_Profile = new AccountSessionStorage("pEmailRealtorConfirmation");
    //static CREAMailUpdates: AccountSessionStorage = new AccountSessionStorage("CREA_mail_updates");
    //static REALTORMailUpdates: AccountSessionStorage = new AccountSessionStorage("REALTOR_mail_updates");
    AccountSessionStorage.REALTORMail = new AccountSessionStorage("REALTOR_mail");
    AccountSessionStorage.EmailRealtorConfirmation = new AccountSessionStorage("EmailRealtorConfirmation");
    AccountSessionStorage.FavouriteNotificationEnabled = new AccountSessionStorage("FavNotificationsEnabled");
    AccountSessionStorage.ConsumerUser = new AccountSessionStorage("consumer_user");
    AccountSessionStorage.TransactionTypeId = new AccountSessionStorage("Interested");
    AccountSessionStorage.TransactionTypeId_Com = new AccountSessionStorage("Interested_Com");
    return AccountSessionStorage;
}(SessionStorage));
//# sourceMappingURL=SessionStorage.js.map;
/**
 * Namespace for wrapper objects used to store items in various mediums (session storage, cookies, etc.)
 */
var StorageItems;
(function (StorageItems) {
    var TimestampedItem = /** @class */ (function () {
        function TimestampedItem(value, timestamp) {
            if (timestamp == null) {
                this.timestamp = new Date().getTime();
            }
            else {
                this.timestamp = timestamp;
            }
            this.value = value;
        }
        return TimestampedItem;
    }());
    StorageItems.TimestampedItem = TimestampedItem;
    var VersionedItem = /** @class */ (function () {
        function VersionedItem(version, value) {
            this.version = version;
            this.value = value;
        }
        return VersionedItem;
    }());
    StorageItems.VersionedItem = VersionedItem;
    var HashedItem = /** @class */ (function () {
        function HashedItem(hash, value) {
            this.hash = hash;
            this.value = value;
        }
        return HashedItem;
    }());
    StorageItems.HashedItem = HashedItem;
})(StorageItems || (StorageItems = {}));
//# sourceMappingURL=Storage.js.map;
var TemplateBinding = /** @class */ (function () {
    function TemplateBinding() {
    }
    /**
    *  Pass in an html string and aggregate all JS text into a single script block.
    * @param text
    */
    TemplateBinding.aggregateScriptContents = function (text) {
        var returnValue = text;
        var aggregateJSContent = "";
        var re = /<\s*script\s*>([\s\S]*?)<\/script>/gm;
        var match;
        while (match = re.exec(text)) {
            // full match is in match[0], whereas captured groups are in ...[1], ...[2], etc.
            aggregateJSContent += match[1] + "\n";
        }
        returnValue = returnValue.replace(re, "");
        if (aggregateJSContent) {
            returnValue = returnValue + "<script>" + aggregateJSContent + "</script> ";
        }
        return returnValue;
    };
    /**
     * Takes the data-binding attribute value and gets the value from the object being bound.
     * Note: You can have an attribute 'templates' with {'s such as ( data-binding="id=favourite-{Id}" )
     * @param property
     * @param object
     */
    TemplateBinding.getValueFromObject = function (property, object) {
        var returnValue = "";
        if (property.indexOf("{") > -1 && property.indexOf("}") > -1) { //Templates like "data-value={id}_{Latitude}_{Longitude}""
            var workingValue = property;
            var reg = new RegExp(/{(.+?)}/g);
            var result;
            while ((result = reg.exec(property)) !== null) {
                workingValue = workingValue.replace("{" + result[1] + "}", object[result[1]]);
            }
            returnValue = workingValue;
        }
        else {
            returnValue = object[property]; //|| "";
        }
        if (returnValue === undefined) {
            Logging.Debug("Value missing: " + property + " on " + object.constructor["name"], LogType.TemplateBinding); //TODO: This will fire for subtemplates                
            returnValue = "";
        }
        return returnValue;
    };
    /**
     * Get a list of bindings from an element eg. attribute of data-binding="id=Data,innertext=Text"
     * @param elem Elements with the data-binding attribute
     * @param onlyAttributes Only return binding whose attribute is in this list (lowercase only)
     */
    TemplateBinding.getControlBindings = function (elem, onlyAttributes) {
        var returnValue = [];
        var bindingAttribute = (elem.hasAttribute("data-binding") ? elem.attributes["data-binding"].value : "");
        if (bindingAttribute != "") {
            var csvValues = bindingAttribute.split(",");
            for (var i = 0; i < csvValues.length; i++) {
                var parts = csvValues[i].split('=');
                var attributeToBindTo = parts[0];
                var propertyToBind = parts[1];
                if (onlyAttributes != null && onlyAttributes.indexOf(attributeToBindTo.toLowerCase()) > -1) {
                    returnValue.push(new ControlBinding(attributeToBindTo, propertyToBind));
                }
                else {
                    returnValue.push(new ControlBinding(attributeToBindTo, propertyToBind));
                }
            }
        }
        return returnValue;
    };
    TemplateBinding.bindEventsToControl = function (model, control) {
        control.find("[data-binding*='onclick']").each(function (index, element) {
            var bindings = TemplateBinding.getControlBindings(element, ["onclick"]);
            for (var i = 0; i < bindings.length; i++) {
                $(this).click(model[bindings[i].ObjectProperty]);
            }
        });
    };
    /**
       * Sets the control to the value of the object
       * @param value Object used for binding
       * @param elem HTML Element to bind to
       */
    TemplateBinding.bindValueToControl = function (value, elem) {
        var returnValue = "";
        var control = $(elem).clone();
        var bindings = TemplateBinding.getControlBindings(elem);
        for (var i = 0; i < bindings.length; i++) {
            var currentBinding = bindings[i];
            if (currentBinding.ObjectProperty != "") {
                var valToBind = TemplateBinding.getValueFromObject(currentBinding.ObjectProperty, value);
                //if (valToBind != "") { //messed with "false"
                if (valToBind instanceof Array) { //Value is a collection?   
                    if (elem.children.length > 1) {
                        Logging.Error("Templates can only one child elment (wrap in another element)");
                    }
                    for (var valIndex = 0; valIndex < valToBind.length; valIndex++) {
                        var filled = TemplateBinding.fillTemplateValues($(elem.children[0]), valToBind[valIndex]);
                        returnValue += filled;
                    }
                    if (control.get(0).innerHTML != null) {
                        control.get(0).innerHTML = returnValue; //Replace the guts
                        returnValue = control.get(0).outerHTML;
                    }
                }
                else {
                    if (currentBinding.ControlAttribute == "" || currentBinding.ControlAttribute.toLowerCase() == "innertext") {
                        if (valToBind instanceof jQuery) {
                            control.html(valToBind.outerHTML());
                            //control.html(valToBind[0].outerHTML);
                            returnValue = control[0].outerHTML;
                        }
                        else if (valToBind !== null) {
                            control.html(valToBind.toString());
                            returnValue = control[0].outerHTML;
                        }
                        //}
                        //else if (attributeToBindTo.toLowerCase() == "replacewith") {
                        //    console.log(valToBind);
                        //    returnValue = valToBind.toString();
                    }
                    else if (currentBinding.ControlAttribute.toLowerCase() == "visible" && valToBind == false) {
                        returnValue = ""; //Skip any other bindings
                        break;
                    }
                    else if (currentBinding.ControlAttribute.toLowerCase() == "hidden" && valToBind == true) {
                        returnValue = "";
                        break; //Skip any other bindings
                    }
                    else if (currentBinding.ControlAttribute.toLowerCase().indexOf("css:") == 0) {
                        var cssVar = currentBinding.ControlAttribute.toLowerCase().substr(4);
                        control.css(cssVar, valToBind);
                        returnValue = control[0].outerHTML;
                    }
                    else {
                        control.attr(currentBinding.ControlAttribute, valToBind);
                        returnValue = control[0].outerHTML;
                    }
                }
            }
            else {
                //console.log("JS Binding: Value being bound is null or blank. Binding Property: " + propertyToBind + ". Binding Value: " + valToBind);
            }
            //} else {
            //    //console.log("JS Binding: Binding property could not be found or was blank. Binding Property: " + propertyToBind);
            //}
        }
        return returnValue;
    };
    TemplateBinding.fillTemplateValues = function (template, object) {
        var returnValue = "";
        var templateIsMultipleElements = template.length > 1;
        if (templateIsMultipleElements) {
            var htmlContents_1 = "";
            template.each(function () {
                htmlContents_1 += $(this).wrap("<div></div>")[0].outerHTML || "";
            });
            template = $("<div>" + htmlContents_1 + "</div>");
            returnValue = template[0].innerHTML;
        }
        else {
            returnValue = template[0].outerHTML;
        }
        var elementsToFill;
        if (template[0].childElementCount == 0) { //Template has no children
            elementsToFill = template.find("[data-binding]").addBack();
        }
        else {
            elementsToFill = template.find("[data-binding]").addBack("[data-binding]");
        }
        elementsToFill.each(function (i, text) {
            var filledValue = TemplateBinding.bindValueToControl(object, this);
            returnValue = returnValue.replace(this.outerHTML, filledValue);
        });
        return returnValue;
    };
    /**
     *  Bind the template and binds it to the object and returns the HTML output.
     * @param template
     * @param obj
     */
    TemplateBinding.render = function (template, obj) {
        var returnValue = "";
        if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
                var filledTemplate = TemplateBinding.fillTemplateValues(template, obj[i]);
                returnValue += filledTemplate;
            }
        }
        else {
            returnValue = TemplateBinding.fillTemplateValues(template, obj);
        }
        return returnValue;
    };
    return TemplateBinding;
}());
var ControlBinding = /** @class */ (function () {
    function ControlBinding(controlAttribute, objectProperty) {
        this.ControlAttribute = "";
        this.ControlAttribute = controlAttribute || "";
        this.ObjectProperty = objectProperty || "";
        if (this.ControlAttribute != "" && this.ObjectProperty == "") { //You can bind via data-binding="VALUE" 
            this.ObjectProperty = this.ControlAttribute;
        }
    }
    return ControlBinding;
}());
//# sourceMappingURL=TemplateBinding.js.map;
var TemplateFetcher = /** @class */ (function () {
    function TemplateFetcher() {
    }
    TemplateFetcher.getCacheKey = function (url) {
        var returnValue = "";
        returnValue = ApplicationState.CultureID.toString() + "_" + ApplicationState.IsMobileDevice.toString() + "_" + url; //
        return returnValue;
    };
    /**
     * Handler for caching the fetching of the control template HTML
     * @param url
     */
    TemplateFetcher.cacheFetch = function (url, args) {
        var returnValue = null;
        var templates = LocalStorage.getObject("JSTemplates");
        var cacheKey = TemplateFetcher.getCacheKey(url);
        if (templates != null) {
            var value = templates[cacheKey];
            if ((value || "") != "") {
                var valueObj = JSON.parse(value);
                if (valueObj.version == TemplateFetcher.version()) {
                    returnValue = valueObj.value;
                    Logging.Debug("Cached template found", LogType.TemplateFetching);
                }
                else {
                    Logging.Debug("Cached template is out of date, cached copy ignored", LogType.TemplateFetching);
                }
            }
        }
        return returnValue;
    };
    /** The version string to use for the template caching */
    TemplateFetcher.version = function () {
        return ApplicationState.BuildVersion + ':' + ApplicationConfig.StaticFileCacheParam;
    };
    /**
    * Handler for saving the fetched control template HTML into a cache
    * @param url
    */
    TemplateFetcher.cacheSave = function (url, args, value) {
        var templates = LocalStorage.getObject("JSTemplates") || {};
        var valueObj = new StorageItems.VersionedItem(TemplateFetcher.version(), value);
        var cacheKey = TemplateFetcher.getCacheKey(url);
        templates[cacheKey] = JSON.stringify(valueObj).replace(/(\\n|\\r)/g, '');
        ;
        LocalStorage.saveObject("JSTemplates", templates);
        Logging.Debug("Storing template in cache", LogType.TemplateFetching);
    };
    /**
     * Central method to get a AjaxCallArgs instance with all common base properties set
     */
    TemplateFetcher.getBasicAJAXArgs = function () {
        var returnValue = new AjaxCallArgs(null);
        returnValue.cacheFetchHandler = TemplateFetcher.cacheFetch;
        returnValue.cacheSaveHandler = TemplateFetcher.cacheSave;
        returnValue.contentType = 'application/json; charset=UTF-8';
        return returnValue;
    };
    /**
     * Base fetch method for templates
     * @param url URL of fetch template method
     * @param ajaxArgs
     */
    TemplateFetcher.fetch = function (url, ajaxArgs) {
        var pendingRequest = null;
        AjaxEngine.currentXHRs.forEach(function (val, index, array) {
            if (url.toLowerCase() == val.url.toLowerCase()) {
                pendingRequest = val;
            }
        });
        if (pendingRequest == null) {
            AjaxEngine.POST(url, null, ajaxArgs);
        }
        else {
            pendingRequest.done(function (data, textStatus, xhr) {
                //debugger;
                ajaxArgs.callHandler(AjaxEngine.TransformResponse(data), ajaxArgs.callBackArgs);
            });
        }
    };
    TemplateFetcher.fetchListingCards = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetListingCardsTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchSmallListingCards = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetSmallListingCardsTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchListingCardsCarousel = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetListingCardCarouselTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchConfirmationDialog2 = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetConfirmationDialog2Template", ajaxArgs);
    };
    TemplateFetcher.fetchRealtorCard = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetRealtorCardTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchSavedSearch = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetSavedSearchTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchSavedSearchForAccount = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetSavedSearchTemplateForAccount", ajaxArgs);
    };
    TemplateFetcher.fetchOfficeCard = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetOfficeCardTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchRealtorCardsCarousel = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetRealtorCardCarouselTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchSmallListingCardsCarousel = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetSmallListingCardCarouselTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchListingCard = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetListingCardTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchSmallListingCard = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetSmallListingCardTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchPagination = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetPaginationTemplate", ajaxArgs);
    };
    TemplateFetcher.fetchModalContent = function (handler) {
        var ajaxArgs = TemplateFetcher.getBasicAJAXArgs();
        ajaxArgs.callHandler = function (result) {
            handler(result);
        };
        TemplateFetcher.fetch("/Services/TemplateFetcher.asmx/GetModalContentTemplate", ajaxArgs);
    };
    return TemplateFetcher;
}());
var TemplateReponse = /** @class */ (function () {
    function TemplateReponse() {
    }
    return TemplateReponse;
}());
//# sourceMappingURL=TemplateFetcher.js.map;
/*  https://osvaldas.info/elegant-css-and-jquery-tooltip-responsive-mobile-friendly */
var ToolTip = /** @class */ (function () {
    function ToolTip() {
    }
    ToolTip.closeAll = function (parent) {
        if (parent != null) {
            parent.find('.tooltip').click();
        }
        else {
            $('.tooltip').click();
        }
    };
    //static load(elements: JQuery): void {
    //    var targets: JQuery = elements,
    //        target = false,
    //        tooltip = false,
    //        title = false;
    //    targets.bind('mouseenter', function () {
    //        let target: JQuery = $(this);
    //        let tip: string = target.attr('data-tooltipid');
    //        if (tip == "") {
    //            tip = target.attr('title');
    //        } else {
    //            tip = Translation.get(tip);
    //        }
    //        let tooltip: JQuery = $('<div class="tooltip"></div>');
    //        if (!tip || tip == '')
    //            return false;
    //        target.removeAttr('title');
    //        tooltip.css('opacity', 0)
    //            .html(tip)
    //            .appendTo('body');
    //        var init_tooltip = function () {
    //            if ($(window).width() < tooltip.outerWidth() * 1.5)
    //                tooltip.css('max-width', $(window).width() / 2);
    //            else
    //                tooltip.css('max-width', 340);
    //            var pos_left = target.offset().left + (target.outerWidth() / 2) - (tooltip.outerWidth() / 2),
    //                pos_top = target.offset().top - tooltip.outerHeight() - 20;
    //            if (pos_left < 0) {
    //                pos_left = target.offset().left + target.outerWidth() / 2 - 20;
    //                tooltip.addClass('left');
    //            }
    //            else
    //                tooltip.removeClass('left');
    //            if (pos_left + tooltip.outerWidth() > $(window).width()) {
    //                pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
    //                tooltip.addClass('right');
    //            }
    //            else
    //                tooltip.removeClass('right');
    //            if (pos_top < 0) {
    //                var pos_top = target.offset().top + target.outerHeight();
    //                tooltip.addClass('top');
    //            }
    //            else
    //                tooltip.removeClass('top');
    //            tooltip.css({ left: pos_left, top: pos_top })
    //                .animate({ top: '+=10', opacity: 1 }, 50);
    //        };
    //        init_tooltip();
    //        $(window).resize(init_tooltip);
    //        var remove_tooltip = function () {
    //            tooltip.animate({ top: '-=10', opacity: 0 }, 50, function () {
    //                $(this).remove();
    //            });
    //            target.attr('title', tip);
    //        };
    //        target.bind('mouseleave', remove_tooltip);
    //        tooltip.bind('click', remove_tooltip);
    //    });
    //}
    ToolTip.remove = function (tooltip, target, tipText) {
        tooltip.animate({ top: '-=10', opacity: 0 }, 50, function () {
            $(this).remove();
        });
        target.attr('title', tipText);
    };
    ToolTip.init = function (target, tooltip) {
        if (target.length > 0) {
            if ($(window).width() < tooltip.outerWidth() * 1.5)
                tooltip.css('max-width', $(window).width() / 2);
            else
                tooltip.css('max-width', 340);
            var pos_left = target.offset().left + (target.outerWidth() / 2) - (tooltip.outerWidth() / 2), pos_top = target.offset().top - tooltip.outerHeight() - 20;
            if (pos_left < 0) {
                pos_left = target.offset().left + target.outerWidth() / 2 - 20;
                tooltip.addClass('left');
            }
            else
                tooltip.removeClass('left');
            if (pos_left + tooltip.outerWidth() > $(window).width()) {
                pos_left = target.offset().left - tooltip.outerWidth() + target.outerWidth() / 2 + 20;
                tooltip.addClass('right');
            }
            else
                tooltip.removeClass('right');
            if (pos_top < 0) {
                var pos_top = target.offset().top + target.outerHeight();
                tooltip.addClass('top');
            }
            else
                tooltip.removeClass('top');
            tooltip.css({ left: pos_left, top: pos_top })
                .animate({ top: '+=10', opacity: 1 }, 50);
        }
    };
    ToolTip.show = function (targets) {
        targets.each(function (index, element) {
            if (($(element).attr("data-has-tooltip") || "") == "") {
                $(element).bind('click focus', function () {
                    var tipText = $(element).attr('data-tooltipid');
                    if (tipText == "") {
                        tipText = $(element).attr('title');
                    }
                    else {
                        tipText = Translation.get(tipText);
                    }
                    var tooltip = $('<div class="tooltip"></div>');
                    if (!tipText || tipText == '')
                        return;
                    $(element).removeAttr('title');
                    tooltip.css('opacity', 0)
                        .html(tipText)
                        .appendTo('body');
                    ToolTip.init($(this), tooltip);
                    $(window).one("click touchstart", function () {
                        $(window).one("click touchstart", function () {
                            ToolTip.remove(tooltip, $(element), tipText);
                        });
                    });
                    $(window).resize(function () { ToolTip.init($(element), tooltip); });
                    $(element).attr("data-has-tooltip", "true");
                    $(element).bind('blur', function () { ToolTip.remove(tooltip, $(element), tipText); });
                    tooltip.bind('click', function () { ToolTip.remove(tooltip, $(element), tipText); });
                });
            }
        });
    };
    return ToolTip;
}());
//# sourceMappingURL=ToolTips.js.map;
//Wrapping the Translations.aspx file to expose translations to Typescript files
var Translation = /** @class */ (function () {
    function Translation() {
    }
    //Not worth havin static referenes considering values would need to be added here and in the server control?
    //public static readonly M57: string = Translations.GetString('M57');
    //public static readonly M58: string = Translations.GetString('M58');
    //public static readonly AddToFavorites: string = Translations.GetString('AddToFavorites');
    //public static readonly RemoveFromMyFavourites: string = Translations.GetString('RemoveFromMyFavourites');
    Translation.get = function (key, reaplacementval) {
        if (reaplacementval === void 0) { reaplacementval = ""; }
        var returnValue = '';
        try {
            returnValue = ApplicationState.Translations[key];
            if (reaplacementval != "") {
                returnValue = returnValue.replace("{0}", reaplacementval);
            }
            if (ApplicationConfig.IsDebugMode && returnValue == "") {
                alert("Translation key not being output to JS: " + key);
            }
        }
        catch (err) {
            return key;
        }
        return returnValue;
    };
    return Translation;
}());
//# sourceMappingURL=Translation.js.map;
/** This file is used for GENERIC (non page/control specific) functions (eg. showMessage, that thing is used all over the damn place) **/
//function getChildrenAsSingle(element: JQuery)
//{
//    let htmlContents: string = "";
//    element.each(function () {
//        htmlContents += $(this).wrap("<div></div>")[0].outerHTML || "";
//    })
//    element = $("<div>" + htmlContents + "</div>");
//    return $(element[0].innerHTML);   
//}
/**
 * Verification of a unique DOM element inside the page
 * @param id UI id of the element that we are checking its uniqueness
 */
function isUniqueUIElement(id) {
    if (document.getElementById(id) != null) {
        return false;
    }
    return true;
}
/** When content is loaded via AJAX calls this function to refresh the content (hook links up via smoothState, refresh favourite icons, compare icons) **/
function updateLoadedContent(content, updateSmoothStateLinks, animInOutClassPref) {
    if (updateSmoothStateLinks === void 0) { updateSmoothStateLinks = true; }
    if (animInOutClassPref === void 0) { animInOutClassPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" }; }
    Favourite.refreshIcons(content, animInOutClassPref);
    Note.refreshIcons(content);
    if (updateSmoothStateLinks && MasterPages.Phone != null && ApplicationState.IsMobileDevice) {
        var smoothStateOptions = MasterPages.Phone.smoothStateOptions;
        updateLinksToUseSmoothState(content, smoothStateOptions);
    }
    //content.smoothState(MasterPages.Phone.smoothStateOptions);//.data('smoothState');
}
/**
 * Will add click event to all links (with respect to smoothState options) to load url via smoothState (calls smoothState.clickAnchor)
 * @param container
 * @param smoothStateOptions
 */
function updateLinksToUseSmoothState(container, smoothStateOptions) {
    container.find("a").each(function (index, element) {
        $(this).click(function (event) {
            ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothState.clickAnchor(event) : event;
        });
    });
}
function ScrollInputIntoView(input) {
    if (input != null && input.is(":visible")) {
        if (ApplicationState.IsMobileDevice && ApplicationState.IsSafari == false) {
            //$(this)[0].scrollIntoView(true);
            //$('body').scrollTop($('body').scrollTop() - 85);
            window.scrollTo(0, input[0].offsetTop - $('#header').outerHeight() + 10);
        }
    }
}
/**
 *  Smoothstate only update the page content, but sometimes items in the header have changed, so we have this function to update those items
 */
function updateSmoothStateHeaderValues(html) {
    var itemSelector = "meta:not([name=theme-color]), link[rel=alternate], link[rel=canonical]";
    var newItems = $(html).filter(itemSelector);
    $(itemSelector).remove();
    $("head").append(newItems);
    //Needs to be before GTM code?
    var itemSelector2 = "#GTMDataLayerCode";
    var newItems2 = $(html).filter(itemSelector2);
    $(itemSelector2).remove();
    $("head").prepend(newItems2);
}
/**
 * Returns the header values that are not updated via smoothstate's body replacement (eg. meta tags, link tags, gtml code)
 */
function smoothStateHeaderValues() {
    //this updates the meta tags
    return $("meta:not([name=theme-color]), link[rel=alternate], link[rel=canonical], #GTMDataLayerCode, title");
}
/**
 * Make Sticky button appear at the bottom of the page by adding it
   at the root of the page. Only applied for samsung browser since it's older versions don't render fixed content properly.
 * @constructor
 * @param {HTMLElement} eleInTo - The container with the sticky buttons
                                 (Huge Dependancy on the name currently used in master page).
 * @param {string} footerToAdd  - Footer HTML element to add.
 */
function makeStickyBtnBottomPage(eleInTo, footerToAdd) {
    if (ApplicationState.IsSamsungBrowser) {
        var node = $(footerToAdd);
        //Procceed into adding the footer HTML element inside the container
        if (eleInTo && footerToAdd && eleInTo[0] && footerToAdd[0]
            && eleInTo.length > 0 && footerToAdd.length > 0) { //Valid HTML element check
            var elementAlreadyInside = !eleInTo.has("#" + footerToAdd[0].id);
            if (elementAlreadyInside == false) { //Add the element if its not inside already
                $(footerToAdd).remove();
                $(eleInTo).append(node);
            }
        }
    }
}
/** Function that clears the sticky container inside the phone master page */
function clearStickyButtons() {
    $("#sticky_buttons").empty();
}
/** Function to check if current user is using iOS browser */
function IsiOSUser() {
    return /(iPad|iPhone|iPod touch)/i.test(navigator.userAgent);
}
/**  iOS 7 hack: Add an optgroup to every select in order to avoid truncating the content (see: https://stackoverflow.com/questions/19398154/how-to-fix-truncated-text-on-select-element-on-ios7) **/
function ApplyiOSSelectCutoffTextHack() {
    //if (navigator.userAgent.match(/(iPad|iPhone|iPod touch);.*CPU.*OS 7_\d/i)) {
    if (IsiOSUser()) {
        var selects = document.querySelectorAll("select");
        for (var i = 0; i < selects.length; i++) {
            selects[i].appendChild(document.createElement("optgroup"));
        }
    }
}
/** Adds a class to the element, and then removes it once the anination finishes **/
function addAnimationClass(selector, className) {
    selector.addClass(className);
    //selector.attr("disabled", "disabled");//Messed with pagination
    selector.one('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
        selector.removeClass(className);
        //selector.removeAttr("disabled");
    });
}
/** this format is used by the API (eg. DD/MM/YYYY) **/
function dateToString(date) {
    return ("0" + (date.getMonth() + 1)).slice(-2) + "/" +
        ("0" + date.getDate()).slice(-2) + "/" +
        date.getFullYear();
}
/** this format is used by html input controls (eg. YYYY-MM-DD) **/
function dateToString2(date) {
    return date.getFullYear() + "-" +
        ("0" + (date.getMonth() + 1)).slice(-2) + "-" +
        ("0" + date.getDate()).slice(-2);
}
/** this format is used by the API (eg. DD/MM/YYYY) **/
function dateToString3(date) {
    return ("0" + date.getDate()).slice(-2) + "/" +
        ("0" + (date.getMonth() + 1)).slice(-2) + "/" +
        date.getFullYear();
}
/**
 * Month is 0  based (0 = JAN)
 * @param date Format MM/DD/YYYY
 */
function stringToDate(date) {
    var splitVals = date.split("/");
    var year = splitVals[2];
    var day = splitVals[1];
    var month = splitVals[0];
    var returnValue = new Date(Number(year), Number(month) - 1, Number(day));
    returnValue = new Date(returnValue.getUTCFullYear(), returnValue.getUTCMonth(), returnValue.getUTCDate());
    return returnValue;
}
/**
 * Month is 0 based (0 = JAN)
 * @param date Format YYYY-MM-DD
 */
function stringToDate2(date) {
    date = date.substring(0, 10);
    var splitVals = date.split("-");
    var year = splitVals[0];
    var day = splitVals[2];
    var month = splitVals[1];
    var returnValue = new Date(Number(year), Number(month) - 1, Number(day));
    returnValue = new Date(returnValue.getUTCFullYear(), returnValue.getUTCMonth(), returnValue.getUTCDate());
    return returnValue;
}
/**
 * Month is 0 based (0 = JAN)
 * @param date Format YYYY-MM-DD
 */
function stringToInputDate(date) {
    try {
        date = date.substring(0, 10);
        var splitVals = date.split("-");
        var year = splitVals[0];
        var day = splitVals[2];
        var month = splitVals[1];
        return (year + "-" + month + "-" + day);
    }
    catch (err) {
        return ("");
    }
}
/**
 * convert Date to HTML input compatible format
 * @param date Format YYYY-MM-DD
 */
function dateToInputString(date) {
    var dd = (date.getDate() < 10 ? '0' : '') + date.getDate();
    var MM = ((date.getMonth() + 1) < 10 ? '0' : '') + (date.getMonth() + 1);
    var yyyy = date.getFullYear();
    return (yyyy + "-" + MM + "-" + dd);
}
/**
 * convert Date to Datepicker compatible format
 * @param date Format MM/DD/YYYY
 */
function dateToOutputString(date) {
    var dd = (date.getDate() < 10 ? '0' : '') + date.getDate();
    var MM = ((date.getMonth() + 1) < 10 ? '0' : '') + (date.getMonth() + 1);
    var yyyy = date.getFullYear();
    return (MM + "/" + dd + "/" + yyyy);
}
function favouriteIconClicked(icon, animInOutClassPref) {
    if (animInOutClassPref === void 0) { animInOutClassPref = { animInFavClass: "bounceIn", animOutFavClass: "bounceOut" }; }
    var dataVal = icon.attr('data-value');
    var pieces = dataVal.split("_");
    var id = pieces[0];
    var lat = pieces[1];
    var lon = pieces[2];
    var mode = parseInt(pieces[3]);
    return Favourite.AddOrRemove(id, lat, lon, "", mode != null ? mode : ApplicationState.CurrentMode, false, true, animInOutClassPref);
}
function noteIconClicked(icon, isPDP) {
    if (isPDP === void 0) { isPDP = false; }
    var dataVal = icon.attr('data-value');
    var pieces = dataVal.split("_");
    var id = pieces[0];
    var address = pieces[1];
    var lat = pieces[2];
    var lon = pieces[3];
    var sharednoteid = icon.attr('sharenoteid') || null;
    Note.Edit(id, address, lat, lon, ApplicationState.CurrentMode, sharednoteid, isPDP);
}
function isScrolledIntoViewPlain(el) {
    var elemTop = el.getBoundingClientRect().top;
    var elemBottom = el.getBoundingClientRect().bottom;
    var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);
    return isVisible;
}
function callOnAnimationStart(animatedElement, callback) {
    animatedElement.on("animationstart webkitAnimationStart oanimationstart	MSAnimationStart", function (event) {
        if (animatedElement[0] == event.target) { //Turns out these events bubble, children will fire this off too.
            callback();
        }
    });
}
//function callOnAnimationStart(animatedElement: JQuery, callback: Function) {
//        animatedElement.one("webkitTransitionStart otransitionstart oTransitionStart msTransitionStart transitionstart",
//            function (event) {
//                callback();
//            });
//}
/**
 * Like callAfterAnimationEnd, but it will allow you to call it BEFORE the element is loaded into the DOM (event handler is added as the element is added to the DOM), this avoid race conditions.
 * @param parentElement
 * @param subSelector
 * @param callback
 */
function callAfterAnimationEnd_NotInDOM(parentElement, subSelector, callback) {
    parentElement.on("animationend webkitAnimationEnd oanimationend MSAnimationEnd", subSelector, function (event) {
        if (parentElement.find(subSelector)[0] == event.target) { //Turns out these events bubble, children will fire this off too.
            callback();
        }
    });
}
function callAfterAnimationEnd(animatedElement, callback) {
    //if ($(animatedElement).is(':animated')) {
    animatedElement.on("animationend webkitAnimationEnd oanimationend MSAnimationEnd", function (event) {
        if (animatedElement[0] == event.target) { //Turns out these events bubble, children will fire this off too.
            callback();
        }
    });
    //} else {
    //callback();
    //}
}
function callAfterAnimation(animatedElement, callback) {
    if ($(animatedElement).is(':animated')) {
        animatedElement.on("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend", function (event) {
            if (animatedElement[0] == event.target) {
                callback();
            }
        });
    }
    else {
        callback();
    }
}
function resetInputControls(container, exclude, useHashValues) {
    if (exclude === void 0) { exclude = null; }
    if (useHashValues === void 0) { useHashValues = false; }
    container.each(function (index, element) {
        var current = $(element);
        //add a mention for multiple selections to be completly reset
        var multipleSelects = current.find('select[multiple]').not(exclude);
        multipleSelects.attr("data-reset", "true");
        current.find('input[type=number],input[type=text],input[type=date],input[type=email],textarea').addBack('input[type=number],input[type=text],input[type=date],input[type=email],textarea').not(exclude).each(function (index, foundElment) {
            var val = $(foundElment).attr('data-default') || "";
            if ($(foundElment).val() != val) {
                $(foundElment).val(val);
            }
        });
        current.addBack().find('select:not([data-default])').not(exclude).each(function (index, foundElment) {
            if ($(foundElment).prop('selectedIndex') != 0) {
                $(foundElment).prop('selectedIndex', 0).trigger("change");
            }
        });
        current.addBack().find('select[multiple=multiple] option:selected').addBack('select[multiple=multiple] option:selected').not(exclude).removeAttr("selected");
        current.addBack().find('input[type=checkbox]').addBack('input[type=checkbox]').not(exclude).each(function (index, foundElment) {
            if ($(foundElment).is(":checked")) {
                $(foundElment).click();
            }
        });
        current.find('select[data-default]').not(exclude).each(function (index, foundElment) {
            var val = $(foundElment).attr('data-default');
            if (val == "none") //Used for building type whose any val is nothing, but we need it to fire onchange
             {
                $(foundElment).change();
            }
            else {
                if ($(foundElment).val() != val) {
                    $(foundElment).val(val).trigger("change");
                }
            }
        });
        current.not(exclude).find('table[data-default]').each(function (index, foundElment) {
            var val = $(foundElment).attr('data-default');
            $(foundElment).find("input[value=" + val + "]").click();
        });
    });
}
function captchaCallback() {
    if (MasterPages.Phone != null && ApplicationState.IsMobileDevice) {
        Events.Fire(MasterPages.Phone.CaptchaLoaded, null);
    }
    else if (MasterPages.Desktop != null) {
        Events.Fire(MasterPages.Desktop.CaptchaLoaded, null);
    }
    if ($('#captcha').length > 0 && $('#captcha').html().trim() == '') {
        var widgetId = grecaptcha.render('captcha', { 'sitekey': ApplicationConfig.RecaptchaSiteKey });
        $('#captcha').attr('data-captcha-widget-id', widgetId);
    }
}
function showLoadingAnimation(container) {
    if (container != null && container.length > 0) {
        container.show();
        if (ApplicationState.IsMobileDevice) {
            container.html('<div class="fadeElementIn" style="margin:auto; text-align:center"><img class="spinner" style="width: 25vw; max-width: 150px; margin: 40px auto; display: inline-block; " src="/images/common/icons/svg/house-gray.svg" /></div>');
        }
        else {
            container.html('<div class="fadeElementIn" style="margin:auto; text-align:center"><div class="sk-spinning-circle" style="text-align:center;margin: 50px auto;"></div></div>');
        }
    }
}
function contactLinkClicked(clickedElement, classOfLinkContainer) {
    var links = clickedElement.parent().find('.' + classOfLinkContainer + ' a');
    if (links.length > 1) {
        $.featherlight(clickedElement.parent().find('.' + classOfLinkContainer).html(), { closeIcon: "<img class='dialogCloseX' src='/images/common/icons/svg/x-gray.svg' alt='' />" });
    }
    else {
        links[0].click();
    }
}
/** Sets the heights of all the items found via the passed in jquery selector string to the height of the tallest item */
function setConsistantHeights(selectorString) {
    $(selectorString).css('height', 'auto');
    var maxHeight = getMaxHeight(selectorString);
    $(selectorString).each(function (index) {
        $(this).css('height', maxHeight + 'px');
    });
}
/** Returns the max height for all the items found via the passed in jquery selector string*/
function getMaxHeight(selectorString) {
    var maxHeight = Math.max.apply(null, $(selectorString).map(function () {
        return $(this).height();
    }).get());
    return maxHeight;
}
function isScrolledIntoView(element, padding) {
    if (padding === void 0) { padding = 0; }
    if (element != null && element.length > 0) {
        var temp = ($(window).scrollTop() + $(window).height()) > (element.offset().top + padding);
        return ($(window).scrollTop() + $(window).height()) > element.offset().top + padding;
    }
    else {
        return false;
    }
}
function isScrolledPassed(element) {
    //return window.scrollY > (element.offsetTop + element.offsetHeight); //IE returns 0 for element.offsetHeight (relative to parent issue?)
    //return window.scrollY > (element.offset().top + element.outerHeight(true)); //IE 11< doesn't support window.scrollY only window.pageYOffset
    return (window.pageYOffset || window.scrollY) > (element.offset().top + element.outerHeight(true)); //IE 11< doesn't support window.scrollY only window.pageYOffset
}
/**
 * Returns if the element should be scroll into view or not.
 * @param elm
 * @param checkIfEntireElementFits
 */
function shouldScrollElementIntoView(elm, checkIfEntireElementFits) {
    if (checkIfEntireElementFits === void 0) { checkIfEntireElementFits = false; }
    var topOfPage = $(window).scrollTop();
    var bottomOfPage = $(window).scrollTop() + $(window).height();
    //let controlRect: ClientRect = elm[0].getBoundingClientRect();
    var topOfControl = elm.offset().top;
    var bottomOfControl = elm.offset().top + elm.outerHeight();
    var canFitEntireHeight = elm.outerHeight() <= $(window).height();
    if ((canFitEntireHeight || checkIfEntireElementFits == false) && (topOfControl < topOfPage || bottomOfControl > bottomOfPage)) {
        return true;
    }
    else {
        return false;
    }
}
//function isScrolledIntoView(element: JQuery): boolean {
//    if (element != null && element.length > 0) {
//        var docViewTop = $(window).scrollTop();
//        var docViewBottom = docViewTop + $(window).height();
//        var elemTop = element.offset().top;
//        var elemBottom = elemTop + element.height();
//        return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
//    } else {
//        return false;
//    }
//}
var MessageType;
(function (MessageType) {
    MessageType[MessageType["Normal"] = 0] = "Normal";
    MessageType[MessageType["Error"] = 1] = "Error";
})(MessageType || (MessageType = {}));
var DisplayType;
(function (DisplayType) {
    DisplayType[DisplayType["Toast"] = 0] = "Toast";
    DisplayType[DisplayType["Lightbox"] = 1] = "Lightbox";
    DisplayType[DisplayType["Tempbox"] = 2] = "Tempbox";
})(DisplayType || (DisplayType = {}));
var toastTimeOut = null;
function showMessage(message, msgType, displayType, dialogAcceptedHandler, btnPositiveText) {
    if (msgType === void 0) { msgType = MessageType.Normal; }
    if (displayType === void 0) { displayType = DisplayType.Toast; }
    if (dialogAcceptedHandler === void 0) { dialogAcceptedHandler = null; }
    if (btnPositiveText === void 0) { btnPositiveText = Translation.get("OK"); }
    if (displayType == DisplayType.Toast) {
        clearTimeout(toastTimeOut);
        $('#ToastMessage').text(message);
        $('#ToastMessage').removeClass(MessageType[MessageType.Normal]);
        $('#ToastMessage').removeClass(MessageType[MessageType.Error]);
        $('#ToastMessage').addClass(MessageType[msgType]);
        $('#ToastMessage').addClass("show");
        toastTimeOut = setTimeout(function () {
            $('#ToastMessage').removeClass("show");
        }, 3000);
    }
    else { // if (displayType == DisplayType.Tempbox) {
        //$.featherlight("<div class='lightBoxTitle'>&nbsp;</div><div class='showMessageText'>" + message + "</div>", { closeIcon: "<img class='dialogCloseX' src='/images/common/icons/svg/x-gray.svg' />" });
        //setTimeout(function () {
        //    $.featherlight.close();
        //}, 4000);
        if (ApplicationState.IsMobileDevice) {
            var model = new ConfirmationDialogModel2("GenericDialog", " ", message, btnPositiveText, function (event, control) {
                control.ForceCloseDialog();
                if (dialogAcceptedHandler != null) {
                    dialogAcceptedHandler();
                }
            });
            model.ShowCloseButton = true;
            showConfirmationDialog2(model);
        }
        else {
            var model = new ConfirmationDialogModel2("GenericDialog", " ", message, btnPositiveText, function (event, control) {
                control.ForceCloseDialog();
                if (dialogAcceptedHandler != null) {
                    dialogAcceptedHandler();
                }
            });
            model.ShowCloseButton = true;
            showConfirmationDialog2(model);
        }
    }
    //} else {
    //    $.featherlight("<div class='lightBoxTitle'>&nbsp;</div><div class='showMessageText'>" + message + "</div>", { closeIcon: "<img class='dialogCloseX' src='/images/common/icons/svg/x-gray.svg' alt='' />" });
    //}
}
function expandReadMore(element, parentId) {
    $(element).fadeOut();
    $('#' + parentId).css('height', 'auto');
    $('#' + parentId).css('max-height', 'initial');
    $(element).parent().css('display', 'none');
}
/**
 * Simply find words that are overflowing the container, and apply word-breaking style if needed
 * @param container
 */
function breakAllLongWords(container) {
    //Define the maximum width allowed for words in the container
    var maximumWidth = container.width();
    var words = container.text().replace(/\s{2,}/g, "").split(" ");
    container.text("");
    //Append the words one by one
    for (var x = 0; x < words.length; x++) {
        var htmlSpanEle = document.createElement("span");
        htmlSpanEle.textContent = words[x] + " ";
        container.append(htmlSpanEle);
        //test it's width to see if we need to break it
        if ($(htmlSpanEle).width() > maximumWidth) {
            //Make sure we add a line break and breaking style
            $(htmlSpanEle).css("word-break", "break-all");
            $(htmlSpanEle).prepend("<br>");
        }
    }
}
function collapseWithReadMore(element, maxHeight) {
    if (element.length > 0) {
        if (element.height() > maxHeight || element[0].offsetHeight < element[0].scrollHeight) {
            element.after("<p class='read-more'> <a href='#' onclick='expandReadMore(this,\"" + element.attr('id') + "\"); return false;' class='readMoreLink'> <span class='fa fa-plus-circle'></span> " + Translation.get("ReadMore") + "</a></p>");
            element.css('height', maxHeight);
            element.css('overflow', 'hidden');
            element.css('max-height', 'none');
        }
    }
}
function collapseTableWithReadMore(parentElement, element, rowCutNb, alignment) {
    if (alignment === void 0) { alignment = "text-align: center;"; }
    //Find the maximum height to display the table according to the rowcut number
    $(".read-more-table").remove();
    var x = 0;
    var maxHeight = 0;
    var lastRowSize = 0;
    element.find("tr").each(function (x, elem) {
        if (x < rowCutNb) {
            x++;
            maxHeight += $(elem).height();
        }
    });
    lastRowSize = $(element.find("tr")[rowCutNb]).height();
    maxHeight += lastRowSize / 2;
    if (element.length > 0) {
        if ($(".read-more-table").length == 0) {
            parentElement.after("<p class='read-more-table'> <a href='#' onclick='expandReadMore(this,\"" + parentElement.attr('id') + "\"); return false;' class='readMoreLinkTable' style='padding:" + ((lastRowSize / 2) - 3 + 20) + "px 0px 0px 0px;" + alignment + "'> <span class='fa fa-plus-circle'></span> " + Translation.get("ReadMore") + "</a></p>");
        }
        parentElement.css('height', maxHeight);
        parentElement.css('overflow', 'hidden');
        parentElement.css('max-height', 'none');
    }
}
//function ShowControlInMasterPopup(): void {
//    var handler = function (response) {
//        $('#masterOverlayText').html(response.d);
//        $('#masterOverlay').removeClass("slideupOverlayHidden");
//    }
//    let args: AjaxCallArgs = new AjaxCallArgs(handler);    
//    AjaxEngine.POST('classes/ControlFetcher.asmx/GetEmailRealtorForm', null, args);
//}
function getAltLangURLViaBaseTag() {
    var url = '';
    if ($('base').length > 0) {
        var re = new RegExp(ApplicationState.ApplicationModeString, "i");
        var baseUrl = $('base').attr('href');
        url = decodeURI(baseUrl.replace(/cultureid=[0-9]&*/gi, ""));
        url = url.replace(re, ApplicationState.AlternateApplicationModeString);
    }
    return url;
}
function switchLanguage(languageID) {
    if (languageID != ApplicationState.CultureID) {
        var LanguageSwitchFunction = function () {
            //Remove Mode if it has it? Redirects?
            if (ApplicationState.IsMobileDevice) {
                var newUrl = $('link[rel="alternate"]').attr("href") + location.hash; //No longer need to remove mode/culture since we are using routes?
                //window.location.replace(newUrl);
                location.href = newUrl;
            }
            else {
                Cookie.Language.save(ApplicationState.AlternateCultureID.toString());
                location.reload();
            }
        };
        if (ApplicationState.UserIsSignedIn) {
            Gigya.setLocale(null, null, LanguageSwitchFunction);
        }
        else {
            LanguageSwitchFunction();
        }
    }
}
function getValue(field) {
    var returnValue = "";
    if (field.find(".g-recaptcha").length > 0) {
        returnValue = grecaptcha.getResponse();
    }
    else if (field.is("input[type='text'], input[type='number'], input[type='tel'], textarea, input[type='email'], input[type='password']")) {
        returnValue = field.val();
    }
    else if (field.is("select[multiple]")) {
        //var values = [];
        //field.find(':selected').each(function (i, selected) {
        //    values.push($(selected).val());
        //});
        //returnValue = values.join(',');
        if (field.val() != null) {
            returnValue = field.val().toString();
        }
    }
    else if (field.is("select")) {
        returnValue = field.val();
        //if (returnValue == "0") { //Caused bug with property type always thinking its being changed
        //returnValue = "";
        //}
    }
    else if (field.is("input[type='checkbox']")) {
        returnValue = (field.is(":checked") ? "1" : "");
    }
    else if (field.find("input[type='radio']").length > 1) {
        returnValue = field.find("input[type='radio']:checked").val();
    }
    return returnValue || "";
}
function scrollToTop() {
    $('html,body').animate({
        scrollTop: 0
    });
}
function ScrollToElement(element, offset, animate) {
    if (offset === void 0) { offset = 0; }
    if (animate === void 0) { animate = true; }
    if (element.length > 0) {
        if (animate) {
            $('html,body').animate({
                scrollTop: element.offset().top + offset
            });
        }
        else {
            window.scrollTo(0, element.offset().top + offset);
        }
    }
}
/** Set of common filter functions use on map/profile/? **/
//********************************************************
/* re-adds (attaches) hidden select/drop down options that have been removed (detached) */
function reattachHiddenSelectOptions(selectInput, detachedOptions) {
    var currentVal = selectInput.val();
    var id = selectInput.attr("id");
    if (id != null && detachedOptions != null && detachedOptions[id] != null) {
        selectInput.append(detachedOptions[id]);
    }
    var options = selectInput.find("option");
    options.sort(function (a, b) {
        a = Number(a.value);
        b = Number(b.value);
        return a - b;
    });
    selectInput.empty().append(options).val(currentVal);
}
function maxExactCheckChanged(chkMax, txtMax, ddlMax, txtMin, ddlMin) {
    var checked = chkMax.is(':checked');
    var minVal;
    if (txtMin.is(':visible')) {
        minVal = Number(txtMin.val());
    }
    else {
        minVal = Number(ddlMin.val());
    }
    if (checked) {
        ddlMax.hide().change();
        txtMax.val(0).change().show(); // removed .focus().select();, causing issues
        //(<HTMLInputElement>txtMax[0]).setSelectionRange(0, 99999); //Not supported on type=number - chrome throws error
    }
    else {
        txtMax.hide().change();
        ddlMax.val(0).change().show(); // removed .focus().select();, causing issues
    }
    /*
    if (txtMin.is(':visible')) {
        txtMin.change();
    } else {
        ddlMin.change();
    }
    */
}
function minExactCheckChanged(chkMin, minDDL, txtMin) {
    var checked = chkMin.is(':checked');
    if (checked) {
        minDDL.hide().change();
        txtMin.val(0).change().show(); // removed .focus().select();, causing issues
        //(<HTMLInputElement>txtMin[0]).setSelectionRange(0, 99999);//Not supported on type=number - chrome throws error
    }
    else {
        txtMin.hide().change();
        minDDL.val(0).change().show(); // removed .focus().select();, causing issues
    }
}
function maxDropDownValueChanged(maxDDL, txtMin, minDDL, maxTxtVal, detachedOptions) {
    if (maxTxtVal === void 0) { maxTxtVal = 100000000; }
    var maxVal = maxDDL.val();
    if (maxVal != 0) {
        txtMin.attr("max", maxVal);
    }
    else {
        txtMin.attr("max", "");
    }
    reattachHiddenSelectOptions(minDDL, detachedOptions);
    if ((maxVal || "0") != "0") {
        if (detachedOptions != null) {
            Logging.Debug("Removing minDDL values > " + maxVal);
            detachedOptions[minDDL.attr('id')] = minDDL.find('option').filter(function () {
                return Number($(this).val()) > Number(maxVal) && $(this).val() != "0";
            }).detach();
        }
        if (minDDL.is(":visible") && Number(minDDL.val()) != 0 && Number(minDDL.val()) > maxVal) {
            minDDL.find('option:first-child').attr("selected", "selected");
        }
        if (txtMin.is(':visible')) {
            var minExact = Number(txtMin.val());
            if (maxVal != 0 && minExact > maxVal) {
                txtMin.val(maxVal);
            }
        }
    }
}
function minDropDownValueChanged(txtMax, maxDDL, minDDL, detachedOptions) {
    var minVal = minDDL.val();
    txtMax.attr("min", minVal);
    reattachHiddenSelectOptions(maxDDL, detachedOptions);
    if ((minVal || "0") != "0") {
        if (detachedOptions != null) {
            Logging.Debug("Removing maxDDL values < " + minVal);
            detachedOptions[maxDDL.attr('id')] = maxDDL.find('option').filter(function () {
                return Number($(this).val()) < Number(minVal) && $(this).val() != "0";
            }).detach();
        }
        if (maxDDL.is(":visible") && Number(maxDDL.val()) != 0 && Number(maxDDL.val()) < minVal) {
            maxDDL.find('option:first-child').attr("selected", "selected");
        }
    }
    if (txtMax.is(':visible')) {
        var maxPriceExact = Number(txtMax.val());
        if (maxPriceExact < minVal) {
            txtMax.val(minVal);
        }
    }
}
function maxExactValueChanged(minTxt, minDDL, maxTxt, detachedOptions) {
    maxTxt.val(maxTxt.val().replace(/\D/g, ''));
    minTxt.attr('max', maxTxt.val());
    var maxVal = Number(maxTxt.val());
    var minVal;
    if (minTxt.is(':visible')) {
        minVal = Number(minTxt.val());
    }
    else {
        minVal = Number(minDDL.val());
    }
    if (maxVal != 0) {
        minTxt.attr("max", maxVal);
    }
    else {
        minTxt.attr("max", "");
    }
    if (maxVal < minVal) {
        maxTxt.val(minVal);
        maxVal = minVal;
    }
    reattachHiddenSelectOptions(minDDL, detachedOptions);
    if (($("#" + maxTxt.attr('id') + "CADExactSet").val() || "") != "true") {
        var SavedSearchLoadFirstTime = SessionStorage.SavedSearchLoadFirstTime.get();
        var isSavedSearchModeFirstTime = (SavedSearchLoadFirstTime != null && SavedSearchLoadFirstTime.length > 0);
        if (isSavedSearchModeFirstTime) {
            $("#" + maxTxt.attr('id') + "CADExact").val(maxVal);
        }
        else {
            $("#" + maxTxt.attr('id') + "CADExact").val(maxVal / ApplicationState.CurrencyMultiplier);
        }
    }
    $("#" + maxTxt.attr('id') + "CADExactSet").val("false");
    if (maxVal != 0) {
        if (detachedOptions != null) {
            Logging.Debug("Removing minDDL values > " + maxVal);
            detachedOptions[minDDL.attr('id')] = minDDL.find('option').filter(function () {
                return Number($(this).val()) > Number(maxVal) && $(this).val() != "0";
            }).detach();
        }
    }
}
//function GoogleMapsLoaded() {
//    Events.Fire(MasterPages.Phone.GoogleAPILoaded, null);
//}
function minExactValueChanged(maxTxt, maxDDL, minTxt, detachedOptions) {
    minTxt.val(minTxt.val().replace(/\D/g, ''));
    maxTxt.attr('min', minTxt.val());
    var minVal = Number(minTxt.val());
    var maxVal;
    if (maxTxt.is(':visible')) {
        maxVal = Number(maxTxt.val());
    }
    else {
        maxVal = Number(maxDDL.val());
    }
    if (minVal != 0 && (maxVal != 0 || maxTxt.is(':visible')) && minVal > maxVal) {
        maxTxt.val(minVal);
        //minTxt.val(maxVal);
    }
    reattachHiddenSelectOptions(maxDDL, detachedOptions);
    if (($("#" + minTxt.attr('id') + "CADExactSet").val() || "") != "true") {
        var SavedSearchLoadFirstTime = SessionStorage.SavedSearchLoadFirstTime.get();
        var isSavedSearchModeFirstTime = (SavedSearchLoadFirstTime != null && SavedSearchLoadFirstTime.length > 0);
        if (isSavedSearchModeFirstTime) {
            $("#" + minTxt.attr('id') + "CADExact").val(minVal);
        }
        else {
            $("#" + minTxt.attr('id') + "CADExact").val(minVal / ApplicationState.CurrencyMultiplier);
        }
    }
    $("#" + minTxt.attr('id') + "CADExactSet").val("false");
    if (minVal != 0) {
        if (detachedOptions != null) {
            detachedOptions[maxDDL.attr('id')] = maxDDL.find('option').filter(function () {
                return Number($(this).val()) < Number(minVal) && $(this).val() != "0";
            }).detach();
        }
    }
}
//function showConfirmationDialog(args: ConfirmationDialogArgs, handler?: (results?: Object, args?: any[]) => any) {
//    let controlFetcherArgs = new ControlFetcherArgs("ConfirmationDialog");
//    if ($("#" + args.ID + "_con").length <= 0) {
//        $("body").append("<div id='" + args.ID + "_con' class='confirmation-dlg-con'></div>");
//    }
//    controlFetcherArgs.idToOutputResults = args.ID + "_con";
//    controlFetcherArgs.canRetrieveFromCache = true;
//    controlFetcherArgs.postCallHandler = handler;
//    ControlFetcher.fetchConfirmationDialog(controlFetcherArgs, args);
//}
/**
 * Shows a simple dialog with the text passed in and a single OK button. Should ONLY be used for instructional messages not confirmations (use a toast for that).
 * @param message Message to show
 */
function showSimpleDialog(message) {
    var hash = Utilities.getHashCode(message);
    if ($("#" + hash + "_con").length == 0) {
        $("body").append("<div id='" + hash + "_con' class='confirmation-dlg-con'></div>");
        var model = new ConfirmationDialogModel2(hash, "", message, Translation.get("OK"), function () { $.featherlight.close(); });
        model.AfterClose = function () {
            $("#" + hash + "_con").remove();
        };
        var args = new ControlFetcherArgs(hash + "_Wrapper");
        args.idToOutputResults = hash + "_con";
        args.canRetrieveFromCache = true;
        args.postCallHandler = function (html) {
            $("#" + hash + "_con").html(html);
        };
        ControlFetcherJS.fetchConfirmationDialog2(args, model);
    }
}
function showConfirmationDialog2(model) {
    if ($("#" + model.ID + "_con").length <= 0) {
        $("body").append("<div id='" + model.ID + "_con' class='confirmation-dlg-con'></div>");
    }
    var args = new ControlFetcherArgs(model.ID + "_Wrapper");
    args.idToOutputResults = model.ID + "_con";
    args.canRetrieveFromCache = true;
    args.postCallHandler = function (html) {
        $("#" + model.ID + "_con").html(html);
    };
    ControlFetcherJS.fetchConfirmationDialog2(args, model);
}
function showModalContent(model) {
    var gigyaScreen = $(".gigyaScreen.modal-con");
    gigyaScreen.trigger('close');
    if ($("#" + model.ID + "_con").length <= 0) {
        $("body").append("<div id='" + model.ID + "_con' class='" + model.CssClass + " modal-con'></div>");
    }
    var args = new ControlFetcherArgs(model.ID + "_Wrapper");
    args.idToOutputResults = model.ID + "_con";
    args.canRetrieveFromCache = true;
    args.postCallHandler = function (html) {
        $("#" + model.ID + "_con").hide(); //Stops page from scrolling
        $("#" + model.ID + "_con").html(html);
        $("#" + model.ID + "_con").show();
    };
    ControlFetcherJS.fetchModalContent(args, model);
}
/**
 * Returns the smallest screen dimension (if in landscape mode - return the height).
 */
function getMinScreenDimension() {
    var width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    var height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    return Math.min(width, height);
}
/**
 * Central function for google maps JS include to callBack.
 */
function GoogleMapsLoaded() {
    if (MasterPages.Phone != null && ApplicationState.IsMobileDevice) {
        Events.Fire(MasterPages.Phone.GoogleAPILoaded, null);
    }
    else if (MasterPages.Desktop != null) {
        Events.Fire(MasterPages.Desktop.GoogleAPILoaded, null);
    }
}
/**
 * Central function for google maps JS include to callBack.
 */
//function GigyaLoaded() {
//    if (MasterPages.Phone != null && ApplicationState.IsMobileDevice) {
//        MasterPages.Phone.GigyaLoaded.Fire();        
//    } else if (MasterPages.Desktop != null) {
//        MasterPages.Desktop.GigyaLoaded.Fire();
//    }
//}
/**
 * Function that will scoll the input being clicked/entered to the top of the page to make room for the onscreen keyboard.
 */
function ScrollInputToTop(input) {
    input.on('focus click', function () {
        if ($(this).is(":visible")) {
            $(window).one('resize', function () {
                input[0].scrollIntoView(true);
                window.scroll(0, window.scrollY - 70); //Since we have a fixed header
            });
        }
    });
}
/**
 * Meant to fix the issue of the header scrolling out of view when the IOS onscreen keyboard pops up (Safari is the new IE...)
 * See: https://stackoverflow.com/questions/15273098/how-do-i-stop-my-fixed-navigation-from-moving-like-this-when-the-virtual-keyboar
 */
function ApplySafariFixedHeaderHack() {
    if (ApplicationState.IsSafari && 'ontouchstart' in window) {
        $(document).on('focus click', 'textarea,input,select', function () {
            $('#header').css('position', 'absolute');
        }).on('blur', 'textarea,input,select', function () {
            $('header').css('position', '');
        });
    }
}
function Animate(element, animation, seconds, timing, callAfterAnimation) {
    if (seconds === void 0) { seconds = 0.3; }
    var timingString = TransitionTiming[timing].toString().replace(/_/g, "-") + " " + seconds.toString() + "s";
    Logging.Debug(element.attr("id") + " -> " + animation + " -> " + timingString, LogType.Animation);
    //element.off('webkitAnimationEnd oanimationend msAnimationEnd animationend');//Stop smoothState triggerAllAnimationEndEvent from firing and reversing animation... not sure what the deal is here, spend a good 3 hours to figure out this much
    element.on('webkitAnimationEnd oanimationend msAnimationEnd animationend', function (e) {
        if (e.target == element[0]) { //Event bubbles up from children - need to make sure event triggered from parent not child
            element.off('webkitAnimationEnd oanimationend msAnimationEnd animationend');
            if (callAfterAnimation != null) {
                callAfterAnimation();
                if (ApplicationState.IsSafari) {
                    //Safari has a bad habit of firing this event right before the animation actually ends (transluscent TOS slide up issues)
                    window.setTimeout(function () {
                        element.css('animation', '').css('-webkit-animation', '');
                    }, 100);
                }
                else {
                    element.css('animation', '').css('-webkit-animation', '');
                }
            }
        }
    });
    //.children().on("animationend webkitAnimationEnd", function (e) { //Event bubbles up from children: https://stackoverflow.com/questions/6874958/webkittransitionend-event-fired-when-transitions-end-on-div-and-transitions-end
    //    e.stopPropagation();
    //    return false;   //you can just use event.stopPropagation()
    //});
    element.css("animation", animation.toString() + " " + timingString);
    element.css("-webkit-animation", animation.toString() + " " + timingString);
}
function toggleVisibility(element, force) {
    if (force != undefined) {
        if (force)
            element.css('visibility', 'visible');
        else
            element.css('visibility', 'hidden');
    }
    else {
        if (element.css('visibility') == 'hidden')
            element.css('visibility', 'visible');
        else
            element.css('visibility', 'hidden');
    }
}
function AnimateIn(element, animation, seconds, timing, callAfterAnimation, callBeforeAnimation, useVisibilityNotShowHide) {
    if (animation === void 0) { animation = EntryAnimations.fadeIn; }
    if (seconds === void 0) { seconds = 0.3; }
    if (timing === void 0) { timing = TransitionTiming.ease_in; }
    if (useVisibilityNotShowHide === void 0) { useVisibilityNotShowHide = false; }
    //Logging.Debug("AnimatingIn -> " + element.selector, LogType.Animation);
    var newCallAfterAnimation;
    //let disabledElements: JQuery = element.children().not('.disableAnimations');
    //let toggleAnimations: Function = () => {
    //    disabledElements.each((index: number, element: Element) => {
    //        $(element).toggleClass('disableAnimations');
    //    });
    //}
    Animate(element, EntryAnimations[animation], seconds, timing, callAfterAnimation);
    if (useVisibilityNotShowHide) {
        element.css("visibility", "visible");
    }
    else {
        element.show();
    }
    if (callBeforeAnimation != null) {
        callBeforeAnimation();
    }
}
function AnimateOut(element, animation, seconds, timing, callAfterAnimation, useVisibilityNotShowHide) {
    if (animation === void 0) { animation = ExitAnimations.fadeOut; }
    if (seconds === void 0) { seconds = 0.3; }
    if (timing === void 0) { timing = TransitionTiming.ease_in; }
    if (useVisibilityNotShowHide === void 0) { useVisibilityNotShowHide = false; }
    var newCallAfterAnimation = function () { };
    if (callAfterAnimation != null) {
        newCallAfterAnimation = function () {
            if (useVisibilityNotShowHide) {
                element.css("visibility", "hidden");
            }
            else {
                element.hide();
            }
            callAfterAnimation("AnimateOut");
        };
    }
    else {
        newCallAfterAnimation = function () {
            if (useVisibilityNotShowHide) {
                element.css("visibility", "hidden");
            }
            else {
                element.hide();
            }
        };
    }
    Animate(element, ExitAnimations[animation], seconds, timing, newCallAfterAnimation);
}
/**
 * Show or hide a slide out section
 * @param show
 * @param hide
 * @param animationLengthMS
 * @param animationLength
 */
function showSubSectionSlider(show, hide, scrollToTop, animationLengthMS, callAfterAnimatedIn, useVisibilityNotShowHide) {
    if (scrollToTop === void 0) { scrollToTop = false; }
    if (animationLengthMS === void 0) { animationLengthMS = 150; }
    if (useVisibilityNotShowHide === void 0) { useVisibilityNotShowHide = false; }
    if (show.hasClass("subSectionCon2") || show.hasClass("subSectionConFade")) {
        if (show.hasClass("hideme")) {
            show.removeClass("hideme");
            if (callAfterAnimatedIn != null) {
                callAfterAnimation(show, callAfterAnimatedIn);
            }
        }
        else {
            Logging.Debug("showSubSectionSlider has nothing to hide");
        }
        window.setTimeout(function () {
            if (!hide.hasClass("fixedOverlayVisible")) {
                $('body').addClass("fixedOverlayVisible");
            }
            else {
                $('body').removeClass("fixedOverlayVisible");
            }
        }, animationLengthMS);
        $('#footer').hide();
    }
    else {
        if ((useVisibilityNotShowHide && show.css("visibility") == "visible") || (!useVisibilityNotShowHide && show.css("display") != "none")) {
            Logging.Debug("Skip hideSubSectionSlider -> already shown", LogType.Animation);
            return;
        }
        return animateSectionSlider(EntryAnimations.fadeIn, ExitAnimations.fadeOut, show, hide, scrollToTop, animationLengthMS, callAfterAnimatedIn, useVisibilityNotShowHide);
    }
}
/**
 * Show or hide a slide out section
 * @param show
 * @param hide
 * @param scrollToTop
 * @param animationLengthMS
 */
function hideSubSectionSlider(show, hide, scrollToTop, animationLengthMS, callAfterAnimatedIn, useVisibilityNotShowHide) {
    if (scrollToTop === void 0) { scrollToTop = false; }
    if (animationLengthMS === void 0) { animationLengthMS = 150; }
    if (useVisibilityNotShowHide === void 0) { useVisibilityNotShowHide = false; }
    if (hide.hasClass("subSectionCon2") || hide.hasClass("subSectionConFade")) {
        $('body').removeClass("fixedOverlayVisible");
        ScrollLocation.Refresh();
        if (callAfterAnimatedIn != null) {
            callAfterAnimation(hide, callAfterAnimatedIn);
        }
        $('#footer').show(); //TODO: move this outta here
        hide.addClass("hideme");
        //setTimeout(function () { hide[0].scrollTo(0, 0); }, animationLengthMS);
    }
    else {
        if ((useVisibilityNotShowHide && hide.css("visibility") == "hidden") || (!useVisibilityNotShowHide && hide.css("display") == "none")) {
            Logging.Debug("Skip hideSubSectionSlider -> already hidden", LogType.Animation);
            return;
        }
        return animateSectionSlider(EntryAnimations.fadeIn, ExitAnimations.fadeOut, show, hide, scrollToTop, animationLengthMS, callAfterAnimatedIn, useVisibilityNotShowHide);
    }
}
/**
 *
 * @param className
 * @param show
 * @param hide
 * @param callAfterAnimatedIn
 * @param propertyTransitioning If multiple properties are transitioning, pass in the one you actually want to listen for ending here. Otherwise callAfterAnimatedIn is called once per property being transitioned (eg. opacity, left, top, etc.)
 */
function toggleClassPair(className, show, hide, callAfterAnimatedIn, propertyTransitioning) {
    if (callAfterAnimatedIn) {
        show.one("transitionend webkitTransitionEnd oTransitionEnd", function (event) {
            if (!propertyTransitioning || (propertyTransitioning && event.originalEvent && event.originalEvent.propertyName.toLowerCase() == propertyTransitioning))
                callAfterAnimatedIn();
        });
    }
    show.toggleClass(className, false);
    hide.toggleClass(className, true);
}
/**
 * Show or hide a slide out section
 * @param show
 * @param hide
 * @param scrollToTop
 * @param animationLengthMS
 */
function animateSectionSlider(animateInAnimation, animationOutAnimation, show, hide, scrollToTop, animationLengthMS, callAfterAnimatedIn, useVisibilityNotShowHide) {
    if (scrollToTop === void 0) { scrollToTop = false; }
    if (animationLengthMS === void 0) { animationLengthMS = 150; }
    if (useVisibilityNotShowHide === void 0) { useVisibilityNotShowHide = false; }
    scrollLocations[hide.attr("id")] = document.documentElement.scrollTop || document.body.scrollTop;
    var scrollLocation = scrollLocations[show.attr("id")];
    var restoreScroll = function (source) {
        AnimateIn(show, animateInAnimation, animationLengthMS / 1000, TransitionTiming.ease_in_out, function () {
            $(window).scroll(); //Takes care of button show/hidden on scroll
            if (callAfterAnimatedIn != null) {
                callAfterAnimatedIn();
            }
            if (scrollToTop) {
                window.scrollTo(0, 0);
            }
            else if (scrollLocation != null) {
                window.scrollTo(0, scrollLocation);
            }
        }, null, useVisibilityNotShowHide);
    };
    AnimateOut(hide, animationOutAnimation, 50 / 1000, TransitionTiming.ease_in_out, restoreScroll, useVisibilityNotShowHide);
    return;
}
function SetFocusOnFirstInput(container) {
    window.setTimeout(function () {
        var inputs = container.find("input,select");
        if (inputs.length > 0) {
            inputs[0].focus();
        }
    }, 50);
}
///**
// * Shows overlay to accept terms of use/disclaimer is necessary
// */
//function checkTOSAccepted(callAfterAccept?: () => void) {
//    if (Core.UserNeedsToAcceptTOS()) {
//        if (document.activeElement != null) {//Need to get rid of onscreen keyboard so the overlay will be full-height
//            document.activeElement.blur();
//        }
//        let showDisclaimer = function () {
//            $('#mainContentAndFooterCon').append("<div id='disclaimerCon' class='pageDialog'></div>");
//            let args = new ControlFetcherArgs("", "disclaimerCon");
//            let postCallSetFocus: () => void = () => {
//                Pages.TermsOfUse.showAcceptButtons();
//                showSlideupPageContent("disclaimerCon");
//                Events.Listen(Pages.TermsOfUse.TermsOfUseAcceptedEvent, function () {
//                    hideSlideupPageContent('disclaimerCon');
//                    if (callAfterAccept != null) {
//                        callAfterAccept();
//                    }
//                });
//            }
//            args.showLoadingAnimation = false;
//            args.contentWapperClass = "";
//            args.postCallHandler = postCallSetFocus;
//            ControlFetcher.fetchTermsOfUse(args);
//        }
//        //Race condition: Otherwise you end up with transluscent TOS. No idea what event/animation needs to fire before this, I tried all I could come up with.
//        showDisclaimer();
//    } else {
//        if (callAfterAccept != null) {
//            callAfterAccept();
//        }
//    }
//}
//function hideSlideupPageContent(contentid: string) {
//    $('body').css('overflow', 'initial'); //Don't want double scroll bars
//    $('body').css('position', 'initial'); //safari input selection bugs out otherwise
//    Animate($('#' + contentid), ExitAnimations[ExitAnimations.fadeOutDown], 0.5, TransitionTiming.ease_out, () => { $('#' + contentid).remove(); });
//}
//function showSlideupPageContent(contentid: string, postCallHandler?: () => void) {
//    let bottomOfHeader: number = $('#header').outerHeight();
//    $('body').css('overflow', 'hidden'); //Don't want double scroll bars
//    $('body').css('position', 'fixed'); //safari input selection bugs out otherwise
//    //$('#' + contentid).addClass("show");
//    $('#' + contentid).css('top', bottomOfHeader);
//    let height: number = getBodyHeight();
//    $('#' + contentid).css('height', height + 'px');
//    $(window).on('orientationchange resize', function () {
//        if ($('#' + contentid).length > 0) {
//            let height: number = getBodyHeight();
//            $('#' + contentid).css('height', height + 'px');
//        }
//    });
//    Animate($('#' + contentid), EntryAnimations[EntryAnimations.fadeInUp], 0.3, TransitionTiming.ease_in, () => {
//        //To give the slideup content focus, so if they start scrolling it's not the background body getting the event.
//        var e = new Event('touchstart');
//        $('#' + contentid)[0].dispatchEvent(e);
//    });
//}
/**
 * Gets the height of the body.
 */
function getBodyHeight() {
    var returnValue;
    if (ApplicationState.IsSafari) {
        returnValue = $(window).height() - $('#header').outerHeight(true);
    }
    else if (ApplicationState.IsFacebookAppBrowser) {
        returnValue = window.innerHeight - $('#header').outerHeight(true); //Facebook in app browser is a popup in iOS
    }
    else if (ApplicationState.IsMobileDevice) {
        returnValue = window.outerHeight - $('#header').outerHeight(true); //Android hides the address bar when you scroll down, we need to deal with that height change
    }
    else {
        returnValue = window.innerHeight - $('#header').outerHeight(true);
    }
    return returnValue;
}
/**
 * Simple function to add an element with .overlay and increase z-index of passed in elements. Elements need to be absolutely positioned for this to work...
 * @param elementsToShow
 * @param toggle
 */
function lightBoxPageElements(elementsToShow, toggle) {
    if (toggle === void 0) { toggle = true; }
    if (elementsToShow != null) {
        if (toggle) {
            for (var i = 0; i < elementsToShow.length; i++) {
                elementsToShow[i].css("z-index", 100 + i);
            }
            $("body").append("<div id='UIOverlay' class='overlay'></div>");
        }
        else {
            $('#UIOverlay').remove();
            for (var i = 0; i < elementsToShow.length; i++) {
                elementsToShow[i].css("z-index", "");
            }
        }
    }
}
function reduceLightBoxPageElements(elementsToReduce, zIndex) {
    if (elementsToReduce != null) {
        for (var i = 0; i < elementsToReduce.length; i++) {
            elementsToReduce[i].css("z-index", zIndex);
        }
    }
}
function increaseLightBoxPageElements(elementsToIncrease, zIndex) {
    if (elementsToIncrease != null) {
        for (var i = 0; i < elementsToIncrease.length; i++) {
            elementsToIncrease[i].css("z-index", zIndex);
        }
    }
}
function showLoadingBar() {
    if ($('#loadingBar').is(":visible") == false) { //Try to fix rapid firing issue
        $('#loadingBar').show();
    }
}
function hideLoadingBar() {
    $('#loadingBar').hide();
}
/**
 * Recaptcha has a real problem if there is more than one instance, so we just move it around like in R6.
 * Deprecated Move Reasoning: If you are rendering inside a lightbox,
 * make sure to call MoveRecaptcha on close (can only have one recaptcha per page)
 */
function MoveRecaptcha(containerId) {
    if ($('#' + containerId + ' #recaptcha').length > 0) {
        $('#' + containerId + ' #recaptcha').appendTo(document.body);
        $("#recaptcha").hide();
    }
}
/**
 * Use this function to load Recaptcha
 * Description: Render directly to the requested container and dont move the container around
 * Reason: Issue with moving rendered element in the DOM with captcha (*Related to predefined events*)
 * Deprecated Move Reasoning: If you are rendering inside a lightbox,
 * make sure to call MoveRecaptcha on close (can only have one recaptcha per page)
 */
function LoadCaptcha(containerId) {
    if (ApplicationConfig.CaptchaEnabled) {
        if (containerId.length > 0) {
            if (typeof grecaptcha.render !== 'undefined') {
                var widgetId = grecaptcha.render(containerId, { 'sitekey': ApplicationConfig.RecaptchaSiteKey });
                $('#' + containerId).attr('data-captcha-widget-id', widgetId);
                $('#' + containerId).show();
            }
        }
        //if ($('#EmailRealtorCaptcha').length > 0 && $('#EmailRealtorCaptcha').html().trim() == '') {
        //    grecaptcha.render('EmailRealtorCaptcha', { 'sitekey': ApplicationConfig.RecaptchaSiteKey });
        //} else {
        //    $('#recaptcha').prependTo("#EmailRealtorCaptcha");
        //    $('#recaptcha').show();
        //}
    }
}
function activateAccordion(accrdId, animate) {
    $(function () {
        var icons = {
            header: "iconClosed",
            activeHeader: "iconOpen"
        };
        var $accordions = accrdId.show().accordion({
            collapsible: true,
            active: false,
            header: '.accrd-hdr',
            icons: icons,
            animate: animate,
            autoHeight: false,
            heightStyle: "content",
            change: function (event, ui) {
                $("img.lazyLoadedImg").lazyload();
            },
        }).on('click', function () {
            setConsistantHeights('.smallListingCard');
            $accordions.not(this).accordion('activate', false);
        });
        accrdId.css({ 'height': 'auto' });
    });
}
//let initLocallogic: () => void = function () { };
var initLocallogicForListing = function () { };
/**
 * ONLY use when there isn't an actual event to listen for. This is a last case scenario call;
 * @param timeToCall
 * @param whatToCall
 * @param timings
 */
function callWhen(timeToCall, whatToCall, timings) {
    if (timings === void 0) { timings = [100, 200, 1000, 2000]; }
    var canExit = false;
    for (var i = 0; i < timings.length; i++) {
        window.setTimeout(function () {
            if (timeToCall()) {
                whatToCall();
                canExit = true;
                return;
            }
        }, timings[i]);
        if (canExit) {
            break;
        }
    }
}
/**
 * Function to fetch a TS control (via ApplicationState.Current.Controls) by Id.
 * @param id
 */
function GetControl(id) {
    return ApplicationState.Current.Controls[id];
}
/**
 * Sets the current mode cookie and ApplicationState.CurrentMode
 * @param mode
 */
function setApplicationMode(mode) {
    if (ApplicationState.CurrentMode != mode) {
        Cookie.ApplicationMode.save(mode.toString());
        ApplicationState.CurrentMode = mode;
    }
}
/**
 * Even spacing between listing cards, based on card number.
 * @param listingCon
 * @param cardNum
 */
function setDetailsCardLayout(listingCon, cardNum) {
    listingCon.css("max-width", 342 * cardNum);
}
/**
 * Makes large listing cards the same height based on the largest in the set.
 * @param containerSelector
 */
//function setUniformHeightsForLargeListingCards(containerSelector: string) {
//    setConsistantHeights(containerSelector + " .listingCardTopBody");
//    setConsistantHeights(containerSelector + " .listingCardBody");
//}
function outputCSS(content, id) {
    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.id = id;
    style.type = 'text/css';
    //if (style.styleSheet) {
    //    // This is required for IE8 and below.
    //    style.styleSheet.cssText = css;
    //} else {
    style.appendChild(document.createTextNode(content));
    //}
    head.appendChild(style);
}
function isFullScreenSupported() {
    return (document.body.requestFullscreen != null || document.body.msRequestFullscreen != null || document.body.mozRequestFullScreen != null || document.body.webkitRequestFullscreen != null);
}
function addLiveStreamToCalendar(listingId, referenceNumber) {
    var controlArgs = new ControlFetcherArgs();
    if (ApplicationState.IsMobileDevice) {
        var BodyContentHTML_1 = "";
        controlArgs.postCallHandler = function (result) {
            BodyContentHTML_1 = result.d;
            var model = new ConfirmationDialogModel2("AddToCal", Translation.get("AddToCalendar"), BodyContentHTML_1, null, null);
            model.ShowCloseButton = true;
            showConfirmationDialog2(model);
        };
    }
    else {
        controlArgs.postCallHandler = function (result) {
            var model = new ModalContentModel("AddToCalendar", Translation.get("AddToCalendar"), result.d);
            model.DisplayType = ModalDisplayTypes.LightboxMe;
            showModalContent(model);
        };
    }
    var calendarArgs = new AddToCalendarControlArgs();
    calendarArgs.ListingId = listingId || "";
    calendarArgs.ReferenceNumber = referenceNumber || "";
    calendarArgs.EventTypeId = ApplicationConfig.StreamEventId;
    calendarArgs.CtrlDescription = ""; //ctrlDescription || "";
    calendarArgs.Title = ""; //title || "";
    calendarArgs.Decription = ""; //description || "";
    calendarArgs.Location = ""; //location || "";
    calendarArgs.StartDate = ""; //startDate || "";
    calendarArgs.EndDate = ""; //endDate || "";
    calendarArgs.TimezoneId = ""; //timezoneId || "";
    //calendarArgs.TimezoneOffset = "";//timezoneOffset || "";
    //calendarArgs.TimezoneOffsetRegular = "";//timezoneOffsetRegular || "";
    //calendarArgs.TimezoneOffsetDaylight = "";//timezoneOffsetDaylight || "";
    ControlFetcher.fetchAddToCalendar(controlArgs, calendarArgs);
}
function addOpenHouseToCalendar(listingId, referenceNumber, ctrlDescription, title, description, location, startDate, endDate, timezoneId, timezoneOffset, timezoneOffsetRegular, timezoneOffsetDaylight, isLiveStream) {
    var controlArgs = new ControlFetcherArgs();
    if (ApplicationState.IsMobileDevice) {
        var BodyContentHTML_2 = "";
        controlArgs.postCallHandler = function (result) {
            BodyContentHTML_2 = result.d;
            var model = new ConfirmationDialogModel2("AddToCal", Translation.get("AddToCalendar"), BodyContentHTML_2, null, null);
            model.ShowCloseButton = true;
            showConfirmationDialog2(model);
        };
    }
    else {
        controlArgs.postCallHandler = function (result) {
            var model = new ModalContentModel("AddToCalendar", Translation.get("AddToCalendar"), result.d);
            model.DisplayType = ModalDisplayTypes.LightboxMe;
            showModalContent(model);
        };
    }
    var calendarArgs = new AddToCalendarControlArgs();
    calendarArgs.ListingId = listingId || "";
    calendarArgs.ReferenceNumber = referenceNumber || "";
    calendarArgs.EventTypeId = ApplicationConfig.OpenHouseEventId;
    calendarArgs.CtrlDescription = ""; //ctrlDescription || "";
    calendarArgs.Title = ""; //title || "";
    calendarArgs.Decription = ""; //description || "";
    calendarArgs.Location = ""; //location || "";
    calendarArgs.StartDate = ""; //startDate || "";
    calendarArgs.EndDate = ""; //endDate || "";
    calendarArgs.TimezoneId = ""; //timezoneId || "";
    //calendarArgs.TimezoneOffset = "";//timezoneOffset || "";
    //calendarArgs.TimezoneOffsetRegular = "";//timezoneOffsetRegular || "";
    //calendarArgs.TimezoneOffsetDaylight = "";//timezoneOffsetDaylight || "";
    ControlFetcher.fetchAddToCalendar(controlArgs, calendarArgs);
}
/**
 * Central function for gigya api js callBack.
 */
function gigyaAPIJSLoaded() {
    if (MasterPages.Phone != null && ApplicationState.IsMobileDevice) {
        MasterPages.Phone.GigyaLoaded.Listen(function (arg) {
            GigyaInit.getChangePassword();
        });
        MasterPages.Phone.GigyaLoaded.Fire();
    }
    else if (MasterPages.Desktop != null) {
        MasterPages.Desktop.GigyaLoaded.Listen(function (arg) {
            GigyaInit.getChangePassword();
        });
        MasterPages.Desktop.GigyaLoaded.Fire();
    }
}
/**
 * Used to call things like gigya where the script may be loaded async so we need to wait for the script to load before calling methods in that script.
 * @param isObjectDefined
 * @param event
 * @param call
 */
function callIfDefinedOrWaitForEvent(isObjectDefined, event, call) {
    if (isObjectDefined) {
        call();
    }
    else {
        event.ListenOnce(function () { call(); });
    }
}
/**
 * Take a timestamp in its timeZoneName and its corresponding timestampUTC to format date in french or english
 * EG: in english, it can start in that format: Today 04:00 pm (EDT), Yesterday, 04:00 pm (EDT) -> Aug 16, 2022, 04:00 pm (EDT) etc...
 * EG: in french, Aujourd'hui, 16 h 00 (HAE) -> Hier, 16 h 00 (HAE), 16 août 2022 16 h 00 (HAE) etc..
 * @param timestamp
 * @param timestampUTC
 * @param timezoneName
 */
function formatDateUpToYesterday(timestamp, timestampUTC, timeZoneName) {
    var timestampDate = Utilities.parseAPIDateString(timestamp);
    var timestampDateUTC = Utilities.parseAPIDateString(timestampUTC, true);
    var spacer = "-";
    var inDateString = "";
    if (!!timestampUTC) {
        try {
            inDateString = timestampDateUTC.toCREAString(spacer);
        }
        catch (err) {
            inDateString = timestampDateUTC.toString();
        }
    }
    var currentDate = new Date();
    var currentDateUTC = new Date(currentDate.getUTCFullYear(), currentDate.getUTCMonth(), currentDate.getUTCDate(), currentDate.getUTCHours(), currentDate.getUTCMinutes(), currentDate.getUTCSeconds());
    var currentDateString = currentDateUTC.toCREAString(spacer);
    var yesterdayDateUTC = new Date(currentDateUTC.getTime());
    yesterdayDateUTC.setDate(yesterdayDateUTC.getDate() - 1);
    var yesterdayDateString = yesterdayDateUTC.toCREAString(spacer);
    var dayDisplay = padValue(timestampDate.getDate());
    var yearDisplay = timestampDate.getFullYear();
    var hourDisplay = timestampDate.getHours();
    var minuteDisplay = padValue(timestampDate.getMinutes());
    var monthDisplay = Utilities.getShortMonthString(timestampDate.getMonth(), ApplicationState.CultureID);
    var periodDisplay = "am";
    var ti = Utilities.getTimezoneInfo(timeZoneName, ApplicationState.CultureID);
    var timeZoneCode = "(" + (Utilities.hasDST(timestampDate) ? ti.DaylightCodeName : ti.StandardCodeName) + ")";
    if (hourDisplay > 12 && ApplicationState.CultureID == Language.English) {
        periodDisplay = "pm";
        hourDisplay = hourDisplay - 12;
    }
    else if (hourDisplay == 0 && ApplicationState.CultureID == Language.English) {
        hourDisplay = 12;
    }
    if (inDateString == currentDateString) {
        if (ApplicationState.CultureID == Language.English) {
            return "".concat(Translation.get('Today'), ", ").concat(hourDisplay, ":").concat(minuteDisplay, " ").concat(periodDisplay, " ").concat(timeZoneCode);
        }
        else {
            return "".concat(Translation.get('Today'), ", ").concat(hourDisplay, " h ").concat(minuteDisplay, " ").concat(timeZoneCode);
        }
    }
    else if (inDateString == yesterdayDateString) {
        if (ApplicationState.CultureID == Language.English) {
            return Translation.get('Yesterday') + ", " + hourDisplay + Translation.get("Colon") + minuteDisplay + " " + periodDisplay + " " + timeZoneCode;
        }
        else {
            return Translation.get('Yesterday') + ", " + hourDisplay + " h " + minuteDisplay + " " + timeZoneCode;
        }
    }
    else {
        if (ApplicationState.CultureID == Language.English) {
            return "".concat(monthDisplay, " ").concat(dayDisplay, ", ").concat(yearDisplay, ", ").concat(hourDisplay).concat(Translation.get("Colon")).concat(minuteDisplay, " ").concat(periodDisplay, " ").concat(timeZoneCode);
        }
        else {
            return "".concat(dayDisplay, " ").concat(monthDisplay, " ").concat(yearDisplay, ", ").concat(hourDisplay, " h ").concat(minuteDisplay, " ").concat(timeZoneCode);
        }
    }
    function padValue(value) {
        return (value < 10) ? "0" + value : value;
    }
}
/**
 * Returns a shortform of the price from the raw decimal and fromatted price from the small/large BOL.
 * Eg. 500000, "$500,000.00" -> "500K"
 * @param price
 * @param formatted
 * @param lang
 */
function ShortPriceFormat(price, formatted, lang, currencySymbol) {
    if (price == null)
        Logging.Error("Price is null before formatting");
    if (formatted == null)
        Logging.Error("Formatted is null before formatting");
    if (lang == null)
        Logging.Error(lang + "Language is null before formatting");
    var returnValue = "";
    if (price < 10000) {
        return formatted;
    }
    else if (price < 100000) {
        var rounded = parseFloat((price / 1000).toString()).toFixed(1);
        returnValue = (lang == Language.French ? "".concat(rounded, " k").concat(currencySymbol) : "".concat(currencySymbol).concat(rounded, "K"));
    }
    else if (price < 999500) {
        var rounded = parseFloat((price / 1000).toString()).toFixed(0);
        returnValue = (lang == Language.French ? "".concat(rounded, " k").concat(currencySymbol) : "".concat(currencySymbol).concat(rounded, "K"));
    }
    else if (price < 999500000) {
        var rounded = parseFloat((price / 1000000).toString()).toFixed(2);
        returnValue = (lang == Language.French ? "".concat(rounded, " M").concat(currencySymbol) : "".concat(currencySymbol).concat(rounded, "M"));
    }
    else {
        var rounded = parseFloat((price / 1000000000).toString()).toFixed(2);
        returnValue = (lang == Language.French ? "".concat(rounded, " B").concat(currencySymbol) : "".concat(currencySymbol).concat(rounded, "B"));
    }
    return (lang == Language.French ? returnValue.replace(".", ",") : returnValue);
}
//function disableOverscroll(element: HTMLElement) {
//    element.addEventListener('touchstart', function (event) {
//        if (event.targetTouches.length === 1) {
//            // detect single touch
//            var _clientY = event.targetTouches[0].clientY;
//            $(element).data('_clientY', _clientY);            
//        }
//    }, false);
//    element.addEventListener('touchmove', function (event) {
//        if (event.targetTouches.length === 1) {
//            // detect single touch
//            disableRubberBand(event, element);
//        }
//    }, false);   
//}
//function disableRubberBand(event: TouchEvent, element: HTMLElement) {
//    var clientY = event.targetTouches[0].clientY - $(element).data("_clientY");
//    if (element.scrollTop === 0 && clientY > 0) {
//        // element is at the top of its scroll
//        event.preventDefault();
//    }
//    if (isOverlayTotallyScrolled(element) && clientY < 0) {
//        //element is at the top of its scroll
//        event.preventDefault();
//    }
//}
//function isOverlayTotallyScrolled(element:HTMLElement) {
//    // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions
//    return element.scrollHeight - element.scrollTop <= element.clientHeight;
//}
//# sourceMappingURL=UIHelpers.js.map;
var URLHash = /** @class */ (function () {
    function URLHash() {
    }
    //this.isNewParam = function (oldhash, param) {
    //    return $.inArray(param, HashSearch.getNewParameters(oldhash)) != -1
    //}
    URLHash.getUrlParameter = function (sParam) {
        var sPageURL = window.location.search.substring(1), sURLVariables = sPageURL.split('&'), sParameterName, i;
        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');
            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : sParameterName[1];
            }
        }
        return "";
    };
    URLHash.getNewParameters = function (oldhash) {
        var returnValue = [];
        var oldParams = oldhash.split('&');
        var newParams = window.location.hash.split('&');
        for (var index = 0; index <= newParams.length; index++) {
            if ($.inArray(newParams[index], oldParams) == -1) {
                if (newParams[index]) {
                    returnValue.push(newParams[index].split('=')[0]);
                }
            }
        }
        return returnValue;
    };
    /**
     * Returns wether the passed in key exists in the hash (case insensitive).
     * @param key
     * @param manualHash Specify hash instead of using current
     */
    URLHash.containsKey = function (key, manualHash) {
        if (manualHash === void 0) { manualHash = ""; }
        var hash = window.location.hash.toLowerCase();
        if (manualHash != "")
            hash = manualHash.toLowerCase();
        return URLHash.getObject(true, hash)[key.toLowerCase()] != null;
    };
    /**
     * Returns wether the passed in key exists in the hash (case insensitive).
     * @param key
     * @param manualHash Specify hash instead of using current
     */
    URLHash.contains = function (key, manualHash) {
        if (manualHash === void 0) { manualHash = ""; }
        var hash = window.location.hash.toLowerCase();
        if (manualHash != "")
            hash = manualHash.toLowerCase();
        var values = hash.toLowerCase().split('&');
        for (var index = 0; index < values.length; index++) {
            if (values[index] == key.toLowerCase()) {
                return true;
            }
        }
        return false;
    };
    //this.getRemoveParameters = function (oldhash) {
    //    var returnValue = [];
    //    var oldParams = oldhash.split('&');
    //    var newParams = window.location.hash.split('&');
    //    for (var index = 0; index <= oldParams.length; index++) {
    //        if ($.inArray(newParams[index], newParams) == -1) {
    //            returnValue.push(oldParams[index].split('=')[0]);
    //        }
    //    }
    //    return returnValue;
    //}
    /**
     *
     * @param key The key to set
     * @param value The value of the key to set
     * @param addEntryToBrowserHistory Wether or not to push a new history (enabling a entry for the back button to call up)
     * @param skipSmoothState Wether or not to bypass smoothstate when the hisotry entry is hit
     */
    URLHash.set = function (key, value, addEntryToBrowserHistory, triggerHashChangeEvent, historyStateEntry) {
        if (value === void 0) { value = null; }
        if (addEntryToBrowserHistory === void 0) { addEntryToBrowserHistory = true; }
        if (triggerHashChangeEvent === void 0) { triggerHashChangeEvent = false; }
        if (historyStateEntry === void 0) { historyStateEntry = {}; }
        var obj = URLHash.getObject();
        if ((obj[key] || "") != value) {
            obj[key] = value;
            var existingLocation = location.href;
            var newLocation = location.href.replace(location.hash, "") + "#" + $.param(obj);
            //Remove blank keys so #T=&R=2 => #T&R=2
            newLocation = newLocation.replace(/=(?=&|$)/, "");
            var stateObject = { id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "" };
            var mergedStateObject = Object.assign((historyStateEntry || {}), stateObject);
            if (addEntryToBrowserHistory) {
                Logging.Debug("Pushing new entry -> " + newLocation, LogType.History);
                //ApplicationState.CurrentHref = document.location.href;                
                history.pushState(mergedStateObject, document.title, newLocation);
                //MasterPages.Phone.smoothState.pushNewHistoryEntry(newLocation);
            }
            else {
                Logging.Debug("Replacing current entry with -> " + newLocation, LogType.History);
                history.replaceState(mergedStateObject, document.title, newLocation);
            }
            ApplicationState.PreviousHref = ApplicationState.CurrentHrefCopy;
            ApplicationState.CurrentHref = document.location.href;
            ApplicationState.CurrentHrefCopy = document.location.href;
            if (triggerHashChangeEvent) {
                $(window).trigger('hashchange', { oldURL: existingLocation, newURL: newLocation });
            }
        }
        //Below messes up smoothstate
        //if (enableBackButton) {
        //    URLHash.setWithNoPush(key, value);
        //    URLHash.push();
        //} else {
        //    URLHash.setWithNoBackButton(key, value);
        //}
    };
    ;
    /**
    *
    * @param values and object with the new hash values
    * @param addEntryToBrowserHistory Wether or not to push a new history (enabling a entry for the back button to call up)
    * @param skipSmoothState Wether or not to bypass smoothstate when the history entry is hit
    * @param mergeNewValues Wether or not to maintain existing values and just add/replace the values passed in.
    */
    URLHash.setValues = function (newValues, addEntryToBrowserHistory, triggerHashChangeEvent, mergeNewValues) {
        if (addEntryToBrowserHistory === void 0) { addEntryToBrowserHistory = true; }
        if (triggerHashChangeEvent === void 0) { triggerHashChangeEvent = false; }
        if (mergeNewValues === void 0) { mergeNewValues = false; }
        var currentHash = URLHash.getObject();
        var properties = [];
        for (var key in newValues) {
            properties.push(key);
        }
        var needUpdate = false;
        if (mergeNewValues == false) {
            needUpdate = ObjectCompare.areEqual(currentHash, newValues) == false;
        }
        if (mergeNewValues) {
            for (var i = 0; i < properties.length; i++) {
                var currentProperty = properties[i];
                if ((newValues[currentProperty] || "") != currentHash[currentProperty]) {
                    needUpdate = true;
                    currentHash[currentProperty] = newValues[currentProperty];
                }
            }
        }
        if (needUpdate) {
            var newLocation = '';
            if (mergeNewValues) {
                newLocation = location.href.replace(location.hash, "") + "#" + $.param(currentHash);
            }
            else {
                newLocation = location.href.replace(location.hash, "") + "#" + $.param(newValues);
            }
            if (addEntryToBrowserHistory) {
                Logging.Debug("Pushing new entry -> " + newLocation, LogType.History);
                history.pushState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "" }, document.title, newLocation);
            }
            else {
                Logging.Debug("Replacing current entry with -> " + newLocation, LogType.History);
                history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "" }, document.title, newLocation);
            }
            ApplicationState.PreviousHref = ApplicationState.CurrentHrefCopy;
            ApplicationState.CurrentHref = document.location.href;
            ApplicationState.CurrentHrefCopy = document.location.href;
            if (triggerHashChangeEvent) {
                $(window).trigger('hashchange');
            }
        }
    };
    ;
    ///**
    //* 
    //* @param values and object with the values to change    
    //* @param addEntryToBrowserHistory Wether or not to push a new history (enabling a entry for the back button to call up)
    //* @param skipSmoothState Wether or not to bypass smoothstate when the hisotry entry is hit
    //*/
    //public static setValues(values:Object, addEntryToBrowserHistory: boolean = true, triggerHashChangeEvent: boolean = false) {
    //    let hashObj = URLHash.getObject();
    //    let properties: Array<string> = [];
    //    for (var key in values) {
    //        properties.push(key);
    //    }
    //    let needUpdate: boolean = false;
    //    for (var i = 0; i < properties.length; i++) {
    //        let currentProperty: string = properties[i];
    //        if ((values[currentProperty] || "") != hashObj[currentProperty]) {
    //            needUpdate = true;
    //            hashObj[currentProperty] = values[currentProperty];
    //        }
    //    }
    //    if (needUpdate) {                        
    //        let newLocation = location.href.replace(location.hash, "") + "#" + $.param(hashObj);
    //        if (addEntryToBrowserHistory) {
    //            Logging.Debug("Pushing new entry -> " + newLocation, LogType.History);                
    //            history.pushState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", state: {} }, document.title, newLocation);                
    //        } else {
    //            Logging.Debug("Replacing current entry with -> " + newLocation, LogType.History);
    //            ApplicationState.CurrentHref = document.location.href;
    //            history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", state: {} }, document.title, newLocation);
    //        }
    //        if (triggerHashChangeEvent) {
    //            $(window).trigger('hashchange');
    //        }
    //    }       
    //};
    URLHash.forceLoad = function () {
        URLHash.load();
    };
    ;
    URLHash.setWithNoBackButton = function (key, value) {
        URLHash.set(key, value, false);
        //Below messes with smoothstate
        ////if (!window.location.hash) {
        ////    return;
        ////}
        //if (URLHash.params == null)
        //    URLHash.params = {};            
        //URLHash.params[key] = value;
        //URLHash.pushWithNoBackButton();
    };
    URLHash.setWithNoPush = function (key, value) {
        //if (!window.location.hash) {
        //    return;
        //}
        if (URLHash.params == null)
            URLHash.params = {};
        URLHash.params[key] = value;
    };
    URLHash.remove = function (key, noBackButton) {
        if (noBackButton === void 0) { noBackButton = false; }
        URLHash.load();
        if (URLHash.params) {
            delete URLHash.params[key];
            if (noBackButton) {
                URLHash.pushWithNoBackButton();
            }
            else {
                URLHash.push();
            }
        }
    };
    URLHash.removeWithNoBackButton = function (key, value) {
        URLHash.remove(key, true);
    };
    URLHash.removeAllNoBackButton = function () {
        for (var key in URLHash.params) {
            URLHash.remove(key, true);
        }
    };
    URLHash.removeAll = function (push, historyEntry) {
        if (push === void 0) { push = true; }
        if (historyEntry === void 0) { historyEntry = true; }
        for (var key in URLHash.params) {
            delete URLHash.params[key];
        }
        if (push) {
            URLHash.push(historyEntry == false);
        }
    };
    URLHash.removeHash = function (pushNewHistoryEntry) {
        if (pushNewHistoryEntry === void 0) { pushNewHistoryEntry = true; }
        var newURL = location.href.replace(location.hash, "");
        if (pushNewHistoryEntry) {
            Logging.Debug("Pushing new entry -> " + newURL, LogType.History);
            history.pushState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", hashupdate: true }, document.title, newURL);
        }
        else {
            Logging.Debug("Replacing current entry -> " + newURL, LogType.History);
            history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", hashupdate: true }, document.title, newURL);
        }
        //MasterPages.Phone.smoothState.pushNewHistoryEntry();
    };
    /**
     * Replace the current hash with the passed in value
     * @param newHash Full hash value (sans leading "#")
     * @param pushNewHistoryEntry
     */
    URLHash.replaceHash = function (newHash, pushNewHistoryEntry, title, forceUrl) {
        if (pushNewHistoryEntry === void 0) { pushNewHistoryEntry = true; }
        if (title === void 0) { title = null; }
        if (forceUrl === void 0) { forceUrl = null; }
        var newURL = !!forceUrl ? forceUrl : location.href;
        if (location.hash != "") {
            newURL = newURL.replace(location.hash, "#" + newHash);
        }
        else {
            newURL = newURL + "#" + newHash;
        }
        if (pushNewHistoryEntry) {
            Logging.Debug("Pushing new entry -> " + newURL, LogType.History);
            history.pushState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", hashupdate: true }, !!title ? title : document.title, newURL);
        }
        else {
            Logging.Debug("Replacing current entry -> " + newURL, LogType.History);
            history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "", hashupdate: true }, !!title ? title : document.title, newURL);
        }
        //MasterPages.Phone.smoothState.pushNewHistoryEntry();
    };
    URLHash.removeWithNoPush = function (key) {
        //this.load();
        if (URLHash.params) {
            delete URLHash.params[key];
            //return this.push(true);
            return;
        }
    };
    URLHash.get = function (key, value, decode) {
        if (value === void 0) { value = ''; }
        if (decode === void 0) { decode = true; }
        if (!window.location.hash) {
            return value;
        }
        URLHash.load();
        if (URLHash.params[key] == undefined) {
            return value;
        }
        if (decode) {
            return decodeURIComponent(URLHash.params[key]);
        }
        else {
            return URLHash.params[key];
        }
    };
    ;
    URLHash.getAllKeys = function (ignoreKeys) {
        if (ignoreKeys === void 0) { ignoreKeys = []; }
        var returnValue = [];
        var obj = URLHash.getObject();
        for (var key in obj) {
            returnValue.push(key);
        }
        if (ignoreKeys != null && ignoreKeys.length > 0) {
            var indexesToRemove = [];
            for (var ignoreIndex = 0; ignoreIndex < ignoreKeys.length; ignoreIndex++) {
                for (var returnIndex = 0; returnIndex < returnValue.length; returnIndex++) {
                    if (returnValue[returnIndex] == ignoreKeys[ignoreIndex]) {
                        indexesToRemove.push(returnIndex);
                    }
                }
            }
            for (var i = indexesToRemove.length - 1; i >= 0; i--)
                returnValue.splice(indexesToRemove[i], 1);
        }
        return returnValue;
    };
    URLHash.keyExists = function (key) {
        if (!window.location.hash) {
            return false;
        }
        URLHash.load();
        return URLHash.params.hasOwnProperty(key);
    };
    ;
    URLHash.push = function (noforward) {
        if (noforward === void 0) { noforward = false; }
        var hashBuilder = [], key, value;
        for (key in URLHash.params)
            if (URLHash.params.hasOwnProperty(key)) {
                //key = escape(key), value = escape(params[key]); // escape(undefined) == "undefined"
                key = key, value = URLHash.params[key]; // escape(undefined) == "undefined"
                hashBuilder.push(key + ((value !== "undefined") ? '=' + value : ""));
            }
        if (noforward)
            return hashBuilder.join("&");
        else {
            var newHash = hashBuilder.join("&");
            //iOS issues?
            //window.location.hash = newHash;
            history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "" }, document.title, newHash);
        }
    };
    URLHash.pushWithNoBackButton = function () {
        var hashBuilder = [], key, value;
        for (key in URLHash.params)
            if (URLHash.params.hasOwnProperty(key)) {
                //key = escape(key), value = escape(params[key]); // escape(undefined) == "undefined"
                key = key, value = URLHash.params[key]; // escape(undefined) == "undefined"
                hashBuilder.push(key + ((value !== "undefined") ? '=' + value : ""));
            }
        var newHash = hashBuilder.join("&") || "";
        var newLocation = window.location.href.split('#')[0];
        if (newHash != "") {
            newLocation += "#" + newHash;
        }
        //window.location.replace(window.location.href.split('#')[0] + "#" + newHash);
        Logging.Debug("Replacing current entry with -> " + newLocation, LogType.History);
        history.replaceState({ id: ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "" }, document.title, newLocation);
        //} else {
        //window.location.replace(window.location.href.split('#')[0]);
        //}
    };
    /**
     * Populates URLHash.params property with an object with the hash values as properties
     */
    URLHash.load = function () {
        URLHash.params = null;
        if (window.location.hash) {
            URLHash.params = {};
            //var hashStr = window.location.hash, hashArray, keyVal
            var hashStr = location.href.split("#")[1], hashArray, keyVal;
            //hashStr = hashStr.substring(1, hashStr.length);
            hashArray = hashStr.split('&');
            for (var i = 0; i < hashArray.length; i++) {
                keyVal = hashArray[i].split('=');
                //params[unescape(keyVal[0])] = (typeof keyVal[1] != "undefined") ? unescape(keyVal[1]) : keyVal[1];
                URLHash.params[keyVal[0]] = (typeof keyVal[1] != "undefined") ? keyVal[1] : keyVal[1];
            }
        }
    };
    URLHash.getObject = function (convertToLower, manualHashValue) {
        if (convertToLower === void 0) { convertToLower = false; }
        if (manualHashValue === void 0) { manualHashValue = ""; }
        var returnValue = {};
        var hash = location.hash;
        if (manualHashValue != "") {
            hash = manualHashValue;
        }
        if (hash.indexOf("#") == 0) {
            hash = location.hash.slice(1);
        }
        if ((hash || "").length > 0) {
            var pieces = void 0;
            if (convertToLower) {
                pieces = hash.toLowerCase().split("&");
            }
            else {
                pieces = hash.split("&");
            }
            // process each query pair
            for (var i = 0; i < pieces.length; i++) {
                var parts = pieces[i].split("=");
                if (parts.length < 2) {
                    parts.push("");
                }
                returnValue[decodeURIComponent(parts[0].replace(/\+/g, " "))] = decodeURIComponent(parts[1].replace(/\+/g, " "));
            }
        }
        return returnValue;
    };
    return URLHash;
}());
//# sourceMappingURL=URLHash.js.map;
var ConsumerProfile;
(function (ConsumerProfile) {
    var UserAccountSettings = /** @class */ (function () {
        function UserAccountSettings() {
        }
        UserAccountSettings.clear = function () {
            ConsumerProfile.UserAccountSettings.UserHashId = "";
        };
        UserAccountSettings.getLoginAttemptCount = function () {
            ConsumerProfile.UserAccountSettings.InvalidLoginCount = parseInt(SessionStorage.LoginAttempts.getWithKey("InvalidLoginCount-" + $("#signInEmailTxt").val()));
            if (isNaN(ConsumerProfile.UserAccountSettings.InvalidLoginCount)) {
                ConsumerProfile.UserAccountSettings.InvalidLoginCount = 0;
            }
        };
        UserAccountSettings.setLoginAttemptCount = function (count, key) {
            SessionStorage.LoginAttempts.save(count.toString(), "InvalidLoginCount-" + key);
            ConsumerProfile.UserAccountSettings.InvalidLoginCount = count;
        };
        UserAccountSettings.refreshUserAccountSettings = function (Consumer) {
            var _a, _b, _c;
            //ConsumerProfile.UserAccountSettings.CREA_mail_updates = Consumer.CREA_mail_updates;
            //ConsumerProfile.UserAccountSettings.REALTOR_mail_updates = Consumer.REALTOR_mail_updates;
            ConsumerProfile.UserAccountSettings.REALTOR_mail = Consumer.REALTOR_mail;
            ConsumerProfile.UserAccountSettings.EmailRealtorConfirmation = Consumer.EmailRealtorConfirmation;
            ConsumerProfile.UserAccountSettings.UserHashId = Consumer.HashUID;
            ConsumerProfile.UserAccountSettings.UID = Consumer.UID;
            if (((_b = (_a = Consumer === null || Consumer === void 0 ? void 0 : Consumer.user) === null || _a === void 0 ? void 0 : _a.Notifications) === null || _b === void 0 ? void 0 : _b.favourite) && Consumer.user.Notifications.favourite.length > 0) {
                ConsumerProfile.UserAccountSettings.FavNotificationsEnabled = $.grep(Consumer.user.Notifications.favourite, function (item) {
                    return item.method == NotificationMethod.Email.toString();
                }).length > 0;
            }
            if (((_c = Consumer === null || Consumer === void 0 ? void 0 : Consumer.user) === null || _c === void 0 ? void 0 : _c.Searches) && Consumer.user.Searches.length > 0) {
                ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled = $.grep(Consumer.user.Searches, function (item) {
                    return item.notifications && $.grep(item.notifications, function (val) { return val.method == NotificationMethod.Email; }).length > 0;
                }).length > 0;
            }
            if (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled || ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled || ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled) {
                ConsumerProfile.UserAccountSettings.NotificationsEnabled = true;
            }
        };
        //static CREA_mail_updates: boolean = false;
        //static REALTOR_mail_updates: boolean = false;
        UserAccountSettings.REALTOR_mail = false;
        UserAccountSettings.EmailRealtorConfirmation = false;
        UserAccountSettings.NotificationsEnabled = false;
        UserAccountSettings.FavNotificationsEnabled = false;
        UserAccountSettings.CompareNotificationsEnabled = false;
        UserAccountSettings.SavedSearchNotificationsEnabled = false;
        UserAccountSettings.FavouriteLimit = 150;
        UserAccountSettings.CompareLimit = 5;
        UserAccountSettings.SearchLimit = 50;
        UserAccountSettings.HasNotifications = false;
        UserAccountSettings.Notifications = null;
        UserAccountSettings.UserHashId = '';
        UserAccountSettings.UID = '';
        UserAccountSettings.InvalidLoginCount = 0;
        return UserAccountSettings;
    }());
    ConsumerProfile.UserAccountSettings = UserAccountSettings;
})(ConsumerProfile || (ConsumerProfile = {}));
//# sourceMappingURL=UserAccountSettings.js.map;
var Utilities;
(function (Utilities) {
    /**
    * Generate a unique string
    */
    function GenerateUID() {
        var number = Math.random(); // 0.9394456857981651
        number.toString(36); // '0.xtis06h6'
        var id = number.toString(36).substr(2, 9); // 'xtis06h6'
        return id;
    }
    Utilities.GenerateUID = GenerateUID;
    ///**
    // * Should only be using this as a last ditch effort - super hacky. Created for dealing with switching to list view only once google map's bounds are set and retrievable ('idle' event call back isn't reliable).
    // * @param readyCheck
    // * @param callback
    // * @param name
    // * @param attempts
    // * @param interval
    // */
    //export function waitFor(readyCheck: () => boolean, callback: () => void, name: string, attempts, interval: number) {
    //    let attemptCount: number = 0;
    //    let interValState: number;
    //    interValState = window.setInterval(function () {
    //        if (readyCheck()) {
    //            clearInterval(interValState);
    //            callback();
    //            Logging.Debug("waitFor(" + name + ") complete");
    //        } else if (attemptCount >= attempts) {
    //            clearInterval(interValState);
    //            Logging.Error("waitFor(" + name + ") timed out");
    //        }
    //        Logging.Debug("Waiting for " + interval.toString() + "ms for true state (" + name + ")");
    //        attemptCount++;
    //    }, interval);
    //}
    /**
     * returns the index of the value specified in the arrray specified (case insensitive). -1 returned if not found.
     * @param value
     * @param array
     */
    function indexOfValue(value, array) {
        if (array != null && array.length > 0) {
            for (var i = 0; i < array.length; i++) {
                if (array[i].toLowerCase() == value.toLowerCase()) {
                    return i;
                }
            }
        }
        return -1;
    }
    Utilities.indexOfValue = indexOfValue;
    ///**
    // * Creates a numeric hash based on the passed in string (see: https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery)
    // * @param value
    // */
    //export function createHash(value: string): number {
    //    let hash: number = 0;
    //    let i: number;
    //    let chr: number;
    //    if (value.length === 0) return hash;
    //    for (i = 0; i < value.length; i++) {
    //        chr = value.charCodeAt(i);
    //        hash = ((hash << 5) - hash) + chr;
    //        hash |= 0; // Convert to 32bit integer
    //    }
    //    return hash;
    //}
    /**
     * Replaces accented characters with their non accented counterparts (ie. Québec = Quebec )
     * @param value
     */
    function removeAccents(value) {
        var accents = 'ÀÁÂÃÄÅàáâãäåÒÓÔÕÕÖØòóôõöøÈÉÊËèéêëðÇçÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠšŸÿýŽž';
        var accentsOut = "AAAAAAaaaaaaOOOOOOOooooooEEEEeeeeeCcDIIIIiiiiUUUUuuuuNnSsYyyZz";
        var charArray = value.split('');
        var strLen = value.length;
        var i, x;
        for (i = 0; i < strLen; i++) {
            if ((x = accents.indexOf(charArray[i])) != -1) {
                charArray[i] = accentsOut[x];
            }
        }
        return charArray.join('');
    }
    Utilities.removeAccents = removeAccents;
    function removeBlankProperties(object) {
        var returnValue = object;
        for (var property in returnValue) {
            if (object.hasOwnProperty(property) && (returnValue[property] || '') == '') {
                delete returnValue[property];
            }
        }
        return returnValue;
    }
    Utilities.removeBlankProperties = removeBlankProperties;
    /**
     *  https://stackoverflow.com/questions/27078285/simple-throttle-in-js
        Returns a function, that, when invoked, will only be triggered at most once
         during a given window of time. Normally, the throttled function will run
         as much as it can, without ever going more than once per `wait` duration;
         but if you'd like to disable the execution on the leading edge, pass
         `{leading: false}`. To disable execution on the trailing edge, ditto.
     * @param func
     * @param wait
     * @param options
     */
    function throttle(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options)
            options = {};
        var later = function () {
            previous = options.leading === false ? 0 : Date.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout)
                context = args = null;
        };
        return function () {
            var now = Date.now();
            if (!previous && options.leading === false)
                previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
                previous = now;
                result = func.apply(context, args);
                if (!timeout)
                    context = args = null;
            }
            else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    }
    Utilities.throttle = throttle;
    function escapeRegExp(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
    Utilities.escapeRegExp = escapeRegExp;
    function trimEnd(val, trimVal) {
        var pattern = "^(" + escapeRegExp(trimVal) + ")+|(" + escapeRegExp(trimVal) + ")+$";
        var regex = new RegExp(pattern, "g");
        var returnValue = val.replace(regex, '');
        return returnValue;
    }
    Utilities.trimEnd = trimEnd;
    function hash(val) {
        var hash = 0, i, chr;
        if (val.length === 0)
            return hash;
        for (i = 0; i < val.length; i++) {
            chr = val.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    Utilities.hash = hash;
    function getFormInputValue(element) {
        var val = (element.checkExists().val() || "").toString();
        if (val == ' ') {
            val = '';
        }
        ;
        return val;
    }
    Utilities.getFormInputValue = getFormInputValue;
    /**
     * Translates listing details urls that are mode ambiguous (eg. /listing/ or /Inscription/ and converts them to the current mode.
     * @param relativeURL
     */
    function ConvertModelessListingDetailsURL(relativeURL) {
        var returnValue = relativeURL;
        returnValue = returnValue.replace("Listing/", ApplicationState.ApplicationModeString + "/");
        returnValue = returnValue.replace("Inscription/", ApplicationState.ApplicationModeString + "/");
        return returnValue;
    }
    Utilities.ConvertModelessListingDetailsURL = ConvertModelessListingDetailsURL;
    //Check if one string ends with another
    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    Utilities.endsWith = endsWith;
    /**
     * Handle single quotes and backslash escapes
     * @param val
     */
    function cleanJSONValue(val) {
        return (val || '').replace(/"/g, "'").replace(/\\/g, "\\\\");
    }
    Utilities.cleanJSONValue = cleanJSONValue;
    /**
     * Pass in an object name space and it's root and get back it's 'class' see:https://stackoverflow.com/questions/1366127/instantiate-a-javascript-object-using-a-string-to-define-the-class-name
     * @param namespace eg. Controls.Phone.ListingCard
     * @param root
     */
    function stringToFunction(namespace) {
        var arr = namespace.split(".");
        var fn = (window || this);
        for (var i = 0, len = arr.length; i < len; i++) {
            fn = fn[arr[i]];
            if (!fn) {
                Logging.Error("'" + arr[i] + "' namespace not found");
            }
        }
        if (typeof fn !== "function") {
            throw new Error("stringToFunction can't seem to find function: " + namespace);
        }
        return fn;
    }
    Utilities.stringToFunction = stringToFunction;
    ;
    /**
     * Pass in a query/hash parameter name and return the value (string if doesn't exist)
     * @param name
     * @param URLParamType
     */
    function getParamValueByName(name, type) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&#]" + name + "=([^&#]*)", 'i'), results = regex.exec(type === URLParamType.Query ? location.search : location.hash);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    Utilities.getParamValueByName = getParamValueByName;
    /**
     * Takes a query string and returns an object.
     * @param queryString
     */
    function getObjectFromQueryString(queryString) {
        queryString = queryString.replace(/(\#|\?)+/g, "&");
        var returnValue = {};
        var regex = /([^&=]+)=([^&]*)/g;
        var regexResults;
        // Creates a map with the query string parameters
        while (regexResults = regex.exec(queryString)) {
            try {
                returnValue[decodeURIComponent(regexResults[1])] = decodeURIComponent(regexResults[2]).replace(/\+/g, " ");
            }
            catch (err) {
                //Firefox auto decodes and escapes url elements so we need to use unescape instead
                returnValue[decodeURI(regexResults[1])] = decodeURI(regexResults[2]);
            }
        }
        return returnValue;
    }
    Utilities.getObjectFromQueryString = getObjectFromQueryString;
    /**
     * Deletes the specified property on the specified object (CASE INSENSITIVE)
     * @param obj Object
     * @param propertyName Property name to delete
     */
    function DeleteProperty(obj, propertyName) {
        for (var objPropName in obj) {
            if (obj.hasOwnProperty(objPropName) && objPropName.toLowerCase() == propertyName.toLowerCase()) {
                delete obj[objPropName];
                break;
            }
        }
        return obj;
    }
    Utilities.DeleteProperty = DeleteProperty;
    function isGoogleMapsDefined() {
        return typeof google === 'object' && typeof google.maps === 'object';
    }
    Utilities.isGoogleMapsDefined = isGoogleMapsDefined;
    /**
     * Returns if the path passed in is the map mask we use when we show polygons.
     * @param paths
     */
    function isMapMask(paths) {
        if (paths && paths.length == 5) {
            for (var i = 0; i < paths.length; i++) {
                var longitude = paths[i].lng();
                if (longitude != 0 && longitude != 180 && longitude != -180) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    Utilities.isMapMask = isMapMask;
    /**
     * Given a google.maps.Polygon will return the outer google.maps.LatLngBounds. Initially added to set bestview of dissemination areas.
     * @param polygon
     */
    function getPolygonBounds(polygons) {
        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < polygons.length; i++) {
            var paths = polygons[i].getPaths();
            paths.forEach(function (path) {
                var ar = path.getArray();
                var isMask = isMapMask(ar);
                if (isMask == false) {
                    for (var j = 0, l = ar.length; j < l; j++) {
                        bounds.extend(ar[j]);
                    }
                }
            });
        }
        return bounds;
    }
    Utilities.getPolygonBounds = getPolygonBounds;
    function HTMLDecode(value) {
        try {
            return HTMLEncode(decodeURIComponent(value));
        }
        catch (err) {
            return HTMLEncode(value);
        }
    }
    Utilities.HTMLDecode = HTMLDecode;
    /**
     * Returns the text value of an html string (eg. %reg; -> ®)
     * @param value
     */
    function HTMLDecode2(value) {
        return $('<div/>').html(value).text();
    }
    Utilities.HTMLDecode2 = HTMLDecode2;
    function HTMLEncode(value) {
        return $('<div/>').text(DecodeString(value)).html().replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
    Utilities.HTMLEncode = HTMLEncode;
    function EncodeString(value) {
        return encodeURIComponent(value).replace(/'/g, "%27");
    }
    Utilities.EncodeString = EncodeString;
    function DecodeString(value) {
        return decodeURIComponent(value).replace(/%27/g, "'");
    }
    Utilities.DecodeString = DecodeString;
    function IsEncoded(value) {
        return value != DecodeString(value);
    }
    Utilities.IsEncoded = IsEncoded;
    /**
     * Limits the wording based on the SEO requirement
     * @param characterLimit
     * @param text
     * @param appendDotsAtEnd
     */
    function LimitWording(characterLimit, text, appendDotsAtEnd) {
        text = text.replace(/\n/, "");
        var regex = new RegExp("^(.{0," + characterLimit + "})(?: |$)", "gi");
        var match = text.match(regex);
        if (text.length > characterLimit && appendDotsAtEnd) {
            return match[0] + "...";
        }
        else {
            return match[0];
        }
    }
    Utilities.LimitWording = LimitWording;
    /**
    * Display an error message or warning in the given field
    * @param id
    * @param messsage
    * @param replacementVals
    * @param showAtTopOfField
    * @param qtipClass
    *
    */
    function ErrorOutField(id, message, replacementVals, showAtTopOfField, qtipClass) {
        if (replacementVals === void 0) { replacementVals = ""; }
        if (showAtTopOfField === void 0) { showAtTopOfField = false; }
        if (qtipClass === void 0) { qtipClass = ""; }
        message = message || '';
        if (replacementVals && replacementVals.length > 0) {
            for (var idx = 0; idx < replacementVals.length; idx++) {
                message = message.replace('{' + idx + '}', replacementVals[idx]);
            }
        }
        if (showAtTopOfField) {
            $('#' + id).qtip({
                content: message,
                position: {
                    my: 'bottom left',
                    at: 'top left',
                    target: $('#' + id)
                },
                style: {
                    classes: 'qtip-red ' + qtipClass
                },
                show: {
                    event: 'focus'
                },
                hide: {
                    event: 'blur'
                }
            });
        }
        else {
            $('#' + id).qtip({
                content: message,
                position: {
                    my: 'top left',
                    at: 'bottom left',
                    target: $('#' + id)
                },
                style: {
                    classes: 'qtip-red ' + qtipClass
                },
                show: {
                    event: 'focus'
                },
                hide: {
                    event: 'blur'
                }
            });
        }
        if ($('#' + id).parent().hasClass('m_frm_input_wrp')) {
            $('#' + id).parent().addClass('errorQtipField');
        }
        else {
            $('#' + id).addClass('errorQtipField'); //'border', '3px solid #F69791');
        }
        $('#' + id).qtip("show");
    }
    Utilities.ErrorOutField = ErrorOutField;
    /**
     * Used as an argument to JSON.parse to 'revive' date variables to actual dates and not their default strings (see: https://stackoverflow.com/questions/4511705/how-to-parse-json-to-receive-a-date-object-in-javascript)
     * @param key
     * @param value
     */
    function JSONDateReviver(key, value) {
        var a;
        if (typeof value === 'string') {
            a = /\d{4}-\d{1,2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/.exec(value); //"2017-10-04T17:39:15.633Z"
            if (a) {
                return new Date(a[0]);
            }
        }
        return value;
    }
    Utilities.JSONDateReviver = JSONDateReviver;
    /**
     * Returns an array of specified objects.
     * @param stringVal JSON string of objects
     */
    function CreateObjectArrayFromJSONString(stringVal, factory) {
        var returnValue = [];
        if (stringVal != "") {
            var JSONObjects = JSON.parse(stringVal, Utilities.JSONDateReviver);
            for (var i = 0; i < JSONObjects.length; i++) {
                //let val: T = <T>{};
                //let JSONObject = JSONObjects[i];
                //for (var prop in JSONObject) val[prop] = JSONObject[prop];
                returnValue.push(factory(JSONObjects[i]));
            }
        }
        return returnValue;
    }
    Utilities.CreateObjectArrayFromJSONString = CreateObjectArrayFromJSONString;
    /**
     * Creates an object from a JSON string of that object
     * @param stringVal JSON string
     */
    function CreateObjectFromJSONString(stringVal, factory) {
        var returnValue = null;
        if (stringVal != null && stringVal != '') {
            //let val: T = <T>{};
            var JSONObject = JSON.parse(stringVal);
            returnValue = factory(JSONObject);
            //for (var prop in JSONObject) returnValue[prop] = JSONObject[prop];
        }
        return returnValue;
    }
    Utilities.CreateObjectFromJSONString = CreateObjectFromJSONString;
    /**
     *
     * @param timestamp Timestamp as date.getTime()
     * @param days
     */
    function isOlderThan(timestamp, days) {
        if (days === void 0) { days = 30; }
        var XDaysAgo = new Date().getTime() - (days * 24 * 60 * 60 * 1000);
        return timestamp < XDaysAgo;
    }
    Utilities.isOlderThan = isOlderThan;
    /**
     * Return the short month string of the passed in month (month is zero based like date.getMonth, so 0 = Jan)
     * @param month
     * @param cultureID
     */
    function getShortMonthString(month, cultureID) {
        var monthNames;
        if (cultureID == 2) {
            monthNames = ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."];
        }
        else {
            monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        }
        return monthNames[month];
    }
    Utilities.getShortMonthString = getShortMonthString;
    function parseAPIDateString(date, isUTCDate) {
        if (isUTCDate === void 0) { isUTCDate = false; }
        var returnValue = new Date();
        var dateStyle1 = new RegExp(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/); //Mainly french eg. 2018-06-02 11:30:00     
        var dateStyle2 = new RegExp(/(\d{1,2})\/(\d{1,2})\/(\d{4}) (\d{1,2}):(\d{2}):(\d{2}) ([a|p]m)/i); //Mainly English eg. 01/06/2018 11:30:00 AM  
        var regexGroups = { Day: -1, Month: -1, Year: -1, Hour: -1, Minute: -1, Second: -1, TimePeriod: -1 };
        if (dateStyle1.test(date)) {
            regexGroups.Year = 1;
            regexGroups.Month = 2;
            regexGroups.Day = 3;
            regexGroups.Hour = 4;
            regexGroups.Minute = 5;
            regexGroups.Second = 6;
            var match = dateStyle1.exec(date);
            if (isUTCDate) {
                returnValue = new Date(Date.UTC(Number(match[regexGroups.Year]), Number(match[regexGroups.Month]) - 1, Number(match[regexGroups.Day]), Number(match[regexGroups.Hour]), Number(match[regexGroups.Minute]), Number(match[regexGroups.Second])));
            }
            else {
                returnValue = new Date(Number(match[regexGroups.Year]), Number(match[regexGroups.Month]) - 1, Number(match[regexGroups.Day]), Number(match[regexGroups.Hour]), Number(match[regexGroups.Minute]), Number(match[regexGroups.Second]));
            }
        }
        else if (dateStyle2.exec(date)) {
            regexGroups.Day = 1;
            regexGroups.Month = 2;
            regexGroups.Year = 3;
            regexGroups.Hour = 4;
            regexGroups.Minute = 5;
            regexGroups.Second = 6;
            regexGroups.TimePeriod = 7;
            var match = dateStyle2.exec(date);
            var hours = Number(match[regexGroups.Hour]);
            if (match[regexGroups.TimePeriod].toLowerCase() == "pm" && hours != 12) {
                hours += 12;
            }
            if (isUTCDate) {
                returnValue = new Date(Date.UTC(Number(match[regexGroups.Year]), Number(match[regexGroups.Month]) - 1, Number(match[regexGroups.Day]), hours, Number(match[regexGroups.Minute]), Number(match[regexGroups.Second])));
            }
            else {
                returnValue = new Date(Number(match[regexGroups.Year]), Number(match[regexGroups.Month]) - 1, Number(match[regexGroups.Day]), hours, Number(match[regexGroups.Minute]), Number(match[regexGroups.Second]));
            }
        }
        return returnValue;
    }
    Utilities.parseAPIDateString = parseAPIDateString;
    function loadScript(path, callback, includeVersionParam) {
        if (includeVersionParam === void 0) { includeVersionParam = false; }
        var s = document.createElement('script');
        s.type = "text/javascript";
        s.async = true;
        s.defer = true;
        s.src = path;
        if (includeVersionParam)
            s.src += "?ver=" + ApplicationState.BuildVersion + "&k=" + ApplicationConfig.StaticFileCacheParam;
        if (callback != null) {
            s.addEventListener('load', function (e) { callback(); }, false);
        }
        var head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    }
    Utilities.loadScript = loadScript;
    function loadStyle(path, callback, includeVersionParam) {
        if (includeVersionParam === void 0) { includeVersionParam = false; }
        var s = document.createElement('link');
        s.type = "text/css";
        s.rel = "stylesheet";
        s.href = path;
        if (includeVersionParam)
            s.href += "?ver=" + ApplicationState.BuildVersion + "&k=" + ApplicationConfig.StaticFileCacheParam;
        if (callback != null) {
            s.addEventListener('load', function (e) { callback(); }, false);
        }
        var head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    }
    Utilities.loadStyle = loadStyle;
    var commercialPropertyTypes = ["304", "305", "306", "307", "309", "311", "312"];
    function getModeFromPropertyType(propertyTypeId) {
        return commercialPropertyTypes.indexOf(propertyTypeId) > -1 ? ApplicationModes.Commercial : ApplicationModes.Residential;
    }
    Utilities.getModeFromPropertyType = getModeFromPropertyType;
    /**
     * Return the rounded up or down rating for displaying rating stars (0-24% is empty star, 25-74% is ½ star, and 75%+ is full star)
     * @param rating
     */
    function roundRankRating(rating) {
        //out of 5, ie: 4.78
        var int = Math.floor(rating);
        var decimal = parseFloat((rating - Math.floor(rating)).toFixed(2)) * 100;
        if (decimal <= 24) {
            decimal = 0;
        }
        else if (decimal >= 25 && decimal <= 74) {
            decimal = 0.5;
        }
        else {
            decimal = 1;
        }
        return int + decimal;
    }
    Utilities.roundRankRating = roundRankRating;
    /**
     * Return the rounded up or down rating for displaying rating stars (0-24% is empty star, 25-74% is ½ star, and 75%+ is full star)
     * @param rating
     */
    function roundRealSatisfiedRating(rating) {
        //out of 100, ie: 95.6
        rating = rating / 20;
        var int = Math.floor(rating);
        var decimal = parseFloat((rating - Math.floor(rating)).toFixed(2)) * 100;
        if (decimal <= 24) {
            decimal = 0;
        }
        else if (decimal >= 25 && decimal <= 74) {
            decimal = 0.5;
        }
        else {
            decimal = 1;
        }
        return int + decimal;
    }
    Utilities.roundRealSatisfiedRating = roundRealSatisfiedRating;
    /**
     * Return case sensitive Account Page Section
     * @param section
     */
    function formatAccountSection(section) {
        var accountSection = section;
        $.each(AccountPages, function (index, thesection) {
            if (thesection.toLowerCase() == section) {
                accountSection = thesection;
            }
        });
        return accountSection;
    }
    Utilities.formatAccountSection = formatAccountSection;
    /**
    * Contact Us page additional user info
    *
    */
    function buildEmailFeedbackMessage(name, email) {
        var parser = new UAParser();
        parser.setUA(navigator.userAgent);
        var result = parser.getResult();
        var Delimiter = "linebreak";
        var EmailInfoAddendum = "";
        EmailInfoAddendum = 'From' + ' : ' + name + Delimiter;
        EmailInfoAddendum += 'Email' + ' : ' + email + Delimiter;
        if (result.device.type != undefined || result.device.model != undefined || result.device.vendor != undefined) {
            EmailInfoAddendum += 'Device : ' + ' type: ' + result.device.type + ' model: ' + result.device.model + ' vendor: ' + result.device.vendor + Delimiter;
        }
        else {
            EmailInfoAddendum += 'CPU/Details : ' + ' type: ' + result.cpu.architecture + ' Name: ' + result.engine.name + ' version: ' + result.engine.version + Delimiter;
        }
        EmailInfoAddendum += 'Browser : ' + result.browser.name + ' version: ' + result.browser.version + Delimiter;
        EmailInfoAddendum += 'OS : ' + result.os.name + ' version: ' + result.os.version + Delimiter;
        //EmailInfoAddendum += 'Page Mode: ' + $("#PageMode").val(); //+ 'Page: ' + document.referrer + Delimiter;
        EmailInfoAddendum += 'User: ' + Utilities.HTMLEncode(LocalAccountStorage.ConsumerDisplayName.get()) + Delimiter + Delimiter;
        EmailInfoAddendum += 'Email Body : ' + Delimiter;
        return EmailInfoAddendum;
    }
    Utilities.buildEmailFeedbackMessage = buildEmailFeedbackMessage;
    /**
     * Close child window
     * @param showMsg
     * @param MsgText?
     */
    function closeOpener(showMsg, MsgText) {
        if (showMsg === void 0) { showMsg = false; }
        if (window.opener != null) {
            window.close();
            if (showMsg) {
                window.opener.showMessage(MsgText);
            }
        }
        else {
            if (showMsg) {
                showMessage(MsgText);
            }
        }
    }
    Utilities.closeOpener = closeOpener;
    function getHashCode(value) {
        var hash = 0, i, chr;
        if (value.length === 0)
            return hash;
        for (i = 0; i < value.length; i++) {
            chr = value.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    Utilities.getHashCode = getHashCode;
    /**
     * Function to convert R6 office/realtor results urls to R7 version.
     * @param hash
     */
    function CleanRealtorSearchHash(hash) {
        var object = URLHash.getObject(true, hash);
        delete object["applicationid"];
        delete object["recordsperpage"];
        delete object["cultureid"];
        delete object["v"];
        if (object["page"] || "" == "") {
            object["page"] = "1";
        }
        return $.param(object);
    }
    Utilities.CleanRealtorSearchHash = CleanRealtorSearchHash;
    /**
    * Description: Function that removes the query parameters from a URL
    *   @param {string} url - HTTP URL
    */
    function cleanQueryUrl(url) {
        var cleanUrl = url;
        var regEx = new RegExp(/([&?][^&?=]+=[^&?]+)+/ig);
        cleanUrl = cleanUrl.replace(regEx, "");
        return cleanUrl;
    }
    Utilities.cleanQueryUrl = cleanQueryUrl;
    /**
    * Description: Function that returns an associative array
    * containing the URL parameters [key],[Value]
    *   @param {string} url - URL
    */
    function getQueryObjUrl(url, caseSensitive) {
        if (caseSensitive === void 0) { caseSensitive = true; }
        var objQueryUrl = {};
        var pattern = "[&?]([^&?=]+)=?([^&?]*)";
        var regEx = caseSensitive == false ? new RegExp(pattern, "gi") : new RegExp(pattern, "g");
        //Loop through all parameters and build the object
        var matches = url.match(regEx);
        //List of parameters
        if (matches != null && matches.length > 0) {
            for (var x = 0; x < matches.length; x++) {
                //Get the Key, Value pair of the match and store it
                var matchValue = matches[x];
                var match = new RegExp(pattern).exec(matchValue);
                if (match != null && match.length == 3) {
                    if (match[1] != null && match[1].length > 0 && caseSensitive) {
                        objQueryUrl[match[1]] = match[2];
                    }
                    else if (match[1] != null && match[1].length > 0 && !caseSensitive) {
                        objQueryUrl[match[1].toLowerCase()] = match[2].toLowerCase();
                    }
                }
            }
        }
        return objQueryUrl;
    }
    Utilities.getQueryObjUrl = getQueryObjUrl;
    /**
    * Description: Function removing a set of query parameters giving in.
    *   @param {object} VideoParam  -  HTTP URL query parameters
    *   @param {object} RemoveParam -  HTTP URL query parameters to be removed
    */
    function removeQueryParams(param, RemoveParam) {
        var retObjParam = param;
        for (var element in RemoveParam) {
            if (param[element] != null) {
                delete retObjParam[element];
            }
        }
        return retObjParam;
    }
    Utilities.removeQueryParams = removeQueryParams;
    /**
    * Description: Function overwriting a set of query parameters giving in.
    *   @param {object} param  -  HTTP URL query parameters
    *   @param {object} addParam -  HTTP URL query parameters to be added
    */
    function addQueryParams(param, addParam, overwriteParam) {
        if (overwriteParam === void 0) { overwriteParam = false; }
        var retObjParam = param;
        for (var element in addParam) {
            if (overwriteParam || retObjParam[element] == null) {
                retObjParam[element] = addParam[element];
            }
        }
        return retObjParam;
    }
    Utilities.addQueryParams = addQueryParams;
    /**
    * Description: Function returning a URL querystring format out of its object array previously created
    *   @param {object} params - URL query string object format
    */
    function getURLQueryParamFormat(params, encodeParamValue) {
        if (encodeParamValue === void 0) { encodeParamValue = false; }
        var retURLQuery = "?";
        for (var param in params) {
            if (params[param] != null && params[param].toString().length > 0) {
                retURLQuery += param + "=" + (encodeParamValue ? encodeURIComponent(params[param]) : params[param]) + "&";
            }
            else {
                retURLQuery += param + "&";
            }
        }
        return retURLQuery.substring(0, retURLQuery.length - 1);
    }
    Utilities.getURLQueryParamFormat = getURLQueryParamFormat;
    /**
    * Description: Function that removes duplicated params and return a final URL with its parameters
    * @param string} url - url to remove duplicated parameters
    */
    function removeDuplicateParamFrom(url, caseSensitiveParam) {
        if (caseSensitiveParam === void 0) { caseSensitiveParam = true; }
        //Get the starting url before parameters
        var startingUrl;
        var regExParams = new RegExp("[?][^?]+", "gi");
        startingUrl = url.replace(regExParams, "");
        //Read the query params from the current url
        var objParam = Utilities.getQueryObjUrl(url, caseSensitiveParam);
        //Remove duplicated parameters that once lowercased, they are the same
        var objTemp = {}; //Temporary key object holder
        for (var obj in objParam) {
            if (objTemp[obj.toLowerCase()] == true) {
                delete objParam[obj];
            }
            else {
                objTemp[obj.toLowerCase()] = true;
            }
        }
        return startingUrl + Utilities.getURLQueryParamFormat(objParam);
    }
    Utilities.removeDuplicateParamFrom = removeDuplicateParamFrom;
    /**
    * Description: Function that gets a finalized version of the query parameters the video should have when
    * embed
    *   @param {object} currentVideoParams - current video params
    *   @param {object} removeParams - params to be removed
    *   @param {object} additionalParams - additional params
    */
    function getFinalEmbedQueryParam(currentVideoParams, removeParams, additionalParams, overwriteParam) {
        if (overwriteParam === void 0) { overwriteParam = false; }
        var retObjParam = currentVideoParams;
        retObjParam = addQueryParams(retObjParam, additionalParams, overwriteParam);
        retObjParam = removeQueryParams(retObjParam, removeParams);
        return retObjParam;
    }
    Utilities.getFinalEmbedQueryParam = getFinalEmbedQueryParam;
    //Resize Image URL from WP to a desired size
    function resizeWPImageUrl(resizeContainer, imageUrl, containerWidth, containerHeight, widthOnlyResize) {
        if (imageUrl === void 0) { imageUrl = ""; }
        if (containerWidth === void 0) { containerWidth = 0; }
        if (containerHeight === void 0) { containerHeight = 0; }
        if (widthOnlyResize === void 0) { widthOnlyResize = false; }
        //Store the existing parameters
        var cleanUrl = Utilities.cleanQueryUrl(imageUrl);
        var existingParams = Utilities.getQueryObjUrl(imageUrl);
        delete existingParams['resize'];
        delete existingParams['fit'];
        var ResizePattern = /[?](fit|resize)=([0-9]+)(([%]2C)|,)([0-9]+).*/i;
        var matchesUrls = imageUrl.match(ResizePattern);
        if (widthOnlyResize && containerWidth > 0 && containerHeight == 0) {
            existingParams['w'] = containerWidth;
        }
        else if (matchesUrls != null && matchesUrls.length > 0) {
            var imgHeight = parseInt(matchesUrls[5]);
            var imgWidth = parseInt(matchesUrls[2]);
            var ratioHW = imgHeight / imgWidth;
            existingParams['resize'] = containerWidth + "," + (containerHeight > 0 ? containerHeight : parseInt((containerWidth * ratioHW).toString()));
        }
        else if (containerWidth > 0 && containerHeight > 0) {
            existingParams['resize'] = containerWidth + "," + containerHeight;
        }
        var finalQueryValue = Utilities.getURLQueryParamFormat(existingParams);
        return cleanUrl + finalQueryValue;
    }
    Utilities.resizeWPImageUrl = resizeWPImageUrl;
    function termOfUseRedirectExec() {
        //Terms of use page?
        var windowStopFunc = function () {
            try {
                var ua = window.navigator.userAgent;
                var msie = ua.indexOf("MSIE ");
                if (msie > -1) {
                    document.execCommand('Stop');
                }
                else {
                    window.stop();
                }
            }
            catch (e) {
                Logging.Error(e);
            }
        };
        var pageToVerify;
        if (ApplicationState.IsMobileDevice) {
            pageToVerify = "/real-estate";
        }
        else {
            pageToVerify = RouteHelper.getURL("terms-of-use");
        }
        if (window.location.pathname == pageToVerify && URLHash.getUrlParameter("previousPage") == "PDP"
            && !ApplicationState.IsMobileDevice) {
            //Already accepted Terms but has initial redirected URL format, go back to listing page
            if (Core.UserNeedsToAcceptTOS() == false) {
                windowStopFunc();
                window.location.replace(Cookie.TargetPage.get());
                return true;
            }
        }
        else if (URLHash.getUrlParameter("previousPage") == "PDP" && URLHash.get("forwardOnly") == "false"
            && ApplicationState.IsMobileDevice && location.pathname.indexOf(pageToVerify) == 0) {
            if (Core.UserNeedsToAcceptTOS() === false) {
                URLHash.set("forwardOnly", "true", false);
                windowStopFunc();
                window.history.go(-1);
                return;
            }
        }
        else if (URLHash.getUrlParameter("previousPage") == "PDP" && URLHash.get("forwardOnly") == "true"
            && ApplicationState.IsMobileDevice && location.pathname.indexOf(pageToVerify) == 0) {
            if (Core.UserNeedsToAcceptTOS() === false) {
                URLHash.set("forwardOnly", "false", false);
                windowStopFunc();
                window.history.go(1);
                return;
            }
        }
        else if (URLHash.getUrlParameter("previousPage") == "PDP" && ApplicationState.IsMobileDevice && location.pathname.indexOf(pageToVerify) == 0) {
            URLHash.set("forwardOnly", "false", false);
            return;
        }
        return false;
    }
    Utilities.termOfUseRedirectExec = termOfUseRedirectExec;
    function CreatePolygonsFromAPIPolygonResult(value) {
        var returnValue = [];
        for (var i = 0; i < value.length; i++) {
            var currentPolygon = value[i];
            var polygonCoords = [];
            for (var j = 0; j < currentPolygon.length; j++) {
                polygonCoords.push(new google.maps.LatLng(Number(currentPolygon[j][0]), Number(currentPolygon[j][1])));
            }
            returnValue.push(new google.maps.Polygon({ paths: polygonCoords }));
        }
        return returnValue;
    }
    Utilities.CreatePolygonsFromAPIPolygonResult = CreatePolygonsFromAPIPolygonResult;
    //export function CreatePolygonsFromSubAreaResult(area: PublicContracts.SubArea): google.maps.Polygon[] {
    //    let returnValue: google.maps.Polygon[] = [];
    //    returnValue = CreatePolygonsFromAPIPolygonResult(area.Polygons);
    //    return returnValue;
    //}
    ///**
    // * Returns the non-google bounding box for polygons passed in. Created for when a user removes polygon filter and we don't want to show all of Canada.
    // * @param area
    // */
    //export function getMaxBoundsFromPolygonArray(area: Array<Array<Array<string>>>): { LatMax: number, LatMin: number, LonMax: number, LonMin: number } {
    //    let returnValue: { LatMax: number, LatMin: number, LonMax: number, LonMin: number } = { LatMax: null, LatMin: null, LonMin: null, LonMax: null };
    //    for (var i = 0; i < area.length; i++) {
    //        let currentPolygon = area[i];
    //        for (var j = 0; j < currentPolygon.length; j++) {
    //            let lat: number = Number(currentPolygon[j][0]);
    //            let lon: number = Number(currentPolygon[j][1]);
    //            if ((returnValue.LatMin || lat) <= lat)
    //                returnValue.LatMin = lat;
    //            if ((returnValue.LatMax || lat) >= lat)
    //                returnValue.LatMax = lat;
    //            if ((returnValue.LonMin || lon) <= lon)
    //                returnValue.LonMin = lat;
    //            if ((returnValue.LonMax || lon) >= lon)
    //                returnValue.LonMax = lon;
    //        }
    //    }
    //    return returnValue;
    //}
    /**
     * Cleans up the API's sub area location property
     * @param name
     */
    function tidyGeoName(name) {
        return name.replace(", Canada", "");
    }
    Utilities.tidyGeoName = tidyGeoName;
    function removeQueryParamsAndReplaceCurrentURL(paramNames) {
        var remove = function () {
            var newURL = removeQueryParamsFromURL(location.href, paramNames);
            if (newURL != location.href) {
                newURL = Utilities.trimEnd(newURL, "?");
                history.replaceState("", document.title, newURL);
            }
        };
        //Make sure load event has fired so GTM has a chance to collect
        if (document.readyState === 'complete') {
            remove();
        }
        else {
            window.addEventListener("load", remove);
        }
    }
    Utilities.removeQueryParamsAndReplaceCurrentURL = removeQueryParamsAndReplaceCurrentURL;
    /**
     * Removes the passed in query sting params from the passed in URL.
     * Based on: https://stackoverflow.com/questions/1634748/how-can-i-delete-a-query-string-parameter-in-javascript
     * @param url
     * @param parameters
     */
    function removeQueryParamsFromURL(url, parameters) {
        //prefer to use l.search if you have a location/link object
        var urlparts = url.split('?');
        var hash = "";
        if (urlparts.length >= 2) {
            var urlParamParts = urlparts[1].split('#');
            var queryString = urlParamParts[0];
            hash = urlParamParts.length == 2 ? urlParamParts[1] : "";
            var parts = queryString.split(/[&;]/g);
            for (var j = 0; j < parameters.length; j++) {
                var prefix = encodeURIComponent(parameters[j]) + '=';
                //reverse iteration as may be destructive
                for (var i = parts.length; i-- > 0;) {
                    //idiom for string.startsWith
                    if (parts[i].lastIndexOf(prefix, 0) !== -1) {
                        parts.splice(i, 1);
                    }
                }
            }
            return urlparts[0] + (parts.length > 0 ? '?' + parts.join('&') : '') + (hash == "" ? "" : "#" + hash);
        }
        return url;
    }
    Utilities.removeQueryParamsFromURL = removeQueryParamsFromURL;
    function removeQueryParam(url, param) {
        return removeQueryParamsFromURL(url, [param]);
    }
    Utilities.removeQueryParam = removeQueryParam;
    /**
    * Description: Handy for removing query from url without page load
    *    @param {string} name - optional name of query param to remove, otherwise remove all
    */
    function removeQueryViaState(name) {
        var _url = window.location.href;
        if (name != null) {
            _url = removeQueryParam(_url, name);
        }
        else {
            _url = window.location.pathname;
        }
        window.history.replaceState({ title: document.title, id: (ApplicationState.IsMobileDevice ? MasterPages.Phone.smoothStateElementID : "") }, document.title, _url);
    }
    Utilities.removeQueryViaState = removeQueryViaState;
    /**
    * Description: returns Consumer Hash Id if signed in or GUID for guest
    * Changed from UID since AES encryption produces unique values
    */
    function getUserId() {
        if (ApplicationState.UserIsSignedIn) {
            return ConsumerProfile.UserAccountSettings.UserHashId;
        }
        else {
            return Cookie.GUID.get('');
        }
    }
    Utilities.getUserId = getUserId;
    /**
     * Returns if the user is a Safari user using Private Browsing mode (turns out local/session storage is disabled in Safari when in Private Browsing mode).
     */
    function IsSafariUserInPrivateMode() {
        return ApplicationState.IsSafari && LocalStorage.IsEnabled() == false;
    }
    Utilities.IsSafariUserInPrivateMode = IsSafariUserInPrivateMode;
    /**
     * Takes a base urls and a query string (eg. "Param=Value&Param2=Value2") and appends.
     * @param url
     * @param queryString
     */
    function appendQueryStringParams(url, queryString) {
        return url + (url.indexOf("?") > -1 ? "&" + queryString : "?" + queryString);
    }
    Utilities.appendQueryStringParams = appendQueryStringParams;
    /**
     * Returns true if the passed in URL is a listing details url;
     * @param url
     */
    function isPDPURL(url) {
        return new RegExp(/(^|\/)(real-estate|immobilier)\/[0-9]+\//).test(url);
    }
    Utilities.isPDPURL = isPDPURL;
    /**
    * Returns true if the passed in URL is a map url;
    * @param url
    */
    function isMapURL(url) {
        return url.indexOf(RouteHelper.getURL("map")) > -1;
    }
    Utilities.isMapURL = isMapURL;
    /**
     * Will return array of JS control classes fetched via ApplicationState.Current.Controls
     * eg. Utilities.getAllControls(Controls.Desktop.SocialShare)
     * @param TCtor
     */
    function getAllControls(TCtor) {
        var returnValue = [];
        if (ApplicationState.Current.Controls) {
            for (var property in ApplicationState.Current.Controls) {
                if (ApplicationState.Current.Controls.hasOwnProperty(property)) {
                    if (ApplicationState.Current.Controls[property].constructor.name == TCtor.name) {
                        returnValue.push(ApplicationState.Current.Controls[property]);
                    }
                }
            }
        }
        return returnValue;
    }
    Utilities.getAllControls = getAllControls;
    function CurrencyToDisplayString(currency, showSymbol, onlyShowSymbol) {
        if (showSymbol === void 0) { showSymbol = true; }
        if (onlyShowSymbol === void 0) { onlyShowSymbol = false; }
        var returnVal = "$ CAD";
        if (currency === 'CAD') {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ CAD";
            }
            else {
                returnVal = "CAD";
            }
        }
        if (currency.indexOf("FXAUD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ AUD";
            }
            else {
                returnVal = "AUD";
            }
        }
        if (currency.indexOf("FXBRL") > -1) {
            if (onlyShowSymbol) {
                returnVal = "R$";
            }
            else if (showSymbol) {
                returnVal = "R$ BRL";
            }
            else {
                returnVal = "BRL";
            }
        }
        if (currency.indexOf("FXCNY") > -1) {
            if (onlyShowSymbol) {
                returnVal = "¥";
            }
            else if (showSymbol) {
                returnVal = "¥ CNY";
            }
            else {
                returnVal = "CNY";
            }
        }
        if (currency.indexOf("FXEUR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "€";
            }
            else if (showSymbol) {
                returnVal = "€ EUR";
            }
            else {
                returnVal = "EUR";
            }
        }
        if (currency.indexOf("FXHKD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ HKD";
            }
            else {
                returnVal = "HKD";
            }
        }
        if (currency.indexOf("FXINR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₹";
            }
            else if (showSymbol) {
                returnVal = "₹ INR";
            }
            else {
                returnVal = "INR";
            }
        }
        if (currency.indexOf("FXIDR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "Rp";
            }
            else if (showSymbol) {
                returnVal = "Rp IDR";
            }
            else {
                returnVal = "IDR";
            }
        }
        if (currency.indexOf("FXJPY") > -1) {
            if (onlyShowSymbol) {
                returnVal = "¥";
            }
            else if (showSymbol) {
                returnVal = "¥ JPY";
            }
            else {
                returnVal = "JPY";
            }
        }
        if (currency.indexOf("FXMYR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "RM";
            }
            else if (showSymbol) {
                returnVal = "RM MYR";
            }
            else {
                returnVal = "MYR";
            }
        }
        if (currency.indexOf("FXMXN") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ MXN";
            }
            else {
                returnVal = "MXN";
            }
        }
        if (currency.indexOf("FXNZD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ NZD";
            }
            else {
                returnVal = "NZD";
            }
        }
        if (currency.indexOf("FXNOK") > -1) {
            if (onlyShowSymbol) {
                returnVal = "kr";
            }
            else if (showSymbol) {
                returnVal = "kr NOK";
            }
            else {
                returnVal = "NOK";
            }
        }
        if (currency.indexOf("FXPEN") > -1) {
            if (onlyShowSymbol) {
                returnVal = "S/";
            }
            else if (showSymbol) {
                returnVal = "S/ PEN";
            }
            else {
                returnVal = "PEN";
            }
        }
        if (currency.indexOf("FXRUB") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₽";
            }
            else if (showSymbol) {
                returnVal = "₽ RUB";
            }
            else {
                returnVal = "RUB";
            }
        }
        if (currency.indexOf("FXSAR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "﷼";
            }
            else if (showSymbol) {
                returnVal = "﷼ SAR";
            }
            else {
                returnVal = "SAR";
            }
        }
        if (currency.indexOf("FXSGD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ SGD";
            }
            else {
                returnVal = "SGD";
            }
        }
        if (currency.indexOf("FXZAR") > -1) {
            if (onlyShowSymbol) {
                returnVal = "R";
            }
            else if (showSymbol) {
                returnVal = "R ZAR";
            }
            else {
                returnVal = "ZAR";
            }
        }
        if (currency.indexOf("FXKRW") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₩";
            }
            else if (showSymbol) {
                returnVal = "₩ KRW";
            }
            else {
                returnVal = "KRW";
            }
        }
        if (currency.indexOf("FXSEK") > -1) {
            if (onlyShowSymbol) {
                returnVal = "kr";
            }
            else if (showSymbol) {
                returnVal = "kr SEK";
            }
            else {
                returnVal = "SEK";
            }
        }
        if (currency.indexOf("FXCHFCAD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₣";
            }
            else if (showSymbol) {
                returnVal = "₣ CHF";
            }
            else {
                returnVal = "CHF";
            }
        }
        if (currency.indexOf("FXTWD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "NT$";
            }
            else if (showSymbol) {
                returnVal = "NT$ TWD";
            }
            else {
                returnVal = "TWD";
            }
        }
        if (currency.indexOf("FXTHB") > -1) {
            if (onlyShowSymbol) {
                returnVal = "฿";
            }
            else if (showSymbol) {
                returnVal = "฿ THB";
            }
            else {
                returnVal = "THB";
            }
        }
        if (currency.indexOf("FXTRY") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₺";
            }
            else if (showSymbol) {
                returnVal = "₺ TRY";
            }
            else {
                returnVal = "TRY";
            }
        }
        if (currency.indexOf("FXGBP") > -1) {
            if (onlyShowSymbol) {
                returnVal = "£";
            }
            else if (showSymbol) {
                returnVal = "£ GBP";
            }
            else {
                returnVal = "GBP";
            }
        }
        if (currency.indexOf("FXUSD") > -1) {
            if (onlyShowSymbol) {
                returnVal = "$";
            }
            else if (showSymbol) {
                returnVal = "$ USD";
            }
            else {
                returnVal = "USD";
            }
        }
        if (currency.indexOf("FXVND") > -1) {
            if (onlyShowSymbol) {
                returnVal = "₫";
            }
            else if (showSymbol) {
                returnVal = "₫ VND";
            }
            else {
                returnVal = "VND";
            }
        }
        return returnVal;
    }
    Utilities.CurrencyToDisplayString = CurrencyToDisplayString;
    function updatePriceLabels(currency) {
        if (location.href.toLowerCase().indexOf(RouteHelper.getURL("my-account")) < 0) { //exclude my-account out of scope
            if (currency.toLowerCase() != "cad") {
                $("label[for='ddlMinPriceTop'], label[for='ddlMinPrice']").text(Translation.get("MinPrice") + " (" + Utilities.CurrencyToDisplayString(currency, false) + ")");
                $("label[for='ddlMaxPriceTop'], label[for='ddlMaxPrice']").text(Translation.get("MaxPrice") + " (" + Utilities.CurrencyToDisplayString(currency, false) + ")");
                $("label[for='ddlMaxRentTop'], label[for='ddlMaxRent']").text(Translation.get("MaxRent") + " (" + Utilities.CurrencyToDisplayString(currency, false) + ")");
                $("label[for='ddlMinRentTop'], label[for='ddlMinRent']").text(Translation.get("MinRent") + " (" + Utilities.CurrencyToDisplayString(currency, false) + ")");
            }
            else {
                $("label[for='ddlMinPriceTop'], label[for='ddlMinPrice']").text(Translation.get("MinPrice"));
                $("label[for='ddlMaxPriceTop'], label[for='ddlMaxPrice']").text(Translation.get("MaxPrice"));
                $("label[for='ddlMinRentTop'], label[for='ddlMinRent']").text(Translation.get("MinRent"));
                $("label[for='ddlMaxRentTop'], label[for='ddlMaxRent']").text(Translation.get("MaxRent"));
            }
        }
    }
    Utilities.updatePriceLabels = updatePriceLabels;
    //appends html <span> around currency label to allow css styling of that element
    function FormatCurrencyDisplay(Value, CurrencyName) {
        var currencyRegEx = new RegExp("\\(([" + CurrencyName + ")]+)\\)", "gi");
        return Value.replace(currencyRegEx, "<span> (" + CurrencyName + ")</span>");
    }
    Utilities.FormatCurrencyDisplay = FormatCurrencyDisplay;
    function queueTask(task) {
        window.setTimeout(task, 0);
    }
    Utilities.queueTask = queueTask;
    /**
      * Returns if the sortby value (eg. "11-D") is among those being removed (open house first, more photos first, virtual tour first)
      * @param value
      */
    function isExpiredSortByValue(value) {
        if (value && (value == "11-D" || value == "12-D" || value == "13-D")) {
            return true;
        }
        return false;
    }
    Utilities.isExpiredSortByValue = isExpiredSortByValue;
    /**
     * Use for when waiting for defer scripts - If readystate isn't loading call right away - otherwise wait for 'DOMContentLoaded'
     * @param methodCall
     */
    function deferredCall(methodCall) {
        if (methodCall) {
            if (document.readyState == 'loading') {
                // loading yet, wait for the event
                document.addEventListener('DOMContentLoaded', methodCall);
            }
            else {
                // DOM is ready!
                methodCall();
            }
        }
    }
    Utilities.deferredCall = deferredCall;
    function createScriptTag(src, id, onload) {
        if (id === void 0) { id = ""; }
        if (onload === void 0) { onload = null; }
        var scriptElement = document.createElement('script');
        scriptElement.src = src;
        scriptElement.type = 'text/javascript';
        if (id)
            scriptElement.id = id;
        if (onload)
            scriptElement.onload = function () {
                onload();
            };
        return scriptElement;
    }
    Utilities.createScriptTag = createScriptTag;
    function debounce(func, waitMilliseconds, options) {
        if (waitMilliseconds === void 0) { waitMilliseconds = 50; }
        if (options === void 0) { options = {
            isImmediate: false
        }; }
        var timeoutId;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var context = this;
            var doLater = function () {
                timeoutId = undefined;
                if (!options.isImmediate) {
                    func.apply(context, args);
                }
            };
            var shouldCallNow = options.isImmediate && timeoutId === undefined;
            if (timeoutId !== undefined) {
                clearTimeout(timeoutId);
            }
            timeoutId = setTimeout(doLater, waitMilliseconds);
            if (shouldCallNow) {
                func.apply(context, args);
            }
        };
    }
    Utilities.debounce = debounce;
    /**
  *
  * @param string value to insert itno
  * @param index index to insert at
  * @param stringToInsert string text to insert
  */
    function insertString(string, index, stringToInsert) {
        if (index > 0) {
            return string.substring(0, index) + stringToInsert + string.substr(index);
        }
        return stringToInsert + string;
    }
    Utilities.insertString = insertString;
    ;
    /**
     *
     * @param stringVal string to bold matches for
     * @param match text to bold
     */
    function boldString(stringVal, match) {
        var normalizedStringVal = removeAccents(stringVal).toLowerCase();
        var normalizedMatch = removeAccents(match).toLowerCase();
        var index = 0;
        var matchIndexes = [];
        //skipping <b>billings</b> bridge and if match is only b case to skip bold tags
        if (normalizedMatch == 'b') {
            var regex = new RegExp('(B)(?![^<]*>|[^<>]*<\/)', 'gi');
            var x;
            index = normalizedStringVal.search(regex); // can use regex.exec to iterate all the matching characters skipping content between bold tags
            if (index != -1) {
                matchIndexes.push(index);
            }
        }
        else {
            if (!normalizedMatch) {
                return stringVal; // exit
            }
            while (index != -1) {
                index = normalizedStringVal.indexOf(normalizedMatch, index);
                if (index != -1) {
                    matchIndexes.push(index);
                    index++;
                }
            }
        }
        var returnValue = stringVal;
        for (var i = matchIndexes.length - 1; i >= 0; i--) {
            returnValue = insertString(returnValue, matchIndexes[i] + match.length, "</b>");
            returnValue = insertString(returnValue, matchIndexes[i], "<b>");
        }
        return returnValue;
    }
    Utilities.boldString = boldString;
    function callAfterDOMLoaded(methodCall) {
        if (methodCall) {
            if (document.readyState == 'loading') {
                // loading yet, wait for the event
                document.addEventListener('DOMContentLoaded', function () {
                    queueTask(function () { methodCall(); });
                });
            }
            else {
                // DOM is ready!
                queueTask(function () { methodCall(); });
            }
        }
    }
    Utilities.callAfterDOMLoaded = callAfterDOMLoaded;
    /**
     *  Returns a serialized string version of an object by removing any object reference
     *  and convert them into string thus making sure we dont have any circular reference object
     *  error while stringifying...
     * @param obj
     * @param indent
     */
    function safeStringify(obj, indent) {
        if (indent === void 0) { indent = 2; }
        var cache = [];
        var retVal = JSON.stringify(obj, function (key, value) {
            return typeof value === "object" && value !== null
                ? cache.indexOf(value) > 0
                    ? undefined // Duplicate reference found, discard key
                    : cache.push(value) && value // Store value in our collection
                : value;
        }, indent);
        cache = null;
        return retVal;
    }
    Utilities.safeStringify = safeStringify;
    ;
    /**
     *  Returns the index of the active swiperjs slide. The library used realIndex and activeIndex but
     *  they are buggy in loop mode where realindex is in between [1,+] but normally [0,+]...
     * @param swiper
     */
    function getSwiperjsRealIndex(swiper, loopMode) {
        var _a;
        if (loopMode === void 0) { loopMode = true; }
        try {
            var findSwiperIndex = (swiper === null || swiper === void 0 ? void 0 : swiper.activeIndex) > -1 ? swiper.activeIndex : 0;
            var activeIndex = loopMode ? (findSwiperIndex > 0 ? findSwiperIndex : 1) - 1 : findSwiperIndex;
            var idx = (_a = swiper === null || swiper === void 0 ? void 0 : swiper.$wrapperEl) === null || _a === void 0 ? void 0 : _a.find('.swiper-slide-active').attr('data-swiper-slide-index');
            if (!idx) {
                return activeIndex;
            }
            else {
                return !!Number(idx) ? parseInt(idx) : (activeIndex);
            }
        }
        catch (e) {
            Logging.Error(e);
        }
        return -1;
    }
    Utilities.getSwiperjsRealIndex = getSwiperjsRealIndex;
    /**
     *  Returns the the active swiperjs slide. The library used realIndex and activeIndex but
     *  they are buggy in loop mode where realindex is in between [1,+] but normally [0,+]...
     * @param swiper
    */
    function getSwiperjsSlideElement(swiper, loopMode) {
        var _a, _b;
        if (loopMode === void 0) { loopMode = true; }
        try {
            var findSwiperIndex = (swiper === null || swiper === void 0 ? void 0 : swiper.activeIndex) > -1 ? swiper.activeIndex : 0;
            var activeIndex = loopMode ? (findSwiperIndex > 0 ? findSwiperIndex : 1) - 1 : findSwiperIndex;
            var elem = (_a = swiper === null || swiper === void 0 ? void 0 : swiper.$wrapperEl) === null || _a === void 0 ? void 0 : _a.find('.swiper-slide-active');
            if ((elem === null || elem === void 0 ? void 0 : elem.length) == 1) {
                return elem;
            }
            else {
                return (swiper === null || swiper === void 0 ? void 0 : swiper.activeIndex) > 0 && ((_b = swiper.slides) === null || _b === void 0 ? void 0 : _b.length) > 0 ? swiper.slides[activeIndex] : null;
            }
        }
        catch (e) {
            Logging.Error(e);
        }
        return null;
    }
    Utilities.getSwiperjsSlideElement = getSwiperjsSlideElement;
    /** We want to refire the GTM datalayer push for the page_view of slidepage container when a user closes overlay slidepage */
    function refireGTMDataLayerScript() {
        var gtm = $('#GTMDataLayerCode');
        $('#GTMDataLayerCode').remove();
        $('head').append(gtm);
    }
    Utilities.refireGTMDataLayerScript = refireGTMDataLayerScript;
    /**
     *  Returns if the date passed is Daylight Saving Time or rather Daylight Standard Time
     * @param date
    */
    function hasDST(date) {
        if (date === void 0) { date = new Date(); }
        var january = new Date(date.getFullYear(), 0, 1).getTimezoneOffset();
        var july = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        return Math.max(january, july) !== date.getTimezoneOffset();
    }
    Utilities.hasDST = hasDST;
    /**Returns true when the current page content is visible (ie. current tab being viewed). See: https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState */
    function isPageContentVisible() {
        return document.visibilityState === 'visible';
    }
    Utilities.isPageContentVisible = isPageContentVisible;
    /**
    *  Returns complete information in regards to a timezone name including their daylight and standard info with
    *  their full name and short code. Values controlled also with english and french language
    * @param timeZoneName
    * @param lang
    */
    function getTimezoneInfo(timeZoneName, lang) {
        timeZoneName = timeZoneName.toLowerCase().replace(/[\s]+|canada/g, "");
        switch (timeZoneName) {
            case TimeZoneNames.EasternDaylightTime:
            case TimeZoneNames.EasternStandardTime:
                return {
                    StandardName: TimeZoneNames.EasternStandardTime,
                    DaylightName: TimeZoneNames.EasternDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.EasternDaylightTime : TimeZoneCodesFr.EasternDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.EasternStandardTime : TimeZoneCodesFr.EasternStandardTime,
                };
            case TimeZoneNames.NewfoundlandDaylightTime:
            case TimeZoneNames.NewfoundlandStandardTime:
                return {
                    StandardName: TimeZoneNames.NewfoundlandStandardTime,
                    DaylightName: TimeZoneNames.NewfoundlandDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.NewfoundlandDaylightTime : TimeZoneCodesFr.NewfoundlandDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.NewfoundlandStandardTime : TimeZoneCodesFr.NewfoundlandStandardTime,
                };
            case TimeZoneNames.AtlanticDaylightTime:
            case TimeZoneNames.AtlanticStandardTime:
                return {
                    StandardName: TimeZoneNames.AtlanticStandardTime,
                    DaylightName: TimeZoneNames.AtlanticDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.AtlanticDaylightTime : TimeZoneCodesFr.AtlanticDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.AtlanticStandardTime : TimeZoneCodesFr.AtlanticStandardTime,
                };
            case TimeZoneNames.CentralDaylightTime:
            case TimeZoneNames.CentralStandardTime:
                return {
                    StandardName: TimeZoneNames.CentralStandardTime,
                    DaylightName: TimeZoneNames.CentralDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.CentralDaylightTime : TimeZoneCodesFr.CentralDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.CentralStandardTime : TimeZoneCodesFr.CentralStandardTime,
                };
            case TimeZoneNames.MountainDaylightTime:
            case TimeZoneNames.MountainStandardTime:
                return {
                    StandardName: TimeZoneNames.MountainStandardTime,
                    DaylightName: TimeZoneNames.MountainDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.MountainDaylightTime : TimeZoneCodesFr.MountainDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.MountainStandardTime : TimeZoneCodesFr.MountainStandardTime,
                };
            case TimeZoneNames.PacificDaylightTime:
            case TimeZoneNames.PacificStandardTime:
                return {
                    StandardName: TimeZoneNames.PacificStandardTime,
                    DaylightName: TimeZoneNames.PacificDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.PacificDaylightTime : TimeZoneCodesFr.PacificDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.PacificStandardTime : TimeZoneCodesFr.PacificStandardTime,
                };
            default:
                return {
                    StandardName: TimeZoneNames.EasternStandardTime,
                    DaylightName: TimeZoneNames.EasternDaylightTime,
                    DaylightCodeName: lang == Language.English ? TimeZoneCodesEn.EasternDaylightTime : TimeZoneCodesFr.EasternDaylightTime,
                    StandardCodeName: lang == Language.English ? TimeZoneCodesEn.EasternStandardTime : TimeZoneCodesFr.EasternStandardTime,
                };
        }
    }
    Utilities.getTimezoneInfo = getTimezoneInfo;
})(Utilities || (Utilities = {}));
/**
* https://stackoverflow.com/questions/50470025/nameof-keyword-in-typescript
* @param name
*/
var nameof = function (name) { return name; };
//# sourceMappingURL=Utilities.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Control = /** @class */ (function () {
    function Control() {
    }
    Control.prototype.domManipulation = function () { };
    ; /*Make it abstract eventually???*/
    return Control;
}());
/**
 * Class for Controls
 */
var WebControl = /** @class */ (function (_super) {
    __extends(WebControl, _super);
    function WebControl(model, clientControlID) {
        var _this = _super.call(this) || this;
        _this.model = model;
        _this.clientId = clientControlID;
        return _this;
    }
    /**
     * Take unique if (eg. MainContent_ctl00_ctl00_realtorDetailsCard if server compiled control) and return the static friendly name (eg. realtorDetailsCard)
     */
    WebControl.friendlyClientId = function (clientId) {
        var returnValue = "";
        if ((clientId || "") != "" && clientId.indexOf("ctl") > -1) {
            var parts = clientId.split("_");
            returnValue = parts[parts.length - 1];
        }
        else {
            returnValue = clientId;
        }
        return returnValue;
    };
    WebControl.prototype.init = function () {
        if (this.loadModel == null) {
            Logging.Debug('Ensure class has it a constructor that accepts the actual model class with a super call to this constructor', LogType.Other);
        }
        if (this.errorHandler != null) {
            try {
                // Utilities.queueTask(() => {
                this.loadModel(this.model);
                //});
                //Utilities.queueTask(() => {
                this.domManipulation();
                //});
                //Utilities.queueTask(() => {
                this.registerEventHandlers();
                //});
                //Utilities.queueTask(() => {
                this.render();
                // });
            }
            catch (e) {
                //if (ApplicationConfig.IsQAMode || ApplicationConfig.IsDebugMode) {
                //    //throw e;
                //    Logging.Error(e);
                //}
                this.errorHandler(e);
            }
        }
        else {
            //Utilities.queueTask(() => {
            this.loadModel(this.model);
            //});
            //Utilities.queueTask(() => {
            this.domManipulation();
            //});
            //Utilities.queueTask(() => {
            this.registerEventHandlers();
            // });
            //Utilities.queueTask(() => {
            this.render();
            // });
        }
        Events.Fire(WebControl.webControlLoadedEvent, { 'id': WebControl.friendlyClientId(this.clientId), 'object': this });
    };
    WebControl.getControlValue = function (elem, mustBeVisible, constraint, urlEncodeValues, ignoreBlankValues) {
        if (mustBeVisible === void 0) { mustBeVisible = true; }
        if (constraint === void 0) { constraint = null; }
        if (urlEncodeValues === void 0) { urlEncodeValues = true; }
        if (ignoreBlankValues === void 0) { ignoreBlankValues = false; }
        var returnValue = null;
        if (mustBeVisible == false || $(elem).is(":visible")) {
            if (constraint == null || constraint($(elem))) {
                var value = '';
                if ($(elem).prop('type') == "checkbox") {
                    if ($(elem).prop('checked')) { //TODO: only if true?
                        value = "1";
                    }
                }
                else if ($(elem).prop('type') == "select-multiple") {
                    if (($(elem).val() || "") != "") { //Safari check
                        value = $(elem).val().toString(); //($(elem).val() || []).join(',');
                    }
                }
                else if (($(elem).attr('data-valueclass') || "") != "") {
                    var className = $(elem).attr('data-valueclass');
                    value = $(elem).find("." + className).attr("data-value");
                }
                else if (($(elem).attr('data-type') || "") == "dayssince") {
                    if (($(elem).val() || "") != "") { //Safari check
                        var date = void 0;
                        if ($(elem).attr("type") == "date") {
                            date = stringToDate2($(elem).val());
                        }
                        else {
                            date = stringToDate($(elem).val());
                        }
                        date.setDate(date.getDate()); //Want end of day
                        var now = new Date();
                        var currentDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                        var oneDaysInMS = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                        value = (Math.round(Math.abs((date.getTime() - currentDate.getTime()) / (oneDaysInMS))) + 1).toString();
                    }
                }
                else if ($(elem).prop('tagName').toLowerCase() == "table") //DALLookup that is a radio button list... TODO - Fix the lookup control rendering?
                 {
                    value = $(elem).find('input:checked').val();
                }
                else if (($(elem).val() || "").trim() != "") {
                    if (urlEncodeValues) {
                        value = Utilities.EncodeString($(elem).val());
                    }
                    else {
                        value = $(elem).val();
                    }
                }
                if (((value || '') != '' && Binding.readConstraintPasses($(elem)))) {
                    returnValue = value;
                }
            }
        }
        if (ignoreBlankValues) {
            var def = $(elem).attr("data-blank-value");
            if (def) {
                if (returnValue == def) {
                    Logging.Debug("value is equal to data-blank-value (" + $(elem).attr('data-blank-value') + ") -> setting to null", LogType.Binding);
                    returnValue = null;
                }
            }
        }
        return returnValue;
    };
    WebControl.getValuesFromControlsAsObject = function (containerIds, mustBeVisible, constraint, urlEncodeValues, ignoreBlankValue) {
        if (mustBeVisible === void 0) { mustBeVisible = true; }
        if (constraint === void 0) { constraint = null; }
        if (urlEncodeValues === void 0) { urlEncodeValues = false; }
        if (ignoreBlankValue === void 0) { ignoreBlankValue = true; }
        var returnValue = {};
        for (var _i = 0, containerIds_1 = containerIds; _i < containerIds_1.length; _i++) {
            var containerId = containerIds_1[_i];
            $("#" + containerId).find("[data-hashkey]").each(function (index, elem) {
                var value = WebControl.getControlValue(elem, mustBeVisible, constraint, urlEncodeValues, ignoreBlankValue);
                if (value != null) {
                    Logging.Debug("Read: " + $(elem).attr('data-hashkey') + " = '" + value + "'", LogType.Binding);
                    returnValue[$(elem).attr('data-hashkey')] = value;
                }
                //if (mustBeVisible == false || $(elem).is(":visible")) {
                //    if (constraint == null || constraint($(elem))) {
                //        var value = '';
                //        if ($(elem).prop('type') == "checkbox") {
                //            if ($(elem).prop('checked')) { //TODO: only if true?
                //                value = "1";
                //            }
                //        } else if ($(elem).prop('type') == "select-multiple") {
                //            if (($(elem).val() || "") != "") {//Safari check
                //                value = $(elem).val().toString();//($(elem).val() || []).join(',');
                //            }
                //        } else if (($(elem).attr('data-valueclass') || "") != "") {
                //            let className: string = $(elem).attr('data-valueclass');
                //            value = $(elem).find("." + className).attr("data-value");
                //        } else if (($(elem).attr('data-type') || "") == "dayssince") {
                //            if (($(elem).val() || "") != "") {//Safari check
                //                let date: Date = stringToDate2($(elem).val());
                //                date.setDate(date.getDate()); //Want end of day
                //                let now: Date = new Date();
                //                let currentDate: Date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                //                let oneDaysInMS: number = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                //                value = (Math.round(Math.abs((date.getTime() - currentDate.getTime()) / (oneDaysInMS))) + 1).toString();
                //            }
                //        }
                //        else if ($(elem).prop('tagName').toLowerCase() == "table") //DALLookup that is a radio button list... TODO - Fix the lookup control rendering?
                //        {
                //            value = $(elem).find('input:checked').val();
                //        } else if ($(elem).val().trim() != "") {
                //            //if ($(elem).val().indexOf(' ') > -1) {
                //            value = Utilities.EncodeString($(elem).val());
                //            //} else {
                //            //value = $(elem).val();
                //            //}
                //            //value = encodeURIComponent($(elem).val());
                //            //} else if ($(elem).attr('value') != undefined) { //Weird bug where inputs value comong back blank for current page depinse being set to 1
                //            //    value = $(elem).attr('value');
                //        }
                //        if (((value || '') != '' && Binding.readConstraintPasses($(elem)))) {
                //            returnValue[$(elem).attr('data-hashkey')] = value;
                //        }
                //    }
                //}
            });
        }
        return returnValue;
    };
    WebControl.webControlLoadedEvent = 'webControlLoadedEvent';
    return WebControl;
}(Control));
/**
 * Class for pages
 */
var WebPage = /** @class */ (function (_super) {
    __extends(WebPage, _super);
    function WebPage(model, controlId) {
        var _this = _super.call(this) || this;
        _this.model = model;
        _this.clientId = controlId;
        _this.checkForRedirectToUpdateAlternateTag();
        _this.initRegionalCalendar();
        return _this;
    }
    /**
    * initRegionalCalendar is a function that sets the calendar content depending on its language
    * for the R7 website.
    */
    WebPage.prototype.initRegionalCalendar = function () {
        if (ApplicationState.CultureID == 1) {
            $.datepicker.regional['en-CA'] = {
                closeText: 'Done',
                prevText: 'Prev',
                nextText: 'Next',
                currentText: 'Today',
                monthNames: ['January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'],
                monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                weekHeader: 'Wk',
                dateFormat: 'dd/mm/yy',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            $.datepicker.setDefaults($.datepicker.regional['en-CA']);
        }
        else {
            $.datepicker.regional['fr-CA'] = {
                closeText: 'Fermer',
                prevText: 'Précédent',
                nextText: 'Suivant',
                currentText: 'Aujourd\'hui',
                monthNames: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'],
                monthNamesShort: ['janv.', 'févr.', 'mars', 'avril', 'mai', 'juin', 'juil.', 'août.', 'sept.', 'oct.', 'nov.', 'déc.'],
                dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
                dayNamesShort: ['Dim.', 'Lun.', 'Mar.', 'Mer.', 'Jeu.', 'Ven.', 'Sam.'],
                dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
                weekHeader: 'Sem.',
                firstDay: 1,
                isRTL: false,
                showMonthAfterYear: false,
                yearSuffix: ''
            };
            $.datepicker.setDefaults($.datepicker.regional['fr-CA']);
        }
    };
    WebPage.prototype.checkForMessageToShowOnLoad = function () {
        var message = URLHash.get("showmessage", "");
        if (message != "") {
            $.featherlight("<div class='lightBoxTitle'>&nbsp;</div><div class='showMessageText'>" + Translation.get(message) + "</div>", { closeIcon: "<img class='dialogCloseX' src='/images/common/icons/svg/x-gray.svg' alt='' />" });
            var hash = URLHash.getObject();
            delete hash["showmessage"];
            var newLocation = window.location.href.split('#')[0] + "#" + $.param(hash);
            history.replaceState({ id: MasterPages.Phone.smoothStateElementID }, document.title, newLocation);
        }
    };
    //WARNING: may not work? Not sure when google reads the pages alternate tags, this sets them client side so it may not work?
    //We redirect to seo url to hash equivalent for some URLs, this will ensure the altnerate tags show the pre-redirect (SEO friendly) URLs
    WebPage.prototype.checkForRedirectToUpdateAlternateTag = function () {
        if (location.hash != "") {
            var currentURL = location.pathname + location.hash;
            for (var i in ApplicationState.RoutingDictionary) {
                if (ApplicationState.RoutingDictionary.hasOwnProperty(i)) {
                    if ((ApplicationState.CultureID == 1 && ApplicationState.RoutingDictionary[i].EnglishRedirect == currentURL) ||
                        (ApplicationState.CultureID == 2 && ApplicationState.RoutingDictionary[i].FrenchRedirect == currentURL)) {
                        $("link[hreflang='en']").attr("href", ApplicationState.RoutingDictionary[i].EnglishRoute);
                        $("link[hreflang='fr']").attr("href", ApplicationState.RoutingDictionary[i].FrenchRoute);
                    }
                }
            }
        }
    };
    WebPage.prototype.initializePageSettings = function () {
        //Reset the current page flag from a resume search triggered for new notification msg box
        var notifNewEmailsObj = LocalAccountStorage.NotificationNewEmails.getObject();
        if (!!notifNewEmailsObj) {
            notifNewEmailsObj.CurrentPageLoadedFromResumeSearch = false;
            LocalAccountStorage.NotificationNewEmails.saveObject(notifNewEmailsObj);
        }
    };
    WebPage.prototype.init = function () {
        this.initializePageSettings();
        if (this.loadModel == null) {
            Logging.Debug('Ensure class has it a constructor that accepts the actual model class with a super call to this constructor', LogType.Other);
        }
        if (this instanceof MasterPage == false) {
            Events.Fire(WebPage.pageInitingEvent, { 'id': WebControl.friendlyClientId(this.clientId), 'object': this });
        }
        if (this.errorHandler != null) {
            try {
                //Utilities.queueTask(() => {
                this.loadModel(this.model);
                //});
                //Utilities.queueTask(() => {
                this.domManipulation();
                //});
                //Utilities.queueTask(() => {
                this.registerEventHandlers();
                //});
                //Utilities.queueTask(() => {
                this.render();
                //});
            }
            catch (e) {
                //if (ApplicationConfig.IsQAMode || ApplicationConfig.IsDebugMode) {
                //    Logging.Error(e);
                //    //throw e;
                //}
                this.errorHandler(e);
            }
        }
        else {
            //Utilities.queueTask(() => {
            this.loadModel(this.model);
            //});
            //Utilities.queueTask(() => {
            this.domManipulation();
            //});
            //Utilities.queueTask(() => {
            this.registerEventHandlers();
            //});
            //Utilities.queueTask(() => {
            this.render();
            //});
        }
        if (this instanceof MasterPage == false) {
            Events.Fire(WebPage.pageLoadedEvent, { 'id': WebControl.friendlyClientId(this.clientId), 'object': this });
        }
    };
    WebPage.pageLoadedEvent = 'pageLoadedEvent';
    WebPage.pageLoadedDynamicallyEvent = 'pageLoadedDynamicallyEvent'; //Loaded with smoothstate or with slideinpage
    WebPage.pageInitingEvent = 'pageInitingEvent';
    WebPage.pagePreRender = 'PagePreRender'; //Fired server-side, at start of HTML output
    return WebPage;
}(Control));
var MasterPage = /** @class */ (function (_super) {
    __extends(MasterPage, _super);
    function MasterPage(model, controlId) {
        var _this = _super.call(this, model, controlId) || this;
        Events.Fire(MasterPage.masterLoadedEvent, { 'id': _this.clientId, 'object': _this });
        return _this;
    }
    MasterPage.GigyaLoaded = new RealtorEvent("GigyaLoaded");
    MasterPage.masterLoadedEvent = 'masterLoadedEvent';
    MasterPage.GoogleAPILoaded = "GoogleAPILoaded";
    MasterPage.CaptchaLoaded = "CaptchaLoaded";
    MasterPage.OpenedDialogs = []; //Keep track of open dialogs so we can close them when going to a new page/back button
    MasterPage.tlcJSLoaded = new RealtorEvent("tlcJSLoaded");
    return MasterPage;
}(WebPage));
//# sourceMappingURL=WebControl.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MasterPages;
(function (MasterPages) {
    var Desktop = /** @class */ (function (_super) {
        __extends(Desktop, _super);
        function Desktop(model, controlId, foreseeEnabledOnPage) {
            var _this = _super.call(this, model, controlId) || this;
            _this.foreseeEnabledOnPage = true;
            _this.foreseeEnabledOnPage = foreseeEnabledOnPage;
            _this.init();
            return _this;
        }
        Desktop.initialize = function () {
            ApplicationState.registerEventHandlers();
        };
        Desktop.prototype.loadModel = function (model) { };
        Desktop.prototype.registerEventHandlers = function () {
            var _this = this;
            var me = this;
            //US-167469 - Red bar still shows up when going back in history BF cache - Mac safari bug so far
            window.addEventListener("pageshow", function (event) {
                if (event.persisted) {
                    hideLoadingBar();
                }
            });
            $(window).on('beforeunload', function () {
                showLoadingBar();
            });
            var foreseeSurveyDisplayLogic = function () {
                ////Logic to display foresee per client size window -> Currently disabled
                //let foreseeFeedBackClosed: string = SessionStorage.ForeseeFeedBackClosed.get();
                //if ((foreseeFeedBackClosed == null || foreseeFeedBackClosed.length == 0) && ApplicationConfig.SurveyEnabled && this.foreseeEnabledOnPage) {
                //    if ($(window).width() <= 1395 && $(window).height() <= 678) {
                //        $("#feedbackSmall").hide();
                //        $("#feedbackLarge").hide();
                //    }
                //    else {
                //        $("#feedbackSmall").show();
                //        $("#feedbackLarge").hide();
                //    }
                //}
            };
            //$(window).resize(function () {
            //    foreseeSurveyDisplayLogic();
            //});
            //foreseeSurveyDisplayLogic();
            $(".feedbackCloseBtn").click(function () {
                $(".feedbackBtnContainer").hide();
                SessionStorage.ForeseeFeedBackClosed.save("true");
                return false;
            });
            $("#feedbackSmall").hover(function () {
                $("#feedbackLarge").show();
                $("#feedbackSmall").hide();
            }, function () {
            });
            $("#feedbackLarge").hover(function () {
            }, function () {
                var foreseeFeedBackClosed = SessionStorage.ForeseeFeedBackClosed.get();
                if ((foreseeFeedBackClosed == null || foreseeFeedBackClosed.length == 0) && ApplicationConfig.SurveyEnabled && _this.foreseeEnabledOnPage) {
                    $("#feedbackSmall").show();
                    $("#feedbackLarge").hide();
                }
            });
            //$(".feedbackText").click(function () {
            //    if (ApplicationState.CultureID==1) {
            //        FSR.launchFeedback(ApplicationConfig.SurveyEnglishID);
            //    }
            //    else {
            //        FSR.launchFeedback(ApplicationConfig.SurveyFrenchID);
            //    }
            //})
            $('#headerEnLnk').not('.selected').click(function () {
                if ($(this).attr("href") == "#") {
                    switchLanguage(1);
                }
                else {
                    var hash = "";
                    if (window.location.hash != "") {
                        hash = window.location.hash;
                    }
                    window.location.href = $(this).attr("href") + hash;
                }
                return false;
            });
            $('#headerFrLnk').not('.selected').click(function () {
                if ($(this).attr("href") == "#") {
                    switchLanguage(2);
                }
                else {
                    var hash = "";
                    if (window.location.hash != "") {
                        hash = window.location.hash;
                    }
                    window.location.href = $(this).attr("href") + hash;
                }
                return false;
            });
            SavedSearch.savedSearchesCountUpdated.Listen(function (e) {
                MasterPages.Desktop.updateSavedSearchIcon(e.detail.count);
                //Send an update message to the other tabs/windows
                var msgData = { SavedSearchCount: e.detail.count, SignedInUser: ApplicationState.UserIsSignedIn };
                BroadcastChannels.UserDataCounts.sendMessage(msgData);
                Cookie.SavedSearchCount.save(e.detail.count.toString());
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(SavedSearch.savedSearchesUpdated, function (e) {
                var args = e.detail || new SavedSearchUpdatedArgs();
                var count = SavedSearch.GetAll().length;
                Cookie.SavedSearchCount.save(count.toString());
                MasterPages.Desktop.updateSavedSearchIcon(e.detail);
                //Send an update message to the other tabs/windows
                var msgData = { SavedSearchCount: e.detail, SignedInUser: ApplicationState.UserIsSignedIn };
                BroadcastChannels.UserDataCounts.sendMessage(msgData);
                if (ApplicationState.UserIsSignedIn && args.updateGigya) {
                    Gigya.saveConsumerSearches();
                }
                Cookie.SavedSearchCount.save(count.toString());
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(Favourite.favouriteAddedEvent, function (e) {
                var args = e.detail;
                MasterPages.Desktop.updateFavouriteIcon(args.total);
                //Send an update message to the other tabs/windows
                var msgData = { FavouriteCount: args.total, SignedInUser: ApplicationState.UserIsSignedIn };
                BroadcastChannels.UserDataCounts.sendMessage(msgData);
                Cookie.FavouriteCount.save(args.total.toString());
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(Favourite.favouriteRemovedEvent, function (e) {
                var args = e.detail;
                MasterPages.Desktop.updateFavouriteIcon(args.total);
                //Send an update message to the other tabs/windows
                var msgData = { FavouriteCount: args.total, SignedInUser: ApplicationState.UserIsSignedIn };
                BroadcastChannels.UserDataCounts.sendMessage(msgData);
                Cookie.FavouriteCount.save(args.total.toString());
            }, { scope: Events.ListenerScope.Global });
            Favourite.favouritesRefreshEvent.Listen(function (e) {
                MasterPages.Desktop.updateFavouriteIcon(e.detail.total);
                //Send an update message to the other tabs/windows
                var msgData = { FavouriteCount: e.detail.total, SignedInUser: ApplicationState.UserIsSignedIn };
                BroadcastChannels.UserDataCounts.sendMessage(msgData);
                Cookie.FavouriteCount.save(e.detail.total.toString());
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(ConsumerProfile.Notifications.notificationsRefreshEvent, function (e) {
                MasterPages.Desktop.updateNotificationIcon(Desktop.getNbUserNotifications());
            }, { scope: Events.ListenerScope.Global });
            BroadcastChannels.UserSignOut.addListener("SignoutHandler", function (val) {
                if (ApplicationState.UserIsSignedIn) {
                    ApplicationState.UserIsSignedIn = false;
                    window.location.href = Utilities.appendQueryStringParams(window.location.href, "Logout=" + new Date().getTime().toString());
                }
            });
            Events.Listen(AjaxEngine.callBeginEvent, function (e) {
                var url = e.detail;
                showLoadingBar();
                Logging.Debug("Show loading bar", LogType.Other);
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(AjaxEngine.callEndEvent, function (e) {
                var statusText = e.detail;
                //if (AjaxEngine.XHRs.length == 0) {
                MasterPages.Desktop.hideLoadingBar();
                Logging.Debug("Hide loading bar", LogType.Other);
                //} 
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(AjaxEngine.callErrorEvent, function (e) {
                var statusText = e.detail;
                //if (AjaxEngine.XHRs.length == 0) {
                MasterPages.Desktop.hideLoadingBar();
                Logging.Debug("Hide loading bar", LogType.Other);
                //}
            }, { scope: Events.ListenerScope.Global });
            Favourite.maxSignedInCountEvent.Listen(function () {
                showSimpleDialog(Translation.get('SignedInMaxFavs'));
            });
            Favourite.maxCountEvent.Listen(function () {
                Gigya.showScreen(gigyaScreen.SaveMoreFavs, null);
            });
            Favourite.favouriteNoLongerAvailable.Listen(function () {
                showMessage(Translation.get("ExpiredListingsRemoved"));
            });
            //Events.Listen(WebPage.pageLoadedEvent, function (e: CustomEvent) {
            //    if ((<WebPage>e.detail.object).MaintainScrollPosition != false) {
            //        ScrollLocation.Refresh();
            //    } else {
            //        window.scrollTo(0, 0);
            //    }
            //    ApplyiOSSelectCutoffTextHack();
            //    //ApplySafariFixedHeaderHack();
            //    ApplicationState.LoadingViaBackButton = false; //Reset back
            //}, Events.ListenerScope.Global);
            Events.Listen(Controls.Desktop.ConfirmationDialog.ConfirmationDialogOpened, function (e) {
                MasterPages.Desktop.OpenedDialogs.push({ id: e.detail.Id, closer: e.detail.Closer });
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(Controls.Desktop.ConfirmationDialog.ConfirmationDialogClosed, function (e) {
                var foundIndex = -1;
                for (var i = 0; i < MasterPages.Desktop.OpenedDialogs.length; i++) {
                    if (MasterPages.Desktop.OpenedDialogs[i].id == e.detail.Id) {
                        foundIndex = i;
                        break;
                    }
                }
                if (foundIndex > -1) {
                    MasterPages.Desktop.OpenedDialogs.splice(foundIndex, i);
                }
            }, { scope: Events.ListenerScope.Global });
            Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                var args = e.detail;
                Controls.Desktop.CurrencyCtrl.SetCurrencyHeaderLabel(Utilities.CurrencyToDisplayString(args.currency, false));
            });
            GigyaInit.CheckForSignInURL();
            GigyaInit.addEventHandlers();
        };
        Desktop.showLoadingBar = function () {
            if ($('#loadingBar').is(":visible") == false) { //Try to fix rapid firing issue
                $('#loadingBar').show();
            }
        };
        /**Used for handling email-a-friend (mobile site) url being opened on a desktop */
        Desktop.checkForShareOnLoad = function () {
            var shareType = Utilities.getParamValueByName("share", URLParamType.Query);
            if (shareType == "email") {
                var controls = Utilities.getAllControls(Controls.Desktop.SocialShare);
                if (controls.length > 0) {
                    controls[0].openEmailFriendForm();
                }
            }
        };
        Desktop.hideLoadingBar = function () {
            $('#loadingBar').hide();
        };
        Desktop.updateFavouriteIcon = function (favCount, isInitialPageLoad) {
            if (isInitialPageLoad === void 0) { isInitialPageLoad = false; }
            //let currentModeCount = Favourite.getAll().length;
            //let show: boolean = currentModeCount > 0;
            if (favCount > 0) {
                $('#topMenuFavCountNum').text(favCount);
                $('#topMenuFavCountNum').show();
                if (favCount.toString() != $('#topMenuFavCountNum').text()) {
                    if (isInitialPageLoad == false) {
                        Animate($('#topMenuFavCountNum'), "bounceIn", 0.6, TransitionTiming.ease);
                    }
                }
            }
            else {
                if (isInitialPageLoad == false) {
                    AnimateOut($('#topMenuFavCountNum'), ExitAnimations.bounceOut, 0.6, TransitionTiming.ease, function () {
                        $('#topMenuFavCountNum').hide();
                    });
                }
            }
        };
        Desktop.updateSavedSearchIcon = function (count) {
            var currentModeCount = SavedSearch.GetAll().length;
            $('#topMenuSavedSearchCountNum').toggle(currentModeCount > 0);
            $('#topMenuSavedSearchCountNum').text(currentModeCount);
        };
        Desktop.getNbUserNotifications = function () {
            var notificationCount = 0;
            if (ApplicationState.UserIsSignedIn) {
                if (ConsumerProfile.UserAccountSettings.Notifications) {
                    var _notificationsObjs = new ConsumerProfile.Notifications(ConsumerProfile.UserAccountSettings.Notifications);
                    notificationCount = _notificationsObjs.getAllNotificationListingsCount();
                    if (Cookie.NotificationCount.get("0") != notificationCount.toString()) {
                        Cookie.NotificationCount.save(notificationCount.toString());
                    }
                }
            }
            return notificationCount;
        };
        Desktop.updateNotificationIcon = function (notificationCount) {
            return; //Being removed
            //if (ApplicationState.UserIsSignedIn) {
            //    if (notificationCount > 0) {
            //        $('#topMenuNotificationCountNum').text(notificationCount.format99Plus());
            //    }
            //    $('#topMenuNotificationCountNum').toggle(notificationCount > 0);
            //} else {
            //    $('#topMenuNotificationCountNum').toggle(false);
            //}
        };
        Desktop.prototype.render = function () {
            var _this = this;
            setTimeout(function () {
                var foreseeFeedBackClosed = SessionStorage.ForeseeFeedBackClosed.get();
                if ((foreseeFeedBackClosed == null || foreseeFeedBackClosed.length == 0) && ApplicationConfig.SurveyEnabled && _this.foreseeEnabledOnPage) {
                    $("#feedbackSmall").show();
                }
                else {
                    $("#feedbackSmall").hide();
                }
            }, 1500);
            if (Cookie.Language.get("1") != ApplicationState.CultureID.toString()) { //Handles case when user pressing back button and gets cached HTML
                Cookie.Language.save(ApplicationState.CultureID.toString());
            }
            MasterPages.Desktop.updateFavouriteIcon(Favourite.getAll().length, true);
            MasterPages.Desktop.updateSavedSearchIcon(SavedSearch.GetAll().length);
            //if (ApplicationState.UserIsSignedIn) { ConsumerProfile.Notifications.RefreshNotifications(null, null); }
            //MasterPages.Desktop.updateNotificationIcon(Desktop.getNbUserNotifications());
            Utilities.Desktop.checkIEWarning();
            if (Utilities.IsSafariUserInPrivateMode()) {
                showMessage(Translation.get("SafariPrivateModeNotSupported"), MessageType.Normal, DisplayType.Tempbox);
            }
            MasterPages.Desktop.checkForShareOnLoad();
            if (ApplicationConfig.CurrencyConverterEnabled) {
                var latestCurrency = Cookie.Currency.get() || "CAD";
                var forceCurrency = Utilities.getParamValueByName("Currency", URLParamType.Query);
                if (CurrencyType[forceCurrency] != null) {
                    latestCurrency = forceCurrency;
                }
                if (latestCurrency === ApplicationState.CurrencyValue) {
                    Utilities.updatePriceLabels(CurrencyType[ApplicationState.CurrencyID]);
                    Controls.Desktop.CurrencyCtrl.SetCurrencyHeaderLabel(ApplicationState.CurrencyName);
                }
                else {
                    //Fix issue with browser back displaying previous currency
                    Controls.Desktop.CurrencyCtrl.SetCurrency(latestCurrency);
                }
                //Will check for referrer from country landing pages
                Currency.setReferrerCurrency();
            }
            //Makes sure you clear old form data if need be
            Utilities.queueTask(function () {
                FormValueStorage.clearOldFormData();
            });
        };
        Desktop.pageInAnimationComplete = "pageInAnimationComplete";
        Desktop.OpenedDialogs = []; //Keep track of open dialogs so we can close them when going to a new page/back button                
        return Desktop;
    }(MasterPage));
    MasterPages.Desktop = Desktop;
})(MasterPages || (MasterPages = {}));
//# sourceMappingURL=Desktop.js.map;
var SignInArgs = /** @class */ (function () {
    function SignInArgs() {
    }
    return SignInArgs;
}());
var SignInCallbackArgs = /** @class */ (function () {
    function SignInCallbackArgs() {
    }
    return SignInCallbackArgs;
}());
var SocialSignInArgs = /** @class */ (function () {
    function SocialSignInArgs() {
    }
    return SocialSignInArgs;
}());
var SocializeSignInArgs = /** @class */ (function () {
    function SocializeSignInArgs() {
    }
    return SocializeSignInArgs;
}());
var SignUpArgs = /** @class */ (function () {
    function SignUpArgs() {
    }
    return SignUpArgs;
}());
var RegFinalArgs = /** @class */ (function () {
    function RegFinalArgs() {
    }
    return RegFinalArgs;
}());
var AccountSetInfoArgs = /** @class */ (function () {
    function AccountSetInfoArgs() {
        this.profile = "";
        this.data = "";
        this.CRM_update = false;
        this.isProtected = false;
        this.isReactivate = false;
        this.UID = "";
        this.CRMUID = "";
    }
    return AccountSetInfoArgs;
}());
var SetAccountInfoCallbackArgs = /** @class */ (function () {
    function SetAccountInfoCallbackArgs() {
        this.redirectTargetOnSuccess = "";
        this.onSuccessMsg = null;
        this.onSuccessFunc = [];
        this.onFailFunc = [];
        this.fetchNewConsumerBOL = false;
    }
    return SetAccountInfoCallbackArgs;
}());
var SetAccountInfoArgs = /** @class */ (function () {
    function SetAccountInfoArgs() {
        this.profile = "";
        this.data = "";
        this.UID = "";
        this.regToken = "";
        this.conflictHandling = "";
        this.errorCode = 0;
    }
    return SetAccountInfoArgs;
}());
var GetAccountFromBOLCallbackArgs = /** @class */ (function () {
    function GetAccountFromBOLCallbackArgs() {
        this.functionCalls = function () { };
    }
    return GetAccountFromBOLCallbackArgs;
}());
var LogoutCallbackArgs = /** @class */ (function () {
    function LogoutCallbackArgs() {
        this.DT = DisplayType.Tempbox;
    }
    return LogoutCallbackArgs;
}());
var ErrorCallbackArgs = /** @class */ (function () {
    function ErrorCallbackArgs() {
        this.errorCode = "";
    }
    return ErrorCallbackArgs;
}());
var GetAccountInfoArgs = /** @class */ (function () {
    function GetAccountInfoArgs() {
        this.CRM_update = false;
        this.UID = "";
        this.regToken = "";
    }
    return GetAccountInfoArgs;
}());
var ResendVerificationCodeArgs = /** @class */ (function () {
    function ResendVerificationCodeArgs() {
    }
    return ResendVerificationCodeArgs;
}());
var SocializeResponseLoginArgs = /** @class */ (function () {
    function SocializeResponseLoginArgs() {
    }
    return SocializeResponseLoginArgs;
}());
var ValidateSignatureArgs = /** @class */ (function () {
    function ValidateSignatureArgs() {
    }
    return ValidateSignatureArgs;
}());
var ResetPasswordArgs = /** @class */ (function () {
    function ResetPasswordArgs() {
    }
    return ResetPasswordArgs;
}());
var ChangeAccountPasswordArgs = /** @class */ (function () {
    function ChangeAccountPasswordArgs() {
    }
    return ChangeAccountPasswordArgs;
}());
var ChangeAccountEmailArgs = /** @class */ (function () {
    function ChangeAccountEmailArgs() {
    }
    return ChangeAccountEmailArgs;
}());
var DeleteAccountArgs = /** @class */ (function () {
    function DeleteAccountArgs() {
    }
    return DeleteAccountArgs;
}());
var DialogEditNoteArgs = /** @class */ (function () {
    function DialogEditNoteArgs() {
        this.ID = "";
        this.Address = "";
        this.Lat = "";
        this.Lon = "";
        this.HeaderTextID = "";
        this.BodyTextID = "";
        this.ButtonPositiveID = "";
        this.ButtonNegativeID = "";
        this.ButtonPositiveTextID = "";
        this.ButtonNegativeTextID = "";
        this.ButtonPositiveOnClick = "";
        this.CloseOnClick = "";
        this.ButtonNegativeStyle = "";
        this.BeforeOpen = null;
        this.BeforeClose = null;
        this.AfterOpen = null;
        this.AfterClose = null;
        this.OpenTrigger = "";
        this.CloseTrigger = "";
        this.appMode = 1;
        this.isSharedNote = false;
        this.isPDP = false;
    }
    return DialogEditNoteArgs;
}());
var GetNotificationsArgs = /** @class */ (function () {
    function GetNotificationsArgs() {
        this.TypeIds = null;
    }
    return GetNotificationsArgs;
}());
var GetAccountFromBOLArgs = /** @class */ (function () {
    function GetAccountFromBOLArgs() {
        this.refreshGigya = false;
        this.refreshCache = false;
    }
    return GetAccountFromBOLArgs;
}());
var ImportObject = /** @class */ (function () {
    function ImportObject() {
        this.importFaveFlag = false;
        this.importCompareFlag = false;
        this.importSearchFlag = false;
        this.maxFaveFlag = false;
        this.maxCompareFlag = false;
        this.maxSearchFlag = false;
        this.FAVEdiff = null;
        this.COMPAREdiff = null;
        this.SEARCHdiff = null;
    }
    return ImportObject;
}());
var formType;
(function (formType) {
    formType[formType["signIn"] = 0] = "signIn";
    formType[formType["signUp"] = 1] = "signUp";
    formType[formType["profile"] = 2] = "profile";
})(formType || (formType = {}));
var gigyaScreen;
(function (gigyaScreen) {
    gigyaScreen[gigyaScreen["MoreInfoRequired"] = 0] = "MoreInfoRequired";
    gigyaScreen[gigyaScreen["MoreAboutYou"] = 1] = "MoreAboutYou";
    gigyaScreen[gigyaScreen["ResendEmailVerification"] = 2] = "ResendEmailVerification";
    gigyaScreen[gigyaScreen["CheckYourEmail"] = 3] = "CheckYourEmail";
    gigyaScreen[gigyaScreen["SocialTerms"] = 4] = "SocialTerms";
    gigyaScreen[gigyaScreen["RevisedTerms"] = 5] = "RevisedTerms";
    gigyaScreen[gigyaScreen["LinkAccounts"] = 6] = "LinkAccounts";
    gigyaScreen[gigyaScreen["ForgotPassword"] = 7] = "ForgotPassword";
    gigyaScreen[gigyaScreen["ChangePassword"] = 8] = "ChangePassword";
    gigyaScreen[gigyaScreen["ChangeAccountEmail"] = 9] = "ChangeAccountEmail";
    gigyaScreen[gigyaScreen["ChangeAccountPassword"] = 10] = "ChangeAccountPassword";
    gigyaScreen[gigyaScreen["UnsubscribeConfirmation"] = 11] = "UnsubscribeConfirmation";
    gigyaScreen[gigyaScreen["ImportConfirmation"] = 12] = "ImportConfirmation";
    gigyaScreen[gigyaScreen["SignIn"] = 13] = "SignIn";
    gigyaScreen[gigyaScreen["SaveMoreFavs"] = 14] = "SaveMoreFavs";
})(gigyaScreen || (gigyaScreen = {}));
var diffType;
(function (diffType) {
    diffType[diffType["id"] = 0] = "id";
    diffType[diffType["name"] = 1] = "name";
})(diffType || (diffType = {}));
var GigyaErrorCodes;
(function (GigyaErrorCodes) {
    GigyaErrorCodes[GigyaErrorCodes["NoGigyaError"] = 999] = "NoGigyaError";
    GigyaErrorCodes[GigyaErrorCodes["PendingAccountRegistration"] = 206001] = "PendingAccountRegistration";
    GigyaErrorCodes[GigyaErrorCodes["PendingAccountVerification"] = 206002] = "PendingAccountVerification";
    GigyaErrorCodes[GigyaErrorCodes["CaptchaRequired"] = 401020] = "CaptchaRequired";
    GigyaErrorCodes[GigyaErrorCodes["WrongCaptchaEntered"] = 401021] = "WrongCaptchaEntered";
    GigyaErrorCodes[GigyaErrorCodes["OldPassword"] = 401030] = "OldPassword";
    GigyaErrorCodes[GigyaErrorCodes["InvalidLoginId"] = 403042] = "InvalidLoginId";
    GigyaErrorCodes[GigyaErrorCodes["LoginIdentifierExists"] = 403043] = "LoginIdentifierExists";
    GigyaErrorCodes[GigyaErrorCodes["AccountLinked"] = 200009] = "AccountLinked";
    GigyaErrorCodes[GigyaErrorCodes["ErrorLoginIdentifierExists"] = 200010] = "ErrorLoginIdentifierExists";
    GigyaErrorCodes[GigyaErrorCodes["PendingPasswordChange"] = 403100] = "PendingPasswordChange";
    GigyaErrorCodes[GigyaErrorCodes["TempAccountLockedOut"] = 403120] = "TempAccountLockedOut";
    GigyaErrorCodes[GigyaErrorCodes["WrongCaptcha"] = 400021] = "WrongCaptcha";
    GigyaErrorCodes[GigyaErrorCodes["DeactivatedAccount"] = -10] = "DeactivatedAccount";
    GigyaErrorCodes[GigyaErrorCodes["LoggedOutError"] = -15] = "LoggedOutError";
    GigyaErrorCodes[GigyaErrorCodes["UnknownError"] = -20] = "UnknownError";
})(GigyaErrorCodes || (GigyaErrorCodes = {}));
var AccountPages = ['AccountInformation', 'Communications', 'SearchCriteria', 'ResultsView', 'Notifications'];
var AccountPagesList;
(function (AccountPagesList) {
    AccountPagesList[AccountPagesList["AccountInformation"] = 0] = "AccountInformation";
    AccountPagesList[AccountPagesList["Communications"] = 1] = "Communications";
    AccountPagesList[AccountPagesList["SearchCriteria"] = 2] = "SearchCriteria";
    AccountPagesList[AccountPagesList["ResultsView"] = 3] = "ResultsView";
    AccountPagesList[AccountPagesList["Notifications"] = 4] = "Notifications";
})(AccountPagesList || (AccountPagesList = {}));
var GigyaDialogs = [];
var GigyaLastPostFormMsg = null;
var dlgs = null;
var globalRegToken = null;
var globalRequestSMProvider = "";
var GigyaInit = /** @class */ (function () {
    function GigyaInit() {
    }
    GigyaInit.addEventHandlers = function () {
        if (typeof gigya != 'undefined' && typeof gigya.socialize != 'undefined') {
            GigyaInit.gigyaAddHandlers();
        }
        else {
            if (ApplicationState.IsMobileDevice) {
                MasterPages.Phone.GigyaLoaded.Listen(function (arg) {
                    Logging.Debug('Waiting for load event to load gigya handlers', LogType.Gigya);
                    GigyaInit.gigyaAddHandlers();
                });
            }
            else {
                MasterPages.Desktop.GigyaLoaded.Listen(function (arg) {
                    Logging.Debug('Waiting for load even to load gigya handlers', LogType.Gigya);
                    GigyaInit.gigyaAddHandlers();
                });
            }
        }
        GigyaInit.LoadConsumerBOL();
        if (SessionStorage.MessageToShowOnNextPage.get() != "") {
            showMessage(SessionStorage.MessageToShowOnNextPage.get(), MessageType.Normal, DisplayType.Tempbox);
            SessionStorage.MessageToShowOnNextPage.delete();
        }
        if (SessionStorage.ToastToShowOnNextPage.get() != "") {
            showMessage(SessionStorage.ToastToShowOnNextPage.get(), MessageType.Normal, DisplayType.Toast);
            SessionStorage.ToastToShowOnNextPage.delete();
        }
        ConsumerProfile.UserAccountSettings.getLoginAttemptCount();
    };
    GigyaInit.gigyaAddHandlers = function () {
        Logging.Debug('Adding gigya handlers', LogType.Gigya);
        gigya.socialize.addEventHandlers({
            onLogin: Gigya.autoLoginHandler,
            onLogout: Gigya.logoutHandler
        });
    };
    GigyaInit.getChangePassword = function () {
        var pwrt = Utilities.getParamValueByName("pwrt", URLParamType.Query);
        if (pwrt !== "" && pwrt !== null) {
            Gigya.showScreen(gigyaScreen.ChangePassword, null);
        }
    };
    GigyaInit.setupUrlForwarding = function () {
        var the_url = window.location.href;
        var url_hash = window.location.hash;
        var baseUrl = location.protocol + "//" + location.host;
        for (var i = 0; i < AccountPages.length; i++) {
            if (the_url.toLowerCase().indexOf("#section=" + AccountPages[i].toLowerCase()) > -1) {
                Cookie.FWDAccountURL.save(RouteHelper.getURL("my-account") + url_hash);
                return;
            }
        }
    };
    GigyaInit.CheckForSignInURL = function () {
        if (ApplicationState.UserIsSignedIn == false && (URLHash.get("section") == "SignIn"
            || Utilities.getParamValueByName("SignIn", URLParamType.Query).toLowerCase() == "true"
            || Utilities.getParamValueByName("NotificationSort", URLParamType.Query).toLowerCase() == "1"
            || (Utilities.getParamValueByName("utm_campaign", URLParamType.Query).toLowerCase() == "notifications" && ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-favourites")) > -1))) {
            if (ApplicationState.IsMobileDevice) {
                //Make sure we dont redirect to a page stored previous in postlogin
                SessionStorage.PostLoginRedirect.delete();
                if (location.href.indexOf(RouteHelper.getURL("sign-in")) < 0) {
                    Cookie.FWDAccountURL.save(window.location.href); //Turns out to be usefull from email tempaltes /my-favourites?utm_source=favourite...#section=SignIn etc...
                    //#188537- Disabling smoothstate page load in favor of social media logins functionality
                    //MasterPages.Phone.smoothState.load(RouteHelper.getURL("sign-in"));
                    location.href = RouteHelper.getURL("sign-in");
                }
            }
            else {
                $("#lnkProfileMenuSignin").click();
            }
        }
        if (ApplicationState.UserIsSignedIn == false && URLHash.get("section") == "ForgotPassword") {
            Gigya.showScreen(gigyaScreen.ForgotPassword, null);
        }
        if (ApplicationState.UserIsSignedIn &&
            Utilities.getParamValueByName("SignIn", URLParamType.Query).toLowerCase() == "true" &&
            ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-account")) == -1 &&
            URLHash.get("section")) {
            var hash = window.location.hash;
            for (var i = 0; i < AccountPages.length; i++) {
                if (hash.toLowerCase().indexOf("#section=" + AccountPages[i].toLowerCase()) > -1) {
                    if (ApplicationState.IsMobileDevice) {
                        MasterPages.Phone.smoothState.load(RouteHelper.getURL("my-account") + hash);
                    }
                    else {
                        GigyaInit.goToForwardUrl(RouteHelper.getURL("my-account") + hash);
                    }
                }
            }
        }
    };
    GigyaInit.LoadConsumerBOL = function () {
        if (ApplicationState.UserIsSignedIn) {
            //sync consumer bol except for pages where we fetch it as part of the page flow
            if (ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-favourites")) === -1 && ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-saved-searches")) === -1 && ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-daily-notifications")) === -1 && ApplicationState.CurrentHref.indexOf(RouteHelper.getURL("my-account")) === -1) {
                GigyaInit.GetAccountFromBOL(false, false);
            }
        }
    };
    GigyaInit.GetAccountFromBOL = function (refreshGigya, refreshCache, callbackArgs) {
        if (refreshGigya === void 0) { refreshGigya = false; }
        if (refreshCache === void 0) { refreshCache = false; }
        var args = new GetAccountFromBOLArgs();
        args.refreshGigya = refreshGigya;
        args.refreshCache = refreshCache;
        Actions.getAccountFromBOL(args, GigyaInit.getAccountFromBOLHandler, function (request, textStatus, exception) {
            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
        }, callbackArgs);
    };
    GigyaInit.getAccountFromBOLHandler = function (val, callbackArgs) {
        if (val != null) {
            if (val.GigyaError.ErrorCode == 0) {
                GigyaInit.loadConsumerProfile(val);
            }
            else {
                Gigya.errorHandler(val, null, val.GigyaError.ErrorCode);
            }
            if (callbackArgs != null) {
                callbackArgs.functionCalls(callbackArgs.page);
            }
        }
    };
    GigyaInit.DrawDialogs = function (User) {
        if (User != null && dlgs == null) {
            //queue screens/dialogs
            //Disable the screens for terms of use for social and realtor logins
            //if (User.socialTermsCondition == true) GigyaDialogs.push(gigyaScreen.SocialTerms);
            //if (User.revisedTermsCondition == true) GigyaDialogs.push(gigyaScreen.RevisedTerms);
            if (User.moreAboutYouCondition == true)
                GigyaDialogs.push(gigyaScreen.MoreAboutYou);
            if (SessionStorage.ConsumerImport.get("") != "")
                GigyaDialogs.push(gigyaScreen.ImportConfirmation);
            var gigyaDiagCopy = JSON.parse(JSON.stringify(GigyaDialogs));
            dlgs = GigyaDialogs.shift();
            GigyaLastPostFormMsg = { errorCode: GigyaErrorCodes.NoGigyaError, formType: formType.signIn, screenRender: dlgs };
            GigyaInit.Events.consumerPostMsgForm.Fire(GigyaLastPostFormMsg);
            //if (dlgs === gigyaScreen.SocialTerms) Gigya.showScreen(gigyaScreen.SocialTerms, User);
            //if (dlgs === gigyaScreen.RevisedTerms) Gigya.showScreen(gigyaScreen.RevisedTerms, User);
            if (dlgs === gigyaScreen.MoreAboutYou)
                Gigya.showScreen(gigyaScreen.MoreAboutYou, User);
            if (dlgs === gigyaScreen.ImportConfirmation)
                Gigya.importConfirmation();
            if (dlgs == null) {
                var redirectPage = SessionStorage.PostLoginRedirect.get(''); //possessionStorage.getItem("postLoginRedirect");
                if (redirectPage) {
                    SessionStorage.PostLoginRedirect.delete();
                    Core.redirectTo(redirectPage, false);
                }
                else {
                    var forwardUrl = Cookie.FWDAccountURL.get();
                    if (forwardUrl != null && forwardUrl != "") {
                        GigyaInit.goToForwardUrl(forwardUrl);
                    }
                }
            }
            return gigyaDiagCopy;
        }
        return null;
    };
    GigyaInit.ShiftDialogs = function () {
        dlgs = GigyaDialogs.shift();
        GigyaLastPostFormMsg = { errorCode: GigyaErrorCodes.NoGigyaError, formType: formType.signIn, screenRender: dlgs };
        GigyaInit.Events.consumerPostMsgForm.Fire(GigyaLastPostFormMsg);
        //if (dlgs === gigyaScreen.SocialTerms) Gigya.showScreen(gigyaScreen.SocialTerms, null);
        //if (dlgs === gigyaScreen.RevisedTerms) Gigya.showScreen(gigyaScreen.RevisedTerms, null);
        if (dlgs === gigyaScreen.MoreAboutYou)
            Gigya.showScreen(gigyaScreen.MoreAboutYou, null);
        if (dlgs === gigyaScreen.ImportConfirmation && !ApplicationState.GuestNotifyChgPending)
            Gigya.importConfirmation();
        if (dlgs == null) {
            var redirectPage = SessionStorage.PostLoginRedirect.get('');
            if (redirectPage) {
                SessionStorage.PostLoginRedirect.delete();
                Core.redirectTo(redirectPage, false);
            }
            else {
                var forwardUrl = Cookie.FWDAccountURL.get();
                if (forwardUrl != null && forwardUrl != "") {
                    GigyaInit.goToForwardUrl(forwardUrl);
                }
            }
        }
    };
    GigyaInit.goToForwardUrl = function (url) {
        if (url != null && url != "") {
            Cookie.FWDAccountURL.delete();
            Core.redirectTo(url);
        }
    };
    GigyaInit.loadConsumerProfile = function (consumer) {
        if (ApplicationState.UserIsSignedIn === true) {
            ConsumerProfile.UserAccountSettings.refreshUserAccountSettings(consumer);
            if (consumer.user.Display_Name != null) {
                LocalAccountStorage.ConsumerDisplayName.save(consumer.user.Display_Name);
            }
            else if (consumer.data != null && consumer.data.Display_Name != null) {
                LocalAccountStorage.ConsumerDisplayName.save(consumer.data.Display_Name);
            }
            if (consumer.user.email != null) {
                $("#txtProfileEmail").val(consumer.user.email);
            }
            else if (consumer.data != null && consumer.data.email != null) {
                $("#txtProfileEmail").val(consumer.data.email);
            }
            if (consumer != null) {
                Gigya.loadConsumerSearchPref(Gigya.PageCurrentSearchMode(), consumer);
            }
            if (!ApplicationState.IsMobileDevice) {
                //update desktop header
                $("#headerMyAccountText").html(Utilities.HTMLEncode(LocalAccountStorage.ConsumerDisplayName.get()));
                $("#lnkProfileMenuMyAccount").toggle(true);
                $("#lnkProfileMenuSignin").toggle(false);
            }
            if (consumer.user.Favourites != null) {
                Gigya.setCPFavourites(consumer.user.Favourites);
            }
            else if (consumer.data != null && consumer.data.Favourites != null) {
                Gigya.setCPFavourites(consumer.data.Favourites);
            }
            if (consumer.user.Compares != null) {
                Gigya.setCPCompares(consumer.user.Compares);
            }
            else if (consumer.data != null && consumer.data.Compares != null) {
                Gigya.setCPCompares(consumer.data.Compares);
            }
            if (consumer.user.Searches != null) {
                Gigya.setCPSearches(consumer.user.Searches);
            }
            else if (consumer.data != null && consumer.data.Searches != null) {
                Gigya.setCPSearches(consumer.data.Searches);
            }
            if (consumer.user.Notes != null) {
                Gigya.setCPNotes(consumer.user.Notes);
            }
            else if (consumer.data != null && consumer.data.Notes != null) {
                Gigya.setCPNotes(consumer.data.Notes);
            }
            if (consumer.user.Res_View != null || consumer.user.Com_View != null) {
                Gigya.setCPViewPref(consumer.user.Res_View != null ? consumer.user.Res_View : null, consumer.user.Com_View != null ? consumer.user.Com_View : null);
            }
            else if (consumer.data != null && (consumer.data.Res_View != null || consumer.data.Com_View != null)) {
                Gigya.setCPViewPref(consumer.data.Res_View != null ? consumer.data.Res_View : null, consumer.data.Com_View != null ? consumer.data.Com_View : null);
            }
            if (decodeURIComponent($("#SharedNotesSenderUID").val()) == ConsumerProfile.UserAccountSettings.UID) {
                AccountSessionStorage.SharedNotes.delete();
            }
            //This function get's called all the time now (relying on server cache?), so make this call the cachable version
            //ConsumerProfile.Notifications.RefreshNotifications(null, [ConsumerNotificationTypes.Search, ConsumerNotificationTypes.Favourite, ConsumerNotificationTypes.Compare, ConsumerNotificationTypes.Null]);
            //ConsumerProfile.Notifications.RefreshNotifications(null, null);
            GigyaInit.Events.consumerProfileLoaded.Fire({ consumer: consumer });
        }
    };
    GigyaInit.setCPSharedNotes = function (notes) {
        if (notes != null) {
            try {
                AccountSessionStorage.SharedNotes.save(notes);
            }
            catch (err) { }
        }
    };
    var _a;
    GigyaInit.ConsumerSearchCriteria = {};
    GigyaInit.Events = (_a = /** @class */ (function () {
            function class_1() {
            }
            return class_1;
        }()),
        _a.consumerPostMsgForm = new RealtorEvent("consumerPostMsgForm"),
        _a.consumerLoggedIn = new RealtorEvent("consumerLogin"),
        _a.consumerLoggedOut = new RealtorEvent("consumerLogout"),
        _a.consumerPreferenceLoaded = new RealtorEvent("consumerPreferenceLoaded"),
        _a.consumerMeasurementsLoaded = new RealtorEvent("measurementsLoaded"),
        _a.consumerProfileLoaded = new RealtorEvent("consumerProfileLoaded"),
        _a);
    return GigyaInit;
}());
//# sourceMappingURL=GigyaInit.js.map;
var ModelBase = /** @class */ (function () {
    function ModelBase() {
        this.IsUserSignedIn = ApplicationState.UserIsSignedIn;
    }
    return ModelBase;
}());
//# sourceMappingURL=ModelBase.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var AddToCalendarModel = /** @class */ (function (_super) {
    __extends(AddToCalendarModel, _super);
    //TimezoneOffset: string = "";
    //TimezoneOffsetRegular: string = "";
    //TimezoneOffsetDaylight: string = "";
    function AddToCalendarModel(listingId, referenceNumber, ctrlDescription, title, description, location, timezoneId, analyticsEvent) {
        var _this = _super.call(this) || this;
        _this.ListingId = "";
        _this.ReferenceNumber = "";
        _this.CtrlDescription = "";
        _this.Title = "";
        _this.Description = "";
        _this.Location = "";
        _this.isMultipleDates = false;
        _this.TimezoneId = "";
        _this.ListingId = listingId || "";
        _this.ReferenceNumber = referenceNumber || "";
        _this.CtrlDescription = ctrlDescription || "";
        _this.Title = title || "";
        _this.Description = description || "";
        _this.Location = location || "";
        _this.TimezoneId = timezoneId || "";
        if (analyticsEvent)
            _this.AnalyticsEvent = analyticsEvent;
        return _this;
        //this.TimezoneOffset = timezoneOffset || ""; //current
        //this.TimezoneOffsetRegular = timezoneOffsetRegular || "";
        //this.TimezoneOffsetDaylight = timezoneOffsetDaylight || "";
    }
    return AddToCalendarModel;
}(ModelBase));
//# sourceMappingURL=AddToCalendarModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var CalculatorModel = /** @class */ (function (_super) {
    __extends(CalculatorModel, _super);
    function CalculatorModel(Price, City, ProvinceCode) {
        var _this = _super.call(this) || this;
        _this.Price = Price;
        _this.City = City;
        _this.ProvinceCode = ProvinceCode;
        return _this;
    }
    return CalculatorModel;
}(ModelBase));
//# sourceMappingURL=CalculatorModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CityModel = /** @class */ (function (_super) {
    __extends(CityModel, _super);
    //missing child city model
    //Constructor
    function CityModel(cityId, CityName, CultureId, NumPropsForSale, NumPeople, AvgPrice, AvgPriceCanada, CityDescriptionTitle, CityDescriptionBodyText, SearchToken, SearchURL, ProvinceName, CityH1Tag, CityDescriptionImageBin, CityFactsOverlayImageBin, CityTitleImageBin, CityFactsOverlayTitle, CityFactsOverlayBodyText, Archive, CityTitleImagePathAltTag, GeoId) {
        var _this = _super.call(this) || this;
        //passing
        _this.Id = cityId;
        _this.CityName = CityName;
        _this.CultureId = CultureId;
        _this.NumPropsForSale = NumPropsForSale;
        _this.NumPeople = NumPeople;
        _this.AvgPrice = AvgPrice;
        _this.AvgPriceCanada = AvgPriceCanada;
        _this.CityDescriptionTitle = CityDescriptionTitle;
        _this.CityDescriptionBodyText = CityDescriptionBodyText;
        _this.SearchToken = SearchToken;
        _this.SearchURL = SearchURL;
        _this.ProvinceName = ProvinceName;
        _this.CityH1Tag = CityH1Tag;
        //missing child city model
        _this.CityDescriptionImageBin = CityDescriptionImageBin;
        _this.CityFactsOverlayImageBin = CityFactsOverlayImageBin;
        _this.CityTitleImageBin = CityTitleImageBin;
        _this.CityFactsOverlayTitle = CityFactsOverlayTitle;
        _this.CityFactsOverlayBodyText = CityFactsOverlayBodyText;
        _this.Archive = Archive;
        _this.CityTitleImagePathAltTag = CityTitleImagePathAltTag;
        _this.GeoId = GeoId;
        return _this;
    }
    return CityModel;
}(ModelBase));
//# sourceMappingURL=CityModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ConfirmationDialogModel = /** @class */ (function (_super) {
    __extends(ConfirmationDialogModel, _super);
    function ConfirmationDialogModel(ID, TitleTextID, BodyTextID, ButtonPositiveID, ButtonNegativeID, ButtonPositiveTextID, ButtonNegativeTextID, ButtonPositiveOnClick, ButtonNegativeOnClick, CloseOnClick, ButtonNegativeStyle, BeforeOpen, BeforeClose, AfterOpen, AfterClose, OpenTrigger, CloseTrigger) {
        var _this = _super.call(this) || this;
        _this.ID = "";
        _this.TitleTextID = "";
        _this.BodyTextID = "";
        _this.ButtonPositiveID = "";
        _this.ButtonNegativeID = "";
        _this.ButtonPositiveTextID = "";
        _this.ButtonNegativeTextID = "";
        _this.ButtonPositiveOnClick = "";
        _this.ButtonNegativeOnClick = "";
        _this.CloseOnClick = "";
        _this.ButtonNegativeStyle = "";
        _this.BeforeOpen = null;
        _this.BeforeClose = null;
        _this.AfterOpen = null;
        _this.AfterClose = null;
        _this.OpenTrigger = "";
        _this.CloseTrigger = "";
        _this.ID = ID;
        _this.TitleTextID = TitleTextID;
        _this.BodyTextID = BodyTextID;
        _this.ButtonPositiveID = ButtonPositiveID;
        _this.ButtonNegativeID = ButtonNegativeID;
        _this.ButtonPositiveTextID = ButtonPositiveTextID;
        _this.ButtonNegativeTextID = ButtonNegativeTextID;
        _this.ButtonPositiveOnClick = ButtonPositiveOnClick;
        _this.ButtonNegativeOnClick = ButtonNegativeOnClick;
        _this.CloseOnClick = CloseOnClick;
        _this.ButtonNegativeStyle = ButtonNegativeStyle;
        if (BeforeOpen) {
            _this.BeforeOpen = BeforeOpen;
        }
        ;
        if (BeforeClose) {
            _this.BeforeClose = BeforeClose;
        }
        ;
        if (AfterOpen) {
            _this.AfterOpen = AfterOpen;
        }
        ;
        if (AfterClose) {
            _this.AfterClose = AfterClose;
        }
        ;
        _this.OpenTrigger = OpenTrigger;
        _this.CloseTrigger = CloseTrigger;
        return _this;
    }
    return ConfirmationDialogModel;
}(ModelBase));
//# sourceMappingURL=ConfirmationDialogModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ConfirmationDialogModel2 = /** @class */ (function (_super) {
    __extends(ConfirmationDialogModel2, _super);
    function ConfirmationDialogModel2(ID, TitleText, BodyContent, ButtonPositiveText, ButtonPositiveOnClick, ButtonNegativeText, ButtonNegativeOnClick, ButtonNegativeStyle, ButtonCloseOnClick, BeforeOpen, BeforeClose, AfterOpen, AfterClose, OpenTrigger, CloseTrigger, FooterContent) {
        var _this = _super.call(this) || this;
        _this.ID = "";
        _this.TitleText = "&nbps;";
        _this.BodyContent = null;
        _this.FooterContent = null;
        _this.ButtonPositiveID = "";
        _this.ButtonNegativeID = "";
        _this.ButtonCloseID = "";
        _this.ButtonPositiveText = "";
        _this.ButtonNegativeText = "";
        _this.ButtonPositiveOnClick = function () { };
        _this.ButtonNegativeOnClick = function () { };
        _this.ButtonNegativeStyle = "";
        _this.ButtonCloseOnClick = function () { };
        _this.BeforeOpen = function () { };
        _this.BeforeClose = function () { };
        _this.AfterOpen = function () { };
        _this.AfterClose = function () { };
        _this.OpenTrigger = "";
        _this.CloseTrigger = "";
        _this.SetFocusOnLoad = true;
        _this.ShowNegativeButton = null;
        _this.ShowPositiveButton = null;
        _this.ShowCloseButton = true;
        _this.ShowTitleBar = true;
        _this.ShowButtons = true;
        _this.ShowFooterContent = false;
        _this.InitiallyHiddenDiag = false;
        _this.ID = ID;
        _this.TitleText = TitleText;
        if (BodyContent) {
            _this.BodyContent = BodyContent;
        }
        else {
            _this.BodyContent = $(BodyContent);
        }
        if (FooterContent) {
            _this.ShowFooterContent = true;
            if (FooterContent) {
                _this.FooterContent = FooterContent;
            }
            else {
                _this.FooterContent = $(FooterContent);
            }
        }
        _this.ButtonPositiveID = _this.ID + "_PositiveBtn";
        _this.ButtonNegativeID = _this.ID + "_NegativeBtn";
        _this.ButtonCloseID = _this.ID + "_CloseBtn";
        _this.ButtonPositiveText = ButtonPositiveText || "";
        _this.ButtonNegativeText = ButtonNegativeText || "";
        _this.ButtonPositiveOnClick = ButtonPositiveOnClick;
        _this.ButtonNegativeOnClick = ButtonNegativeOnClick;
        _this.ButtonCloseOnClick = ButtonCloseOnClick;
        _this.ButtonNegativeStyle = ButtonNegativeStyle || "";
        if (BeforeOpen) {
            _this.BeforeOpen = BeforeOpen;
        }
        ;
        if (BeforeClose) {
            _this.BeforeClose = BeforeClose;
        }
        ;
        if (AfterOpen) {
            _this.AfterOpen = AfterOpen;
        }
        ;
        if (AfterClose) {
            _this.AfterClose = AfterClose;
        }
        ;
        _this.OpenTrigger = OpenTrigger || "";
        _this.CloseTrigger = CloseTrigger || ApplicationState.IsMobileDevice ? "touchstart" : "click";
        if (_this.ShowNegativeButton == null || _this.ShowNegativeButton === undefined) {
            _this.ShowNegativeButton = (_this.ButtonNegativeText != "");
        }
        if (_this.ShowPositiveButton == null || _this.ShowPositiveButton === undefined) {
            _this.ShowPositiveButton = (_this.ButtonPositiveText != "");
        }
        return _this;
    }
    return ConfirmationDialogModel2;
}(ModelBase));
//# sourceMappingURL=ConfirmationDialogModel2.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ConsumerProfileModel = /** @class */ (function (_super) {
    __extends(ConsumerProfileModel, _super);
    function ConsumerProfileModel(obj) {
        var _this = _super.call(this) || this;
        _this.firstName = obj.firstName;
        _this.lastName = obj.lastName;
        _this.displayName = obj.displayName;
        _this.email = obj.email;
        _this.UID = obj.UID;
        _this.CRMUID = obj.CRMUID;
        _this.HashUID = obj.HashUID;
        _this.regToken = obj.regToken;
        _this.GigyaError = obj.GigyaError;
        _this.validationErrors = obj.validationErrors;
        _this.profile = obj.profile;
        _this.moreAboutYouCondition = obj.moreAboutYouCondition;
        _this.socialTermsCondition = obj.socialTermsCondition;
        _this.revisedTermsCondition = obj.revisedTermsCondition;
        _this.reactivateCondition = obj.reactivateCondition;
        _this.LoginProviderType = obj.LoginProviderType;
        _this.LoginProviderTypeJSON = obj.LoginProviderTypeJSON;
        _this.lastUpdatedTimestamp = obj.lastUpdatedTimestamp;
        _this.Favourites = obj.Favourites;
        _this.Compares = obj.Compares;
        _this.Searches = obj.Searches;
        _this.Notes = obj.Notes;
        _this.user = obj.user;
        _this.user_json = obj.user_json;
        _this.pwrtToken = obj.pwrtToken;
        _this.Interested = obj.Interested;
        _this.Interested_Com = obj.Interested_Com;
        _this.Buyer = obj.Buyer;
        _this.Buyer_Com = obj.Buyer_Com;
        //this.CREA_mail_updates = obj.CREA_mail_updates;
        //this.REALTOR_mail_updates = obj.REALTOR_mail_updates;
        _this.REALTOR_mail = obj.REALTOR_mail;
        _this.EmailRealtorConfirmation = obj.EmailRealtorConfirmation;
        _this.Salesforce_Contact_CREA_ID = obj.Salesforce_Contact_CREA_ID;
        _this.NotificationsEnabled = obj.NotificationsEnabled;
        _this.FavNotificationsEnabled = obj.FavNotificationsEnabled;
        _this.CompareNotificationsEnabled = obj.CompareNotificationsEnabled;
        _this.SavedSearchNotificationsEnabled = obj.SavedSearchNotificationsEnabled;
        _this.unsubscribeLink = obj.unsubscribeLink;
        _this.pardot_error = obj.pardot_error;
        _this.AccountStatus = obj.AccountStatus;
        return _this;
    }
    return ConsumerProfileModel;
}(ModelBase));
var GigyaError = /** @class */ (function () {
    function GigyaError() {
    }
    return GigyaError;
}());
var GigyaValidationErrors = /** @class */ (function () {
    function GigyaValidationErrors() {
    }
    return GigyaValidationErrors;
}());
var user_profile = /** @class */ (function () {
    function user_profile() {
    }
    return user_profile;
}());
var Favourites = /** @class */ (function () {
    function Favourites() {
    }
    return Favourites;
}());
var Compares = /** @class */ (function () {
    function Compares() {
    }
    return Compares;
}());
var Searches = /** @class */ (function () {
    function Searches() {
        this.notify = false;
    }
    return Searches;
}());
var NotificationSetting = /** @class */ (function () {
    function NotificationSetting(options) {
        this.frequency = NotificationFrequency.Never;
        this.id = options.id;
        this.method = options.method;
        this.frequency = options.frequency;
        this.lastActionedTimestampUTC = options.lastActionedTimestampUTC;
        this.createdTimestampUTC = options.createdTimestampUTC;
    }
    return NotificationSetting;
}());
var Notes = /** @class */ (function () {
    function Notes() {
    }
    return Notes;
}());
var Phones = /** @class */ (function () {
    function Phones() {
    }
    return Phones;
}());
var OptInOut = /** @class */ (function () {
    function OptInOut() {
    }
    return OptInOut;
}());
var ResidentialSearch = /** @class */ (function () {
    function ResidentialSearch() {
        this.measurements = "2";
        this.location = "";
        this.radius = "10";
        this.propertyType = "0";
        this.bathrooms = "0-0";
        this.bedrooms = "0-0";
        this.priceMin = "0";
        this.priceMax = "0";
        this.rentMin = "0";
        this.rentMax = "0";
        this.listedSince = "";
        this.openHouse = false;
        this.publicOffers = false;
        this.buildingType = "0";
        this.buildingStyle = "0";
        this.numberOfUnits = "0-0";
        this.buildingSize = "0-0";
        this.buildingSpace = "0-0";
        this.ownership = "0";
        this.storeys = "0-0";
        this.propertyView = "0";
        this.buildingAmenities = "0";
        this.amenitiesNearby = "0";
        this.landSize = "0-0";
        this.farmType = "0";
        this.crops = "0";
        this.livestock = "0";
        this.AC = false;
        this.pool = false;
        this.fireplace = false;
        this.garage = false;
        this.waterfront = false;
        this.acreage = false;
        this.landUse = "0";
        this.parkingSpaces = "0-0";
        this.parkingType = "0";
        this.zoning = "0";
        this.keywords = "";
    }
    return ResidentialSearch;
}());
var CommercialSearch = /** @class */ (function () {
    function CommercialSearch() {
        this.measurements = "2";
        this.location = "";
        this.radius = "10";
        this.propertyType = "0";
        this.bathrooms = "0-0";
        this.bedrooms = "0-0";
        this.priceMin = "0";
        this.priceMax = "0";
        this.rentMin = "0";
        this.rentMax = "0";
        this.listedSince = "";
        this.openHouse = false;
        this.publicOffers = false;
        this.buildingType = "0";
        this.buildingStyle = "0";
        this.numberOfUnits = "0-0";
        this.buildingSize = "0-0";
        this.buildingSpace = "0-0";
        this.buildingAmenities = "0";
        this.amenitiesNearby = "0";
        this.landSize = "0-0";
        this.farmType = "0";
        this.majorBusiness = "0";
        this.minorBusiness = "";
        this.AC = false;
        this.pool = false;
        this.fireplace = false;
        this.garage = false;
        this.waterfront = false;
        this.acreage = false;
        this.withProperty = false;
        this.parkingType = "0";
        this.siteFeatures = "0";
        this.zoning = "0";
        this.utilities = "0";
        this.keywords = "";
    }
    return CommercialSearch;
}());
var ResidentialView = /** @class */ (function () {
    function ResidentialView() {
        this.sortBy = "1-A";
        this.viewOn = "m";
        this.HPshow = "1";
        this.m_viewOn = "m";
        this.m_sortBy = "1-A";
    }
    return ResidentialView;
}());
var CommercialView = /** @class */ (function () {
    function CommercialView() {
        this.sortBy = "1-A";
        this.viewOn = "m";
        this.HPshow = "1";
        this.m_viewOn = "m";
        this.m_sortBy = "1-A";
    }
    return CommercialView;
}());
var Calculator = /** @class */ (function () {
    function Calculator() {
        this.downpayment = "5";
        this.s2downpayment = "5";
        this.amortization = "25";
        this.s2amortization = "25";
        this.rate = "";
        this.s2rate = "";
        this.term = "5";
        this.s2term = "5";
        this.frequency = "12";
        this.state = "1";
        this.annualIncome = "";
        this.monthlyDebt = "";
        this.propertyTax = "";
        this.condoFees = "";
        this.heatingCost = "";
        this.interestRate = "";
    }
    return Calculator;
}());
var Realtors = /** @class */ (function () {
    function Realtors() {
    }
    return Realtors;
}());
var Unsubscribe = /** @class */ (function () {
    function Unsubscribe() {
    }
    return Unsubscribe;
}());
var NotificationModes;
(function (NotificationModes) {
    NotificationModes[NotificationModes["None"] = 0] = "None";
    NotificationModes[NotificationModes["Online"] = 1] = "Online";
    NotificationModes[NotificationModes["OnlineAndEmail"] = 2] = "OnlineAndEmail";
})(NotificationModes || (NotificationModes = {}));
var Notifications = /** @class */ (function () {
    function Notifications() {
        this.favourites = false;
        this.compares = false;
        this.searches = false;
        this.type = "";
    }
    return Notifications;
}());
var Audit = /** @class */ (function () {
    function Audit() {
    }
    return Audit;
}());
var consumeruser = /** @class */ (function () {
    function consumeruser() {
    }
    consumeruser.CreateFromJSON = function (value) {
        var returnValue = new consumeruser();
        for (var prop in value)
            returnValue[prop] = value[prop];
        return returnValue;
    };
    return consumeruser;
}());
var ViewPref = /** @class */ (function () {
    function ViewPref() {
    }
    return ViewPref;
}());
var LoginProviderType = /** @class */ (function () {
    function LoginProviderType() {
    }
    return LoginProviderType;
}());
var AccountType;
(function (AccountType) {
    AccountType[AccountType["CREA"] = 0] = "CREA";
    AccountType[AccountType["Facebook"] = 1] = "Facebook";
    AccountType[AccountType["LinkedIn"] = 2] = "LinkedIn";
    AccountType[AccountType["GooglePlus"] = 3] = "GooglePlus";
    AccountType[AccountType["Twitter"] = 4] = "Twitter";
    AccountType[AccountType["Apple"] = 5] = "Apple";
})(AccountType || (AccountType = {}));
;
var Account_Status = /** @class */ (function () {
    function Account_Status() {
        this.Status = "";
    }
    return Account_Status;
}());
//# sourceMappingURL=ConsumerProfileModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the ContactRealtorCardModel.cs class.
 */
var ContactRealtorCardModel = /** @class */ (function (_super) {
    __extends(ContactRealtorCardModel, _super);
    function ContactRealtorCardModel() {
        return _super.call(this) || this;
    }
    return ContactRealtorCardModel;
}(ModelBase));
//# sourceMappingURL=ContactRealtorCardModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CurrencyModel = /** @class */ (function (_super) {
    __extends(CurrencyModel, _super);
    function CurrencyModel(currencyExceptionMessage) {
        var _this = _super.call(this) || this;
        _this.CurrencyExceptionMessage = "";
        _this.CurrencyExceptionMessage = currencyExceptionMessage;
        return _this;
        //ApplicationState.CurrencyExceptionMessage = this.CurrencyExceptionMessage;
    }
    return CurrencyModel;
}(ModelBase));
//# sourceMappingURL=CurrencyModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var DemographicsChartModel = /** @class */ (function (_super) {
    __extends(DemographicsChartModel, _super);
    function DemographicsChartModel(chartType, data, columns) {
        var _this = _super.call(this) || this;
        _this.ChartType = "";
        _this.Data = "";
        _this.ChartType = chartType;
        _this.Data = data;
        _this.Columns = columns;
        return _this;
    }
    return DemographicsChartModel;
}(ModelBase));
//# sourceMappingURL=DemographicsChartModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var DemographicsModel = /** @class */ (function (_super) {
    __extends(DemographicsModel, _super);
    function DemographicsModel(polygon, lat, lon) {
        var _this = _super.call(this) || this;
        _this.Polygon = "";
        _this.LocationLat = "";
        _this.LocationLon = "";
        _this.Polygon = polygon;
        _this.LocationLat = lat;
        _this.LocationLon = lon;
        return _this;
    }
    return DemographicsModel;
}(ModelBase));
//# sourceMappingURL=DemographicsModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DialogEditNoteModel = /** @class */ (function (_super) {
    __extends(DialogEditNoteModel, _super);
    function DialogEditNoteModel(ID, Address, Lat, Lon, HeaderTextID, BodyTextID, ButtonPositiveID, ButtonNegativeID, ButtonPositiveTextID, ButtonNegativeTextID, ButtonPositiveOnClick, ButtonNegativeOnClick, CloseOnClick, ButtonNegativeStyle, BeforeOpen, BeforeClose, AfterOpen, AfterClose, OpenTrigger, CloseTrigger, appMode) {
        var _this = _super.call(this) || this;
        _this.ID = "";
        _this.Address = "";
        _this.Lat = "";
        _this.Lon = "";
        _this.HeaderTextID = "";
        _this.BodyTextID = "";
        _this.ButtonPositiveID = "";
        _this.ButtonNegativeID = "";
        _this.ButtonPositiveTextID = "";
        _this.ButtonNegativeTextID = "";
        _this.ButtonPositiveOnClick = "";
        _this.ButtonNegativeOnClick = "";
        _this.CloseOnClick = "";
        _this.ButtonNegativeStyle = "";
        _this.BeforeOpen = null;
        _this.BeforeClose = null;
        _this.AfterOpen = null;
        _this.AfterClose = null;
        _this.OpenTrigger = "";
        _this.CloseTrigger = "";
        _this.appMode = 1;
        _this.ID = ID;
        _this.Address = Address;
        _this.Lat = Lat;
        _this.Lon = Lon;
        _this.HeaderTextID = HeaderTextID;
        _this.BodyTextID = BodyTextID;
        _this.ButtonPositiveID = ButtonPositiveID;
        _this.ButtonNegativeID = ButtonNegativeID;
        _this.ButtonPositiveTextID = ButtonPositiveTextID;
        _this.ButtonNegativeTextID = ButtonNegativeTextID;
        _this.ButtonPositiveOnClick = ButtonPositiveOnClick;
        _this.ButtonNegativeOnClick = ButtonNegativeOnClick;
        _this.CloseOnClick = CloseOnClick;
        _this.ButtonNegativeStyle = ButtonNegativeStyle;
        if (BeforeOpen) {
            _this.BeforeOpen = BeforeOpen;
        }
        ;
        if (BeforeClose) {
            _this.BeforeClose = BeforeClose;
        }
        ;
        if (AfterOpen) {
            _this.AfterOpen = AfterOpen;
        }
        ;
        if (AfterClose) {
            _this.AfterClose = AfterClose;
        }
        ;
        _this.OpenTrigger = OpenTrigger;
        _this.CloseTrigger = CloseTrigger;
        _this.appMode = appMode;
        return _this;
    }
    return DialogEditNoteModel;
}(ModelBase));
//# sourceMappingURL=DialogEditNoteModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var EmailRealtorModel = /** @class */ (function (_super) {
    __extends(EmailRealtorModel, _super);
    function EmailRealtorModel() {
        var _this = _super.call(this) || this;
        _this.ImageURL = "";
        _this.FirstName = "";
        _this.LastName = "";
        _this.EmailAddress = "";
        _this.PhoneNumber = "";
        _this.MobilePhoneNumber = "";
        _this.Iam = "0";
        _this.FindTextToHyperlinksInMsg = "";
        _this.HyperlinksToTextInMsg = "";
        _this.BookAShowing = false;
        return _this;
    }
    EmailRealtorModel.EmailFirstNameKeyBinding = "EmailFirstName";
    EmailRealtorModel.MyEmailKeyBinding = "MyEmail";
    EmailRealtorModel.MyPhoneKeyBinding = "MyPhone";
    EmailRealtorModel.WorkingRealtorNameKeyBinding = "WorkingRealtorName";
    EmailRealtorModel.EmailLastNameKeyBinding = "EmailLastName";
    return EmailRealtorModel;
}(ModelBase));
//# sourceMappingURL=EmailRealtorModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FavouritesModel = /** @class */ (function (_super) {
    __extends(FavouritesModel, _super);
    function FavouritesModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FavouritesModel;
}(ModelBase));
var SharedNotesModel = /** @class */ (function (_super) {
    __extends(SharedNotesModel, _super);
    function SharedNotesModel(displayName, notes, sharedNotesJSON) {
        var _this = _super.call(this) || this;
        _this.displayName = displayName;
        _this.notes = notes;
        _this.sharedNotesJSON = sharedNotesJSON;
        return _this;
    }
    return SharedNotesModel;
}(FavouritesModel));
//# sourceMappingURL=FavouritesModel.js.map;
var KeywordModel = /** @class */ (function () {
    function KeywordModel(parentSelector, selector, keywords, placeholderText) {
        this.dbKeywordsDict = new Dictionary();
        this.messageError = false;
        this.disableAddingKeywords = false;
        this.disableKeywordValidation = false;
        this.currentKeywordTyping = "";
        this.dbKeywordsDict = new Dictionary();
        this.dbKeywordsDict.AddList(keywords.replace(/\"/g, "").split('|').sort(), keywords.replace(/\"/g, "").split('|').sort());
        this.selector = selector;
        this.parentSelector = parentSelector;
        this.keywords = keywords;
        this.placeholderText = placeholderText;
    }
    /**
    * Function that will evaluate an ascii key code for a punctuation code
    */
    KeywordModel.prototype.hasPunctuationChar = function (key) {
        var matches = key.match(FormValidation.punctuationRegex);
        if (matches != null && matches.length > 0) {
            return true;
        }
        return false;
    };
    /**
        * Function that evaluates if the words in the keyword HTML option list are part of
        * passed keyword list
        * (mostly important when a search is fired using the hash values from HTTP parameters)
        * @param selector The keyword field having the keywords
        * @param keywordsStr A string version of a list of keywords
    */
    KeywordModel.removeKeywordsNotInList = function (selector, keywordsStr) {
        var currentKeywordsDict = new Dictionary();
        var currentKeywordsArray = keywordsStr.replace(/\"/g, "").split('|');
        currentKeywordsDict.AddList(currentKeywordsArray, currentKeywordsArray);
        $.each(selector.find("option"), function (i, e) {
            var element = $(e);
            if (!currentKeywordsDict.ContainsKey(element.val())) {
                element.attr("to-remove", "true");
            }
        });
        selector.find("option[to-remove='true']").remove();
    };
    KeywordModel.prototype.isKeywordInList = function (keyword, autocompleteKeywords) {
        var keywordInList = false;
        $.each(autocompleteKeywords, function (i, e) {
            if (e.trim() == keyword.trim()) {
                keywordInList = true;
                return false;
            }
        });
        return keywordInList;
    };
    /**
        * Function that makes sure the keywords passed are valid (maximum of 5 keywords where each keyword are
        * less or qual to 30 characters)
        * (mostly important when a search is fired using the hash values from HTTP parameters)
        * @param selector The keyword field having the keywords
        * @param keywordsStr A string version of a list of keywords
    */
    KeywordModel.formatValidKeywordInputForSearch = function (selector, keywordsStr) {
        var retKeywordsStr = "";
        //Initiate the list of keywords data in order to add the proper ones
        var currentKeywordsDict = new Dictionary();
        var currentKeywordsArray = keywordsStr.split(',');
        //Add only unduplicated tags to the list of keywords
        var keywordTooLong = false;
        var keywordTooMany = false;
        var addedKeywordsCount = 0;
        for (var x = 0; x < currentKeywordsArray.length; x++) {
            //Shorten the tag text to its limit + 1
            currentKeywordsArray[x] = currentKeywordsArray[x].trim().substring(0, KeywordModel.keywordLengthLimit);
            keywordTooMany = addedKeywordsCount >= KeywordModel.maxKeywords;
            keywordTooLong = currentKeywordsArray[x].length > KeywordModel.keywordLengthLimit;
            //Adding keyword process
            if (!currentKeywordsDict.ContainsKey(currentKeywordsArray[x])
                && !keywordTooMany && currentKeywordsArray[x].length > 0) {
                currentKeywordsDict.Add(currentKeywordsArray[x], currentKeywordsArray[x]);
                retKeywordsStr += currentKeywordsArray[x] + ",";
                addedKeywordsCount++;
            }
            //Dont add more keywords if a keyword is seen as too long
            //or too many keywords are typed
            if (keywordTooLong || keywordTooMany) {
                $(this).val(''); //Empty the keyword field
                break;
            }
        }
        return retKeywordsStr.replace(/^([^\r\n]+),$/, "$1");
    };
    KeywordModel.keywordLengthLimit = 30; //Keyword of 30 character limit
    KeywordModel.maxSuggestedKeywords = 5; //Suggested Keywords number limit
    KeywordModel.maxKeywords = 5; //Suggested Keywords number limit
    KeywordModel.minChrShowAutoComplete = 2;
    return KeywordModel;
}());
//# sourceMappingURL=KeywordModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LatestOffersInfoModel = /** @class */ (function (_super) {
    __extends(LatestOffersInfoModel, _super);
    function LatestOffersInfoModel(SecondaryTextContent, mainTextContent, titleText) {
        var _this = _super.call(this) || this;
        _this.SecondaryTextContent = "";
        _this.MainTextContent = "";
        _this.TitleText = "";
        _this.SecondaryTextContent = SecondaryTextContent;
        _this.MainTextContent = mainTextContent;
        _this.TitleText = titleText;
        return _this;
    }
    return LatestOffersInfoModel;
}(ModelBase));
//# sourceMappingURL=LatestOffersInfoModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LatestOffersModel = /** @class */ (function (_super) {
    __extends(LatestOffersModel, _super);
    function LatestOffersModel(results) {
        var _this = _super.call(this) || this;
        _this.pofd = results;
        return _this;
    }
    LatestOffersModel.GetLatestPublicOffers = function (criterias, success, errorHandler) {
        var successDataFetch = function (results) {
            return success(new LatestOffersModel(results).pofd);
        };
        Actions.GetLatestPublicOffers(criterias, successDataFetch, errorHandler);
    };
    LatestOffersModel.HandleLatestListingPublicOffersRefresh = function (criterias, msTimeToRefresh, success, errorHandler) {
        return setInterval(function () { LatestOffersModel.GetLatestPublicOffers(criterias, success, errorHandler); }, msTimeToRefresh);
    };
    LatestOffersModel.GetCurrencyOfferPriceFormatted = function (offer, currencyName) {
        var _a, _b;
        var defaultFXCAD = (_a = offer === null || offer === void 0 ? void 0 : offer.FXPrices) === null || _a === void 0 ? void 0 : _a.filter(function (value, index, array) { return value.ExchangeName == CurrencyType[CurrencyType.CAD]; });
        var returnPrice = (defaultFXCAD === null || defaultFXCAD === void 0 ? void 0 : defaultFXCAD.length) == 1 ? (_b = defaultFXCAD[0].Value) !== null && _b !== void 0 ? _b : "" : "";
        if (offer.FXPrices) {
            for (var x = 0; x < offer.FXPrices.length; x++) {
                if (offer.FXPrices[x].ExchangeName == currencyName) {
                    returnPrice = offer.FXPrices[x].Value;
                }
            }
        }
        return returnPrice;
    };
    return LatestOffersModel;
}(ModelBase));
//# sourceMappingURL=LatestOffersModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the ListingCardModel.cs class.
 */
var LinkModel = /** @class */ (function (_super) {
    __extends(LinkModel, _super);
    function LinkModel(text, link, cssClass, data) {
        var _this = _super.call(this) || this;
        _this.Text = "";
        _this.Link = "";
        _this.CSSClass = "";
        _this.Data = ""; //Generic data, for pagination will hold page number
        _this.Text = text;
        _this.Link = link;
        _this.CSSClass = cssClass;
        _this.Data = data;
        return _this;
    }
    return LinkModel;
}(ModelBase));
//# sourceMappingURL=LinkModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ListingCardCarouselModel = /** @class */ (function (_super) {
    __extends(ListingCardCarouselModel, _super);
    function ListingCardCarouselModel(cards, showBullets, continuousSlides, showXofX, itemsPerPage, slidesPerView) {
        if (showBullets === void 0) { showBullets = true; }
        if (continuousSlides === void 0) { continuousSlides = false; }
        if (showXofX === void 0) { showXofX = false; }
        if (itemsPerPage === void 0) { itemsPerPage = 1; }
        if (slidesPerView === void 0) { slidesPerView = "auto"; }
        var _this = _super.call(this) || this;
        _this.ShowBullets = true;
        _this.ContinuousSlides = false;
        _this.ShowXofX = false;
        _this.BottomChevrons = false;
        _this.ItemsPerPage = 1;
        _this.SlidesPerView = "auto";
        _this.Results = cards;
        _this.ShowBullets = showBullets;
        _this.ContinuousSlides = continuousSlides;
        _this.ShowXofX = showXofX;
        _this.ItemsPerPage = itemsPerPage;
        _this.SlidesPerView = slidesPerView;
        return _this;
    }
    return ListingCardCarouselModel;
}(ModelBase));
//# sourceMappingURL=ListingCardCarouselModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ListingCardModel = /** @class */ (function (_super) {
    __extends(ListingCardModel, _super);
    function ListingCardModel(obj, AppMode) {
        var _this = this;
        var _a;
        _this = _super.call(this) || this;
        _this.Id = "";
        _this.Distance = "";
        _this.FooterIcons = [];
        _this.BedBathIcons = [];
        _this.DetailsURL = "";
        _this.ImageURL = "";
        _this.LowResImageURL = "";
        _this.Price = "";
        _this.ConvertedPrice = "";
        _this.DisplayPrice = "";
        _this.Address = "";
        _this.AddressForNotes = "";
        _this.NoAddress = false;
        _this.MLSNumber = "";
        _this.OfficeName = "";
        _this.OfficeType = "";
        _this.OfficeNameAndType = "";
        _this.OfficeAltText = "";
        _this.OfficeLogo = "";
        _this.EventIconSrc = "";
        _this.EventDate = "";
        _this.EventDay = "";
        _this.EventMonth = "";
        _this.ShowEvent = false;
        _this.ExternalURL = "";
        _this.Latitude = "";
        _this.Longitude = "";
        _this.HasOpenHouse = false;
        _this.OpenHouseMonth = "";
        _this.OpenHouseDay = "";
        _this.ShowHasNoLocation = false;
        _this.ShowDistance = false;
        _this.ShowTombstoneFlag = false;
        _this.ShowNoteIcon = false;
        _this.ShowHeaderIcons = false;
        _this.ShowPrice = true;
        _this.ShowFooterIcons = true;
        _this.ShowOfficeDetails = true;
        _this.HasExternalWebsite = false;
        _this.HasPriceUpdate = false;
        _this.HasOfficeLogo = false;
        _this.HasOpenHouseUpdate = false;
        _this.HasNewImageUpdate = false;
        _this.HasLiveStreamUpdate = false;
        _this.HasNotifications = false;
        _this.RealtorImages = [];
        _this.AppMode = ApplicationState.CurrentMode;
        _this.ListingNotFound = false; //False for when a fav Id no longer available (not even tombstoned)
        _this.HasActiveLiveStream = false;
        _this.ShowTimeOnRealtor = false;
        _this.TimeOnRealtor = "";
        _this.TransactionTypeId = "";
        _this.ShowTag = false;
        _this.TagLabel = "";
        _this.TagColor = "";
        if (!obj.StatusId) {
            _this.Id = obj.Id;
            _this.ImageURL = ListingCardModel.noImageURL;
            _this.LowResImageURL = ListingCardModel.noImageURL;
            _this.ListingNotFound = true;
            _this.ShowHeaderIcons = _this.ShowTombstoneFlag == false;
            _this.Latitude = obj.Property.Address.Latitude;
            _this.Longitude = obj.Property.Address.Longitude;
            return _this;
        }
        else {
            _this.Id = obj.Id;
            _this.Price = (obj.Property.Price || "") + " " + (obj.Property.LeaseRent || "");
            _this.ConvertedPrice = (ApplicationConfig.CurrencyConverterEnabled ? obj.Property.ConvertedPrice : _this.Price);
            if (ApplicationConfig.CurrencyConverterEnabled && (_this.ConvertedPrice || "") == "") {
                //if (ApplicationState.CurrencyID != 0) {
                //    showMessage(Translation.get("CurrencyException"), MessageType.Error, DisplayType.Toast);
                //}
                _this.ConvertedPrice = _this.Price;
            }
            _this.DisplayPrice = Utilities.FormatCurrencyDisplay(_this.ConvertedPrice, ApplicationState.CurrencyName);
            _this.ShowTombstoneFlag = Number(obj.StatusId) == Number(ListingStatus.Tombstone);
            _this.ShowHeaderIcons = _this.ShowTombstoneFlag == false;
            _this.ShowHasNoLocation = (obj.Property.Address.Latitude || "") == "" && (obj.Property.Address.Longitude || "") == "";
            _this.ShowPrice = Number(obj.StatusId) != Number(ListingStatus.Tombstone);
            _this.ShowOfficeDetails = Number(obj.StatusId) != Number(ListingStatus.Tombstone);
            _this.ShowFooterIcons = Number(obj.StatusId) != Number(ListingStatus.Tombstone);
            _this.ShowNoteIcon = ApplicationState.UserIsSignedIn && Note.exists(_this.Id);
            _this.Address = obj.Property.Address.AddressText.replace(/\|/g, ", ").replace(/[a-z][0-9][a-z][0-9][a-z][0-9]/i, '');
            if (_this.Address.replace(/( |,)/g, "") == "") {
                _this.Address = Translation.get("AddressNotAvailable");
                _this.NoAddress = true;
            }
            if (obj.Property.Address.AddressText == "|") {
                _this.AddressForNotes = obj.MlsNumber;
                _this.NoAddress = true;
            }
            else {
                _this.AddressForNotes = _this.Address;
            }
            _this.MLSNumber = obj.MlsNumber;
            _this.OfficeName = obj.Individual[0].Organization.Name;
            _this.OfficeType = obj.Individual[0].Organization.Designation;
            _this.OfficeNameAndType = obj.Individual[0].Organization.Name;
            _this.OfficeAltText = Translation.get("OfficeImageAltText", _this.OfficeName);
            //this.OfficeLogo = obj.Individual[0].Organization.Logo;
            //this.HasOfficeLogo = ((this.OfficeLogo || "") != "");
            if (obj.Individual[0].Organization != null && (obj.Individual[0].Organization.Logo || "") != "") {
                //this.OfficeLogo = Utilities.convertOrganizationImageURLToWebserviceURL(obj.Individual[0].Organization.Logo);
                _this.OfficeLogo = obj.Individual[0].Organization.Logo;
                _this.HasOfficeLogo = true;
            }
            if (obj.AlternateURL != null && (obj.AlternateURL.DetailsLink || "") != "") {
                _this.ExternalURL = obj.AlternateURL.DetailsLink;
                _this.HasExternalWebsite = true;
            }
            if ((obj.Distance || "") != "") {
                _this.ShowDistance = true;
                _this.Distance = obj.Distance;
            }
            //Make into single OfficeNameAndType field
            if ((_this.OfficeType || "") != "") {
                _this.OfficeNameAndType = _this.OfficeName + ",&nbsp;" + _this.OfficeType;
            }
            _this.DetailsURL = obj.RelativeDetailsURL;
            _this.Latitude = (_this.ShowHasNoLocation ? "" : obj.Property.Address.Latitude);
            _this.Longitude = (_this.ShowHasNoLocation ? "" : obj.Property.Address.Longitude);
            if (obj.Property.Photo != null && obj.Property.Photo.length > 0) {
                //this.ImageURL = Utilities.convertImageURLToWebserviceURL(obj.Property.Photo[0].MedResPath);
                //this.LowResImageURL = Utilities.convertImageURLToWebserviceURL(obj.Property.Photo[0].LowResPath);
                _this.ImageURL = obj.Property.Photo[0].MedResPath;
                _this.LowResImageURL = obj.Property.Photo[0].LowResPath;
            }
            else {
                _this.ImageURL = ListingCardModel.noImageURL;
                _this.LowResImageURL = ListingCardModel.noImageURL;
            }
            _this.HasOpenHouse = (obj.OpenHouse || []).length > 0;
            if (obj.OpenHouse && obj.OpenHouse.length > 0) {
                _this.ShowEvent = true;
                var eventDateObj = Utilities.parseAPIDateString(obj.OpenHouse[0].StartDateTime); //"01/06/2018 11:30:00 AM"
                var eventDay = eventDateObj.getDate().toString();
                var eventMonth = Utilities.getShortMonthString(eventDateObj.getMonth(), ApplicationState.CultureID);
                _this.EventDate = eventDay + ' ' + eventMonth;
                _this.EventDay = eventDay;
                _this.EventMonth = eventMonth;
                if (obj.OpenHouse[0].TypeID == ApplicationConfig.OpenHouseEventId) {
                    _this.EventIconSrc = '/images/common/icons/svg/calendar.svg';
                }
                else if (obj.OpenHouse[0].TypeID == ApplicationConfig.StreamEventId) {
                    _this.EventIconSrc = '/images/common/icons/svg/stream-blue.svg';
                }
            }
            _this.HasActiveLiveStream = obj.HasActiveLiveStream && obj.OpenHouse[0].TypeID == ApplicationConfig.StreamEventId;
            if ((obj.OpenHouse || []).length > 0) {
                var date = Utilities.parseAPIDateString(obj.OpenHouse[0].StartDateTime); //"01/06/2018 11:30:00 AM"
                _this.OpenHouseDay = date.getDate().toString();
                _this.OpenHouseMonth = Utilities.getShortMonthString(date.getMonth(), ApplicationState.CultureID);
            }
            if ((obj.Building.Bedrooms || "") != "") {
                var newIcon = new ListingCardModel.FooterIcon();
                newIcon.IconHTML = "<div class=\"propertyCardBedIcon\"><img src='/images/common/icons/svg/bed-gray.svg' alt='' /></div>";
                newIcon.Label = Translation.get("Bedrooms");
                newIcon.NumberVal = obj.Building.Bedrooms;
                _this.FooterIcons.push(newIcon);
            }
            if ((obj.Building.BathroomTotal || "") != "") {
                var newIcon = new ListingCardModel.FooterIcon();
                newIcon.IconHTML = "<div class=\"propertyCardBathIcon\"><img src='/images/common/icons/svg/bath-gray.svg' alt='' /></div>";
                newIcon.Label = Translation.get("Bathrooms");
                newIcon.NumberVal = obj.Building.BathroomTotal;
                _this.FooterIcons.push(newIcon);
            }
            //let PropertyTypeId = obj.Property.TypeId || "";
            //let OwnershipGroupIds = obj.Property.OwnershipTypeGroupIds || null;
            //Removed per User Story - 159710
            //if (PropertyTypeId != "" && ApplicationState.IsMobileDevice == false) {
            //    let newIcon: ListingCardModel.FooterIcon = new ListingCardModel.FooterIcon();
            //    newIcon.IconHTML = "<div class=\"propertyCardPropertyIcon\"><img alt=\"\" src='" + ListingCardModel.getPropertyIcon(Number(PropertyTypeId)) + "' /></div>";
            //    newIcon.Label = (PropertyTypeId === RealEstateType.SingleFamily.toString() && OwnershipGroupIds != null && OwnershipGroupIds.length > 0 && OwnershipGroupIds.some(el => el === OwnershipTypeGroup.CondoStrata) ? Translation.get("Condo") : obj.Property.Type);
            //    this.FooterIcons.push(newIcon);
            //}
            for (var i = 0; i < Math.min(2, obj.Individual.length); i++) {
                if ((obj.Individual[i].Photo || "") != "") {
                    var newRealtorImage = new ListingCardModel.RealtorImage();
                    //newRealtorImage.RealtorImageURL = Utilities.convertIndividualImageURLToWebserviceURL(obj.Individual[i].Photo);
                    newRealtorImage.RealtorImageURL = obj.Individual[i].Photo;
                    newRealtorImage.RealtorImageAltText = Translation.get("RealtorImageAltText", obj.Individual[i].Name);
                    _this.RealtorImages.push(newRealtorImage);
                }
            }
            _this.HasOpenHouseUpdate = obj.HasOpenHouseUpdate || false;
            _this.HasLiveStreamUpdate = obj.HasLiveStreamUpdate || false;
            _this.HasPriceUpdate = obj.HasPriceUpdate || false;
            _this.HasNewImageUpdate = obj.HasNewImageUpdate || false;
            _this.HasNotifications = (_this.HasOpenHouseUpdate || _this.HasPriceUpdate || _this.HasNewImageUpdate || _this.HasLiveStreamUpdate) && ApplicationConfig.ShowBellIconOnListingCards;
            //Since we're modeless now, let's default to mode based on property type so as not to messs up apps too much
            _this.AppMode = AppMode || Utilities.getModeFromPropertyType(obj.Property.TypeId); //ApplicationState.CurrentMode; //passed in from notifications results
            _this.TimeOnRealtor = obj.TimeOnRealtor;
            _this.ConditionallySold = obj.ConditionallySold;
            if (obj.TimeOnRealtor)
                _this.ShowTimeOnRealtor = false; // true && !this.ConditionallySold;
            else
                _this.ShowTimeOnRealtor = false;
            if (obj.Tags && obj.Tags.length > 0 && !ApplicationConfig.EnablePublicOffersUI) {
                obj.Tags = (_a = obj === null || obj === void 0 ? void 0 : obj.Tags) === null || _a === void 0 ? void 0 : _a.filter(function (v) { return v.ListingTagTypeID != ListingTagType.PublicOffer.toString(); });
            }
            if (obj.Tags && obj.Tags.length > 0) {
                _this.ShowTag = true;
                _this.TagLabel = obj.Tags[0].Label;
                _this.TagColor = obj.Tags[0].HTMLColorCode;
            }
        }
        return _this;
    }
    ListingCardModel.getPropertyIcon = function (propertyTypeId) {
        var returnValue = "";
        switch (propertyTypeId) {
            case Number(PropertyTypes.SingleFamily):
            case Number(PropertyTypes.Recreational):
                returnValue = "/images/common/icons/svg/house-gray2.svg";
                break;
            case Number(PropertyTypes.MultiTenant):
            case Number(PropertyTypes.Business):
            case Number(PropertyTypes.Retail):
            case Number(PropertyTypes.Industrial):
            case Number(PropertyTypes.Office):
            case Number(PropertyTypes.Hospitality):
            case Number(PropertyTypes.Institutional):
                returnValue = "/images/common/icons/svg/commercial-darkgray.svg";
                break;
            case Number(PropertyTypes.Agricultural):
                returnValue = "/images/common/icons/svg/agriculture.svg";
                break;
            case Number(PropertyTypes.Land):
                returnValue = "/images/common/icons/svg/land.svg";
                break;
            case Number(PropertyTypes.Parking):
                returnValue = "/images/common/icons/svg/parking.svg";
                break;
            default:
                returnValue = "/images/common/icons/svg/house-gray2.svg";
        }
        return returnValue;
    };
    Object.defineProperty(ListingCardModel.prototype, "ShowFooter", {
        get: function () {
            return this.HasOfficeLogo || this.HasExternalWebsite || this.RealtorImages.length > 0;
        },
        enumerable: false,
        configurable: true
    });
    ListingCardModel.noImageURL = "/images/common/no-image.png";
    return ListingCardModel;
}(ModelBase));
(function (ListingCardModel) {
    var IconType;
    (function (IconType) {
        IconType[IconType["Bedrooms"] = 1] = "Bedrooms";
        IconType[IconType["Bathrooms"] = 2] = "Bathrooms";
        IconType[IconType["BuildingType"] = 3] = "BuildingType";
        IconType[IconType["OpenHouse"] = 4] = "OpenHouse";
    })(IconType || (IconType = {}));
    var FooterIcon = /** @class */ (function () {
        function FooterIcon() {
            this.IconHTML = "";
            this.Label = "";
            this.NumberVal = "";
        }
        return FooterIcon;
    }());
    ListingCardModel.FooterIcon = FooterIcon;
    var RealtorImage = /** @class */ (function () {
        function RealtorImage() {
            this.RealtorImageURL = "";
            this.RealtorImageAltText = "";
        }
        return RealtorImage;
    }());
    ListingCardModel.RealtorImage = RealtorImage;
    var FXPrice = /** @class */ (function () {
        function FXPrice() {
            this.CurrencyName = "";
            this.Value = "";
        }
        return FXPrice;
    }());
    ListingCardModel.FXPrice = FXPrice;
})(ListingCardModel || (ListingCardModel = {}));
//# sourceMappingURL=ListingCardModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var ListingModel = /** @class */ (function (_super) {
    __extends(ListingModel, _super);
    function ListingModel(listingId, organizationId, referenceNumber, realtorId, latitude, longitude, provinceCode, propertyTypeId, disseminationArea, price, city, sqft, postalcode, province, hasPhotoCaptions) {
        var _this = _super.call(this) || this;
        _this.hasOpenHouse = false;
        _this.hasPhotoCaptions = false;
        _this.listingId = listingId;
        _this.organizationId = organizationId;
        _this.referenceNumber = referenceNumber;
        _this.realtorId = realtorId;
        _this.price = price;
        _this.city = city;
        _this.hasPhotoCaptions = hasPhotoCaptions;
        _this.latitude = latitude;
        _this.longitude = longitude;
        _this.provinceCode = provinceCode;
        _this.propertyTypeId = propertyTypeId;
        _this.disseminationArea = disseminationArea;
        _this.sqft = sqft;
        _this.postalcode = postalcode;
        _this.province = province;
        _this.multimedia = new Array();
        return _this;
    }
    return ListingModel;
}(ModelBase));
//# sourceMappingURL=ListingModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ListingResultsModel = /** @class */ (function (_super) {
    __extends(ListingResultsModel, _super);
    function ListingResultsModel(results) {
        var _this = _super.call(this) || this;
        _this.Results = results;
        return _this;
    }
    return ListingResultsModel;
}(ModelBase));
//# sourceMappingURL=ListingResultsModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var MapCardModel = /** @class */ (function (_super) {
    __extends(MapCardModel, _super);
    function MapCardModel(lat, lon, showMap) {
        if (showMap === void 0) { showMap = true; }
        var _this = _super.call(this) || this;
        _this.Lat = "";
        _this.Lon = "";
        _this.ShowMap = true;
        _this.Lat = lat;
        _this.Lon = lon;
        _this.ShowMap = showMap;
        return _this;
    }
    return MapCardModel;
}(ModelBase));
//# sourceMappingURL=MapCardModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ModalContentModel = /** @class */ (function (_super) {
    __extends(ModalContentModel, _super);
    function ModalContentModel(ID, TitleText, BodyContent, ButtonCloseOnClick, BeforeOpen, BeforeClose, AfterOpen, AfterClose, OpenTrigger, CloseTrigger, CssClass) {
        var _this = _super.call(this) || this;
        _this.ID = "";
        _this.TitleText = "&nbps;";
        _this.BodyContent = null;
        _this.ButtonCloseID = "";
        _this.ButtonCloseOnClick = function () { };
        _this.BeforeOpen = function () { };
        _this.BeforeClose = function () { };
        _this.AfterOpen = function () { };
        _this.AfterClose = function () { };
        _this.OpenTrigger = "";
        /** Class that when clicked will close modal */
        _this.CloseTrigger = "";
        /** Event to listen for that will trigger modal close */
        _this.CloseEvent = "";
        _this.SetFocusOnLoad = true;
        _this.ShowCloseButton = true;
        _this.ShowTitleBar = true;
        _this.CssClass = "";
        _this.DisplayType = ModalDisplayTypes.Featherlight;
        _this.ID = ID;
        _this.TitleText = TitleText;
        if (BodyContent) {
            _this.BodyContent = BodyContent;
        }
        else {
            _this.BodyContent = $(BodyContent);
        }
        _this.ButtonCloseID = _this.ID + "_CloseBtn";
        _this.ButtonCloseOnClick = ButtonCloseOnClick;
        if (BeforeOpen) {
            _this.BeforeOpen = BeforeOpen;
        }
        ;
        if (BeforeClose) {
            _this.BeforeClose = BeforeClose;
        }
        ;
        if (AfterOpen) {
            _this.AfterOpen = AfterOpen;
        }
        ;
        if (AfterClose) {
            _this.AfterClose = AfterClose;
        }
        ;
        _this.OpenTrigger = OpenTrigger || "";
        _this.CloseTrigger = CloseTrigger || "";
        _this.CssClass = CssClass || "";
        return _this;
    }
    return ModalContentModel;
}(ModelBase));
//# sourceMappingURL=ModalContentModel.js.map;
/**
 * MultimediaModel class for displaying an embed video on screen
 * *
 * IMPORTANT Information*
 *
 *  1.Video Implementation possibilities:
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *      1.1.Video with specified thumbnail,
 *       defered loading on user click:
 *         var video = new MultimediaModel('https:\/\/youtu.be/HkTIntBdALY',
 *               'NR-LeftBoxVideo2',
 *               VideoLoadingDisplay.Yes,
 *
 *               VideoDisplay.VideoWithThumbnail,
 *               VideoLoadingType.LoadingDefered);
 *           video.setThumbnailImageManually("/images/common/backgrounds/HkTIntBdALY.jpg");
 *           video.StartEmbed();
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *      1.2.Video with thumbnail dynamic load,
 *      loading immediately

 *         var video = new MultimediaModel('https:\/\/youtu.be/HkTIntBdALY',
 *               'NR-LeftBoxVideo2',
 *               VideoLoadingDisplay.Yes,
 *               VideoDisplay.VideoWithThumbnail,
 *               VideoLoadingType.LoadingNow);
 *           video.setThumbnailImageManually("/images/common/backgrounds/HkTIntBdALY.jpg");
 *           video.StartEmbed();
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *      1.3.Video with specified thumbnail,
 *      loading immediately
 *
 *         var video = new MultimediaModel('https:\/\/youtu.be/HkTIntBdALY',
 *               'NR-LeftBoxVideo2',
 *               VideoLoadingDisplay.Yes,
 *               VideoDisplay.VideoWithThumbnail,
 *               VideoLoadingType.LoadingNow);
 *           video.StartEmbed();
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  2.You can use setContentOptions to set your own Thumbnail container, play button and loading thumbnail
 *   but it needs to be tested for the CSS styling
 *
 *  3.You can use setThumbnailImageManually function to directly change the thumbnail image shown for the video
 *      Ex:this.setThumnailImageManually('newUrl')
 *
 *  4.The Iframe and Thumbnail are expanding to the video container width size.
 *  If you specify both an height and a width for the video container,
 *  it will be resized accordingly and always trying to keep aspect ratio.
 *
 *      Ex: model.multimedia.VideoResizeHandlerEnabled = true;
 *
 *     To keep aspect ratio and limit sizing you need to activate both options:
 *          Ex: model.multimedia.LimitHeightVideoSize = true;
 *              model.multimedia.LimitWidthVideoSize = true;
 *     Activating only [LimitHeightVideoSize not LimitWidthVideoSize] will make the width expand to fit and vice versa
 *
 *  5.You can directly modify the providers (MultimediaProvider) behavior like youtube by changing the VideoLoadingType to [native] or [yql]
 *  to change the way it loads: use MultimediaManager instance after creating your MultimediaModel.
 *      Ex: this.MultiManager.Youtube.PreferedLoadingMethod = VideoLoadingType.Native;
 *
 **************************
 *  6.Additional usefull options:
 *      .EnableProvidersAutoPlay(): void -> Enable video autoplay on all providers without user interaction
 *      .Loading video display, thumbnail video display,
 *        loading video immediately or defer the loading at user click
 *        -> specified at MultimediaModel constructor(...)
 *
 *  7.Multiple Selector used + global event handlers for SwiperJS library:
 *      .SwiperJS has duplicated slides which means it has a copy of some slides so global event handlers catch all of them...
 *      .Selecting elements with a selector containing another selector seems to be the only way to target the duplicated slides...
 *
 **************************
 * IMPORTANT Information*
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
* Ways of implementing the video and searching video data
*/
var VideoAccessType;
(function (VideoAccessType) {
    /**
    * Description: Using the video provider's built in technology not fetching API data
    */
    VideoAccessType["Native"] = "0";
    /**
    * Description: Using our local server for searching API data
    */
    VideoAccessType["Local"] = "1";
    /**
    * Description: Basic video data created manually not fetching API data
    */
    VideoAccessType["BVD"] = "2";
    /**
    * Description: Direct video data access using HTTP URLs format
    */
    VideoAccessType["DVA"] = "3";
})(VideoAccessType || (VideoAccessType = {}));
/**
* List of provider name for identification
*/
var VideoProviderName;
(function (VideoProviderName) {
    VideoProviderName[VideoProviderName["Youtube"] = 0] = "Youtube";
    VideoProviderName[VideoProviderName["Vimeo"] = 1] = "Vimeo";
    VideoProviderName[VideoProviderName["Matterport"] = 2] = "Matterport";
    VideoProviderName[VideoProviderName["Youriguide"] = 3] = "Youriguide";
    VideoProviderName[VideoProviderName["Paradym"] = 4] = "Paradym";
    VideoProviderName[VideoProviderName["Realtourvision"] = 5] = "Realtourvision";
    VideoProviderName[VideoProviderName["Previsite"] = 6] = "Previsite";
    VideoProviderName[VideoProviderName["RealVision"] = 7] = "RealVision";
    VideoProviderName[VideoProviderName["ImmoViewer"] = 8] = "ImmoViewer";
    VideoProviderName[VideoProviderName["Bonnevisite"] = 9] = "Bonnevisite";
    VideoProviderName[VideoProviderName["PropertyPanorama"] = 10] = "PropertyPanorama";
    VideoProviderName[VideoProviderName["ImageMaker"] = 11] = "ImageMaker";
    VideoProviderName[VideoProviderName["Istaging"] = 12] = "Istaging";
    VideoProviderName[VideoProviderName["ListSimple3DTour"] = 13] = "ListSimple3DTour";
    VideoProviderName[VideoProviderName["InsideMap3DTour"] = 14] = "InsideMap3DTour";
})(VideoProviderName || (VideoProviderName = {}));
var VideoDisplay;
(function (VideoDisplay) {
    VideoDisplay[VideoDisplay["VideoWithThumbnail"] = 0] = "VideoWithThumbnail";
    VideoDisplay[VideoDisplay["VideoNoThumbnail"] = 1] = "VideoNoThumbnail";
})(VideoDisplay || (VideoDisplay = {}));
/**
* Description: Describes how the video thumbnail and iframe are loaded
*/
var VideoLoadingType;
(function (VideoLoadingType) {
    /**
    * Description: The thumbnail is loaded statically specified by user and the video data loads after
    * clicking the play button
    */
    VideoLoadingType[VideoLoadingType["LoadingDefered"] = 0] = "LoadingDefered";
    /**
    * Description: The thumbnail and the IFRAME can be loaded statically or dynamically using or not the
    * API and it loads immediately before clicking the play button
    */
    VideoLoadingType[VideoLoadingType["LoadingNow"] = 1] = "LoadingNow";
})(VideoLoadingType || (VideoLoadingType = {}));
var VideoLoadingDisplay;
(function (VideoLoadingDisplay) {
    VideoLoadingDisplay[VideoLoadingDisplay["Yes"] = 0] = "Yes";
    VideoLoadingDisplay[VideoLoadingDisplay["No"] = 1] = "No";
})(VideoLoadingDisplay || (VideoLoadingDisplay = {}));
var ThumbnailRenderingMode;
(function (ThumbnailRenderingMode) {
    ThumbnailRenderingMode[ThumbnailRenderingMode["Cover"] = 0] = "Cover";
    ThumbnailRenderingMode[ThumbnailRenderingMode["Contain"] = 1] = "Contain";
})(ThumbnailRenderingMode || (ThumbnailRenderingMode = {}));
var MultimediaModel = /** @class */ (function (_super) {
    __extends(MultimediaModel, _super);
    /**
      * Default constructor of the multimedia model
      * @param {string} multiHTTPURL - HTTP video URL
      * @param {string} videoContainerId - Video container DOM id to place the video in
      * @param {boolean} loadingThumbnailActivated - Want to activate the loading video display?
      * @param {boolean} videoThumbnailActivated - Want to activate the video thumbnail?
    */
    function MultimediaModel(multiHTTPURL, videoContainerId, videoLoadingDisplay, videoDisplay, videoLoadingType, thumbnailRenderingMode) {
        if (videoContainerId === void 0) { videoContainerId = "videoModal"; }
        if (videoLoadingDisplay === void 0) { videoLoadingDisplay = VideoLoadingDisplay.Yes; }
        if (videoDisplay === void 0) { videoDisplay = VideoDisplay.VideoWithThumbnail; }
        if (videoLoadingType === void 0) { videoLoadingType = VideoLoadingType.LoadingDefered; }
        if (thumbnailRenderingMode === void 0) { thumbnailRenderingMode = ThumbnailRenderingMode.Contain; }
        var _this = _super.call(this) || this;
        _this.LoadingThumbnailId = "videoThumbnailLoading";
        _this.VideoThumbnailId = "videoThumbnail";
        _this.VideoBtnId = "play_button";
        _this.VideoErrorContainerId = "videoErrorMainContainer";
        _this.VideoRefreshErrorBtnId = "videoRefreshErrorBtnId";
        _this.VideoErrorDefaultTemplateActivated = false;
        //Additional multimedia variables for shortcut access
        _this.PlayableMultiSrc = ''; //Cleaned HTTP URL from its original form using a static URL template
        _this.EmbedMultiSrc = ''; //Transformed original HTTP url used for embedding
        _this.MultiId = ''; //Multimedia id to identify the core of the video
        _this.AdditionalMultiId = new Array(); //Additional video IDS to play in a playlist
        _this.currVideoIdx = 0;
        //Thumbnails information
        _this.MultiDefaultPictureCom = '/images/common/backgrounds/video_bg_commercial.png';
        _this.MultiDefaultPictureRes = '/images/common/backgrounds/video_bg_residential.png';
        _this.LoadingIconAnimUrl = "/images/common/icons/loading.gif";
        _this.DefaultVideoThumbSrc = null; //Shortcut for the identified default frame image
        _this.ManualThumbnailImageSrc = null;
        _this.ThumbnailImageSrc = null;
        _this.HttpUrlRegEx = /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/ig;
        _this.embedable = false;
        _this.videoLoaded = false;
        _this.videoDataFetched = false;
        _this.videoLoading = false;
        //Additional Misc features
        _this.VideoResizeHandlerEnabled = true; //Video resize or not?
        _this.LimitHeightVideoSize = false;
        _this.LimitWidthVideoSize = false;
        _this.ThumbnailImageWidth = 0;
        _this.ThumbnailImageHeight = 0;
        _this.AjaxVideoDataQueueName = null;
        _this.CachedImageContainerId = "cachedImagesContainer";
        _this.AppendCachedImageContainerAfterId = "";
        _this.MultiHTTPURL = multiHTTPURL;
        _this.VideoLoadingDisplay = videoLoadingDisplay;
        _this.VideoDisplay = videoDisplay;
        _this.VideoLoadingType = videoLoadingType;
        _this.VideoContainerId = videoContainerId;
        _this.SetDefaultMultimediaPic(); //Set the default picture thumbnail to use for embed error videos
        _this.MultiManager = new MultimediaManager();
        _this.ThumbnailRenderingMode = thumbnailRenderingMode;
        return _this;
    }
    /**
      * Optional to set additional options to the video display
      * *BE CAREFULL WITH THE OPTIONS: They could break the video display with
      * erroneous data
      * @param {string} multiThumbAlt - alt text for the video container
      * @param {string} loadingThumbnailId - your own loading thumbnail DOM id
      * @param {string} videoThumbnailId - your own video thumbnail DOM id
      * @param {string} videoBtnId - your own video button DOM id
      * @param {JQuery} videoThumbnail - your own video thumbnail
      * @param {JQuery} loadingThumbnail - your own loading thumbnail
      *
    */
    MultimediaModel.prototype.setContentOptions = function (multiThumbAlt, loadingThumbnailId, videoThumbnailId, videoWrapperContainerId, videoInnerContainerId, videoBtnId, videoErrorContainerId, videoRefreshErrorBtnId) {
        if (multiThumbAlt === void 0) { multiThumbAlt = ""; }
        if (loadingThumbnailId === void 0) { loadingThumbnailId = "videoThumbnailLoading"; }
        if (videoThumbnailId === void 0) { videoThumbnailId = "videoThumbnail"; }
        if (videoWrapperContainerId === void 0) { videoWrapperContainerId = "videoModal-wrapper"; }
        if (videoInnerContainerId === void 0) { videoInnerContainerId = "videoModal-inner"; }
        if (videoBtnId === void 0) { videoBtnId = "play_button"; }
        if (videoErrorContainerId === void 0) { videoErrorContainerId = "videoErrorContainerId"; }
        if (videoRefreshErrorBtnId === void 0) { videoRefreshErrorBtnId = "videoRefreshErrorBtnId"; }
        this.MultiThumbAlt = multiThumbAlt;
        this.LoadingThumbnailId = loadingThumbnailId;
        this.VideoThumbnailId = videoThumbnailId;
        this.VideoBtnId = videoBtnId;
        this.VideoWrapperContainerId = videoWrapperContainerId;
        this.VideoInnerContainerId = videoInnerContainerId;
        this.VideoErrorContainerId = videoErrorContainerId;
        this.VideoRefreshErrorBtnId = videoRefreshErrorBtnId;
        this.VideoThumbnail = $("#" + this.VideoThumbnailId);
        this.LoadingThumbnail = $("#" + this.LoadingThumbnailId);
        this.VideoThumbnailModal = $("<div style=\"height: 100%;display: flex;align-items: center;justify-content: center;\" id=\"" + this.VideoContainerId + "\">" +
            "<img src=\"" + this.MultiDefaultPictureRes + "\"" + "alt =\"\" id=\"" + "modal_img_" + this.VideoContainerId + "\" class=\"\" style=\"display: none;\">" +
            $(this.LoadingThumbnail)[0].outerHTML + "</div>");
        //Hide the thumbnail container
        $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId).hide();
        //Hide or show the loading thumbnail container
        if (this.VideoLoadingDisplay == VideoLoadingDisplay.Yes) {
            $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).show();
        }
        else {
            $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).hide();
        }
        //Hide the error container by default
        $("#" + this.VideoContainerId + " #" + this.VideoErrorContainerId).hide();
        //Set alt of the image to the container
        if (!this.MultiThumbAlt) {
            $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).prepend("<span role=\"img\" aria-label=\"".concat(multiThumbAlt, "\">"));
            $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).attr("aria-label", this.MultiThumbAlt);
        }
    };
    /**
      * Replace the image inside the thumbnail container
      * @param {string} imageUrl - Thumbnail image link
      *
    */
    MultimediaModel.prototype.setThumbnailImageManually = function (imageUrl) {
        this.ManualThumbnailImageSrc = imageUrl;
    };
    /**
      * Get the thumbnail Image URL of the video
      *
    */
    MultimediaModel.prototype.getThumbnailImageUrl = function () {
        var imgSrc = !!this.ThumbnailImageSrc ? this.ThumbnailImageSrc :
            this.ManualThumbnailImageSrc ? this.ManualThumbnailImageSrc :
                this.GetDefaultMultimediaPic();
        return imgSrc;
    };
    /**
    * In some cases we want to play the video manually...
    *
    */
    MultimediaModel.prototype.forcePlayVideo = function (additionalSelectorQuery) {
        if (additionalSelectorQuery === void 0) { additionalSelectorQuery = null; }
        if (!!additionalSelectorQuery) {
            $("#" + this.VideoContainerId + additionalSelectorQuery).find("#" + this.VideoThumbnailId).click();
        }
        else {
            $("#" + this.VideoContainerId).find("#" + this.VideoThumbnailId).click();
        }
    };
    /*
    * Remove the video iframe from its container
    */
    MultimediaModel.prototype.emptyVideoContainer = function () {
        $("#" + this.VideoContainerId + " #" + this.VideoInnerContainerId).empty();
        this.videoLoaded = false;
    };
    /*
    * Show/hide loading bar
    */
    MultimediaModel.prototype.showLoadingVideoContainer = function (show) {
        if (show === void 0) { show = true; }
        $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).toggle(show);
    };
    /*
    * Show/hide the video thumbnail and its play button
    */
    MultimediaModel.prototype.showVideoThumbnail = function (show) {
        if (show === void 0) { show = true; }
        $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId).toggle(show);
    };
    /*
    * Show/hide the video iframe container
    */
    MultimediaModel.prototype.showVideoIframe = function (show) {
        if (show === void 0) { show = true; }
        $("#" + this.VideoContainerId + " #" + this.VideoWrapperContainerId).toggle(show);
    };
    MultimediaModel.prototype.testErrorTemplate = function () {
        if (this.VideoErrorDefaultTemplateActivated) {
            throw new JSException("test error template", "", 123, 12, null);
        }
    };
    /*
    * Show the error template
    */
    MultimediaModel.prototype.handleErrorTemplate = function (show) {
        if (this.VideoErrorDefaultTemplateActivated) {
            if (show) {
                $("#" + this.VideoContainerId).unbind("click");
                $("#" + this.VideoContainerId + " #" + this.VideoErrorContainerId).show();
            }
            else {
                $("#" + this.VideoContainerId + " #" + this.VideoErrorContainerId).hide();
            }
        }
        else {
            $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId).hide();
            $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId).attr("src", this.GetDefaultMultimediaPic());
            $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId).css("background", "url('".concat(this.GetDefaultMultimediaPic(), "')center center / \n            ").concat(this.ThumbnailRenderingMode == ThumbnailRenderingMode.Contain ? "contain" : "cover", " no-repeat"));
            $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId).show();
            MultimediaModel.virtualTourThumbnailLoadedEvent.Fire({ model: this });
        }
    };
    /*
    * Show the error template
    */
    MultimediaModel.prototype.showFloorPlanIcon = function (verifyFloorPlanLink) {
        if (verifyFloorPlanLink) {
            if ((this.SelectedHost.VideoProvider == VideoProviderName.Youriguide ||
                this.SelectedHost.VideoProvider == VideoProviderName.RealVision) &&
                !!this.SelectedHost.FormatedPdfUrlFeet && !!this.SelectedHost.FormatedPdfUrlMetric) {
                return true;
            }
        }
        else {
            if (this.SelectedHost.VideoProvider == VideoProviderName.Youriguide ||
                this.SelectedHost.VideoProvider == VideoProviderName.RealVision) {
                return true;
            }
        }
        return false;
    };
    /**
       * Start function to have an embed video on the page
    */
    MultimediaModel.prototype.StartEmbed = function () {
        var me = this;
        me.videoLoading = true;
        //Insert the cache container if its not present inside main page
        if ($("#" + this.CachedImageContainerId).length == 0 &&
            this.AppendCachedImageContainerAfterId != null && this.AppendCachedImageContainerAfterId.length > 0) {
            $("<div id='" + this.CachedImageContainerId + "'></div>").insertAfter("#" + this.AppendCachedImageContainerAfterId);
        }
        else if ($("#" + this.CachedImageContainerId).length == 0 &&
            (this.AppendCachedImageContainerAfterId == null || this.AppendCachedImageContainerAfterId.length == 0)) {
            //Default cached image container append to body
            $("<div id='" + this.CachedImageContainerId + "'></div>").appendTo("body");
        }
        //Important before leaving the page so the video events dont overlap using smoothstate page transition
        var uniqueBindIdThumbnail = "#" + me.VideoContainerId +
            " #" + me.VideoThumbnailId +
            ",#" + me.VideoContainerId + " #" + me.VideoBtnId;
        var uniqueBindIdErrorContainer = "#" + me.VideoContainerId + " #"
            + me.VideoRefreshErrorBtnId;
        $(document).unbind('click.' + MultimediaModel.eventNamespace + uniqueBindIdErrorContainer);
        $(document).unbind('click.' + MultimediaModel.eventNamespace + uniqueBindIdThumbnail);
        //Error template manager display
        $(document).on('click.' + MultimediaModel.eventNamespace + uniqueBindIdErrorContainer, uniqueBindIdErrorContainer, function (e) {
            $("#" + me.VideoContainerId + " #" + me.VideoErrorContainerId).hide();
            $("#" + me.VideoContainerId + " #" + me.LoadingThumbnailId).show();
            $("#" + me.VideoContainerId + " #" + me.VideoRefreshErrorBtnId).unbind("click");
            me.StartEmbed();
            e.stopImmediatePropagation();
            e.stopPropagation();
        });
        //Multimedia play button event handler that handles the actions to load the video
        $(document).on('click.' + MultimediaModel.eventNamespace + uniqueBindIdThumbnail, uniqueBindIdThumbnail, function (e) {
            e.stopImmediatePropagation();
            e.stopPropagation();
            //Add the iframe video to the video container
            var iframeHTML = $(me.RawHtmlVideoCode);
            var iframeSrc = iframeHTML.find("iframe").attr("src") != null ? iframeHTML.find("iframe").attr("src") : iframeHTML.attr("src");
            //Start loading the video defered at user interaction to be shown eventually
            if (me.VideoLoadingType == VideoLoadingType.LoadingDefered && me.SelectedHost.CanLoadAndShowVideo) {
                //Hide thumbnail to show the loading
                $("#" + this.VideoContainerId + " #" + me.VideoContainerId + " #" + me.VideoThumbnailId).hide();
                $("#" + this.VideoContainerId + " #" + me.VideoWrapperContainerId).show();
                me.loadVideo(me.ImplementMultiEmbeding);
            }
            else if (me.SelectedHost.PreferedLoadingMethod != VideoAccessType.Native && me.SelectedHost.CanLoadAndShowVideo) { //Show the video immediately since it has loaded in the background
                //Append the final version of the query parameters to add to the video
                iframeHTML.attr("src", iframeSrc);
                iframeHTML.css("opacity", "0"); //Dont show now to prevent blank page showing...
                //hide thumbnail and show loading
                $("#" + me.VideoContainerId + " #" + me.VideoThumbnailId).hide();
                $("#" + me.VideoContainerId + " #" + me.LoadingThumbnailId).show();
                //Handle the iframe loading
                iframeHTML.attr("onload", "showIframe(this,'" + me.VideoContainerId +
                    "','" + me.VideoWrapperContainerId + "','" + me.VideoInnerContainerId + "','" + me.LoadingThumbnailId + "');");
                MultimediaModel.virtualTourAddVideoEvent.Fire({ model: me, iframeHtmlToAppend: iframeHTML[0].outerHTML });
                //Iframe loaded flag information
                me.videoLoading = false;
                me.videoLoaded = true;
            }
            else if (me.SelectedHost.PreferedLoadingMethod == VideoAccessType.Native && me.SelectedHost.CanLoadAndShowVideo) {
                iframeHTML.css("opacity", "0"); //Dont show now to prevent blank page showing...
                //hide thumbnail and show loading
                $("#" + me.VideoContainerId + " #" + me.VideoThumbnailId).hide();
                $("#" + me.VideoContainerId + " #" + me.LoadingThumbnailId).show();
                iframeHTML.attr("onload", "showIframe(this,'" + me.VideoContainerId +
                    "','" + me.VideoWrapperContainerId + "','" + me.VideoInnerContainerId + "','" + me.LoadingThumbnailId + "');");
                MultimediaModel.virtualTourAddVideoEvent.Fire({ model: me, iframeHtmlToAppend: iframeHTML[0].outerHTML });
                me.SelectedHost.SetVideoInfo(me);
                me.videoLoading = false;
                me.videoLoaded = true;
            }
        });
        //Iframe resize event handler on window
        if (me.VideoResizeHandlerEnabled) {
            $(window).resize(function () {
                //me.adjustThumbnailSize();
                //me.adjustVideoIframesSize();
            });
        }
        //Start the embedding proccess
        try {
            if (this.MultiHTTPURL != null && this.MultiHTTPURL.length > 0) {
                me.embedable = this.initMultimediaVideo(this.MultiHTTPURL); //set the URL used to play the embedable video
                if (me.embedable) {
                    //Verify that the video needs to load now or defer it at user interaction
                    if (me.VideoLoadingType == VideoLoadingType.LoadingNow) {
                        //Load the video and show it
                        this.loadVideo(this.ImplementMultiEmbeding);
                    }
                    else {
                        //Load the thumbnail instead first and wait for user interraction to load video
                        this.SetThumbnailPicture();
                    }
                }
                else {
                    me.videoLoading = false;
                    me.handleErrorTemplate(false);
                    MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
                }
            }
            else {
                me.videoLoading = false;
                me.handleErrorTemplate(true);
                MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
            }
            //Cross origin errors being fired Sometimes by Iframe JS
            Events.Listen(JSException.windowError, function (e) {
                var exception = e.detail;
                //Logging.Debug(e + "-Multimedia error while initiating: " + this.MultiHTTPURL, LogType.Multimedia);
            });
        }
        catch (e) {
            Logging.Debug(e + "-Multimedia error while initiating: " + this.MultiHTTPURL, LogType.Multimedia);
            me.videoLoading = false;
            me.handleErrorTemplate(true);
            MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
        }
    };
    /**
    * Description: Function used to determine if the URL link is a multimedia embedable video
    *   @param {string} url - HTTP URL
    */
    MultimediaModel.isEmbedableVideoUrl = function (url) {
        var SelectedHost;
        var mm = new MultimediaManager();
        //Replace all HTTP mention to HTTPS in the URL to avoid security issues and weird display
        url = url.replace(/https?:\/\//ig, "https://");
        SelectedHost = mm.getHost(url);
        return SelectedHost != null ? true : false;
    };
    /**
    * Description: Function returning the host of the URL
    *   @param {string} url - HTTP URL
    */
    MultimediaModel.getHostUrl = function (url) {
        var regExHost = new RegExp(/(https?:\/\/[^/]+)/i);
        var match = regExHost.exec(url);
        if (match != null && match.length > 1) {
            return match[1];
        }
        return null;
    };
    /**
    * Description: Function that sets additonal video IDS to be played in a playlist type
    *   @param {Array<string>} urls - Additonal Multimedia HTTP URLS
    */
    MultimediaModel.prototype.addAdditionalVideoURLS = function (videoURLS) {
        for (var url in videoURLS) {
            var mp = this.MultiManager.getHost(videoURLS[url]);
            var match = videoURLS[url].match(mp.RegUrlReformat);
            var videoCapturingGroupId = match.length - 1;
            //Find the corresponding capturing group with the video id from the list of capturing groups
            if (mp.RegExGroupIDs.length > 0) {
                for (var x = 0; x < mp.RegExGroupIDs.length; x++) {
                    videoCapturingGroupId = mp.RegExGroupIDs[x];
                    if (match != null && match[videoCapturingGroupId] != null && match[videoCapturingGroupId].length > 0) {
                        this.AdditionalMultiId.push(match[videoCapturingGroupId]);
                        break;
                    }
                }
            }
        }
    };
    /**
    * Description: Function that sets the HTTP urls for embedding, previewing and
       its JSON HTTP URL for a JSON request
    *   @param {string} url - Multimedia HTTP URL from the user
    */
    MultimediaModel.prototype.initMultimediaVideo = function (url) {
        var _a, _b;
        //Replace all HTTP mention to HTTPS in the URL to avoid security issues and weird display
        url = url.indexOf("http") > -1 ? url.replace(/https?:\/\//ig, "https://") : "https://" + url;
        //Find the video provider
        this.SelectedHost = this.MultiManager.getHost(url);
        //Set default video info to start
        (_a = this.SelectedHost) === null || _a === void 0 ? void 0 : _a.SetDefaultVideoInfo(this, url);
        /* Current parameters for the video URL */
        var queryUrlObj = this.SelectedHost.CleanQueryURL ? Utilities.getQueryObjUrl(Utilities.cleanQueryUrl(url)) : Utilities.getQueryObjUrl(url);
        //Valid host? -> find multimedia relevant id first
        if (this.SelectedHost && this.SelectedHost.ActivatedEmbed) {
            //Build the query parameters for the video querystring URL
            if (this.SelectedHost.AddAdditionalParamValue) {
                var removeQueryUrlObj = Utilities.getQueryObjUrl(this.SelectedHost.DisablePlayParam, this.SelectedHost.CaseSensitiveParam);
                var addQueryUrlObj = Utilities.getQueryObjUrl(this.SelectedHost.AdditionalParam, this.SelectedHost.CaseSensitiveParam);
                this.SelectedHost.QueryParamsObj = Utilities.getFinalEmbedQueryParam(queryUrlObj, removeQueryUrlObj, addQueryUrlObj, this.SelectedHost.OverwriteParamValue);
                this.SelectedHost.QueryParamStr = Utilities.getURLQueryParamFormat(this.SelectedHost.QueryParamsObj);
            }
            else {
                this.SelectedHost.QueryParamStr = Utilities.getURLQueryParamFormat(queryUrlObj);
            }
            var match_1 = url.match(this.SelectedHost.RegUrlReformat);
            if (match_1 == null)
                return false;
            var videoCapturingGroupId = match_1.length - 1;
            //Find the corresponding capturing group with the video id from the list of capturing groups
            if (this.SelectedHost.RegExGroupIDs.length > 0) {
                for (var x = 0; x < this.SelectedHost.RegExGroupIDs.length; x++) {
                    videoCapturingGroupId = this.SelectedHost.RegExGroupIDs[x];
                    if (match_1 != null && match_1[videoCapturingGroupId] != null && match_1[videoCapturingGroupId].length > 0) {
                        break;
                    }
                }
            }
            //Defining-> video embeded URL, JSON video data URL
            var baseUrl = this.SelectedHost.PreviewUrl ? this.SelectedHost.PreviewUrl : url;
            var urlEmbed = null;
            urlEmbed = this.SelectedHost.getEmbedURLToUse(this, url) != null ? "https://" + this.SelectedHost.getEmbedURLToUse(this, url) : baseUrl;
            if (match_1 != null && match_1[videoCapturingGroupId] != null && match_1[videoCapturingGroupId].length > 0) {
                this.MultiId = match_1[videoCapturingGroupId];
                //Very specific-> Change Propertypanorama embeded URL with the proper entry URL (/rahb or /ortis)
                if (this.SelectedHost.VideoProvider == VideoProviderName.PropertyPanorama)
                    urlEmbed += match_1[5];
                //Init the language Param
                var languageParam = '';
                if (ApplicationState.CultureID == 1) {
                    languageParam = (typeof this.SelectedHost.LangEnParam != null ? this.SelectedHost.LangEnParam : "");
                }
                else {
                    languageParam = (typeof this.SelectedHost.LangFrParam != null ? this.SelectedHost.LangFrParam : "");
                }
                //Finalize the value of the embed URL with the language param and its querystring
                var modifiedUrlWithParam = void 0;
                if (languageParam != null && languageParam.length > 0) {
                    modifiedUrlWithParam = urlEmbed + this.MultiId + this.SelectedHost.QueryParamStr + "&" + languageParam;
                    modifiedUrlWithParam = Utilities.removeDuplicateParamFrom(modifiedUrlWithParam);
                    this.EmbedMultiSrc = this.SelectedHost.QueryParamStr.indexOf("?") > -1 ? modifiedUrlWithParam : urlEmbed + this.MultiId + "?" + languageParam;
                }
                else {
                    modifiedUrlWithParam = urlEmbed + this.MultiId + this.SelectedHost.QueryParamStr;
                    modifiedUrlWithParam = Utilities.removeDuplicateParamFrom(modifiedUrlWithParam);
                    this.EmbedMultiSrc = this.SelectedHost.QueryParamStr.indexOf("?") > -1 ? modifiedUrlWithParam : urlEmbed + this.MultiId;
                }
                this.SelectedHost.SetDefaultVideoInfo(this, this.EmbedMultiSrc);
                //Simple Cleaned playable multimedia url version (for youtube and vimeo)
                this.PlayableMultiSrc = baseUrl + this.MultiId;
                //Init the JSON video URL to fetch data or 
                //to validate the existence of it on the server 
                var queryParamSymb = this.SelectedHost.JsonApi && this.SelectedHost.JsonApi.indexOf("?") > -1 ? "&" : "?";
                if (this.SelectedHost.JsonApi &&
                    this.SelectedHost.VideoProvider == VideoProviderName.Youtube ||
                    this.SelectedHost.VideoProvider == VideoProviderName.Vimeo) {
                    var filteredRegexes = (_b = this.SelectedHost.RegExOtherGroupIDs) === null || _b === void 0 ? void 0 : _b.filter(function (value) { return match_1.length > value && !!match_1[value]; });
                    this.SelectedHost.FormatedJsonUrl = this.SelectedHost.JsonApi + queryParamSymb
                        + 'format=json&url=' + this.PlayableMultiSrc +
                        ((filteredRegexes === null || filteredRegexes === void 0 ? void 0 : filteredRegexes.length) > 0 ? "/" + match_1[filteredRegexes[0]] : "");
                }
                else if (this.SelectedHost.JsonApi &&
                    this.SelectedHost.VideoProvider == VideoProviderName.PropertyPanorama) {
                    this.SelectedHost.FormatedJsonUrl = this.SelectedHost.JsonApi
                        + match_1[5] + this.MultiId;
                }
                else if (this.SelectedHost.JsonApi) {
                    this.SelectedHost.FormatedJsonUrl = this.SelectedHost.JsonApi + this.MultiId +
                        queryParamSymb + "format=json";
                }
                else if (this.SelectedHost.VerifyVideoHttpStatusCode) {
                    this.SelectedHost.FormatedJsonUrl = this.EmbedMultiSrc;
                }
                return true;
            }
        }
        return false;
    };
    /**
      * Loading the video data for display
      * @param {(x: MultimediaModel)=>void} implementVideo - Callback function to further implement the video in the DOM
      *
    */
    MultimediaModel.prototype.loadVideo = function (implementVideo) {
        var me = this;
        me.videoDataFetched = true;
        //Non standard provider solution where we manually build the exposed
        //thumbnail and iframe
        if (me.SelectedHost.PreferedLoadingMethod == VideoAccessType.BVD) {
            //Init the thumbnail web url access if available
            if (me.SelectedHost.ThumbWebUrl) {
                me.SelectedHost.FormatedThumbUrl = me.SelectedHost.ThumbWebUrl;
            }
            //Prepare the default iframe container to be inserted
            if (this.SelectedHost.FormatedThumbUrl) {
                me.ThumbnailImageSrc = me.SelectedHost.FormatedThumbUrl;
            }
            me.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + me.EmbedMultiSrc + "\"");
            implementVideo(me);
        }
        else if (me.SelectedHost.PreferedLoadingMethod == VideoAccessType.Local) {
            //Prepare the events to get the instagram data
            var error = function (request, textStatus, error) {
                Logging.Debug(error, LogType.Multimedia);
                me.videoDataFetched = false;
                me.videoLoading = false;
                me.handleErrorTemplate(true);
                MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
            };
            var success = function (data) {
                var resultKept = data;
                if (resultKept.error != null && resultKept.statusCode != null) {
                    Logging.Debug("Error seen while fetching video data: " + me.PlayableMultiSrc, LogType.Multimedia);
                    me.videoDataFetched = false;
                    me.videoLoading = false;
                    me.handleErrorTemplate(true);
                    MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
                    return;
                }
                else {
                    me.SelectedHost.SetVideoInfo(me, resultKept);
                }
                implementVideo(me);
            };
            //Send the request
            Actions.GetVideoJsonData({
                url: me.SelectedHost.FormatedJsonUrl, cacheType: "ListingVideoData",
                checkOnlyHttpStatusCode: this.SelectedHost.VerifyVideoHttpStatusCode
            }, success, error, null, me.AjaxVideoDataQueueName != null ? me.AjaxVideoDataQueueName : null);
        }
        else if (me.SelectedHost.PreferedLoadingMethod == VideoAccessType.Native) {
            if (me.SelectedHost.VideoProvider == VideoProviderName.Youtube) {
                Events.Listen(MultimediaModel.youtubeLoadEvent, function (e) {
                    if (!me.videoLoaded) {
                        me.RawHtmlVideoCode = $("#" + me.VideoInnerContainerId)[0].outerHTML;
                        me.ThumbnailImageSrc = me.GetDefaultMultimediaPic();
                        implementVideo(me);
                    }
                });
                me.SelectedHost.SetVideoInfo = function (mm) {
                    //Set the players variables in the selected host
                    me.YT_Player = new YT.Player(me.VideoInnerContainerId, {
                        playerVars: {
                            'showinfo': me.SelectedHost.QueryParamsObj["showinfo"],
                            'modestbranding': me.SelectedHost.QueryParamsObj["modestbranding"],
                            'autoplay': me.SelectedHost.QueryParamsObj["autoplay"],
                            'rel': me.SelectedHost.QueryParamsObj["rel"]
                        },
                        videoId: me.MultiId,
                        host: 'https://www.youtube.com',
                        events: {
                            'onReady': me.YTonPlayerReady,
                            'onStateChange': me.YTonPlayerStateChange,
                            'onError': me.YTonError
                        }
                    });
                };
                if (me.VideoDisplay == VideoDisplay.VideoNoThumbnail ||
                    me.VideoLoadingType == VideoLoadingType.LoadingDefered) {
                    me.SelectedHost.SetVideoInfo(me);
                }
                else {
                    this.SetThumbnailPicture();
                }
            }
        }
    };
    /**
       * Implement the multimedia embeding in the DOM
       * @param {MultimediaModel} me - Multimedia model instance class
   */
    MultimediaModel.prototype.ImplementMultiEmbeding = function (me) {
        return __awaiter(this, void 0, void 0, function () {
            var setThumbnailMehod, iframeHTML, iframeSrc;
            return __generator(this, function (_a) {
                me.videoDataFetched = true;
                MultimediaModel.virtualTourDataFetched.Fire({ model: me, fetched: true });
                //Load the thumbnail first or show the video container right away
                if (me.ValidIframeElement(me.RawHtmlVideoCode)
                    && !me.RawErrorMsg) {
                    setThumbnailMehod = me.SetThumbnailPicture;
                    if (me.VideoDisplay == VideoDisplay.VideoWithThumbnail && me.VideoLoadingType == VideoLoadingType.LoadingNow) {
                        me.SetThumbnailPicture();
                    }
                    iframeHTML = $(me.RawHtmlVideoCode);
                    iframeSrc = iframeHTML.find("iframe").attr("src") != null ? iframeHTML.find("iframe").attr("src") : iframeHTML.attr("src");
                    // Show the video now if the video loading has been defered at user interaction
                    //or we have the no thumbnail option
                    if ((me.VideoLoadingType == VideoLoadingType.LoadingDefered ||
                        me.VideoDisplay == VideoDisplay.VideoNoThumbnail)
                        && (me.SelectedHost.PreferedLoadingMethod != VideoAccessType.Native)) {
                        //Append the final version of the query parameters to add to the video
                        if (iframeSrc.indexOf("?") > -1) {
                            me.SelectedHost.QueryParamStr = me.SelectedHost.QueryParamStr.replace("?", "&");
                        }
                        if (me.SelectedHost.QueryParamStr != null && me.SelectedHost.QueryParamStr.length > 0) {
                            iframeHTML.attr("src", iframeSrc);
                        }
                        iframeHTML.css("opacity", "0"); //Dont show now to prevent blank page showing...
                        //hide thumbnail and show loading
                        $("#" + me.VideoContainerId + " #" + me.VideoThumbnailId).hide();
                        $("#" + me.VideoContainerId + " #" + me.LoadingThumbnailId).show();
                        //Handle the iframe loading
                        iframeHTML.attr("onload", "showIframe(this,'" + me.VideoContainerId +
                            "','" + me.VideoWrapperContainerId + "','" + me.VideoInnerContainerId + "','" + me.LoadingThumbnailId + "');");
                        MultimediaModel.virtualTourAddVideoEvent.Fire({ model: me, iframeHtmlToAppend: iframeHTML[0].outerHTML });
                        //Iframe loaded flag information
                        me.videoLoaded = true;
                        me.videoLoading = false;
                    }
                    else if (me.SelectedHost.PreferedLoadingMethod == VideoAccessType.Native) {
                        me.videoLoaded = true;
                        me.videoLoading = false;
                        iframeHTML.css("opacity", "0"); //Dont show now to prevent blank page showing...
                        //hide thumbnail and show loading
                        $("#" + me.VideoContainerId + " #" + me.VideoThumbnailId).hide();
                        $("#" + me.VideoContainerId + " #" + me.LoadingThumbnailId).show();
                        iframeHTML.attr("onload", "showIframe(this,'" + me.VideoContainerId +
                            "','" + me.VideoWrapperContainerId + "','" + me.VideoInnerContainerId + "','" + me.LoadingThumbnailId + "');");
                        MultimediaModel.virtualTourAddVideoEvent.Fire({ model: me, iframeHtmlToAppend: iframeHTML[0].outerHTML });
                    }
                }
                else {
                    me.handleErrorTemplate(true);
                    MultimediaModel.virtualTourLoadEvent.Fire({ loaded: false, videoIndexId: me.VideoContainerId });
                }
                return [2 /*return*/];
            });
        });
    };
    /**
      * Changing the width and the height of the videos IFRAME by defining a static width for the video,
      * a dynamic height using a ratio (height/width)
      *
    */
    MultimediaModel.prototype.adjustVideoIframesSize = function () {
        //Loop all existing iframes in the page
        var iFrames = $("#" + this.VideoContainerId + " iframe");
        if (iFrames.length > 0) {
            for (var x = 0; x < iFrames.length; x++) {
                var iFrame = iFrames[x];
                //Ratio height/width of the iframe
                var ratio = 0;
                //Find the original ratio width/height with the iframe attribute
                if (parseInt($(iFrame).attr("ratio"))) {
                    ratio = parseFloat($(iFrame).attr("ratio"));
                }
                else if (parseInt($(iFrame).attr("height")) && parseInt($(iFrame).attr("width"))) {
                    ratio = parseInt($(iFrame).attr("width").toString()) / parseInt($(iFrame).attr("height").toString());
                }
                else if (iFrame.clientWidth && iFrame.clientHeight) {
                    ratio = iFrame.clientWidth / iFrame.clientHeight;
                }
                else {
                    ratio = 0.75;
                }
                //Width options choices
                var limitHeight = $("#" + this.VideoContainerId).height();
                var limitWidth = $("#" + this.VideoContainerId).width();
                var currentWidth = iFrame.clientWidth; //Dom loaded iframe width
                var currentAttrWidth = parseInt($(iFrame).attr("width")); //Attribute iframe width;
                var videoContainerWidth = $("#" + this.VideoContainerId).width(); //Video container width
                //Transformed width and height of iframe
                var adjustedHeight = 0;
                var currentlyUsedWidth = 0;
                if (videoContainerWidth > 0) {
                    currentlyUsedWidth = videoContainerWidth;
                }
                else if (currentWidth > 0) {
                    currentlyUsedWidth = currentWidth;
                }
                else if (currentAttrWidth > 0) {
                    currentlyUsedWidth = currentAttrWidth;
                }
                adjustedHeight = currentlyUsedWidth / ratio;
                $(iFrame).attr("ratio", ratio.toString());
                if ((this.LimitHeightVideoSize && !this.LimitWidthVideoSize)) {
                    $("#" + this.VideoContainerId).width(limitHeight * ratio + "px");
                }
                else if ((!this.LimitHeightVideoSize && this.LimitWidthVideoSize)) {
                    $("#" + this.VideoContainerId).height(limitWidth / ratio + "px");
                }
                else if (!this.LimitHeightVideoSize && !this.LimitWidthVideoSize) {
                    $("#" + this.VideoContainerId).height(currentlyUsedWidth / ratio + "px");
                    $("#" + this.VideoContainerId).width(currentlyUsedWidth.toString() + "px");
                }
            }
            $("#" + this.VideoContainerId + " #" + this.VideoWrapperContainerId).css("min-height", "");
            $("#" + this.VideoContainerId + " #" + this.VideoWrapperContainerId).css("min-width", "");
        }
    };
    /*Function resizing the thumbnail before the video is loaded and other containers
     * working together in terms of dimension definition
    */
    MultimediaModel.prototype.adjustThumbnailSize = function () {
        if (this.ThumbnailImageWHRatio) {
            var ratio = this.ThumbnailImageWHRatio;
            var currentWidth = $("#" + this.VideoContainerId).width();
            var currentHeight = $("#" + this.VideoContainerId).height();
            //Limit the height/width of the thumbnail shown...
            if (!this.LimitHeightVideoSize && this.LimitWidthVideoSize) {
                currentHeight = (currentWidth / ratio);
                $("#" + this.VideoContainerId).height(currentHeight);
            }
            else if (this.LimitHeightVideoSize && !this.LimitWidthVideoSize) {
                currentWidth = currentHeight * ratio;
                $("#" + this.VideoContainerId).width(currentWidth);
            }
            else if (!this.LimitHeightVideoSize && !this.LimitWidthVideoSize && this.ThumbnailImageWidth > 0) {
                currentWidth = this.ThumbnailImageWidth;
                currentHeight = (this.ThumbnailImageWidth / ratio);
                $("#" + this.VideoContainerId).width(currentWidth);
                $("#" + this.VideoContainerId).height(currentHeight);
            }
        }
    };
    /**
       * Validate valid HTTP url
       * @param {string} url HTTP URL
       * @param {RegExp} httpUrlRegExurl HTTP URL regex
   */
    MultimediaModel.prototype.validHttpUrl = function (url, httpUrlRegEx) {
        if (url.match(httpUrlRegEx)) {
            return true;
        }
        return false;
    };
    /**
     * Description: Sets the default thumbnail source
    */
    MultimediaModel.prototype.SetDefaultMultimediaPic = function () {
        this.DefaultVideoThumbSrc = this.MultiDefaultPictureCom;
    };
    /**
        * Description: Get the default thumbnail source
    */
    MultimediaModel.prototype.GetDefaultMultimediaPic = function () {
        return this.DefaultVideoThumbSrc;
    };
    /**
    * Set the thumbnail picture of the video container
    */
    MultimediaModel.prototype.SetThumbnailPicture = function () {
        return __awaiter(this, void 0, void 0, function () {
            var thumbContainerJ, thumbLoadContainerJ, cachedImageId, backgroundImageUrl, backgroundImageUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        thumbContainerJ = $("#" + this.VideoContainerId + " #" + this.VideoThumbnailId);
                        thumbLoadContainerJ = $("#" + this.VideoContainerId + " #" + this.LoadingThumbnailId);
                        cachedImageId = MultimediaModel.CachedImageBaseName + this.VideoThumbnailId;
                        $("<img width='1' height='1' id='" + cachedImageId + "' />").appendTo("#" + this.CachedImageContainerId);
                        if (!(this.VideoLoadingType == VideoLoadingType.LoadingNow && (this.ThumbnailImageSrc || this.ManualThumbnailImageSrc))) return [3 /*break*/, 2];
                        backgroundImageUrl = this.ManualThumbnailImageSrc != null ? this.ManualThumbnailImageSrc : this.ThumbnailImageSrc;
                        //Validate the image source before using it
                        return [4 /*yield*/, this.ValidInsertImage(backgroundImageUrl, thumbContainerJ, thumbLoadContainerJ, 5000)];
                    case 1:
                        //Validate the image source before using it
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 2:
                        if (!(this.VideoLoadingType == VideoLoadingType.LoadingDefered && this.ManualThumbnailImageSrc)) return [3 /*break*/, 4];
                        backgroundImageUrl = this.ManualThumbnailImageSrc;
                        //Validate the image source before using it
                        return [4 /*yield*/, this.ValidInsertImage(backgroundImageUrl, thumbContainerJ, thumbLoadContainerJ, 5000)];
                    case 3:
                        //Validate the image source before using it
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: //Default embeding for custom players build
                    return [4 /*yield*/, this.ValidInsertImage(this.GetDefaultMultimediaPic(), thumbContainerJ, thumbLoadContainerJ, 5000)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**Valid the presence of an iframe element
     * @param {string} iframe - Iframe string HTML element
    */
    MultimediaModel.prototype.ValidIframeElement = function (iframe) {
        if ($(iframe) && ($(iframe).has("iframe").length > 0 || $(iframe).is("iframe"))) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
      * Function loading an image to verify its validity for a thumbnail display
      * @param {string} img_src - Image HTTP url source to load
      * @param {jquery element} default_thumb_container - default thumbnail container if it fails to load
      * @param {jquery element} thumb_container - thumbnail container to add
      * @param {jquery element} video_loading_thumbnail - video loading thumbnail display
    */
    MultimediaModel.prototype.ValidInsertImage = function (imgSrc, thumbContainer, videoLoadThumb, timeout) {
        return __awaiter(this, void 0, void 0, function () {
            var timedOut, timer, cachedImageId, me;
            var _this = this;
            return __generator(this, function (_a) {
                timeout = timeout || 2000;
                timedOut = false;
                cachedImageId = MultimediaModel.CachedImageBaseName + this.VideoThumbnailId;
                me = this;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var handleFailure = function () {
                            //Activate default thumbnail display
                            thumbContainer.attr('src', me.GetDefaultMultimediaPic());
                            thumbContainer.css("background", "url('".concat(me.GetDefaultMultimediaPic(), "')center center / \n                ").concat(_this.ThumbnailRenderingMode == ThumbnailRenderingMode.Contain ? "contain" : "cover", " no-repeat"));
                            //Show the thumbnail and resize it
                            if (me.VideoResizeHandlerEnabled) {
                                //me.adjustThumbnailSize();
                            }
                            //Show only when the video is not currently loading/loaded
                            //Also good when video is already playing
                            //Swiperjs loop mode messes with double firing events caused by duplicated slides...
                            if (!me.videoLoaded) {
                                videoLoadThumb.hide();
                                thumbContainer.show();
                            }
                            me.ThumbnailImageSrc = me.GetDefaultMultimediaPic();
                            resolve();
                            timedOut = true;
                            MultimediaModel.virtualTourThumbnailLoadedEvent.Fire({ model: me });
                        };
                        var startTimeout = setTimeout(function () {
                            handleFailure();
                            clearTimeout(startTimeout);
                        }, timeout);
                        $("#" + cachedImageId).load(function () {
                            if (!timedOut) {
                                clearTimeout(startTimeout);
                                //Deactivate the loading for the thumbnails and reset the size of the carousel
                                me.ThumbnailImageWHRatio = this.naturalWidth / this.naturalHeight;
                                me.ThumbnailImageWidth = this.naturalWidth;
                                me.ThumbnailImageHeight = this.naturalHeight;
                                if (me.VideoResizeHandlerEnabled) {
                                    //me.adjustThumbnailSize();
                                }
                                thumbContainer.attr('src', imgSrc);
                                thumbContainer.css("background", "url('".concat(imgSrc, "') center center / \n                        ").concat(this.ThumbnailRenderingMode == ThumbnailRenderingMode.Contain ? "contain" : "cover", " no-repeat"));
                                //Show only when the video is not currently loading/loaded
                                if (!me.videoLoaded) {
                                    videoLoadThumb.hide();
                                    thumbContainer.show();
                                }
                                MultimediaModel.virtualTourThumbnailLoadedEvent.Fire({ model: me });
                            }
                            else {
                                handleFailure();
                            }
                            resolve();
                        }).error(function () {
                            handleFailure();
                        }).attr({ src: imgSrc });
                    })];
            });
        });
    };
    MultimediaModel.prototype.YTonPlayerReady = function (event) {
        Events.Fire('youtubeLoadEvent');
    };
    MultimediaModel.prototype.YTonPlayerStateChange = function (event) {
        //if (event.data == YT.PlayerState.ENDED) {
        //    g_multimediaModel.currVideoIdx++;
        //    if (g_multimediaModel.currVideoIdx <= g_multimediaModel.AdditionalMultiId.length) {
        //        g_multimediaModel.YT_Player.loadVideoById(g_multimediaModel.AdditionalMultiId[g_multimediaModel.currVideoIdx-1]);
        //    }
        //}
    };
    MultimediaModel.prototype.YTstopVideo = function () {
        this.YT_Player.stopVideo();
    };
    MultimediaModel.prototype.YTonError = function (event) {
    };
    MultimediaModel.virtualTourDataFetched = new RealtorEvent("virtualTourDataFetched");
    MultimediaModel.virtualTourLoadEvent = new RealtorEvent("virtualTourLoadEvent");
    MultimediaModel.virtualTourAddVideoEvent = new RealtorEvent("virtualTourAddVideoEvent");
    MultimediaModel.virtualTourThumbnailLoadedEvent = new RealtorEvent("virtualTourThumbnailLoadedEvent");
    MultimediaModel.iframeRegEx = /^<iframe[^>]+>[^<]*<\/iframe>/i;
    MultimediaModel.manualFSTriggerEvent = new RealtorEvent("manualFSTriggerEvent");
    //Used for global events on/off binding namespace
    MultimediaModel.eventNamespace = "MultimediaModel";
    //Size of the thumbnail image
    MultimediaModel.DefaultIframeContainer = "<iframe sandbox=\"allow-scripts allow-same-origin\" allow=\"autoplay; xr-spatial-tracking\" style=\"width:100%;height:100%;\" src=\"\" width=\"640\" height=\"360\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>";
    MultimediaModel.FullScreenBtnSize = 50; //Constant fullscreen btn size used to resize the video height
    MultimediaModel.NavSliderArrowSize = 50; //Slider navigation arrow size
    //Events
    MultimediaModel.youtubeLoadEvent = 'youtubeLoadEvent';
    MultimediaModel.youtubeErrorEvent = 'youtubeErrorEvent';
    MultimediaModel.thumbnailLoadEvent = 'thumbnailLoadEvent';
    MultimediaModel.AjaxVideoDataQueueBaseName = "VirtualVideosQueue";
    MultimediaModel.CachedImageBaseName = "cachedImagesBaseName-";
    return MultimediaModel;
}(ModelBase));
;
/**
* Class managing and defining the host providers with their specific details
*/
var MultimediaManager = /** @class */ (function () {
    //Default contructor
    function MultimediaManager() {
        var _this = this;
        //3D Tour Inside Map
        //https://www.insidemaps.com/app/walkthrough-v2/?projectId=9rnJFm6k6f&env=production&embedded=true&unbranded=true
        //https://www.insidemaps.com/project/L4A4ijiqBL/listing
        //https://www.insidemaps.com/project/JeQMifIudw/listing?env=production
        //https://www.insidemaps.com/property/JLLOsvlzF6/project/L4A4ijiqBL/listing?projectId=L4A4ijiqBL
        this.InsideMap3DTour = new MultimediaProvider("InsideMap3DTour", VideoProviderName.InsideMap3DTour);
        this.InsideMap3DTour.RegUrlReformat = MultimediaManager.InsideMap3DTourRegex;
        this.InsideMap3DTour.RegExHost = /insidemaps[.]com/i;
        this.InsideMap3DTour.ThumbWebUrl = "";
        this.InsideMap3DTour.PreviewUrl = "https://www.insidemaps.com/";
        this.InsideMap3DTour.ActivatedEmbed = true;
        this.InsideMap3DTour.EmbedUrls = ["www.insidemaps.com/app/walkthrough-v2/?projectId="];
        this.InsideMap3DTour.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.InsideMap3DTour.PreferedLoadingMethod = this.InsideMap3DTour.VideoLoadingMethods[0];
        this.InsideMap3DTour.DisablePlayParam = "";
        this.InsideMap3DTour.AdditionalParam = "?embedded=false&env=production";
        this.InsideMap3DTour.RegExGroupIDs = [6, 13];
        this.InsideMap3DTour.isVirtualTour = true;
        this.InsideMap3DTour.VerifyVideoHttpStatusCode = true;
        this.InsideMap3DTour.OverwriteParamValue = false;
        this.InsideMap3DTour.AddAdditionalParamValue = true;
        this.InsideMap3DTour.CleanQueryURL = false;
        this.InsideMap3DTour.CaseSensitiveParam = true;
        this.InsideMap3DTour.SetVideoInfo = function (mm) {
            mm.SelectedHost.FormatedThumbUrl = mm.MultiDefaultPictureCom;
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            if (mm.SelectedHost.FormatedThumbUrl) {
                mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            }
        };
        //Deprecated-> Technical limitation #1 where the video provider is not offering us a way to play the video on mobile and
        //its opening a new window instead with the video url-> I found &embed=true that works for now
        //Depracated-> Technical limitation #2 - The video does not offer an autoplay option so double click needed with thumbnail
        //-> I found & embed=true that works for now
        this.InsideMap3DTour.CanLoadAndShowVideo = true;
        this.InsideMap3DTour.OverwritePlayBtnAction = function (mm) {
            //Open a new window with the video URL when pressing play on the thumbnail
            if (ApplicationState.IsMobileDevice) {
                window.open(mm.EmbedMultiSrc, "_blank");
            }
        };
        //3D Tour List Simple
        this.ListSimple3DTour = new MultimediaProvider("ListSimple3DTour", VideoProviderName.ListSimple3DTour);
        this.ListSimple3DTour.RegUrlReformat = MultimediaManager.ListSimple3DTourRegex;
        this.ListSimple3DTour.RegExHost = /3dtour[.]listsimple[.]com/i;
        this.ListSimple3DTour.ThumbWebUrl = "https://3dtourimage.listsimple.com/";
        this.ListSimple3DTour.PreviewUrl = "https://3dtour.listsimple.com/p/";
        this.ListSimple3DTour.ActivatedEmbed = true;
        this.ListSimple3DTour.EmbedUrls = ["3dtour.listsimple.com/embed.html?key="];
        this.ListSimple3DTour.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.ListSimple3DTour.PreferedLoadingMethod = this.ListSimple3DTour.VideoLoadingMethods[0];
        this.ListSimple3DTour.DisablePlayParam = "";
        this.ListSimple3DTour.AdditionalParam = "?autoplay=1";
        this.ListSimple3DTour.RegExGroupIDs = [5];
        this.ListSimple3DTour.isVirtualTour = true;
        this.ListSimple3DTour.VerifyVideoHttpStatusCode = true;
        this.ListSimple3DTour.OverwriteParamValue = false;
        this.ListSimple3DTour.CleanQueryURL = false;
        this.ListSimple3DTour.CaseSensitiveParam = true;
        this.ListSimple3DTour.SetVideoInfo = function (mm) {
            //Init the thumbnail
            mm.SelectedHost.FormatedThumbUrl = _this.ListSimple3DTour.ThumbWebUrl + mm.MultiId;
            //Temporary URL to test List simple functionality as valid thumbnail
            //mm.SelectedHost.FormatedThumbUrl = "https://scontent.fymq1-2.fna.fbcdn.net/v/t1.0-9/66841585_1382158301940202_5598074259235667968_o.jpg?_nc_cat=102&_nc_sid=dd9801&_nc_ohc=HRUls4XLsBUAX9YNXCU&_nc_ht=scontent.fymq1-2.fna&oh=a18fb6b4c18382b324e15259e5ddf28f&oe=5ECD59CB";
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            if (mm.SelectedHost.FormatedThumbUrl) {
                mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            }
        };
        //ImageMaker360
        this.ImageMaker = new MultimediaProvider("ImageMaker", VideoProviderName.ImageMaker);
        this.ImageMaker.RegUrlReformat = MultimediaManager.ImageMakerRegex;
        this.ImageMaker.RegExHost = /imagemaker360[.]com/i;
        this.ImageMaker.PreviewUrl = "https://secure.imagemaker360.com/";
        this.ImageMaker.ActivatedEmbed = true;
        this.ImageMaker.EmbedUrls = ["secure.imagemaker360.com/embed/"];
        this.ImageMaker.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.ImageMaker.PreferedLoadingMethod = this.ImageMaker.VideoLoadingMethods[0];
        this.ImageMaker.DisablePlayParam = "";
        this.ImageMaker.ThumbWebUrl = "https://secure.imagemaker360.com/embed/thumbnail/";
        this.ImageMaker.AdditionalParam = "?autoplay=1";
        this.ImageMaker.RegExGroupIDs = [9, 15];
        this.ImageMaker.isVirtualTour = true;
        this.ImageMaker.VerifyVideoHttpStatusCode = true;
        this.ImageMaker.OverwriteParamValue = false;
        this.ImageMaker.CleanQueryURL = false;
        this.ImageMaker.AddAdditionalParamValue = true;
        this.ImageMaker.CaseSensitiveParam = true;
        this.ImageMaker.SetVideoInfo = function (mm) {
            //Init the thumbnail
            mm.SelectedHost.FormatedThumbUrl = _this.ImageMaker.ThumbWebUrl + mm.MultiId + ".jpg";
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            if (mm.SelectedHost.FormatedThumbUrl) {
                mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            }
        };
        //Istaging
        this.Istaging = new MultimediaProvider("Istaging", VideoProviderName.Istaging);
        this.Istaging.RegUrlReformat = MultimediaManager.IstagingRegex;
        this.Istaging.RegExHost = /istaging[.]com/i;
        this.Istaging.PreviewUrl = "https://livetour.istaging.com/";
        this.Istaging.ActivatedEmbed = true;
        this.Istaging.EmbedUrls = ["livetour.istaging.com/"];
        this.Istaging.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.Istaging.PreferedLoadingMethod = this.Istaging.VideoLoadingMethods[0];
        this.Istaging.DisablePlayParam = "";
        this.Istaging.AdditionalParam = "?autoplay=1";
        this.Istaging.RegExGroupIDs = [6, 9, 13];
        this.Istaging.isVirtualTour = true;
        this.Istaging.VerifyVideoHttpStatusCode = true;
        this.Istaging.OverwriteParamValue = false;
        this.Istaging.CleanQueryURL = false;
        this.Istaging.AddAdditionalParamValue = true;
        this.Istaging.CaseSensitiveParam = true;
        this.Istaging.SetVideoInfo = function (mm) {
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            if (mm.SelectedHost.FormatedThumbUrl) {
                mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            }
        };
        //Host providers initialization
        //Paradym
        this.Paradym = new MultimediaProvider("Paradym", VideoProviderName.Paradym);
        this.Paradym.RegExHost = /view[.]paradym.com|my[.]paradym[.]com/i;
        this.Paradym.PreviewUrl = "";
        this.Paradym.ActivatedEmbed = false;
        this.Paradym.isVirtualTour = false;
        this.Paradym.OverwriteParamValue = false;
        this.Paradym.CleanQueryURL = false;
        this.Paradym.AddAdditionalParamValue = true;
        //Matterport
        this.Matterport = new MultimediaProvider("Matterport", VideoProviderName.Matterport);
        this.Matterport.RegExHost = /condos[.]ca\/matterport|my[.]matterport[.]com/i;
        this.Matterport.RegUrlReformat = MultimediaManager.MatterportRegEx;
        this.Matterport.PreviewUrl = "https://my.matterport.com/show/?m=";
        this.Matterport.EmbedUrls = ["my.matterport.com/show/?m="];
        this.Matterport.ActivatedEmbed = true;
        this.Matterport.LangEnParam = "lang=en";
        this.Matterport.LangFrParam = "lang=fr";
        this.Matterport.JsonApi = MultimediaManager.MatterportJson;
        this.Matterport.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.Matterport.PreferedLoadingMethod = this.Matterport.VideoLoadingMethods[0];
        this.Matterport.DisablePlayParam = "";
        this.Matterport.AdditionalParam = "?play=1";
        this.Matterport.isVirtualTour = true;
        this.Matterport.CaseSensitiveParam = true;
        this.Matterport.OverwriteParamValue = false;
        this.Matterport.CleanQueryURL = false;
        this.Matterport.AddAdditionalParamValue = true;
        this.Matterport.SetVideoInfo = function (mm, data) {
            mm.ThumbnailImageSrc = data.image;
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
        };
        //Youtube
        this.Youtube = new MultimediaProvider("Youtube", VideoProviderName.Youtube);
        this.Youtube.RegExHost = /youtube[.]com|youtube[.]ca|youtu[.]be/i;
        this.Youtube.RegUrlReformat = MultimediaManager.YoutubeRegEx;
        this.Youtube.PreviewUrl = "https://www.youtube.com/watch?v=";
        this.Youtube.EmbedUrls = ["www.youtube.com/embed/"];
        this.Youtube.JsonApi = MultimediaManager.YoutubeJson;
        this.Youtube.ActivatedEmbed = true;
        this.Youtube.VideoLoadingMethods = new Array(VideoAccessType.Native, VideoAccessType.Local);
        this.Youtube.PreferedLoadingMethod = this.Youtube.VideoLoadingMethods[1];
        this.Youtube.DisablePlayParam = "";
        this.Youtube.RegExGroupIDs = [10];
        this.Youtube.AdditionalParam = "?showinfo=0&autoplay=1&rel=0";
        this.Youtube.isVirtualTour = false;
        this.Youtube.CaseSensitiveParam = true;
        this.Youtube.OverwriteParamValue = false;
        this.Youtube.CleanQueryURL = false;
        this.Youtube.AddAdditionalParamValue = true;
        this.Youtube.SetVideoInfo = function (mm, data) {
            var _a;
            var iframeHtmlEl;
            var iframeMatches = (_a = data === null || data === void 0 ? void 0 : data.html) === null || _a === void 0 ? void 0 : _a.match(MultimediaModel.iframeRegEx);
            var currentQueryUrlObj = Utilities.getQueryObjUrl(mm.EmbedMultiSrc, mm.SelectedHost.CaseSensitiveParam);
            var addQueryUrlObj, finalQueryObj, finalStrQueryUrl, youtubeStrQueryUrl;
            if (iframeMatches.length > 0) {
                iframeHtmlEl = $(iframeMatches[0])[0];
                addQueryUrlObj = Utilities.getQueryObjUrl(iframeHtmlEl.src, mm.SelectedHost.CaseSensitiveParam);
                youtubeStrQueryUrl = Utilities.getURLQueryParamFormat(addQueryUrlObj);
                finalQueryObj = Utilities.getFinalEmbedQueryParam(currentQueryUrlObj, null, addQueryUrlObj, mm.SelectedHost.OverwriteParamValue);
                finalStrQueryUrl = Utilities.getURLQueryParamFormat(finalQueryObj);
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" +
                    iframeHtmlEl.src.replace(youtubeStrQueryUrl, "") + finalStrQueryUrl + "\"");
            }
            else {
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            }
            mm.ThumbnailImageSrc = data.thumbnail_url;
        };
        //Vimeo
        this.Vimeo = new MultimediaProvider("Vimeo", VideoProviderName.Vimeo);
        this.Vimeo.RegExHost = /vimeo[.]com/i;
        this.Vimeo.RegUrlReformat = MultimediaManager.VimeoRegEx;
        this.Vimeo.PreviewUrl = "https://vimeo.com/";
        this.Vimeo.EmbedUrls = ["player.vimeo.com/video/"];
        this.Vimeo.JsonApi = MultimediaManager.VimeoJson;
        this.Vimeo.ActivatedEmbed = true;
        this.Vimeo.RegExOtherGroupIDs = [13, 10];
        this.Vimeo.RegExGroupIDs = [7];
        this.Vimeo.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.Vimeo.PreferedLoadingMethod = this.Vimeo.VideoLoadingMethods[0];
        this.Vimeo.DisablePlayParam = "";
        this.Vimeo.AdditionalParam = "?autoplay=1&loop=0&autopause=0";
        this.Vimeo.isVirtualTour = false;
        this.Vimeo.CaseSensitiveParam = true;
        this.Vimeo.OverwriteParamValue = false;
        this.Vimeo.CleanQueryURL = false;
        this.Vimeo.AddAdditionalParamValue = true;
        this.Vimeo.SetVideoInfo = function (mm, data) {
            var _a;
            var iframeHtmlEl;
            var iframeMatches = (_a = data === null || data === void 0 ? void 0 : data.html) === null || _a === void 0 ? void 0 : _a.match(MultimediaModel.iframeRegEx);
            var currentQueryUrlObj = Utilities.getQueryObjUrl(mm.EmbedMultiSrc, mm.SelectedHost.CaseSensitiveParam);
            var addQueryUrlObj, finalQueryObj, finalStrQueryUrl, vimeoStrQueryUrl;
            if (iframeMatches.length > 0) {
                iframeHtmlEl = $(iframeMatches[0])[0];
                addQueryUrlObj = Utilities.getQueryObjUrl(iframeHtmlEl.src, mm.SelectedHost.CaseSensitiveParam);
                vimeoStrQueryUrl = Utilities.getURLQueryParamFormat(addQueryUrlObj);
                finalQueryObj = Utilities.getFinalEmbedQueryParam(currentQueryUrlObj, null, addQueryUrlObj, mm.SelectedHost.OverwriteParamValue);
                finalStrQueryUrl = Utilities.getURLQueryParamFormat(finalQueryObj);
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" +
                    iframeHtmlEl.src.replace(vimeoStrQueryUrl, "") + finalStrQueryUrl + "\"");
            }
            else {
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            }
            mm.ThumbnailImageSrc = data.thumbnail_url;
        };
        //Realtourvision
        this.Realtourvision = new MultimediaProvider("Realtourvision", VideoProviderName.Realtourvision);
        this.Realtourvision.RegExHost = /realtourvision[.]com/i;
        this.Realtourvision.ActivatedEmbed = false;
        this.Realtourvision.isVirtualTour = false;
        this.Realtourvision.OverwriteParamValue = false;
        this.Realtourvision.CleanQueryURL = false;
        this.Realtourvision.AddAdditionalParamValue = true;
        //previsite
        this.Previsite = new MultimediaProvider("Previsite", VideoProviderName.Previsite);
        this.Previsite.RegExHost = /previsite.com/i;
        this.Previsite.ActivatedEmbed = false;
        this.Previsite.isVirtualTour = false;
        this.Previsite.OverwriteParamValue = false;
        this.Previsite.CleanQueryURL = false;
        this.Previsite.AddAdditionalParamValue = true;
        //youriguide
        this.Youriguide = new MultimediaProvider("Youriguide", VideoProviderName.Youriguide);
        this.Youriguide.RegUrlReformat = MultimediaManager.YourIguideRegex;
        this.Youriguide.RegExHost = /youriguide[.]com/i;
        this.Youriguide.PreviewUrl = "https://youriguide.com/";
        this.Youriguide.ActivatedEmbed = true;
        this.Youriguide.ThumbWebUrl = "/doc/embed_preview.jpg?sync";
        this.Youriguide.EmbedUrls = ["youriguide.com/embed/", "unbranded.youriguide.com/embed/"];
        this.Youriguide.PdfUrlMetric = "/doc/floorplan_metric_en_u.pdf";
        this.Youriguide.PdfUrlFeet = "/doc/floorplan_imperial_en_u.pdf";
        this.Youriguide.VerifyVideoHttpStatusCode = true;
        this.Youriguide.FormatedPdfUrlFeet = "";
        this.Youriguide.FormatedPdfUrlMetric = "";
        this.Youriguide.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.Youriguide.PreferedLoadingMethod = this.Youriguide.VideoLoadingMethods[0];
        this.Youriguide.DisablePlayParam = "";
        this.Youriguide.AdditionalParam = "?autostart=1";
        this.Youriguide.isVirtualTour = true;
        this.Youriguide.OverwriteParamValue = false;
        this.Youriguide.CleanQueryURL = false;
        this.Youriguide.AddAdditionalParamValue = true;
        this.Youriguide.CaseSensitiveParam = true;
        this.Youriguide.SetVideoInfo = function (mm) {
            //Extract the floor plan PDF urls
            mm.SelectedHost.FormatedPdfUrlMetric = mm.SelectedHost.PreviewUrl + mm.MultiId + mm.SelectedHost.PdfUrlMetric;
            mm.SelectedHost.FormatedPdfUrlFeet = mm.SelectedHost.PreviewUrl + mm.MultiId + mm.SelectedHost.PdfUrlFeet;
            //Init the thumbnail web url access if available
            if (mm.SelectedHost.ThumbWebUrl) {
                mm.SelectedHost.FormatedThumbUrl = mm.SelectedHost.PreviewUrl + mm.MultiId + mm.SelectedHost.ThumbWebUrl;
            }
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            if (mm.SelectedHost.FormatedThumbUrl) {
                mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            }
        };
        //Bonnevisite
        this.Bonnevisite = new MultimediaProvider("Bonnevisite", VideoProviderName.Bonnevisite);
        this.Bonnevisite.RegExHost = /media[.]bonnevisite[.]com/i;
        this.Bonnevisite.ActivatedEmbed = false;
        this.Bonnevisite.isVirtualTour = false;
        this.Bonnevisite.OverwriteParamValue = false;
        this.Bonnevisite.CleanQueryURL = false;
        this.Bonnevisite.AddAdditionalParamValue = true;
        //RealVision
        this.RealVision = new MultimediaProvider("RealVision", VideoProviderName.RealVision);
        this.RealVision.RegUrlReformat = MultimediaManager.RealtorVisionRegex;
        this.RealVision.RegExHost = /real[.]vision/i;
        this.RealVision.JsonApi = MultimediaManager.RealVisionJson;
        this.RealVision.LangEnParam = "culture=en-CA";
        this.RealVision.LangFrParam = "culture=fr-CA";
        this.RealVision.PreviewUrl = "https://real.vision/";
        this.RealVision.EmbedUrls = ["real.vision/"];
        this.RealVision.ActivatedEmbed = true;
        this.RealVision.PdfUrlMetric = "";
        this.RealVision.PdfUrlFeet = "";
        this.RealVision.RegExGroupIDs = [6];
        this.RealVision.FormatedPdfUrlFeet = "";
        this.RealVision.FormatedPdfUrlMetric = "";
        this.RealVision.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.RealVision.PreferedLoadingMethod = this.RealVision.VideoLoadingMethods[0];
        this.RealVision.DisablePlayParam = "";
        this.RealVision.AdditionalParam = "?autoplay=1&o=u";
        this.RealVision.isVirtualTour = true;
        this.RealVision.OverwriteParamValue = false;
        this.RealVision.CaseSensitiveParam = true;
        this.RealVision.CleanQueryURL = false;
        this.RealVision.AddAdditionalParamValue = true;
        this.RealVision.SetVideoInfo = function (mm, data) {
            var _a, _b, _c;
            //Extract the thumbnail and store it
            _this.RealVision.FormatedThumbUrl = data.photos != null && data.photos.length > 0 ? data.photos[0].urlMed : "";
            //Extract the floor plan PDF urls if available
            _this.RealVision.FormatedPdfUrlFeet = data != null && data.floorPlans != null && data.floorPlans.unbrandedImperialPdf != "null" ? data.floorPlans.unbrandedImperialPdf : null;
            _this.RealVision.FormatedPdfUrlMetric = data != null && data.floorPlans != null && data.floorPlans.unbrandedMetricPdf != "null" ? data.floorPlans.unbrandedMetricPdf : null;
            mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            var currentQueryUrlObj = Utilities.getQueryObjUrl(mm.EmbedMultiSrc, mm.SelectedHost.CaseSensitiveParam);
            var addQueryUrlObj, finalQueryObj, finalStrQueryUrl, realVisionStrQueryUrl;
            if (((_a = data === null || data === void 0 ? void 0 : data.tourUrl) === null || _a === void 0 ? void 0 : _a.unbranded.length) > 0) {
                addQueryUrlObj = Utilities.getQueryObjUrl((_b = data === null || data === void 0 ? void 0 : data.tourUrl) === null || _b === void 0 ? void 0 : _b.unbranded, mm.SelectedHost.CaseSensitiveParam);
                realVisionStrQueryUrl = Utilities.getURLQueryParamFormat(addQueryUrlObj);
                finalQueryObj = Utilities.getFinalEmbedQueryParam(currentQueryUrlObj, null, addQueryUrlObj, mm.SelectedHost.OverwriteParamValue);
                finalStrQueryUrl = Utilities.getURLQueryParamFormat(finalQueryObj);
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" +
                    ((_c = data === null || data === void 0 ? void 0 : data.tourUrl) === null || _c === void 0 ? void 0 : _c.unbranded.replace(realVisionStrQueryUrl, "")) + finalStrQueryUrl + "\"");
            }
            else {
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            }
        };
        //ImmoViewer
        this.ImmoViewer = new MultimediaProvider("ImmoViewer", VideoProviderName.ImmoViewer);
        this.ImmoViewer.RegExHost = /immoviewer[.]com/i;
        this.ImmoViewer.JsonApi = MultimediaManager.ImmoViewerJson;
        this.ImmoViewer.RegUrlReformat = MultimediaManager.ImmoViewerRegex;
        this.ImmoViewer.EmbedUrls = ["app.immoviewer.com/portal/tour/"];
        this.ImmoViewer.PreviewUrl = "https://app.immoviewer.com/portal/tour/";
        this.ImmoViewer.LangEnParam = "psm.showLang=EN_CA";
        this.ImmoViewer.LangFrParam = "psm.showLang=FR_FR";
        this.ImmoViewer.ActivatedEmbed = true;
        this.ImmoViewer.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.ImmoViewer.PreferedLoadingMethod = this.ImmoViewer.VideoLoadingMethods[0];
        this.ImmoViewer.DisablePlayParam = "";
        this.ImmoViewer.AdditionalParam = "?autoplay=1&psm.showLangSwitch=false";
        this.ImmoViewer.isVirtualTour = true;
        this.ImmoViewer.CaseSensitiveParam = true;
        this.ImmoViewer.OverwriteParamValue = false;
        this.ImmoViewer.CleanQueryURL = false;
        this.ImmoViewer.AddAdditionalParamValue = true;
        this.ImmoViewer.SetVideoInfo = function (mm, data) {
            var _a;
            //Extract the thumbnail and store it
            _this.ImmoViewer.FormatedThumbUrl = data != null && data.firstImage != null && data.firstImage != "null" ? data.firstImage : "";
            mm.ThumbnailImageSrc = mm.SelectedHost.FormatedThumbUrl;
            var currentQueryUrlObj = Utilities.getQueryObjUrl(mm.EmbedMultiSrc, mm.SelectedHost.CaseSensitiveParam);
            var addQueryUrlObj, finalQueryObj, finalStrQueryUrl, ImmoViewerStrQueryUrl;
            if (((_a = data === null || data === void 0 ? void 0 : data.iframe) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                addQueryUrlObj = Utilities.getQueryObjUrl(data.iframe, mm.SelectedHost.CaseSensitiveParam);
                ImmoViewerStrQueryUrl = Utilities.getURLQueryParamFormat(addQueryUrlObj);
                finalQueryObj = Utilities.getFinalEmbedQueryParam(currentQueryUrlObj, null, addQueryUrlObj, mm.SelectedHost.OverwriteParamValue);
                finalStrQueryUrl = Utilities.getURLQueryParamFormat(finalQueryObj);
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" +
                    data.iframe.replace(ImmoViewerStrQueryUrl, "") + finalStrQueryUrl + "\"");
            }
            else {
                mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            }
        };
        //Property panorama provider
        this.PropertyPanorama = new MultimediaProvider("PropertyPanorama", VideoProviderName.PropertyPanorama);
        this.PropertyPanorama.RegUrlReformat = MultimediaManager.PropertyPanoramaRegex;
        this.PropertyPanorama.RegExHost = /propertypanorama[.]com/i;
        this.PropertyPanorama.ActivatedEmbed = true;
        this.PropertyPanorama.VideoLoadingMethods = new Array(VideoAccessType.Local);
        this.PropertyPanorama.PreferedLoadingMethod = this.PropertyPanorama.VideoLoadingMethods[0];
        this.PropertyPanorama.DisablePlayParam = "";
        this.PropertyPanorama.isVirtualTour = true;
        this.PropertyPanorama.PreviewUrl = "https://www.propertypanorama.com/instaview-tour/";
        this.PropertyPanorama.EmbedUrls = ["www.propertypanorama.com/instaview-tour/"];
        this.PropertyPanorama.JsonApi = "https://propertypanorama.com/tour-data/";
        this.PropertyPanorama.OverwriteParamValue = false;
        this.PropertyPanorama.AdditionalParam = "?autoplay=1";
        this.PropertyPanorama.CleanQueryURL = false;
        this.PropertyPanorama.AddAdditionalParamValue = true;
        this.PropertyPanorama.CaseSensitiveParam = true;
        this.PropertyPanorama.SetVideoInfo = function (mm, data) {
            //Extract the thumbnail and store it
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" + mm.EmbedMultiSrc + "\"");
            mm.ThumbnailImageSrc = !!data && !!data.all_photos && data.all_photos.length > 0 && data.all_photos[0].path != "null" && data.all_photos[0].path.length > 0 ? data.all_photos[0].path : "";
        };
        this.hostList =
            [this.Paradym, this.Bonnevisite, this.Matterport,
                this.Previsite, this.Realtourvision, this.Vimeo, this.Youriguide,
                this.Youtube, this.ImmoViewer, this.RealVision, this.PropertyPanorama,
                this.ImageMaker, this.Istaging, this.ListSimple3DTour, this.InsideMap3DTour];
    }
    /**
    * Function returning the host provider using a multimedia URL as parameter
    * @param {String} multimedia_url - HTTP multimedia URL
    */
    MultimediaManager.prototype.getHost = function (multimediaUrl) {
        var retMp = null;
        if (multimediaUrl != null) {
            for (var _i = 0, _a = this.hostList; _i < _a.length; _i++) {
                var mp = _a[_i];
                var regHost = mp.RegExHost;
                if (regHost) {
                    var match = multimediaUrl.match(regHost);
                    if (match != null) {
                        return mp;
                    }
                }
            }
            ;
        }
        return retMp;
    };
    /**
   * Function returning the host provider using a multimedia URL as parameter
   * @param {VideoAccessType} videoAccessType - VideoAccessType that guides how video implementation is done
   */
    MultimediaManager.prototype.overwriteVideoAccessTypeProviders = function (videoAccessType) {
        for (var _i = 0, _a = this.hostList; _i < _a.length; _i++) {
            var mp = _a[_i];
            mp.PreferedLoadingMethod = videoAccessType;
        }
    };
    //Contant regexes that are made to extract id information from multimedia URL
    MultimediaManager.YoutubeRegEx = /^(((.(?!(youtube|youtu)[.](com|ca|be)))*.)?((youtube|youtu)[.](com|ca|be)\/)(u\/\w\/|embed\/|watch\?v=|shorts\/)?)([^#\&\?\/]*)/i;
    MultimediaManager.VimeoRegEx = /(^((.(?!vimeo))*.)?(vimeo.com\/)((video|external)\/)?(((?!review\/)[^\/?.&#])*)(\/)?)([^\/?&#]*)(((?![?&]h=)[^\/])*[?&]h=(((?![&]=)[^\/])+))?/i;
    MultimediaManager.MatterportRegEx = /(^((.(?!my.matterport.com|condos.ca))*.)?(my.matterport.com\/|condos.ca\/matterport).*(\?m=|models\/|\?model=))([^#\&\?\/]*)/i;
    MultimediaManager.YourIguideRegex = /(^((.(?!unbranded))*\/?)(unbranded.youriguide.com\/|youriguide.com\/)(embed\/)?)([^#\&\?\/]*)/i;
    MultimediaManager.RealtorVisionRegex = /(^((.(?!real[.]vision))*.)?(real[.]vision\/))([^#\&\?\/]+\/)*(?![#\&\?])(?!$)([^#\&\?\/]*)/i;
    MultimediaManager.ImmoViewerRegex = /(^((.(?!immoviewer.com))*.)?(immoviewer.com\/portal\/tour\/))([^#\&\?\/]*)/i;
    MultimediaManager.PropertyPanoramaRegex = /^((.(?!propertypanorama[.]com))*.)?(propertypanorama[.]com\/)([^#\&\?\/]*\/)([^#\&\?\/]*\/)([^#\&\?\/]*)/i;
    //This one is more tricky as the video ID is in group 5 or 8
    MultimediaManager.ImageMakerRegex = /^((.(?!imagemaker360[.]com))*.)?(imagemaker360[.]com\/)((([^\/]+\/)*[^\/]+(id=(idx)?)(((?!idx)[^\&\/\?])+))|(([^\/]+\/)*((idx)?(((?!idx)[^\/])+))))/i;
    MultimediaManager.IstagingRegex = /^((.(?!istaging[.]com))*.)?(istaging[.]com\/)((buildings\/([^\/]+)\/)|(([^\/]+\/)*([^\/\?]+))|(([^\/]+\/)*[^\/]+(group=)([^\&\/\?]+)))/i;
    MultimediaManager.ListSimple3DTourRegex = /^((.(?!3dtour[.]listsimple[.]com))*.)?(3dtour[.]listsimple[.]com\/)([^#\&\?\/]+\/)*(?![#\&\?])(?!$)([^#\&\?\/]*)/i;
    MultimediaManager.InsideMap3DTourRegex = /^((.(?!insidemaps[.]com))*.)?(insidemaps[.]com\/)((project\/([^\/]+))|((([^\/#\&\?]+\/)*[^\/#\&\?]+)(\/)?([#\&\?](?!projectId=[^\?\&]+)([^#\&\?]+)(?!projectId=[^\?\&]+))*[\&\?]projectId=([^\?\&]+)))/i;
    //List of Oembed json link requests for youtube, vimeo
    MultimediaManager.YoutubeJson = "https://www.youtube.com/oembed";
    MultimediaManager.VimeoJson = "https://vimeo.com/api/oembed.json";
    MultimediaManager.MatterportJson = "https://my.matterport.com/api/v1/player/models/";
    MultimediaManager.RealVisionJson = "https://api.real.vision/v1/properties/getlistingbyname?name=";
    MultimediaManager.ImmoViewerJson = "https://app.immoviewer.com/rest/v1/tour?internalID=";
    return MultimediaManager;
}());
;
/**
* Class defining a specific multimedia provider
*/
var MultimediaProvider = /** @class */ (function () {
    function MultimediaProvider(name, videoProvider) {
        this.CaseSensitiveParam = false;
        this.RegExGroupIDs = new Array();
        this.RegExOtherGroupIDs = new Array();
        this.VideoLoadingMethods = new Array();
        this.MultiEmbedUrl = false;
        this.SetDefaultVideoInfo = function (mm, videoUrl) {
            mm.RawHtmlVideoCode = MultimediaModel.DefaultIframeContainer.replace("src=\"\"", "src=\"" +
                videoUrl + "\"");
            mm.ThumbnailImageSrc = mm.GetDefaultMultimediaPic();
        };
        this.VerifyVideoHttpStatusCode = false;
        this.CanLoadAndShowVideo = true;
        this.Name = name;
        this.VideoProvider = videoProvider;
    }
    /**
    * Function that returns the embedurl to use depending on the host entry point URL
    * @param {MultimediaProvider} mp - multimedia provider object
    */
    MultimediaProvider.prototype.getEmbedURLToUse = function (mm, url) {
        var embedUrl = mm.SelectedHost.EmbedUrls.length > 0 ? mm.SelectedHost.EmbedUrls[0] : null;
        //Find the proper embed URL entry point based on the url entry point
        var urlEntryPoint = url.match(mm.SelectedHost.RegUrlReformat)[4];
        if (mm.SelectedHost.EmbedUrls.length > 1) {
            for (var x = 1; x < mm.SelectedHost.EmbedUrls.length; x++) {
                if (mm.SelectedHost.EmbedUrls[x].indexOf(urlEntryPoint) == 0) {
                    embedUrl = mm.SelectedHost.EmbedUrls[x];
                    break;
                }
            }
        }
        return embedUrl;
    };
    return MultimediaProvider;
}());
/**
* Function resizing the iframe and displaying it (fired after the iframe is loaded [onload])
* @param {JQuery} iframe - iframe jquery object
* @param {String} videoContainerId - iframe video main container
* @param {String} videoWrapperId - iframe video iframe wrapper
 * @param {String} videoInnerContainerId - iframe vieo iframe inner container
*/
function showIframe(iframe, videoContainerId, videoWrapperId, videoInnerContainerId, loadingThumbnailId) {
    $(window).trigger('resize');
    //Show the parent iframe container
    $("#" + videoContainerId + " #" + videoWrapperId).show();
    $("#" + videoContainerId + " #" + videoInnerContainerId).show();
    $("#" + videoContainerId + " #" + loadingThumbnailId).hide();
    $(iframe).css("opacity", 1);
    MultimediaModel.virtualTourLoadEvent.Fire({ loaded: true, videoIndexId: videoContainerId });
}
//# sourceMappingURL=MultimediaModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var NotificationModel = /** @class */ (function (_super) {
    __extends(NotificationModel, _super);
    function NotificationModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotificationModel;
}(ModelBase));
var NotificationApplicationModes;
(function (NotificationApplicationModes) {
    NotificationApplicationModes[NotificationApplicationModes["Null"] = 0] = "Null";
    NotificationApplicationModes[NotificationApplicationModes["Residential"] = 1] = "Residential";
    NotificationApplicationModes[NotificationApplicationModes["Commercial"] = 2] = "Commercial";
})(NotificationApplicationModes || (NotificationApplicationModes = {}));
var NotificationTypes;
(function (NotificationTypes) {
    NotificationTypes[NotificationTypes["Null"] = 0] = "Null";
    NotificationTypes[NotificationTypes["Search"] = 1] = "Search";
    NotificationTypes[NotificationTypes["Compare"] = 2] = "Compare";
    NotificationTypes[NotificationTypes["Favourite"] = 3] = "Favourite";
})(NotificationTypes || (NotificationTypes = {}));
//# sourceMappingURL=NotificationModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the PaginationModel.cs class.
 */
var OfficeCardModel = /** @class */ (function (_super) {
    __extends(OfficeCardModel, _super);
    function OfficeCardModel(obj, referenceNumber, listingId, individualId) {
        var _this = _super.call(this) || this;
        _this.ReferenceNumber = "";
        _this.ListingId = "";
        _this.IndividualId = "";
        _this.OfficeAltText = "";
        _this.OrganizationId = "";
        _this.DetailsURL = "";
        _this.LogoURL = "";
        _this.Address = "";
        _this.Name = "";
        _this.Type = "";
        _this.FaxNumber = "";
        _this.Phones = [];
        _this.SocialIcons = [];
        _this.CallablePhones = [];
        _this.Websites = [];
        _this.ShowEmailButton = false;
        _this.ShowWebsiteButton = false;
        _this.ShowCallButton = false;
        _this.ShowFooterLinks = false;
        _this.ShowLogo = false;
        _this.ShowPhones = false;
        _this.ShowSocialIcons = false;
        _this.HasFax = false;
        _this.ShowEmailButtonWithBooking = false;
        _this.ReferenceNumber = referenceNumber || "";
        _this.ListingId = listingId || "";
        _this.IndividualId = individualId || "";
        _this.OrganizationId = obj.OrganizationID.toString();
        if (obj.RelativeDetailsURL) {
            _this.DetailsURL = "/" + ApplicationState.ApplicationModeString + obj.RelativeDetailsURL;
        }
        else { //Remove for next release
            _this.DetailsURL = "/" + ApplicationState.ApplicationModeString + "/Office/" + _this.OrganizationId.toString();
        }
        if (obj.Phones != null && obj.Phones.length > 0) {
            _this.LoadPhones(obj.Phones);
            _this.LoadCallablePhones(obj.Phones);
        }
        _this.ShowPhones = _this.Phones.length > 0;
        if ((obj.Logo || "") != "") {
            _this.ShowLogo = true;
            _this.LogoURL = obj.Logo;
        }
        _this.Name = obj.Name;
        _this.Type = obj.Designation;
        if ((obj.Address || "") != "" && (obj.Address.AddressText || "") != "") {
            _this.Address = obj.Address.AddressText.replace("||", ", ").replace("|", ", ");
        }
        if (obj.HasEmail && obj.Emails != null && obj.Emails.length > 0) {
            _this.ShowEmailButton = true;
        }
        if (obj.Websites != null && obj.Websites.length > 0) {
            _this.LoadWebsites(obj.Websites);
            _this.LoadSocialIcons(obj.Websites);
        }
        _this.OfficeAltText = Translation.get("OfficeImageAltText", _this.Name);
        _this.ShowFooterLinks = _this.ShowCallButton || _this.ShowEmailButton;
        return _this;
    }
    OfficeCardModel.prototype.LoadCallablePhones = function (phones) {
        if (phones != null) {
            for (var i = 0; i < phones.length; i++) {
                var phone = new PhoneModel(phones[i]);
                if (phone.Type != PhoneType.Fax) {
                    this.ShowCallButton = true;
                    this.CallablePhones.push(phone);
                }
            }
        }
    };
    OfficeCardModel.prototype.LoadPhones = function (phones) {
        if (phones != null) {
            for (var i = 0; i < phones.length; i++) {
                var phone = new PhoneModel(phones[i]);
                this.Phones.push(phone);
                if (Number(phones[i].PhoneTypeId) == Number(PhoneType.Fax)) //only care about fax for now
                 {
                    this.HasFax = true;
                    this.FaxNumber = PhoneModel.ConvertToString(phones[i]);
                }
            }
        }
    };
    OfficeCardModel.prototype.LoadWebsites = function (websites) {
        if (websites != null) {
            for (var i = 0; i < websites.length; i++) {
                if (Number(websites[i].WebsiteTypeId) == Number(WebSiteType.Website)) {
                    var website = new WebsiteModel(websites[i]);
                    this.Websites.push(website);
                    this.ShowWebsiteButton = true;
                }
            }
        }
    };
    OfficeCardModel.prototype.LoadSocialIcons = function (sites) {
        if (sites != null) {
            for (var i = 0; i < sites.length; i++) {
                if (Number(sites[i].WebsiteTypeId) != Number(WebSiteType.Website)) {
                    var icon = new SocialLinkModel(sites[i]);
                    this.SocialIcons.push(icon);
                }
            }
            this.ShowSocialIcons = this.SocialIcons.length > 0;
        }
    };
    return OfficeCardModel;
}(ModelBase));
//# sourceMappingURL=OfficeCardModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var OfficeModel = /** @class */ (function (_super) {
    __extends(OfficeModel, _super);
    function OfficeModel(organizationId) {
        var _this = _super.call(this) || this;
        _this.organizationId = organizationId;
        return _this;
    }
    return OfficeModel;
}(ModelBase));
//# sourceMappingURL=OfficeModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the PaginationModel.cs class.
 */
var PaginationModel = /** @class */ (function (_super) {
    __extends(PaginationModel, _super);
    function PaginationModel(pages) {
        var _this = _super.call(this) || this;
        _this.AllowPageSelection = true;
        _this.Pages = [];
        if (pages != null) {
            for (var i = 1; i <= pages.TotalPages; i++) {
                _this.Pages.push(new LinkModel(i.toString(), "#", "", i.toString()));
            }
        }
        return _this;
    }
    return PaginationModel;
}(ModelBase));
//# sourceMappingURL=PaginationModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the PhoneModel.cs class.
 */
var PhoneModel = /** @class */ (function (_super) {
    __extends(PhoneModel, _super);
    function PhoneModel(val) {
        var _this = _super.call(this) || this;
        var number = "";
        number = ((val.AreaCode || '') == '' ? '' : val.AreaCode + '-') + val.PhoneNumber;
        if (val.Extension) {
            number += " ext " + val.Extension;
        }
        _this.Number = number;
        _this.Type = PhoneType[val.PhoneTypeId];
        _this.Label = val.PhoneType;
        _this.TelLinkURL = PhoneModel.CreateTelLink(val);
        return _this;
    }
    PhoneModel.CreateTelLink = function (val) {
        var returnValue = "tel:";
        returnValue += (val.CountryCode || "") == "" ? "" : val.CountryCode + "-";
        returnValue += (val.AreaCode || "") == "" ? "" : val.AreaCode + "-";
        returnValue += (val.PhoneNumber || "") == "" ? "" : (val.PhoneNumber.length > 3 && val.PhoneNumber.indexOf("-") == -1) ? val.PhoneNumber.slice(0, 3) + "-" + val.PhoneNumber.slice(3) : val.PhoneNumber;
        returnValue += (val.Extension || "") == "" ? "" : "," + val.Extension;
        return returnValue;
    };
    PhoneModel.ConvertToString = function (val) {
        var returnValue = "";
        returnValue += ((val.AreaCode || '') == '' ? '' : val.AreaCode + '-') + val.PhoneNumber;
        if (val.Extension) {
            returnValue += " ext " + val.Extension;
        }
        return returnValue;
    };
    return PhoneModel;
}(ModelBase));
//# sourceMappingURL=PhoneModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ProvinceModel = /** @class */ (function (_super) {
    __extends(ProvinceModel, _super);
    function ProvinceModel(provinceId, selectCityUrl, cultureId) {
        var _this = _super.call(this) || this;
        _this.Id = provinceId;
        _this.selectCityUrl = selectCityUrl;
        _this.cultureId = cultureId;
        return _this;
    }
    return ProvinceModel;
}(ModelBase));
//# sourceMappingURL=ProvinceModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var RatingModel = /** @class */ (function (_super) {
    __extends(RatingModel, _super);
    function RatingModel(title, linkHash, detailsUrl, ratingId, ratingIdHTML, ratingNum, reviewCount, ratingType, show) {
        var _this = _super.call(this) || this;
        _this.Title = title;
        _this.LinkHash = linkHash;
        _this.DetailsURL = detailsUrl;
        _this.RatingId = ratingId;
        _this.RatingIdHTML = ratingIdHTML;
        _this.RatingNum = ratingNum;
        _this.ReviewCount = reviewCount;
        _this.RatingType = ratingType;
        _this.Show = show;
        return _this;
    }
    return RatingModel;
}(ModelBase));
//# sourceMappingURL=RatingModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var RealtorCardCarouselModel = /** @class */ (function (_super) {
    __extends(RealtorCardCarouselModel, _super);
    function RealtorCardCarouselModel(results, showBullets, continuousSlides, showXofX) {
        if (showBullets === void 0) { showBullets = true; }
        if (continuousSlides === void 0) { continuousSlides = false; }
        if (showXofX === void 0) { showXofX = false; }
        var _this = _super.call(this) || this;
        _this.Results = [];
        _this.ShowBullets = true;
        _this.ContinuousSlides = false;
        _this.ShowXofX = false;
        _this.Results = results;
        _this.ShowBullets = showBullets;
        _this.ContinuousSlides = continuousSlides;
        _this.ShowXofX = showXofX;
        return _this;
    }
    return RealtorCardCarouselModel;
}(ModelBase));
//# sourceMappingURL=RealtorCardCarouselModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * TODO: Fill this in
 */
var RealtorCardModel = /** @class */ (function (_super) {
    __extends(RealtorCardModel, _super);
    function RealtorCardModel(obj, referenceNumber, listingId, ratingsJSON) {
        var _this = _super.call(this) || this;
        _this.IndividualId = "";
        _this.OrganizationId = "";
        _this.ReferenceNumber = "";
        _this.ListingId = "";
        _this.Address = "";
        _this.RealtorName = "";
        _this.RealtorAltText = "";
        _this.RealtorEducationalCredentials = "";
        _this.HighResRealtorImageURL = "";
        _this.RealtorImageURL = "";
        _this.RealtorPosition = "";
        _this.CorporationType = "";
        _this.CorporationName = "";
        _this.FaxNumber = "";
        _this.DetailsURL = "";
        _this.IsCCN = false;
        _this.OfficeName = "";
        _this.OfficeAltText = "";
        _this.OfficeAddress = "";
        _this.OfficeDesignationName = "";
        _this.OfficeLogoImageURL = "";
        _this.Phones = [];
        _this.SocialIcons = [];
        _this.CallablePhones = [];
        _this.Websites = [];
        _this.RatingsJSON = "";
        _this.ShowHighResPhoto = false;
        _this.ShowRealtorImage = false;
        _this.ShowCallButton = false;
        _this.ShowWebsiteButton = false;
        _this.ShowEmailButton = false;
        _this.ShowFooterLinks = false;
        _this.ShowPhones = false;
        _this.ShowSocialIcons = true;
        _this.ShowOfficeInfo = true;
        _this.ShowOfficeLogo = true;
        _this.HasFax = false;
        _this.ShowCorporationName = false;
        _this.ShowCorporationType = false;
        _this.ShowRealtorName = false;
        _this.ShowRealtorAddress = false;
        _this.ShowEmailButtonWithBooking = false;
        _this.ReferenceNumber = referenceNumber || "";
        _this.ListingId = listingId || "";
        _this.IndividualId = obj.IndividualID.toString();
        _this.OrganizationId = obj.Organization.OrganizationID.toString();
        _this.OfficeCard = new OfficeCardModel(obj.Organization);
        //this.RealtorName = obj.Name + " " + (obj.DesignationCodes || "");
        //this.RealtorName = obj.Name;
        _this.RealtorName = (obj.DesignationCodes || "" != "") ? obj.Name + ", " : obj.Name;
        _this.RealtorPosition = obj.Position || "";
        _this.RealtorEducationalCredentials = obj.EducationCredentials || "";
        _this.CorporationName = obj.CorporationName;
        _this.CorporationType = obj.CorporationType;
        _this.ShowCorporationName = obj.CorporationDisplayTypeId == "1"; // || obj.CorporationDisplayTypeId == "2"; //Corp name replaces realtor name when 2
        _this.ShowCorporationType = obj.CorporationDisplayTypeId == "2";
        _this.ShowRealtorName = obj.CorporationDisplayTypeId != "2";
        if (obj.CorporationDisplayTypeId == "2") //TODO: un-kludge?
         {
            //SimpleRealtorName = obj.CorporationName;
            _this.RealtorName = obj.CorporationName;
            _this.RealtorEducationalCredentials = "";
            _this.RealtorPosition = "";
        }
        if ((obj.Photo || "") != "") {
            _this.ShowRealtorImage = true;
            if (_this.ShowHighResPhoto) {
                _this.RealtorImageURL = obj.Photo.toLowerCase().replace("lowres", "highres");
            }
            else {
                _this.RealtorImageURL = obj.Photo;
            }
        }
        if ((obj.RelativeDetailsURL || "") != "") {
            _this.DetailsURL = obj.RelativeDetailsURL;
        }
        else {
            _this.DetailsURL = "/" + ApplicationState.ApplicationModeString + "/Agent/" + obj.IndividualID;
        }
        _this.IsCCN = obj.CccMember;
        _this.OfficeName = obj.Organization.Name;
        if ((obj.Organization.Address || "") != "" && (obj.Organization.Address.AddressText || "") != "") {
            _this.OfficeAddress = obj.Organization.Address.AddressText.replace(/\|/g, "<br />");
        }
        _this.OfficeDesignationName = obj.Organization.Designation;
        if (obj.Organization.Logo != null) {
            _this.OfficeLogoImageURL = ApplicationConfig.OrganizationImageLowResolution + obj.Organization.Logo;
        }
        else {
            _this.ShowOfficeLogo = false;
        }
        if (obj.Emails != null && obj.Emails.length > 0) {
            _this.ShowEmailButton = true;
        }
        else {
            _this.ShowEmailButton = false;
        }
        if (obj.Phones != null && obj.Phones.length > 0) {
            _this.LoadPhones(obj.Phones);
            _this.LoadCallablePhones(obj.Phones);
        }
        else {
            _this.ShowCallButton = false;
        }
        if (obj.Websites != null && obj.Websites.length > 0) {
            _this.LoadWebsites(obj.Websites);
            _this.LoadSocialIcons(obj.Websites);
            _this.ShowWebsiteButton = true;
        }
        else {
            _this.ShowSocialIcons = false;
            _this.ShowWebsiteButton = false;
        }
        _this.ShowFooterLinks = _this.ShowCallButton || _this.ShowEmailButton || _this.ShowWebsiteButton;
        _this.RealtorAltText = Translation.get("RealtorImageAltText", _this.RealtorName);
        _this.OfficeAltText = Translation.get("OfficeImageAltText", _this.OfficeName);
        _this.RatingsJSON = ratingsJSON;
        return _this;
    }
    RealtorCardModel.prototype.LoadCallablePhones = function (phones) {
        if (phones != null) {
            for (var i = 0; i < phones.length; i++) {
                var phone = new PhoneModel(phones[i]);
                if (phone.Type != PhoneType.Fax) {
                    this.ShowCallButton = true;
                    this.CallablePhones.push(phone);
                }
            }
        }
    };
    RealtorCardModel.prototype.LoadPhones = function (phones) {
        if (phones != null) {
            for (var i = 0; i < phones.length; i++) {
                var phone = new PhoneModel(phones[i]);
                this.Phones.push(phone);
                if (phone.Type == PhoneType.Fax) {
                    this.HasFax = true;
                    this.FaxNumber = PhoneModel.ConvertToString(phones[i]);
                }
            }
            this.ShowPhones = this.Phones.length > 0;
        }
    };
    RealtorCardModel.prototype.LoadWebsites = function (websites) {
        if (websites != null) {
            for (var i = 0; i < websites.length; i++) {
                var website = new WebsiteModel(websites[i]);
                this.Websites.push(website);
            }
        }
    };
    RealtorCardModel.prototype.LoadSocialIcons = function (sites) {
        if (sites != null) {
            for (var i = 0; i < sites.length; i++) {
                //let type: WebSiteType = WebSiteType[sites[i].WebsiteTypeId];
                if (Number(sites[i].WebsiteTypeId) != Number(WebSiteType.Website)) {
                    var icon = new SocialLinkModel(sites[i]);
                    this.SocialIcons.push(icon);
                }
            }
            this.ShowSocialIcons = this.SocialIcons.length > 0;
        }
    };
    return RealtorCardModel;
}(ModelBase));
//# sourceMappingURL=RealtorCardModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var RealtorModel = /** @class */ (function (_super) {
    __extends(RealtorModel, _super);
    function RealtorModel(individualId, organizationId, showListingsSection, showOfficeListings, firstName, ratingsJSON) {
        var _this = _super.call(this) || this;
        _this.RatingsJSON = "";
        _this.individualId = individualId;
        _this.organizationId = organizationId;
        _this.showListingsSection = showListingsSection;
        _this.showOfficeListings = showOfficeListings;
        _this.firstName = firstName;
        _this.RatingsJSON = ratingsJSON;
        _this.multimedia = new Array();
        return _this;
    }
    return RealtorModel;
}(ModelBase));
//# sourceMappingURL=RealtorModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var SavedSearchModel = /** @class */ (function (_super) {
    __extends(SavedSearchModel, _super);
    function SavedSearchModel(search) {
        var _this = this;
        var _a, _b;
        _this = _super.call(this) || this;
        _this.Name = "";
        _this.URL = "";
        _this.Date = "";
        _this.CtrlId = "";
        _this.CtrlClass = "";
        _this.NotificationsFrequency = NotificationFrequency.Never;
        _this.NotificationsEnabled = false;
        _this.NotificationIconSrc = "";
        _this.NotificationCurrentToggleText = "";
        _this.Name = search.name.HTMLSafe();
        //let modeString: string = search.appMode == ApplicationState.CurrentMode ? ApplicationState.ApplicationModeString : ApplicationState.AlternateApplicationModeString;
        var convertedURL = RouteHelper.getURL('map') + '#' + search.url.substr(search.url.indexOf('#') + 1);
        _this.URL = convertedURL + "&SearchName=" + encodeURIComponent(search.name);
        _this.NotificationsFrequency = ((_a = search.notifications) === null || _a === void 0 ? void 0 : _a.filter(function (value, index, array) { return value.method == NotificationMethod.Email; }).length) > 0 ?
            (_b = search.notifications) === null || _b === void 0 ? void 0 : _b.filter(function (value, index, array) { return value.method == NotificationMethod.Email; })[0].frequency : NotificationFrequency.Never;
        _this.NotificationsEnabled = _this.NotificationsFrequency != NotificationFrequency.Never; //search.notify;
        _this.NotificationIconSrc = _this.NotificationsEnabled ? SavedSearchModel.fullBellImageSrc : SavedSearchModel.emptyBellImageSrc;
        _this.NotificationCurrentToggleText = _this.NotificationsEnabled ? Translation.get("ON") : Translation.get("OFF");
        _this.Date = SavedSearch.GetFormattedDate(search.savedDate);
        _this.CtrlId = "ctrl_" + Utilities.getHashCode(search.name); //encodeURIComponent(search.name); // this messes up when there are brackets and jquery uses regex internally US-183788
        _this.CtrlClass = "ctrl_search_notify_" + search.appMode.toString();
        return _this;
    }
    SavedSearchModel.fullBellImageSrc = "/images/common/icons/svg/bell.svg";
    SavedSearchModel.emptyBellImageSrc = "/images/common/icons/svg/bell-gray.svg";
    return SavedSearchModel;
}(ModelBase));
//# sourceMappingURL=SavedSearchModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Created to pass back results data from server loaded control (realtor results)
 */
var SearchResultsModel = /** @class */ (function (_super) {
    __extends(SearchResultsModel, _super);
    function SearchResultsModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SearchResultsModel;
}(ModelBase));
//# sourceMappingURL=SearchResultsModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SharedNotesModel2 = /** @class */ (function (_super) {
    __extends(SharedNotesModel2, _super);
    function SharedNotesModel2(displayName, notes, sharedNotesJSON, senderUID) {
        var _this = _super.call(this) || this;
        _this.displayName = displayName;
        _this.notes = notes;
        _this.sharedNotesJSON = sharedNotesJSON;
        _this.senderUID = senderUID;
        return _this;
    }
    return SharedNotesModel2;
}(ModelBase));
//# sourceMappingURL=SharedNotesModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the SocialLinkModel.cs class.
 */
var SocialLinkModel = /** @class */ (function (_super) {
    __extends(SocialLinkModel, _super);
    function SocialLinkModel(value) {
        var _this = _super.call(this) || this;
        if (Number(value.WebsiteTypeId) == Number(WebSiteType.Facebook)) {
            _this.ImageURL = "/images/common/icons/svg/facebook.svg";
        }
        else if (Number(value.WebsiteTypeId) == Number(WebSiteType.LinkedIn)) {
            _this.ImageURL = "/images/common/icons/svg/linkedin.svg";
        }
        else if (Number(value.WebsiteTypeId) == Number(WebSiteType.Twitter)) {
            _this.ImageURL = "/images/common/icons/svg/twitter.svg";
        }
        else if (Number(value.WebsiteTypeId) == Number(WebSiteType.Instagram)) {
            _this.ImageURL = "/images/common/icons/svg/instagram.svg";
        }
        _this.LinkURL = value.Website;
        return _this;
    }
    return SocialLinkModel;
}(ModelBase));
//# sourceMappingURL=SocialLinkModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the SocialShareModel.cs class.
 */
var SocialShareModel = /** @class */ (function (_super) {
    __extends(SocialShareModel, _super);
    function SocialShareModel(LinkBack, LinkBackFacebook, LinkBackLinkedIn, LinkBackTwitter, LinkBackPinterest, LinkBackGoogle, Title, MediaSrc, Description, CardType, MediaType, Listings, Listing, Campaign, SharePage, ImageMediaSource, EmailFriendMedium) {
        var _this = _super.call(this) || this;
        _this.NativeSharingEnabled = false;
        _this.EmailFriendMedium = EmailFriendMedium;
        _this.LinkBack = LinkBack;
        _this.LinkBackFacebook = LinkBackFacebook;
        _this.LinkBackLinkedIn = LinkBackLinkedIn;
        _this.LinkBackTwitter = LinkBackTwitter;
        _this.LinkBackPinterest = LinkBackPinterest;
        _this.LinkBackGoogle = LinkBackGoogle;
        _this.Title = Title; //$("<textarea/>").html("&#8217;").text(Title).val();//A weird behavior from CMS where the ’ is returned as an html entity...
        _this.MediaSrc = MediaSrc;
        _this.Description = Description; //$("<textarea/>").html("&#8217;").text(Description).val();//A weird behavior from CMS where the ’ is returned as an html entity...
        _this.CardType = CardType;
        _this.MediaType = MediaType;
        _this.Listings = Listings;
        _this.Listing = Listing;
        _this.Campaign = Campaign;
        _this.SharePage = SharePage;
        _this.NativeSharingEnabled = navigator.share && ApplicationConfig.MobileSocialSharingNative &&
            //Prevent the display for samsung browsers under a specific version because its buggy and
            //we cannot differentiate from webview and samsung browser...
            (ApplicationState.IsSamsungDevice && ApplicationState.IsAndroid ?
                SocialShareModel.nativeSharingAndroidSamsungSupport() : ApplicationState.IsMobileDevice);
        return _this;
    }
    /**
    * A function used to overwrite the hash parameter in the URL that is passed to external API with AJAX
      for social sharing purposes...
    */
    SocialShareModel.prototype.overwriteSocialShareHashLink = function () {
        var _this = this;
        var favIdsCSV = this.Listings != null && this.Listings.length > 0 ? "?propertyIds=" + this.Listings : "";
        var handleUrlFormatingToShare = function (linkBackUrl) {
            if (linkBackUrl != null && linkBackUrl.trim().length > 0) {
                var linkBackUrlObj = new URL(linkBackUrl);
                if (linkBackUrl.indexOf("#") > 0) {
                    if (_this.Listings != null && _this.Listings.length > 0) {
                        var urlWithQuery = linkBackUrl.replace(_this.LinkBack.substring(linkBackUrl.indexOf("#"), linkBackUrl.length), "") + favIdsCSV;
                        var queryObj = Utilities.getQueryObjUrl(urlWithQuery, true);
                        var urlWithQueryAndHash = linkBackUrlObj.origin + linkBackUrlObj.pathname + Utilities.getURLQueryParamFormat(queryObj, true) + window.location.hash;
                        linkBackUrl = urlWithQueryAndHash;
                    }
                    else {
                        linkBackUrl = linkBackUrl.replace(linkBackUrl.substring(linkBackUrl.indexOf("#"), linkBackUrl.length), "") + window.location.hash;
                    }
                }
                else {
                    var urlWithQuery = linkBackUrl + favIdsCSV;
                    var queryObj = Utilities.getQueryObjUrl(urlWithQuery, true);
                    var urlWithQueryAndHash = linkBackUrlObj.origin + linkBackUrlObj.pathname + Utilities.getURLQueryParamFormat(queryObj, true) + window.location.hash;
                    linkBackUrl = urlWithQueryAndHash;
                }
                return linkBackUrl;
            }
            else {
                return null;
            }
        };
        this.LinkBack = handleUrlFormatingToShare(this.LinkBack);
        this.LinkBackFacebook = handleUrlFormatingToShare(this.LinkBackFacebook);
        this.LinkBackLinkedIn = handleUrlFormatingToShare(this.LinkBackLinkedIn);
        this.LinkBackTwitter = handleUrlFormatingToShare(this.LinkBackTwitter);
        this.LinkBackPinterest = handleUrlFormatingToShare(this.LinkBackPinterest);
        this.LinkBackGoogle = handleUrlFormatingToShare(this.LinkBackGoogle);
        this.LinkMobileNativeSharing = handleUrlFormatingToShare(this.LinkMobileNativeSharing);
    };
    SocialShareModel.prototype.overwriteSSSProviderUrlQueryObj = function (urlQueryParams, providerName) {
        urlQueryParams['title'] = encodeURIComponent(this.Title);
        switch (providerName) {
            case SocialShareProvider.facebook: {
                urlQueryParams['link'] = encodeURIComponent(this.LinkBackFacebook);
                break;
            }
            case SocialShareProvider.twitter: {
                urlQueryParams['link'] = encodeURIComponent(this.LinkBackTwitter);
                urlQueryParams['shortener'] = ShareaholicShortenService.shrlc;
                urlQueryParams['template'] = "${title} ${short_link}";
                break;
            }
            case SocialShareProvider.pinterest: {
                urlQueryParams['link'] = encodeURIComponent(this.LinkBackPinterest);
                //The API title overwrites the description of pinterest and
                //the pinterest title is read from the OpenGraph by default
                urlQueryParams['title'] = encodeURIComponent(this.Description);
                break;
            }
            case SocialShareProvider.linkedin: {
                urlQueryParams['link'] = encodeURIComponent(this.LinkBackLinkedIn);
                break;
            }
            default: {
                urlQueryParams['link'] = encodeURIComponent(this.LinkBack);
                break;
            }
        }
        return urlQueryParams;
    };
    SocialShareModel.prototype.getShortenUrlFromShareaholic = function (callBackHandler, urlToShorten) {
        var me = this;
        //Prepare the function that will try to get the unsubscribed user
        var error = function (request, textStatus, exception) {
            Logging.Debug(exception, LogType.Other);
            callBackHandler(null);
        };
        var success = function (results) {
            if (results.errors) {
                Logging.Error("Error parsed from shareaholic: " + results.errors.toString());
                callBackHandler(null);
            }
            else if (results.status_code == "200") {
                callBackHandler(results.data);
            }
            else {
                var errorDetail = results.ErrorCode ? "Id: " + results.ErrorCode.Id + ", LogId: " + results.ErrorCode.LogId +
                    ", Description: " + results.ErrorCode.Description + ", Exception: " + results.ErrorCode.Exception +
                    ", status: " + results.ErrorCode.Status : "";
                Logging.Error("An unknown error has occured while returning the shareaholic shorten data: " + urlToShorten + ", " + errorDetail);
                callBackHandler(null);
            }
        };
        //Send the request
        Actions.GetShareaholicShortenedURL({
            shortenService: ShareaholicShortenService.shrlc,
            url: encodeURIComponent(urlToShorten)
        }, success, error);
    };
    Object.defineProperty(SocialShareModel, "GetAndroidOsVersion", {
        /**
            * Return Android OS Version detail...
        */
        get: function () {
            var versionDetail = { mainVersion: -1, subVersions: new Array() };
            var browserVersionRegEx = /^.+Android ([0-9]+([.][0-9]+)*).*$/i;
            var matches = navigator.userAgent.match(browserVersionRegEx);
            versionDetail.mainVersion = matches != null && matches.length > 0 ? Number(matches[1].toString().split('.')[0]) : -1;
            versionDetail.subVersions = matches != null && matches.length > 1 ? matches[1].toString().split('.').slice(1, matches[1].toString().split('.').length).map(function (x, y, z) {
                return Number(x);
            }) : null;
            return matches != null && matches.length > 0 ? versionDetail : null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SocialShareModel, "GetSamsungBrowserVersion", {
        /**
           * Return Android Samsung Browser Version detail...
       */
        get: function () {
            var versionDetail = { mainVersion: -1, subVersions: new Array() };
            var browserVersionRegEx = /^.+SamsungBrowser\/([0-9]+([.][0-9]+)*).*$/i;
            var matches = navigator.userAgent.match(browserVersionRegEx);
            versionDetail.mainVersion = matches != null && matches.length > 0 ? Number(matches[1].toString().split('.')[0]) : -1;
            versionDetail.subVersions = matches != null && matches.length > 1 ? matches[1].toString().split('.').slice(1, matches[1].toString().split('.').length).map(function (x, y, z) {
                return Number(x);
            }) : null;
            return matches != null && matches.length > 0 ? versionDetail : null;
        },
        enumerable: false,
        configurable: true
    });
    /**
        * Determine if the native sharing is supported on samsung internet browser on the android...
    */
    SocialShareModel.nativeSharingAndroidSamsungSupport = function () {
        var androidVersion = SocialShareModel.GetAndroidOsVersion;
        var samsungBrowserVersion = SocialShareModel.GetSamsungBrowserVersion;
        //Verify samsung browser version and android OS
        if (samsungBrowserVersion != null) {
            return androidVersion != null &&
                (androidVersion.mainVersion == SocialShareModel.AndroidWebViewNativeShareMinVer.mainVersion ?
                    (androidVersion.subVersions != null && androidVersion.subVersions.length > 0 ?
                        androidVersion.subVersions[0] >= 1 : false) :
                    androidVersion.mainVersion > SocialShareModel.AndroidWebViewNativeShareMinVer.mainVersion) &&
                samsungBrowserVersion != null &&
                (samsungBrowserVersion.mainVersion == SocialShareModel.AndroidSamsungBrowserNativeShareMinVer.mainVersion ?
                    true : samsungBrowserVersion.mainVersion > SocialShareModel.AndroidSamsungBrowserNativeShareMinVer.mainVersion);
        }
        else { //Verify android OS only for samsung web app view
            return (androidVersion.mainVersion == SocialShareModel.AndroidWebViewNativeShareMinVer.mainVersion ?
                (androidVersion.subVersions != null && androidVersion.subVersions.length > 0 ?
                    androidVersion.subVersions[0] >= 1 : false) :
                androidVersion.mainVersion > SocialShareModel.AndroidWebViewNativeShareMinVer.mainVersion);
        }
    };
    SocialShareModel.AndroidWebViewNativeShareMinVer = { mainVersion: 8, subVersions: [1] };
    SocialShareModel.AndroidSamsungBrowserNativeShareMinVer = { mainVersion: 11, subVersions: [] };
    return SocialShareModel;
}(ModelBase));
//# sourceMappingURL=SocialShareModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TooltipMessageModel = /** @class */ (function (_super) {
    __extends(TooltipMessageModel, _super);
    function TooltipMessageModel(positiveBtnText, mainTextContent, titleText) {
        var _this = _super.call(this) || this;
        _this.PositiveBtnText = "";
        _this.MainTextContent = "";
        _this.TitleText = "";
        _this.PositiveBtnText = positiveBtnText;
        _this.MainTextContent = mainTextContent;
        _this.TitleText = titleText;
        return _this;
    }
    return TooltipMessageModel;
}(ModelBase));
//# sourceMappingURL=ToolTipMessageModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var TrueLifeCostModel = /** @class */ (function (_super) {
    __extends(TrueLifeCostModel, _super);
    function TrueLifeCostModel(PostalCode, LivingAreaSquareFeet, Province, MaintenanceFee) {
        var _this = _super.call(this) || this;
        _this.LivingAreaSquareFeet = "";
        _this.PostalCode = "";
        _this.Province = "";
        _this.LivingAreaSquareFeet = LivingAreaSquareFeet,
            _this.PostalCode = PostalCode,
            _this.Province = Province,
            _this.MaintenanceFee = MaintenanceFee;
        return _this;
        //this.LifeStyle = LifeStyle,
        //this.FilingStatus = FilingStatus,
        //this.TaxBracket = TaxBracket,
        //this.NetMonthlyIncome = NetMonthlyIncome,
        //this.GrossMonthlyIncome = GrossMonthlyIncome,
        //this.MonthlyDebt = MonthlyDebt
    }
    return TrueLifeCostModel;
}(ModelBase));
//# sourceMappingURL=TrueLifeCostModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var UnsubscribeEmailsModel = /** @class */ (function (_super) {
    __extends(UnsubscribeEmailsModel, _super);
    function UnsubscribeEmailsModel(showComms, showNotify, hdn_UserId, redirectToIndex, user) {
        var _this = _super.call(this) || this;
        _this.showComms = false;
        _this.showNotify = false;
        _this.hdn_UserId = "";
        _this.redirectToIndex = true;
        _this.showComms = showComms;
        _this.showNotify = showNotify;
        _this.hdn_UserId = hdn_UserId;
        _this.redirectToIndex = redirectToIndex;
        _this.user = user;
        return _this;
    }
    return UnsubscribeEmailsModel;
}(ModelBase));
//# sourceMappingURL=UnsubscribeEmailsModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var UnsubscribeNotificationEmailsModel = /** @class */ (function (_super) {
    __extends(UnsubscribeNotificationEmailsModel, _super);
    function UnsubscribeNotificationEmailsModel() {
        return _super.call(this) || this;
    }
    UnsubscribeNotificationEmailsModel.prototype.getUnsubscribeUser = function (callBackHandler) {
        var me = this;
        //Prepare the function that will try to get the unsubscribed user
        var error = function (request, textStatus, exception) {
            Logging.Debug(exception, LogType.Other);
            callBackHandler(true, UnsubscribeNotificationAction.Get, me);
        };
        var success = function (data) {
            me.Data = data;
            if (data.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                callBackHandler(false, UnsubscribeNotificationAction.Get, me);
            }
            else {
                callBackHandler(true, UnsubscribeNotificationAction.Get, me);
            }
        };
        //Send the request
        Actions.GetUnsubscribeEmailNotification({ httpQuery: URLHash.getUrlParameter("query") }, success, error);
    };
    UnsubscribeNotificationEmailsModel.prototype.AddUnsubscribedUser = function (callBackHandler) {
        var me = this;
        //Prepare the function that will try to get the unsubscribed user
        var error = function (request, textStatus, exception) {
            Logging.Debug(exception, LogType.Other);
            callBackHandler(true, UnsubscribeNotificationAction.Append, me);
        };
        var success = function (data) {
            //Display the corresponding message if it was succesfull
            me.Data = data;
            if (data.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                callBackHandler(false, UnsubscribeNotificationAction.Append, me);
            }
            else {
                callBackHandler(true, UnsubscribeNotificationAction.Append, me);
            }
            //Display the corrresponding error message
        };
        //Send the request
        Actions.AddUnsubscribeEmailNotification({ httpQuery: URLHash.getUrlParameter("query") }, success, error);
    };
    return UnsubscribeNotificationEmailsModel;
}(ModelBase));
var UnsubscribeNotificationAction;
(function (UnsubscribeNotificationAction) {
    UnsubscribeNotificationAction[UnsubscribeNotificationAction["Append"] = 0] = "Append";
    UnsubscribeNotificationAction[UnsubscribeNotificationAction["Get"] = 1] = "Get";
})(UnsubscribeNotificationAction || (UnsubscribeNotificationAction = {}));
//# sourceMappingURL=UnsubscribeNotificationEmailsModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Typescript representation of the WebsiteModel.cs class.
 */
var WebsiteModel = /** @class */ (function (_super) {
    __extends(WebsiteModel, _super);
    function WebsiteModel(val) {
        var _this = _super.call(this) || this;
        _this.Label = val.WebsiteTypeId;
        _this.URL = val.Website;
        return _this;
    }
    return WebsiteModel;
}(ModelBase));
//# sourceMappingURL=WebsiteModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var DisclaimerPageModel = /** @class */ (function (_super) {
    __extends(DisclaimerPageModel, _super);
    function DisclaimerPageModel() {
        var _this = _super.call(this) || this;
        _this.DisplayedOverPage = false;
        return _this;
    }
    return DisclaimerPageModel;
}(ModelBase));
//# sourceMappingURL=DisclaimerPageModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var IndexPageModel = /** @class */ (function (_super) {
    __extends(IndexPageModel, _super);
    function IndexPageModel() {
        return _super.call(this) || this;
    }
    return IndexPageModel;
}(ModelBase));
//# sourceMappingURL=IndexPageModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 *
 */
var MapPageModel = /** @class */ (function (_super) {
    __extends(MapPageModel, _super);
    function MapPageModel() {
        return _super.call(this) || this;
    }
    return MapPageModel;
}(ModelBase));
//# sourceMappingURL=MapPageModel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FavouritePageBase = /** @class */ (function (_super) {
    __extends(FavouritePageBase, _super);
    function FavouritePageBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemsPerPage = 12;
        _this.friendMode = false;
        return _this;
    }
    FavouritePageBase.InsertMissingListingsIntoResults = function (results, IdsMissingFromResults) {
        for (var i = 0; i < IdsMissingFromResults.length; i++) {
            var fav = Favourite.getById(IdsMissingFromResults[i]);
            var newItem = new PublicContracts.ListingBasicDetails(null);
            newItem.Id = fav.id;
            newItem.Property = new PublicContracts.PropertyBasicDetails(null);
            newItem.Property.Address = new PublicContracts.Address(null);
            newItem.Property.Address.Latitude = fav.latitude;
            newItem.Property.Address.Longitude = fav.longitude;
            results.Results.unshift(newItem);
        }
    };
    /**
     * Returns the the listing IDs that are not included in the API response.
     * @param ids
     * @param results
     */
    FavouritePageBase.IdsMissingFromResults = function (ids, results) {
        var returnValue = [];
        for (var idIndex = 0; idIndex < ids.length; idIndex++) {
            var currentId = ids[idIndex];
            var found = false;
            for (var i = 0; i < results.Results.length; i++) {
                if (results.Results[i].Id == currentId) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                returnValue.push(currentId);
            }
        }
        return returnValue;
    };
    FavouritePageBase.prototype.getFavouriteIds = function (includeListing) {
        return this.getFavouriteIdsCSV(includeListing).split(',');
    };
    FavouritePageBase.prototype.getFavouriteIdsCSV = function (includeListing) {
        var returnValue = "";
        var queryParam = Utilities.getParamValueByName("propertyIds", URLParamType.Query);
        if (queryParam != "") {
            returnValue = queryParam;
        }
        else if (ApplicationState.UserIsSignedIn) {
            var favs = LocalAccountStorage.FavouritesCP.getObjects(Favourite.fromObject);
            for (var i = 0; i < favs.length; i++) {
                if (includeListing == null || (includeListing != null && includeListing(favs[i]))) {
                    returnValue += favs[i].id + ",";
                }
            }
        }
        else {
            var favs = Cookie.Favourites.getArray();
            for (var i = 0; i < favs.length; i++) {
                var fav = Favourite.fromString(favs[i]);
                if (includeListing == null || (includeListing != null && includeListing(fav))) {
                    returnValue += fav.id + ",";
                }
            }
        }
        if (returnValue.charAt(returnValue.length - 1) == ",") {
            returnValue = returnValue.slice(0, -1);
        }
        return returnValue;
    };
    FavouritePageBase.prototype.loadSimilarListings = function (listingIds) {
        if (listingIds && listingIds.length > 0) {
            var args = new ControlFetcherArgs("", "similarListingsCon", function (html) {
                var numCards = $(html).find('.listingDetailsLink').length;
                if (numCards > 0) {
                    $('#similarListingsOuterCon').show();
                    $('#similarListingsCon').html(html);
                    if (ApplicationState.IsMobileDevice) {
                        $('#similarListingsOuterCon .SmallListingCardCarouselRecordLabelEndVal').text(numCards);
                    }
                }
                else {
                    $('#similarListingsOuterCon').hide();
                }
                $('#similarListingsOuterCon').css("min-height", "");
            });
            args.showLoadingSpinner = false;
            args.showLoadingAnimation = false;
            args.refreshIconAnimInOutPref =
                { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" };
            ControlFetcher.fetchSimilarListingsCarousel(args, { listingIds: listingIds });
        }
    };
    /**
    * Returns current sort order from control.
    * @param controlId
    * @param isValidForAPI false will return values which may not be valid for API (ie client only sort order values)
    */
    FavouritePageBase.prototype.getSortOrder = function (controlId, isValidForAPI) {
        if (isValidForAPI === void 0) { isValidForAPI = true; }
        var criteria = WebControl.getValuesFromControlsAsObject([controlId], false);
        var sortOrder = criteria["sort"];
        if (isValidForAPI && (sortOrder == '0-D' || sortOrder == '0-A')) {
            sortOrder = null; //API doesn't know/care about this client based sort order
        }
        return sortOrder;
    };
    return FavouritePageBase;
}(WebPage));
//# sourceMappingURL=FavouritePageBase.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var AboutUs = /** @class */ (function (_super) {
            __extends(AboutUs, _super);
            function AboutUs(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            AboutUs.prototype.loadModel = function (model) {
            };
            AboutUs.prototype.render = function () {
                var me = this;
            };
            ;
            AboutUs.prototype.registerEventHandlers = function () {
                var me = this;
                $('.startSearchButton').click(function () {
                    me.ErrorSearch();
                });
                $('#nf_search_input').keypress(function (e) {
                    if (e.which == 13) {
                        e.preventDefault();
                        me.ErrorSearch();
                    }
                });
            };
            AboutUs.prototype.ErrorSearch = function () {
                var me = this;
                var searchValue = $('#nf_search_input').val();
                Core.GoToPage(RouteHelper.getURL("map") + '#Area=' + searchValue + "&ApplicationId=1&RecordsPerPage=9&Page=1");
            };
            return AboutUs;
        }(WebPage));
        Pages.AboutUs = AboutUs;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=about-us.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var BuyerInfo = /** @class */ (function (_super) {
            __extends(BuyerInfo, _super);
            function BuyerInfo(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.canScrollInPage = false;
                _this.init();
                return _this;
            }
            BuyerInfo.prototype.loadModel = function (model) { };
            BuyerInfo.prototype.render = function () {
                var me = this;
                var set = $('.infoContentSection');
                var length = set.length;
                set.each(function (index, element) {
                    if (index == (length - 1)) {
                        Controls.Desktop.TabHighlighter.insert($(this).find('.infoContentSection_SubSection_TabItem'), InfoPage.initPageAfterTabSelector);
                    }
                    else {
                        Controls.Desktop.TabHighlighter.insert($(this).find('.infoContentSection_SubSection_TabItem'));
                    }
                });
            };
            ;
            BuyerInfo.prototype.registerEventHandlers = function () {
                InfoPage.registerEventHandlers();
            };
            return BuyerInfo;
        }(WebPage));
        Pages.BuyerInfo = BuyerInfo;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=BuyerInfo.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var City = /** @class */ (function (_super) {
            __extends(City, _super);
            function City(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            City.prototype.loadModel = function (model) {
                this.cityId = model.CityId;
                this.cityName = model.CityName;
                this.cultureId = model.CultureId;
                this.searchURL = model.SearchURL;
                //+ on a string is like .net int.tryParse https://stackoverflow.com/a/14668510
                this.numOfListings = +model.NumPropsForSale;
            };
            City.prototype.render = function () {
                var me = this;
                //calculate height bubble text and set background height
                var heightBubble = $('.city_facts_bubble').height();
                var heightBGImg = $('#img_facts_bg').height();
                $("#hdr_tab_con").hide();
                me.loadListingCards();
            };
            ;
            City.prototype.loadListingCards = function () {
                var _this = this;
                var me = this;
                var args = new ListingCardCarouselArgs();
                //Need to pass in model items
                args.criteria.CultureId = me.cultureId;
                if ((me.model.GeoId || "") != "") {
                    args.criteria.GeoIds = me.model.GeoId;
                }
                else {
                    args.criteria.CityId = me.cityId;
                    if (+me.cityId < 1) {
                        args.criteria.City = me.cityName;
                    }
                }
                args.criteria.ApplicationId = "1";
                args.criteria.PropertySearchTypeId = "1";
                args.criteria.TransactionTypeID = "2";
                args.criteria.IncludePins = "0";
                args.criteria.PropertyTypeGroupID = "1";
                args.criteria.BedroomRange = "0-0";
                args.criteria.BathroomRange = "0-0";
                args.criteria.ParkingSpaceRange = "0-0";
                //This is the random search: sortby 23
                args.criteria.SortBy = "23";
                args.criteria.RecordsPerPage = "12";
                args.criteria.Currency = ApplicationState.CurrencyValue || "CAD";
                var fetcherArgs = new ControlFetcherArgs("cityListingsOuterCon", "cityListingsCon");
                fetcherArgs.showLoadingSpinner = false;
                fetcherArgs.showLoadingAnimation = false;
                fetcherArgs.postCallHandler = function () {
                    if (_this.numOfListings > 0) {
                        $('#city_listings_section').removeClass("hidden");
                    }
                };
                ControlFetcher.fetchListingCardsCarousel(fetcherArgs, args);
            };
            City.prototype.registerEventHandlers = function () {
                var me = this;
                //$('#city_button_find_realtor').click(function () {
                //    me.DiscRealtor();
                //});
                $('.city_info_searchbox_button').click(function () {
                    me.DiscMap();
                });
                Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                    me.loadListingCards();
                });
            };
            City.prototype.DiscMap = function () {
                var me = this;
                Core.GoToPage(me.searchURL);
                //Core.CheckTOSAcceptance(mapQuery);
            };
            City.prototype.DiscRealtor = function () {
                var me = this;
                //Core.CheckTOSAcceptance("../../" + "/realtorresults#City=" + me.cityName + "&CultureId=" + me.cultureId + "&ApplicationId=1&RecordsPerPage=9&Page=1");
                Core.GoToPage(RouteHelper.getURL("realtor-search-results") + "#City=" + me.cityName + "&CultureId=" + me.cultureId + "&ApplicationId=1&RecordsPerPage=9&Page=1");
            };
            return City;
        }(WebPage));
        Pages.City = City;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=City.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var commercialGlossary = /** @class */ (function (_super) {
            __extends(commercialGlossary, _super);
            function commercialGlossary(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            commercialGlossary.prototype.loadModel = function (model) { };
            commercialGlossary.prototype.render = function () {
                var me = this;
            };
            ;
            commercialGlossary.prototype.registerEventHandlers = function () {
                var me = this;
                $('.letterItemNoBord,.letterItemBordLeft').click(function (e) {
                    console.log("clicked");
                    var id = $(e.currentTarget).attr("data-glossary-id");
                    $("html,body").animate({
                        scrollTop: $('.bigLetter[id=' + id + ']').offset().top
                    }, 1000);
                });
            };
            return commercialGlossary;
        }(WebPage));
        Pages.commercialGlossary = commercialGlossary;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=commercialGlossary.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var commercialResources = /** @class */ (function (_super) {
            __extends(commercialResources, _super);
            function commercialResources(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.canScrollInPage = false;
                _this.init();
                return _this;
            }
            commercialResources.prototype.loadModel = function (model) { };
            commercialResources.prototype.render = function () {
                var me = this;
                //Controls.Desktop.TabHighlighter.insert($('.infoContentSection').find('.infoContentSection_SubSection_TabItem:first'), InfoPage.initPageAfterTabSelector);
                var set = $('.infoContentSection');
                var length = set.length;
                set.each(function (index, element) {
                    if (index == (length - 1)) {
                        Controls.Desktop.TabHighlighter.insert($(this).find('.infoContentSection_SubSection_TabItem'), InfoPage.initPageAfterTabSelector);
                    }
                    else {
                        Controls.Desktop.TabHighlighter.insert($(this).find('.infoContentSection_SubSection_TabItem'));
                    }
                });
            };
            ;
            commercialResources.prototype.registerEventHandlers = function () {
                var me = this;
                $(window).load(function () {
                    if (me.initScrollElement) {
                        $("html,body").animate({ scrollTop: me.initScrollElement.offset().top }, 500);
                    }
                });
                $('.infoContentSection_SubSection_TabCon').hide();
                $('.infoContentSection').hide();
                InfoPage.registerEventHandlers();
            };
            return commercialResources;
        }(WebPage));
        Pages.commercialResources = commercialResources;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=commercialResources.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var commercialServices = /** @class */ (function (_super) {
            __extends(commercialServices, _super);
            function commercialServices(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            commercialServices.prototype.loadModel = function (model) { };
            commercialServices.prototype.render = function () {
                var me = this;
            };
            ;
            commercialServices.prototype.registerEventHandlers = function () {
                var me = this;
            };
            return commercialServices;
        }(WebPage));
        Pages.commercialServices = commercialServices;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=commercialServices.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var ContactUs = /** @class */ (function (_super) {
            __extends(ContactUs, _super);
            function ContactUs(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            ContactUs.prototype.loadModel = function (model) { };
            ContactUs.prototype.registerEventHandlers = function () {
                $('#ddlProvince').change(function () {
                    var id = $(this).val();
                    if (id == "0") {
                        $('.boardContactItemCon, .provinceLabel').show();
                    }
                    else {
                        $('.boardContactItemCon, .provinceLabel').hide();
                        $('.boardContactItemCon[data-provinceid=' + id + '], .provinceLabel[data-provinceid=' + id + ']').show();
                    }
                });
                $('#btnSendContactUs').click(function () {
                    if (FormValidation.validateForm($('#contactUsForm'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                        Actions.emailContactUs({
                            emailFrom: $('#txtEmail').val(),
                            fromName: $('#txtFirstName').val() + " " + $('#txtLastName').val(),
                            subject: $('#ddlTopic').val(),
                            message: Utilities.buildEmailFeedbackMessage(Utilities.cleanJSONValue($('#txtFirstName').val() + " " + $('#txtLastName').val()), Utilities.cleanJSONValue($('#txtEmail').val())) + $('#txtMessage').val(),
                            cultureId: ApplicationState.CultureID.toString()
                        }, function (response) {
                            if (response.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                                showMessage(Translation.get("EmailSentSuccessfully"));
                                resetInputControls($('#contactUsForm'), null);
                            }
                            else {
                                showMessage(Translation.get("EmailSendError"), MessageType.Error);
                                Logging.Error(JSON.stringify(response.ErrorCode));
                            }
                        });
                    }
                    else {
                        addAnimationClass($('#btnSendContactUs'), 'btnFail');
                    }
                    return false;
                });
            };
            ContactUs.prototype.render = function () {
                $('#ddlProvince').attr("autocomplete", "new-password"); //Stops chrome for auto-filling
                DropDown.loadSelect2($('#ddlProvince'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    stopOpenOnClear: true,
                    width: "400px"
                });
                DropDown.loadSelect2($('#ddlTopic'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    stopOpenOnClear: true,
                    width: "100%"
                });
            };
            return ContactUs;
        }(WebPage));
        Pages.ContactUs = ContactUs;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=ContactUs.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var DDFAdvertising = /** @class */ (function (_super) {
            __extends(DDFAdvertising, _super);
            function DDFAdvertising(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            DDFAdvertising.prototype.loadModel = function (model) {
            };
            DDFAdvertising.prototype.render = function () {
                var me = this;
            };
            ;
            DDFAdvertising.prototype.registerEventHandlers = function () {
                var me = this;
            };
            return DDFAdvertising;
        }(WebPage));
        Pages.DDFAdvertising = DDFAdvertising;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=ddf-advertising.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var DDFFranchisors = /** @class */ (function (_super) {
            __extends(DDFFranchisors, _super);
            function DDFFranchisors(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            DDFFranchisors.prototype.loadModel = function (model) {
            };
            DDFFranchisors.prototype.render = function () {
                var me = this;
            };
            ;
            DDFFranchisors.prototype.registerEventHandlers = function () {
                var me = this;
            };
            return DDFFranchisors;
        }(WebPage));
        Pages.DDFFranchisors = DDFFranchisors;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=ddf-franchisors.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var DDFLanding = /** @class */ (function (_super) {
            __extends(DDFLanding, _super);
            function DDFLanding(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            DDFLanding.prototype.loadModel = function (model) {
            };
            DDFLanding.prototype.render = function () {
                var me = this;
            };
            ;
            DDFLanding.prototype.registerEventHandlers = function () {
                var me = this;
            };
            return DDFLanding;
        }(WebPage));
        Pages.DDFLanding = DDFLanding;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=ddf-landing.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var DDFTechnology = /** @class */ (function (_super) {
            __extends(DDFTechnology, _super);
            function DDFTechnology(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            DDFTechnology.prototype.loadModel = function (model) {
            };
            DDFTechnology.prototype.render = function () {
                var me = this;
            };
            ;
            DDFTechnology.prototype.registerEventHandlers = function () {
                var me = this;
            };
            return DDFTechnology;
        }(WebPage));
        Pages.DDFTechnology = DDFTechnology;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=ddf-technology.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Debugger = /** @class */ (function (_super) {
            __extends(Debugger, _super);
            function Debugger(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Debugger.prototype.loadModel = function (model) { };
            Debugger.prototype.render = function () { };
            Debugger.prototype.registerEventHandlers = function () {
                var me = this;
                $('#btnSetIsQAUser').click(function () {
                    Cookies.set("CQAUser", "1");
                    location.reload();
                });
                $('#btnUnsetIsQAUser').click(function () {
                    Cookies.remove("CQAUser");
                    location.reload();
                });
                $('#btnClearLocalStorage').click(function () {
                    me.clearLocalStorage();
                    return false;
                });
                $('#btnClearSessionStorage').click(function () {
                    me.clearSessionStorage();
                    return false;
                });
                $('#btnClearCookies').click(function () {
                    me.clearCookies();
                    return false;
                });
                $('#btnClearControlFetcherCache').click(function () {
                    me.clearControlFetcherCache();
                    return false;
                });
                $('#btnClearAll').click(function () {
                    me.clearAll();
                    return false;
                });
                $('#btnTestLocation').click(function () {
                    me.testLocation();
                    return false;
                });
                $('#btnTestFullscreen').click(function () {
                    me.checkIfFullscreenSupported();
                    return false;
                });
                $('#btnShowCookieValues').click(function () {
                    me.showCookieValues();
                    return false;
                });
                $('#btnTestLocalStorage').click(function () {
                    if (LocalStorage.IsEnabled()) {
                        showMessage("Local storage enabled");
                    }
                    else {
                        showMessage("Local storage disabled");
                    }
                });
                $('#btnTestSessionStorage').click(function () {
                    if (SessionStorage.IsEnabled()) {
                        showMessage("Session storage enabled");
                    }
                    else {
                        showMessage("Session storage disabled");
                    }
                });
            };
            Debugger.prototype.checkIfFullscreenSupported = function () {
                if (!isFullScreenSupported()) {
                    showMessage("Fullscreen not supported");
                }
                else {
                    showMessage("Fullscreen supported");
                }
            };
            Debugger.prototype.showCookieValues = function () {
                var valuesHTML = "";
                $.each(document.cookie.split(/; */), function () {
                    var splitCookie = this.split('=');
                    valuesHTML += ("<b>" + splitCookie[0] + "</b>" + " = " + splitCookie[1] + "<br />");
                });
                showMessage(valuesHTML, MessageType.Normal, DisplayType.Lightbox);
            };
            Debugger.prototype.clearLocalStorage = function () {
                localStorage.clear();
                showMessage("Local Storage Cleared");
            };
            Debugger.prototype.clearSessionStorage = function () {
                sessionStorage.clear();
                showMessage("Session Storage Cleared");
            };
            Debugger.prototype.clearControlFetcherCache = function () {
                ControlFetcher.SessionStorageCache.clear();
                ControlFetcher.LocalStorageCache.clear();
                showMessage("Control Fetcher Cache Cleared");
            };
            Debugger.prototype.clearCookies = function () {
                //var cookies = document.cookie.split(";");
                //for (var i = 0; i < cookies.length; i++) {
                //    var cookie = cookies[i];
                //    var eqPos = cookie.indexOf("=");
                //    var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                //    document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
                //}
                var cookies = Cookies.get();
                for (var cookie in cookies) {
                    Cookies.remove(cookie);
                }
                document.cookie.split(";").forEach(function (c) { document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); });
                showMessage("Cookies Cleared");
                window.setTimeout(function () {
                    window.location.reload();
                }, 1500);
            };
            Debugger.prototype.clearAll = function () {
                this.clearLocalStorage();
                this.clearSessionStorage();
                this.clearCookies();
                this.clearControlFetcherCache();
                showMessage("All Cleared");
                window.setTimeout(function () {
                    window.location.reload();
                }, 1500);
            };
            Debugger.prototype.testLocation = function () {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        showMessage("Success: <br/>Lat = " + position.coords.latitude.toString() + " <br/>Lon = " + position.coords.longitude.toString() + " <br/>Accuracy = " + position.coords.accuracy, MessageType.Normal, DisplayType.Lightbox);
                    }, function (error) {
                        showMessage("Failed: <br/>Code = " + error.code + " <br/>Msg = " + error.message, null, DisplayType.Lightbox);
                    });
                }
                else {
                    showMessage("Geolocation is not supported by this browser.");
                }
            };
            return Debugger;
        }(WebPage));
        Pages.Debugger = Debugger;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Debugger.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var Desktop;
    (function (Desktop) {
        var EmailRealtorArgs = /** @class */ (function () {
            function EmailRealtorArgs() {
                this.signedIn = 'false';
            }
            return EmailRealtorArgs;
        }());
        Desktop.EmailRealtorArgs = EmailRealtorArgs;
        var EmailOfficeArgs = /** @class */ (function () {
            function EmailOfficeArgs() {
                this.signedIn = 'false';
            }
            return EmailOfficeArgs;
        }());
        Desktop.EmailOfficeArgs = EmailOfficeArgs;
        var EmailRealtor = /** @class */ (function (_super) {
            __extends(EmailRealtor, _super);
            function EmailRealtor(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            EmailRealtor.prototype.loadModel = function () { };
            EmailRealtor.prototype.registerEventHandlers = function () {
                $('#btnEmailRealtorCancel').click(function () {
                    window.close();
                    return false;
                });
                $('#btnEmailRealtorSend').click(function () {
                    EmailRealtor.sendEmail();
                    return false;
                });
                $('#EmailRadio').change(function () {
                    if ($(this).is(':checked')) {
                        FormValidation.removeValidatorFromField($('#PhoneNumberTxt'), 'required');
                    }
                });
                $('#PhoneContactPreferredRadio').change(function () {
                    if ($(this).is(':checked')) {
                        FormValidation.addValidatorToField($('#PhoneNumberTxt'), 'required');
                    }
                });
            };
            EmailRealtor.prototype.render = function () {
                DropDown.loadSelect2($('#ddl_Iam_emailrealtor'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "100%"
                });
                //$('#ddl_Iam_emailrealtor option:eq(0)').attr('selected', 'selected');
                $('#ddl_Iam_emailrealtor').val(0).change();
                FormValueStorage.fillForm($('#emailRealtorCon'));
            };
            EmailRealtor.sendEmail = function () {
                var isOfficeEmail = $('#OrganizationId').val() != "";
                var captchaResponse = (ApplicationConfig.CaptchaEnabled == true && grecaptcha) ? grecaptcha.getResponse() : null;
                if (!ApplicationConfig.CaptchaEnabled || ApplicationConfig.SkipClientCaptchaValidation) {
                    $("div.inputCon[data-validation=captcha]").removeAttr("data-validation");
                }
                if (FormValidation.validateForm($('#emailRealtorInnerCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                    FormValueStorage.saveForm($('#emailRealtorCon'));
                    if (isOfficeEmail) {
                        var args = new EmailOfficeArgs();
                        args.response = Utilities.cleanJSONValue(captchaResponse);
                        args.message = Utilities.cleanJSONValue($('#MessageTxt').val());
                        args.emailFrom = Utilities.cleanJSONValue($('#EmailAddressTxt').val());
                        args.phone = Utilities.cleanJSONValue($('#PhoneNumberTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#FirstNameTxt').val());
                        args.fromLastName = Utilities.cleanJSONValue($('#LastNameTxt').val());
                        args.IamA = Utilities.cleanJSONValue($('.ddlEmailRealtor').val());
                        args.applicationmode = ApplicationState.CurrentMode.toString();
                        args.AnalyticsId = Utilities.cleanJSONValue(Utilities.getUserId());
                        args.PreferredOption = Utilities.cleanJSONValue($('input[name=MethodOfContact]:checked').val());
                        args.message = Utilities.cleanJSONValue($('#txtMessage').val());
                        args.MoreInformationRequested = Utilities.cleanJSONValue(($("#chkMoreInformation").is(":checked") ? "true" : "false"));
                        args.InterestInBuying = Utilities.cleanJSONValue(($("#chkInterestedBuying").is(":checked") ? "true" : "false"));
                        args.InterestInSelling = Utilities.cleanJSONValue(($("#chkInterestedSelling").is(":checked") ? "true" : "false"));
                        args.HasGeneralQuestions = Utilities.cleanJSONValue(($("#chkQuestionAbout").is(":checked") ? "true" : "false"));
                        args.ShowingRequested = Utilities.cleanJSONValue(($("#chkBookShowing").is(":checked") ? "true" : "false"));
                        args.HasWorkingRealtor = Utilities.cleanJSONValue(($("#chkWorkingRealtor").is(":checked") ? "true" : "false"));
                        args.HasLocation = Utilities.cleanJSONValue(($("#chkLocation").is(":checked") ? "true" : "false"));
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.referenceNum = Utilities.cleanJSONValue($('#ReferenceNumber').val());
                        args.organizationId = Utilities.cleanJSONValue($('#OrganizationId').val());
                        args.propertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        $('#btnEmailRealtorSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailAnOrganization(args, EmailRealtor.handleEmailOfficeResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                    else {
                        var args = new EmailRealtorArgs();
                        args.response = captchaResponse;
                        args.message = Utilities.cleanJSONValue($('#MessageTxt').val());
                        args.emailFrom = Utilities.cleanJSONValue($('#EmailAddressTxt').val());
                        args.phone = Utilities.cleanJSONValue($('#PhoneNumberTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#FirstNameTxt').val());
                        args.fromLastName = Utilities.cleanJSONValue($('#LastNameTxt').val());
                        args.ShowingRequested = Utilities.cleanJSONValue(($("#chkBookShowing").is(":checked") ? "true" : "false"));
                        args.HasWorkingRealtor = Utilities.cleanJSONValue(($("#chkWorkingRealtor").is(":checked") ? "true" : "false"));
                        args.HasLocation = Utilities.cleanJSONValue(($("#chkLocation").is(":checked") ? "true" : "false"));
                        args.IamA = Utilities.cleanJSONValue($('.ddlEmailRealtor').val());
                        args.applicationmode = Utilities.cleanJSONValue(ApplicationState.CurrentMode.toString());
                        args.AnalyticsId = Utilities.cleanJSONValue(Utilities.getUserId());
                        args.PreferredOption = Utilities.cleanJSONValue($('input[name=MethodOfContact]:checked').val());
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.propertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                        args.referenceNum = Utilities.cleanJSONValue($('#ReferenceNumber').val());
                        args.individualId = Utilities.cleanJSONValue($('#IndividualId').val());
                        args.message = Utilities.cleanJSONValue($('#txtMessage').val());
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        $('#btnEmailRealtorSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailARealtor(args, EmailRealtor.handleEmailRealtorResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                }
                else {
                    addAnimationClass($('#btnEmailRealtorSend'), 'btnFail');
                    return false;
                }
            };
            EmailRealtor.handleEmailRealtorResponse = function (val) {
                $('#btnEmailRealtorSend').prop('disabled', false).removeClass("loading");
                var PropertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                if (val != null && val.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    if (PropertyId != null) {
                        Analytics.log(PropertyId, 'email_realtor');
                    }
                    showMessage(Translation.get("EmailSentSuccessfully"));
                    $('#emailRealtorInnerCon').text(Translation.get("EmailSentSuccessfully"));
                    if (window.opener != null) {
                        window.close();
                        window.opener.showMessage(Translation.get("EmailSentSuccessfully"));
                    }
                    else {
                        showMessage(Translation.get("EmailSentSuccessfully"));
                    }
                }
                else {
                    showMessage(Translation.get("EmailSendError"));
                    Logging.Error(JSON.stringify(val.ErrorCode));
                }
            };
            EmailRealtor.handleEmailOfficeResponse = function (val) {
                var PropertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                $('#btnEmailRealtorSend').prop('disabled', false).removeClass("loading");
                if (val != null && val.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    if (PropertyId != null) {
                        Analytics.log(PropertyId, 'email_office');
                    }
                    if (window.opener != null) {
                        window.close();
                        window.opener.showMessage(Translation.get("EmailSentSuccessfully"));
                    }
                    else {
                        showMessage(Translation.get("EmailSentSuccessfully"));
                    }
                }
                else {
                    showMessage(Translation.get("EmailSendError"));
                    Logging.Error(JSON.stringify(val.ErrorCode));
                }
            };
            return EmailRealtor;
        }(WebPage));
        Desktop.EmailRealtor = EmailRealtor;
    })(Desktop = Pages.Desktop || (Pages.Desktop = {}));
})(Pages || (Pages = {}));
//# sourceMappingURL=EmailRealtor.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Error = /** @class */ (function (_super) {
            __extends(Error, _super);
            function Error(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            Error.prototype.loadModel = function (model) {
            };
            Error.prototype.render = function () {
                var me = this;
            };
            ;
            Error.prototype.registerEventHandlers = function () {
                var me = this;
                $('.startSearchButton').click(function () {
                    me.ErrorSearch();
                });
                $('#nf_search_input').keypress(function (e) {
                    if (e.which == 13) {
                        e.preventDefault();
                        me.ErrorSearch();
                    }
                });
            };
            Error.prototype.ErrorSearch = function () {
                var me = this;
                var searchValue = $('#nf_search_input').val();
                //Core.CheckTOSAcceptance(RouteHelper.getURL("map") + '#Area=' + searchValue + "&ApplicationId=1&RecordsPerPage=9&Page=1");
                Core.GoToPage(RouteHelper.getURL("map") + '#Area=' + searchValue + "&ApplicationId=1&RecordsPerPage=9&Page=1");
            };
            return Error;
        }(WebPage));
        Pages.Error = Error;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Error.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var FAQ = /** @class */ (function (_super) {
            __extends(FAQ, _super);
            function FAQ(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            FAQ.prototype.loadModel = function (model) { };
            FAQ.prototype.registerEventHandlers = function () {
                $('.faqTabNav_Item').click(function () {
                    $('.faqTabNav_Item').removeClass("selected");
                    $(this).addClass("selected");
                    var tabId = $(this).attr("data-tabid");
                    $('.faqTab_Con').removeClass("open");
                    $('.faqTab_Con[data-tabid=' + tabId + ']').addClass("open");
                    $(".faqTab_Section").removeClass("open");
                    $(".faqTab_Section_Content").addClass("closed");
                });
                $('.faqTab_Section_Title_Con').click(function () {
                    $('.faqTab_Section').removeClass('open');
                    $(".faqTab_Section_Content").addClass("closed");
                    if ($(this).parent(".faqTab_Section").hasClass("open")) {
                        $(this).parent(".faqTab_Section").removeClass("open");
                        $(this).siblings(".faqTab_Section_Content").addClass("closed");
                    }
                    else {
                        $(this).parent(".faqTab_Section").addClass('open');
                        $(this).siblings(".faqTab_Section_Content").removeClass("closed");
                    }
                    //$(".faqTab_Section_Content").addClass("closed");
                });
            };
            FAQ.prototype.render = function () {
                $('#faqContentCon').css("min-height", $('#faqTab_Nav_InnerCon').outerHeight());
                $('.faqTab_Con.open .faqTab_Section_Title_Con').first().click();
            };
            return FAQ;
        }(WebPage));
        Pages.FAQ = FAQ;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=FAQ.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Favourites = /** @class */ (function (_super) {
            __extends(Favourites, _super);
            function Favourites(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.settingInitialValues = false;
                _this.changingPages = false;
                _this.init();
                return _this;
            }
            Favourites.prototype.loadModel = function (model) { };
            Favourites.prototype.render = function () {
                var me = this;
                me.updateR6PageHash();
                me.setInitialControlValuesViaHash();
                //const listingIds = this.getFavouriteIds((val) => { return val.appMode == 1; }).reverse();//Reverse so newest come in first          
                //me.loadSimilarListings(listingIds);
                DropDown.loadSelect2($('#ddlFavouritesSort'), {
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "300px"
                });
                me.loadData(true);
                $('#ddlFavouritesSort').change(function (e) {
                    DataLayer.push({
                        event: "e_favouritesSort"
                    });
                });
            };
            Favourites.prototype.loadData = function (showLoadingAnimationContent) {
                if (showLoadingAnimationContent === void 0) { showLoadingAnimationContent = false; }
                var me = this;
                //let idCSV: string = me.getFavouriteIdsCSV();
                //if (idCSV != "" && showLoadingAnimationContent) {
                //    showLoadingAnimation($('#favouritesCon'));
                //}
                this.friendMode = (Utilities.getParamValueByName("source", URLParamType.Query).toLowerCase() == "emailfavourites" || Utilities.getParamValueByName("source", URLParamType.Query).toLowerCase() == "socialsharefavourites");
                if (ApplicationState.UserIsSignedIn) {
                    var callbackArgs = new GetAccountFromBOLCallbackArgs();
                    callbackArgs.page = me;
                    callbackArgs.functionCalls = function (me) {
                        var idCSV = me.loadIdsShowAnimation(showLoadingAnimationContent);
                        me.loadFavouritesContent(idCSV);
                    };
                    GigyaInit.GetAccountFromBOL(ApplicationConfig.GigyaSyncRealTime, false, callbackArgs);
                }
                else {
                    var idCSV = me.loadIdsShowAnimation(showLoadingAnimationContent);
                    if (Cookie.Favourites.get("") != "" || Utilities.getParamValueByName("propertyIds", URLParamType.Query) != "") {
                        me.loadFavouritesContent(idCSV);
                    }
                }
            };
            /**
             * Will return fave ids and show loading animation if needed
             */
            Favourites.prototype.loadIdsShowAnimation = function (showLoadingAnimationContent) {
                var me = this;
                var idCSV = me.getFavouriteIdsCSV();
                if (idCSV != "" && showLoadingAnimationContent) {
                    //showLoadingAnimation($('#favouritesCon'));
                }
                return idCSV;
            };
            /**
             * Will convert URLs coming in from R6 to work with R7 (Page becomes page)
             */
            Favourites.prototype.updateR6PageHash = function () {
                if (URLHash.get("Page", "") != "") {
                    URLHash.set("page", URLHash.get("Page", ""), false);
                    URLHash.remove("Page", true);
                }
            };
            Favourites.prototype.setInitialControlValuesViaHash = function () {
                var me = this;
                me.settingInitialValues = true;
                me.getConsumerSort();
                Binding.setControlValsFromHashResetOthers($('#favouritesHeader,#favouritesFooter,#favouritesCriteriaCon'));
                me.settingInitialValues = false;
            };
            Favourites.prototype.registerEventHandlers = function () {
                var _this = this;
                var me = this;
                $('#favEnableNotificationSettingsBtn').click(function (e) {
                    if (ApplicationState.UserIsSignedIn) {
                        Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                        return false;
                    }
                    else {
                        //Wait until the gigya sign screens are dealt with and redirect to account...
                        //free up the post login and fwd to overwrite gigya redirect
                        SessionStorage.PostLoginRedirect.delete();
                        Cookie.FWDAccountURL.delete();
                        Gigya.runAfterScreensClosed([gigyaScreen.SignIn], function () {
                            if (ApplicationState.UserIsSignedIn) {
                                Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                            }
                        });
                        Gigya.showScreen(gigyaScreen.SignIn, null);
                    }
                    e.preventDefault();
                    return false;
                });
                $('#ddlFavouritesSort').change(function () {
                    if (me.settingInitialValues) {
                        return;
                    }
                    URLHash.set("page", "1");
                    URLHash.set("sort", $('#ddlFavouritesSort').val());
                    //me.updateHashAndSearch(1);
                    me.loadData(false);
                });
                $(document).keydown(function (e) {
                    if (e.keyCode == 37) {
                        $('#FavouritesPagination_top .lnkPreviousResultsPage').click();
                        return false;
                    }
                    else if (e.keyCode == 39) {
                        $('#FavouritesPagination_top .lnkNextResultsPage').click();
                        return false;
                    }
                    else if (e.keyCode == 38) {
                        window.scrollBy(0, -100);
                        return false;
                    }
                    else if (e.keyCode == 40) {
                        window.scrollBy(0, 100);
                        return false;
                    }
                });
                if (GetControl("FavouritesPagination_top") != null) {
                    GetControl("FavouritesPagination_top").pageChange.Listen(function (arg) {
                        if (_this.settingInitialValues == false && me.changingPages == false) {
                            me.changingPages = true;
                            URLHash.set("page", arg.detail.args.page);
                            me.updateHashAndSearch(Number(arg.detail.args.page));
                            me.changingPages = false;
                        }
                    });
                }
                if (GetControl("FavouritesPagination_bottom") != null) {
                    GetControl("FavouritesPagination_bottom").pageChange.Listen(function (arg) {
                        if (_this.settingInitialValues == false && me.changingPages == false) {
                            me.changingPages = true;
                            URLHash.set("page", arg.detail.args.page);
                            me.updateHashAndSearch(Number(arg.detail.args.page));
                            me.changingPages = false;
                        }
                    });
                }
                GigyaInit.Events.consumerLoggedIn.Listen(function (arg) {
                    var _a, _b;
                    var dialogs = (_a = arg.detail) === null || _a === void 0 ? void 0 : _a.dialogsQueue;
                    me.setInitialControlValuesViaHash();
                    me.loadFavouritesContent(me.getFavouriteIdsCSV());
                    //Prepare to load the favourites again if an import is done by the user
                    if (((_b = dialogs === null || dialogs === void 0 ? void 0 : dialogs.filter(function (value) { return value == gigyaScreen.ImportConfirmation; })) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                        //Listen to account saving
                        Gigya.ProfileAccountInfoIsSet.Listen(function (e) {
                            var _a;
                            var callBackArgs = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.callBackArgs;
                            //Reload the consummer bol manually after import saving...
                            if ((callBackArgs === null || callBackArgs === void 0 ? void 0 : callBackArgs.sourceScreen) == gigyaScreen.ImportConfirmation && !(callBackArgs === null || callBackArgs === void 0 ? void 0 : callBackArgs.fetchNewConsumerBOL)) {
                                var callbackArgs = new GetAccountFromBOLCallbackArgs();
                                callbackArgs.page = me;
                                callbackArgs.functionCalls = function (me) {
                                    me.loadFavouritesContent(me.getFavouriteIdsCSV());
                                };
                                GigyaInit.GetAccountFromBOL(ApplicationConfig.GigyaSyncRealTime, false, callbackArgs);
                                //Wait for the bol data to come back after the import
                            }
                            else if ((callBackArgs === null || callBackArgs === void 0 ? void 0 : callBackArgs.sourceScreen) == gigyaScreen.ImportConfirmation) {
                                GigyaInit.Events.consumerProfileLoaded.ListenOnce(function (e) {
                                    me.loadFavouritesContent(me.getFavouriteIdsCSV());
                                });
                            }
                        });
                    }
                });
                Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                    var args = e.detail;
                    //updateLoadedContent($('#favouritesCon'));
                    Currency.refreshSortDropdown("#ddlFavouritesSort");
                    me.loadFavouritesContent(me.getFavouriteIdsCSV());
                });
                $('#btnFavouriteListingsSearch').click(function () {
                    Core.PerformListingSearch($('#FavouriteListingsInput'), null);
                    return false;
                });
                $('#FavouriteListingsInput').keypress(function (e) {
                    if (e.which == 13) {
                        document.activeElement.blur(); //Get rid of virtual keyboard since iOS will hide toast under it (android doesn't)
                        $('#btnFavouriteListingsSearch').click();
                        return false;
                    }
                });
            };
            Favourites.prototype.updateHashAndSearch = function (page) {
                Binding.setControlValsFromHashResetOthers($('#favouritesHeader,#favouritesFooter,#favouritesCriteriaCon'));
                if (this.settingInitialValues) {
                    return;
                }
                var pageResults = this.getPageResults(page, this.itemsPerPage, this.allFavouritesData);
                this.showFavourites(pageResults, this);
            };
            Favourites.prototype.loadFavouritesContent = function (idCSV) {
                if (this.settingInitialValues) {
                    return;
                }
                if (idCSV != "") {
                    var criteria = WebControl.getValuesFromControlsAsObject(['favouritesCriteriaCon'], false);
                    var sortOrder = this.getSortOrder('favouritesCriteriaCon');
                    //if (ObjectCompare.areEqual(this.currentCriteria, criteria) == false) {
                    //showLoadingAnimation($('#favouritesCon'));
                    APIProxy.propertySearch({
                        FavouriteListingIds: idCSV,
                        ListingIds: idCSV,
                        RecordsPerPage: (ApplicationState.UserIsSignedIn || this.friendMode) ? ConsumerProfile.UserAccountSettings.FavouriteLimit.toString() : ApplicationConfig.FavouriteLimit.toString(),
                        Sort: sortOrder,
                        IncludeTombstones: "1",
                        IncludePins: "0",
                        Currency: ApplicationState.CurrencyValue || "CAD"
                    }, this.initialFavouritesDataHandler, this, false);
                    this.currentCriteria = criteria;
                    //}
                }
            };
            Favourites.prototype.initialFavouritesDataHandler = function (results, page) {
                page.allFavouritesData = results;
                if (results.Paging.TotalRecords == 0) {
                    $('#shareBtn').hide();
                }
                var ids = page.getFavouriteIdsCSV().split(",");
                if (results.Paging.TotalRecords != ids.length) {
                    var IdsMissingFromResults = FavouritePageBase.IdsMissingFromResults(ids, results);
                    FavouritePageBase.InsertMissingListingsIntoResults(results, IdsMissingFromResults);
                    results.Paging.TotalRecords += IdsMissingFromResults.length;
                }
                Favourite.removeTombstonedFavourites(results);
                var pageResults = page.getPageResults(Number(URLHash.get("page", "1")), page.itemsPerPage, results);
                page.showFavourites(pageResults, page);
            };
            Favourites.prototype.getPageResults = function (pageNum, itemsPerPage, fullResults) {
                var returnValue = new APIReturnValues.ListingSearchResults();
                returnValue.ErrorCode = new PublicContracts.ErrorCode(fullResults.ErrorCode);
                var sortOrder = this.getSortOrder('favouritesCriteriaCon', false);
                var isReversed = false;
                if (sortOrder != null && (sortOrder == '0-D' || sortOrder == '0-A')) {
                    //API results do not come back in same order as ids passed in, so sort
                    var idCSVs_1 = this.getFavouriteIds(function (val) { return val.appMode == 1; });
                    fullResults.Results.sort(function (a, b) {
                        return idCSVs_1.indexOf(a.Id) - idCSVs_1.indexOf(b.Id);
                    });
                    if (sortOrder == '0-D') {
                        fullResults.Results.reverse();
                        isReversed = true; //bool to see if we need to reverse this back and the end of fucntion
                    }
                }
                var start = (pageNum - 1) * itemsPerPage;
                var end = (pageNum * itemsPerPage);
                returnValue.Results = fullResults.Results.slice(start, end);
                returnValue.Paging = fullResults.Paging;
                returnValue.Paging.RecordsPerPage = itemsPerPage;
                returnValue.Paging.CurrentPage = pageNum;
                returnValue.Paging.TotalPages = Math.ceil(returnValue.Paging.TotalRecords / itemsPerPage);
                if (isReversed) {
                    //reverse back because object by ref
                    fullResults.Results.reverse();
                    isReversed = false;
                }
                return returnValue;
            };
            Favourites.prototype.showFavourites = function (results, page) {
                if (results.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    var listingIds = page.getFavouriteIds(function (val) { return val.appMode == 1; }).reverse(); //Reverse so newest come in first 
                    var sortOrder = this.getSortOrder('favouritesCriteriaCon', false);
                    var listingIdsSorted_1 = null;
                    if (sortOrder == '0-D') {
                        listingIdsSorted_1 = listingIds;
                    }
                    else if (sortOrder == '0-A') {
                        listingIdsSorted_1 = listingIds.reverse();
                    }
                    page.loadSimilarListings(listingIds);
                    if (results.Paging.CurrentPage > results.Paging.TotalPages) {
                        URLHash.set("page", results.Paging.TotalPages.toString());
                        page.updateHashAndSearch(results.Paging.TotalPages);
                        return;
                    }
                    $('#FavouritesPagination_bottom, #FavouritesPagination_top').toggle(results.Paging.TotalPages > 1);
                    $('#favouritesResultsCount').text(results.Paging.TotalRecords.toLocaleString(ApplicationState.LanguageAttribute));
                    $("#NoFavouritesCon").toggle(results.Paging.TotalRecords <= 0);
                    $("#favouritesCon").toggle(results.Paging.TotalRecords > 0);
                    $("#favouritesHeader").toggle(results.Paging.TotalRecords > 0);
                    var cardModels_1 = [];
                    if (listingIdsSorted_1 != null && listingIdsSorted_1.length > 0) {
                        results.Results.sort(function (a, b) {
                            return listingIdsSorted_1.indexOf(a.Id) - listingIdsSorted_1.indexOf(b.Id);
                        });
                    }
                    for (var i = 0; i < results.Results.length; i++) {
                        cardModels_1.push(new ListingCardModel(results.Results[i]));
                    }
                    GetControl("FavouritesPagination_top").refreshUI(results.Paging);
                    GetControl("FavouritesPagination_bottom").refreshUI(results.Paging);
                    TemplateFetcher.fetchListingCard(function (response) {
                        var html = "";
                        for (var i = 0; i < cardModels_1.length; i++) {
                            html += '<div class="cardCon">' + TemplateBinding.fillTemplateValues($(response.ControlHTML), cardModels_1[i]) + '</div>';
                        }
                        $('#favouritesCon').html(html);
                        $('#favouritesCon').css("min-height", "");
                        ConsumerProfile.Notifications.refreshNotificationCon($('#favouritesCon .cardCon'));
                        Currency.refreshSortDropdown("#ddlFavouritesSort");
                        updateLoadedContent($('#favouritesCon'), true, { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                        //setUniformHeightsForLargeListingCards('#favouritesCon');
                    });
                }
            };
            Favourites.prototype.getConsumerSort = function () {
                if (ApplicationState.UserIsSignedIn) {
                    var View = LocalAccountStorage.ViewPrefCP.getObject();
                    if (View != null) {
                        if (View.Res_View != null) {
                            URLHash.remove('page', true);
                            URLHash.remove('sort', true);
                            URLHash.set("page", "1");
                            if (View.Res_View.sortBy && Utilities.isExpiredSortByValue(View.Res_View.sortBy)) { //SREQ_0235413 retiring some sorts
                                URLHash.set("sort", "6-D"); //Date posted new to old
                            }
                            else {
                                URLHash.set("sort", View.Res_View.sortBy);
                            }
                        }
                    }
                }
            };
            return Favourites;
        }(FavouritePageBase));
        Pages.Favourites = Favourites;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Favourites.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Global = /** @class */ (function (_super) {
            __extends(Global, _super);
            function Global(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Global.prototype.loadModel = function (model) { };
            Global.prototype.registerEventHandlers = function () { };
            Global.prototype.render = function () {
            };
            return Global;
        }(WebPage));
        Pages.Global = Global;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Global.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Mls = /** @class */ (function (_super) {
            __extends(Mls, _super);
            function Mls(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            Mls.prototype.loadModel = function (model) {
            };
            Mls.prototype.render = function () {
                var me = this;
            };
            ;
            Mls.prototype.registerEventHandlers = function () {
                var me = this;
                $('.startSearchButton').click(function () {
                    me.ErrorSearch();
                });
                $('#nf_search_input').keypress(function (e) {
                    if (e.which == 13) {
                        e.preventDefault();
                        me.ErrorSearch();
                    }
                });
                //Hacked manual override of language switch button PRB_0011201
                var langSwitch = ($('html').attr('lang') == 'en') ? 2 : 1;
                $('.toggleOption').attr("href", ("/Mls?CultureId=" + langSwitch));
            };
            Mls.prototype.ErrorSearch = function () {
                var me = this;
                var searchValue = $('#nf_search_input').val();
                //Core.CheckTOSAcceptance(RouteHelper.getURL("map") + '#Area=' + searchValue + "&ApplicationId=1&RecordsPerPage=9&Page=1");
                Core.GoToPage(RouteHelper.getURL("map") + '#Area=' + searchValue + "&ApplicationId=1&RecordsPerPage=9&Page=1");
            };
            return Mls;
        }(WebPage));
        Pages.Mls = Mls;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Mls.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var NacLanding = /** @class */ (function (_super) {
            __extends(NacLanding, _super);
            function NacLanding(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            NacLanding.prototype.loadModel = function (model) { };
            NacLanding.prototype.registerEventHandlers = function () {
            };
            NacLanding.prototype.render = function () {
            };
            return NacLanding;
        }(WebPage));
        Pages.NacLanding = NacLanding;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=NAC-Landing.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Notifications = /** @class */ (function (_super) {
            __extends(Notifications, _super);
            function Notifications(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Notifications.prototype.loadModel = function (model) { };
            Notifications.prototype.render = function () {
                var me = this;
                $('body').css('overflow', 'auto');
                if (ApplicationState.UserIsSignedIn == false) {
                    Core.redirectTo(RouteHelper.getURL("sign-up-for-daily-notifications"));
                }
                showLoadingAnimation($('.loadingPlaceholder'));
                me.renderNotifications();
            };
            Notifications.prototype.renderNotifications = function () {
                var _this = this;
                var NotificationsHasBeenLoaded = false;
                var _myNotifications = this;
                var callbackArgs = new GetAccountFromBOLCallbackArgs();
                callbackArgs.page = _myNotifications;
                callbackArgs.functionCalls = function (me) {
                    if (ConsumerProfile.UserAccountSettings.NotificationsEnabled && (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled || ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled || ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled)) {
                        if (NotificationsHasBeenLoaded == false) {
                            _myNotifications.RenderNotificationsSummaryUI(null, _this);
                            NotificationsHasBeenLoaded = true;
                        }
                    }
                    else {
                        $("#notificationSummaryLoader").hide();
                        $("#acc_notifications_summary_text").text(Translation.get("UseNotificationPrefsToActivate"));
                        $('#acc_notifications_summary_text').removeClass('hidden');
                    }
                };
                GigyaInit.GetAccountFromBOL(ApplicationConfig.GigyaSyncRealTime, false, callbackArgs);
            };
            Notifications.prototype.registerEventHandlers = function () {
                $(".profileSectionLinkCon").unbind('click');
                var page = this;
                $(".profileSectionLinkCon").click(function (e) {
                    if (e.target.className == 'notificationListPageInfo') {
                        var pageInfo = $('#' + e.target.id);
                        var sectionId = pageInfo.attr('data-section');
                        var itemLink = pageInfo.attr('data-link');
                        var notificationId = pageInfo.attr('data-nid');
                        var notificationTitle = pageInfo.attr('data-ntitle');
                        var notificationType = ConsumerNotificationTypes[pageInfo.attr('data-ntype')];
                        var notificationMode = parseInt(pageInfo.attr('data-nmode'), 10);
                        var pageNumber = parseInt(pageInfo.attr('data-npagenumber'), 10);
                        ConsumerProfile.Notifications.RenderNotificationListingsDesktop(sectionId, itemLink, notificationType, notificationMode, notificationId, pageNumber + 1);
                        ConsumerProfile.Notifications.ListingPageHasBeenLoaded = false; //returned true in RefreshNotifications
                        ConsumerProfile.Notifications.RefreshNotifications(null, notificationType[0]);
                    }
                });
                $('#lnkMyNotificationsNotificationSettings').click(function (event) {
                    Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                    return false;
                });
                Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                    var args = e.detail;
                    //page.renderNotifications();
                    //ConsumerProfile.Notifications.RefreshNotifications(null, [ConsumerNotificationTypes.Search, ConsumerNotificationTypes.Favourite, ConsumerNotificationTypes.Compare, ConsumerNotificationTypes.Null]);
                    location.reload();
                });
            };
            Notifications.prototype.RenderNotificationsSummaryUI = function (notifications, page) {
                if (page) {
                    ConsumerProfile.Notifications.pageCallsToMakeAfterNotificationsHTML.push(page);
                }
                var OptedInToNotifications = ConsumerProfile.UserAccountSettings.NotificationsEnabled;
                if (ConsumerProfile.UserAccountSettings.NotificationsEnabled && (ConsumerProfile.UserAccountSettings.FavNotificationsEnabled || ConsumerProfile.UserAccountSettings.CompareNotificationsEnabled || ConsumerProfile.UserAccountSettings.SavedSearchNotificationsEnabled)) {
                    if (notifications == null) {
                        ConsumerProfile.Notifications.forceFetchAsync(this.RenderNotificationsSummaryUI, null);
                        return;
                    }
                    else {
                        ConsumerProfile.Notifications.RefreshNotifications(notifications, null);
                    }
                    var html = '';
                    var NotificationDateString = '';
                    var FavouriteNotificationsHTML = '';
                    var SearchNotificationsHTML = '';
                    $('#AccountSummaryNotificationsFromDate').html('');
                    var _notificationsObj = new ConsumerProfile.Notifications(notifications);
                    var notificationObjs = _notificationsObj.getAllNotificationsSorted(null);
                    var hasNotifications = _notificationsObj.hasNotifications(null);
                    if (ApplicationState.UserIsSignedIn) {
                        if (OptedInToNotifications) {
                            if (hasNotifications) {
                                $("#acc_notifications_summary_text").html(Translation.get("T470"));
                                $('#acc_notifications_summary_text').removeClass('hidden');
                            }
                            else {
                                $("#acc_notifications_summary_text").text(Translation.get("UseNotificationPrefsToActivate"));
                                $('#acc_notifications_summary_text').removeClass('hidden');
                            }
                        }
                        else {
                            $("#a_notify_from_date").hide();
                        }
                    }
                    if (notificationObjs != null && notificationObjs.length > 0) {
                        $('#AccountSummaryNotificationsFromDate').html(_notificationsObj.getTimeStampString()).show();
                        var search_listing_index = 0;
                        var fave_index = 0;
                        var comp_index = 0;
                        var timestamp = _notificationsObj.getTimeStampString();
                        var pageNumber = 1;
                        for (var index = 0; index < notificationObjs.length; index++) {
                            var notification = notificationObjs[index];
                            var notificationHTML = '';
                            if (notification.listingIds != null && notification.listingIds.length > 0) {
                                var itemLink = notification.actionData;
                                var itemText = notification.text;
                                var itemSubText = ''; //notification.status;
                                var itemCount = notification.listingIds.length;
                                var searchDate = notification.searchDate;
                                var mode = 1;
                                //part of notification id
                                var textId = itemText;
                                textId = ConsumerProfile.Notifications.formatNotificationTextId(textId);
                                switch (notification.type) {
                                    case ConsumerNotificationTypes.Search: //Saved Search
                                        var convertedURL = RouteHelper.getURL("map") + '#' + itemLink.substr(itemLink.indexOf('#') + 1);
                                        var convertedItemLink = convertedURL + "&SearchName=" + encodeURIComponent(itemText);
                                        var notificationId = 'galleryViewContent_accrd-search-listings' + textId + search_listing_index.toString();
                                        if (SearchNotificationsHTML == '') {
                                            SearchNotificationsHTML += '<div class="notify-summary-title-con"><img src="/images/common/icons/svg/searches.svg" class="subTitleIcon" /><div class="notify-summary-title">' + Translation.get("MySavedSearches") + '</div></div><div id="accrd-search-listings" class="accrd-notify-summary" style="display:none;">';
                                        }
                                        SearchNotificationsHTML += ConsumerProfile.Notifications.GetNotificationSummaryHTML('accrd-search-listings', search_listing_index, itemCount, convertedItemLink, itemText, mode, timestamp, 1, pageNumber, searchDate);
                                        search_listing_index++;
                                        var totalCount = ConsumerProfile.UserAccountSettings.Notifications.getNotificationCount(null, ConsumerNotificationTypes.Search);
                                        ConsumerProfile.Notifications.RenderNotificationListingsDesktop('accrd-search-listings', convertedItemLink, ConsumerNotificationTypes.Search, null, notificationId, pageNumber, timestamp);
                                        if (search_listing_index >= totalCount) {
                                            SearchNotificationsHTML += '</div>';
                                        }
                                        break;
                                    case ConsumerNotificationTypes.Favourite: //Favourites
                                        var notificationId = 'galleryViewContent_accrd-faves' + textId + fave_index.toString();
                                        if (FavouriteNotificationsHTML == '') {
                                            FavouriteNotificationsHTML += '<div class="notify-summary-title-con"><img alt="" src="/images/common/icons/svg/heart.svg" class="subTitleIcon" /><div class="notify-summary-title">' + Translation.get("MyFavourites") + '</div></div><div id="accrd-faves" class="accrd-notify-summary" style="display:none;">';
                                        }
                                        FavouriteNotificationsHTML += ConsumerProfile.Notifications.GetNotificationSummaryHTML('accrd-faves', fave_index, itemCount, itemLink, itemText, mode, timestamp, 3, pageNumber);
                                        fave_index++;
                                        var totalCount = ConsumerProfile.UserAccountSettings.Notifications.getFaveNotificationsCount();
                                        ConsumerProfile.Notifications.RenderNotificationListingsDesktop('accrd-faves', itemLink, ConsumerNotificationTypes.Favourite, null, notificationId, pageNumber, timestamp);
                                        if (fave_index >= totalCount) {
                                            FavouriteNotificationsHTML += '</div>';
                                        }
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                    }
                    html += SearchNotificationsHTML;
                    html += FavouriteNotificationsHTML;
                    $('#acc_notifications_summary').html(html);
                    $("#notificationSummaryLoader").hide();
                    //load accordions
                    if (ConsumerProfile.UserAccountSettings.Notifications.getNotificationCount(null, ConsumerNotificationTypes.Search) > 0) {
                        activateAccordion($("#accrd-search-listings"), 200);
                    }
                    if (ConsumerProfile.UserAccountSettings.Notifications.getNotificationCount(null, ConsumerNotificationTypes.Favourite) > 0) {
                        activateAccordion($("#accrd-faves"), 200);
                    }
                    ConsumerProfile.Notifications.RefreshNotifications(notifications, null);
                    ConsumerProfile.Notifications.functionCallsAfterNotificationHTML();
                }
                else {
                    $('#acc_notifications_summary_text').html(Translation.get("UseNotificationPrefsToActivate"));
                    $('#acc_notifications_summary_text').removeClass('hidden');
                    $("#a_notify_from_date").hide();
                    ConsumerProfile.Notifications.BlankOutHeaderBell();
                    $("#notificationSummaryLoader").hide();
                }
            };
            return Notifications;
        }(WebPage));
        Pages.Notifications = Notifications;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Notifications.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var NotificationsSignUp = /** @class */ (function (_super) {
            __extends(NotificationsSignUp, _super);
            function NotificationsSignUp(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            NotificationsSignUp.prototype.loadModel = function (model) { };
            NotificationsSignUp.prototype.registerEventHandlers = function () {
                var me = this;
                $("#btnNotifySignUpInline").click(function () {
                    SessionStorage.PostLoginRedirect.save(RouteHelper.getURL("my-account") + "#section=Notifications");
                    $("#lnkProfileMenuSignin").click();
                    return false;
                });
            };
            NotificationsSignUp.prototype.render = function () {
                var me = this;
                var cards = [];
                var formattedPrice = "$650,000";
                if (ApplicationState.CultureID == 2) {
                    formattedPrice = "650 000 $";
                }
                var sampleResultsString = '{"Results":[{"Individual":[{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"286- 2596","AreaCode":"613","PhoneTypeId":"1"}],"Websites":[],"Emails":[{"ContactId":"391043101"}],"IndividualID":1944275,"Name":"JP GAUTHIER","Organization":{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"236- 5959","AreaCode":"613","PhoneTypeId":"1"},{"PhoneType":"Fax","PhoneNumber":"236- 1515","AreaCode":"613","PhoneTypeId":"4"}],"Emails":[{"ContactId":"399963761"}],"Websites":[{"Website":"http://www.hallmarkottawa.com","WebsiteTypeId":"1"}],"OrganizationID":278197,"Name":"RE/MAX HALLMARK REALTY GROUP","Logo":"https://cdn.realtor.ca/organization/en-CA/lowres/default/remaxoa.gif","Address":{"AddressText":"610 BRONSON AVENUE|OTTAWA, ON K1S4E6"},"Designation":"Brokerage","HasEmail":true,"PermitFreetextEmail":true,"PermitShowListingLink":true},"Position":"Salesperson","PermitFreetextEmail":true,"FirstName":"JP","LastName":"GAUTHIER","CorporationDisplayTypeId":"0","PermitShowListingLink":true,"RelativeDetailsURL":"/Agent/1944275/JP-GAUTHIER-610-BRONSON-AVENUE-OTTAWA-ON-K1S4E6"},{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"788-2113","AreaCode":"613","PhoneTypeId":"1"}],"Websites":[{"Website":"http://www.sylviebegin.com","WebsiteTypeId":"1"},{"Website":"http://www.facebook.com/HomeTeamOttawa","WebsiteTypeId":"2"},{"Website":"http://ca.linkedin.com/pub/sylvie-b&eacute;gin/44/298/909","WebsiteTypeId":"3"},{"Website":"http://www.twitter.com/hometeamottawa","WebsiteTypeId":"4"}],"Emails":[{"ContactId":"391039031"}],"IndividualID":1402876,"Name":"SYLVIE BEGIN","Organization":{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"236-5959","AreaCode":"613","PhoneTypeId":"1"},{"PhoneType":"Fax","PhoneNumber":"236-1515","AreaCode":"613","PhoneTypeId":"4"}],"Emails":[{"ContactId":"399963761"}],"Websites":[{"Website":"http://www.hallmarkottawa.com","WebsiteTypeId":"1"}],"OrganizationID":278197,"Name":"RE/MAX HALLMARK REALTY GROUP","Logo":"https://cdn.realtor.ca/organization/en-CA/lowres/default/remaxoa.gif","Address":{"AddressText":"610 BRONSON AVENUE|OTTAWA, ON K1S4E6"},"Designation":"Brokerage","HasEmail":true,"PermitFreetextEmail":true,"PermitShowListingLink":true},"Photo":"https://cdn.realtor.ca/individual/lowres/1068122.jpg","Position":"Broker","PermitFreetextEmail":true,"FirstName":"SYLVIE","LastName":"BEGIN","CorporationDisplayTypeId":"0","PermitShowListingLink":true,"RelativeDetailsURL":"/Agent/1402876/SYLVIE-BEGIN-610-BRONSON-AVENUE-OTTAWA-ON-K1S4E6"},{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"236-5959","AreaCode":"613","PhoneTypeId":"1"}],"Websites":[{"Website":"http://www.OttawaRealEstateInformation.com","WebsiteTypeId":"1"},{"Website":"http://www.facebook.com/RealEstateAgentBill","WebsiteTypeId":"2"},{"Website":"http://ca.linkedin.com/pub/bill-meyer/10/321/220","WebsiteTypeId":"3"},{"Website":"http://www.twitter.com/hometeamottawa","WebsiteTypeId":"4"}],"Emails":[{"ContactId":"391047841"}],"IndividualID":1403962,"Name":"BILL MEYER","Organization":{"Phones":[{"PhoneType":"Telephone","PhoneNumber":"236-5959","AreaCode":"613","PhoneTypeId":"1"},{"PhoneType":"Fax","PhoneNumber":"236-1515","AreaCode":"613","PhoneTypeId":"4"}],"Emails":[{"ContactId":"399963761"}],"Websites":[{"Website":"http://www.hallmarkottawa.com","WebsiteTypeId":"1"}],"OrganizationID":278197,"Name":"RE/MAX HALLMARK REALTY GROUP","Logo":"https://cdn.realtor.ca/organization/en-CA/lowres/default/remaxoa.gif","Address":{"AddressText":"610 BRONSON AVENUE|OTTAWA, ON K1S4E6"},"Designation":"Brokerage","HasEmail":true,"PermitFreetextEmail":true,"PermitShowListingLink":true},"Photo":"https://cdn.realtor.ca/individual/lowres/1112925.jpg","Position":"Salesperson","PermitFreetextEmail":true,"FirstName":"BILL","LastName":"MEYER","CorporationDisplayTypeId":"0","PermitShowListingLink":true,"RelativeDetailsURL":"/Agent/1403962/BILL-MEYER-610-BRONSON-AVENUE-OTTAWA-ON-K1S4E6"}],"OpenHouse":[{"StartTime":"Oct 01/17 - 2:00 PM To 5:00 PM","StartDateTime":"01/10/2017 2:00:00 PM","EndDateTime":"01/10/2017 5:00:00 PM","FormattedDateTime":"Oct 01/17 - 2:00 PM To 5:00 PM"},{"StartTime":"Oct 08/17 - 2:00 PM To 5:00 PM","StartDateTime":"08/10/2017 2:00:00 PM","EndDateTime":"08/10/2017 5:00:00 PM","FormattedDateTime":"Oct 08/17 - 2:00 PM To 5:00 PM"}],"Id":"18612634","MlsNumber":"1077523","PublicRemarks":"Cozy and well-maintained 1½ storey single family home is located on a large lot on a quiet tree-lined street.  This charming home features 2 bedrooms with one 4-pce bathroom downstairs and 2-pce upstairs.  The upper level boasts sloped ceilings which adds charm and personality and a certain feeling of comfort in the bedrooms.  This mature and central neighbourhood is close to several amenities including: Shopping, Restaurants, NCC bike paths, Experimental Farm, Civic hospital and Downtown, easy access to transit and the Queensway.  Perfect for the single person or couple!  A must see!","Building":{"BathroomTotal":"2","Bedrooms":"2 + 0","Type":"House"},"Property":{"Photo":[{"SequenceId":"1","HighResPath":"/images/common/sample-home.png","MedResPath":"/images/common/sample-home.png","LowResPath":"/images/common/sample-home.png","LastUpdated":"05/09/2017 11:53:25 PM"}],"Parking":[{"Name":"Detached garage"},{"Name":"Surfaced"}],"Price":"'.concat(formattedPrice.toString()).concat('","Type":"Single Family","Address":{"AddressText":"200 CATHERINE STREET|Ottawa, Ontario K1Z8E8","Longitude":"-75.73133","Latitude":"45.377302"},"ParkingSpaceTotal":"5","TypeId":"300","OwnershipType":"Freehold","AmmenitiesNearBy":"Recreation Nearby, Shopping"},"Business":{},"Land":{"SizeTotal":"54 ft X 100 ft","SizeFrontage":"54 ft"},"AlternateURL":{"DetailsLink":"https://goo.gl/2HPAgx","PhotoLink":"https://goo.gl/uvQs0V","VideoLink":"https://goo.gl/mEk4QB"},"PostalCode":"K1Z8E8","RelativeDetailsURL":"#","StatusId":"1","OpenHouseInsertDateUTC":"2017-09-13 2:38:03 PM","HasOpenHouseUpdate":true,"PriceChangeDateUTC":"27/09/2017 4:04:54 AM","HasPriceUpdate":true,"PhotoChangeDateUTC":"06/09/2017 3:53:26 AM","HasNewImageUpdate":true,"Distance":""}],"Pins":[],"ErrorCode":{"Id":200,"Description":"Success (hidden)","Status":"Pins-Via-Cache:false;Sidebar-Items-Via-Cache:1;"},"Paging":{"RecordsPerPage":5,"CurrentPage":1,"TotalRecords":1,"MaxRecords":150,"TotalPages":1,"RecordsShowing":1,"Pins":0}}');
                var sampleResults = JSON.parse(sampleResultsString);
                for (var _i = 0, _a = sampleResults.Results; _i < _a.length; _i++) {
                    var val = _a[_i];
                    cards.push(new ListingCardModel(val, 1));
                }
                var model = new ListingResultsModel(cards);
                var args = new ControlFetcherArgs("notificationSignUpContents");
                args.postCallHandler = function (html) {
                    $('#notifySignUpListing').append('<div class="loadingIn" > ' + html + ' </div>');
                    $("#notifySignUpListingCon .propertyCardDetailsFavouriteIcon").removeClass("favouriteIcon");
                    $("#notifySignUpListingCon a").attr("onclick", "return false;");
                    $("#notifySignUpListingCon .smallListingCardFavIcon").attr("src", "/images/common/icons/svg/heart.svg");
                    $("#notifySignUpListingCon #listingCardOpenHouseImg").attr("src", "/images/common/icons/svg/stream-blue.svg");
                    me.refreshSampleNotificationCon($("#notifySignUpListing"));
                };
                ControlFetcherJS.fetchSmallListingCards(args, model);
                $(window).scroll();
            };
            NotificationsSignUp.prototype.refreshSampleNotificationCon = function (element) {
                element.find('.notificationCon').each(function (i, text) {
                    var notificationText = "";
                    var dataVal = $(this).attr('data-value');
                    var id = dataVal.split('_')[0];
                    var HasOpenHouseUpdate = (dataVal.split('_')[1] == 'true');
                    var HasPriceUpdate = (dataVal.split('_')[2] == 'true');
                    var HasNewImageUpdate = (dataVal.split('_')[3] == 'true');
                    var AppMode = parseInt(dataVal.split('_')[4]);
                    var HasNotifications = false;
                    var parts = [];
                    if (HasPriceUpdate) {
                        parts.push(Translation.get("PriceChange"));
                    }
                    ;
                    if (HasOpenHouseUpdate) {
                        parts.push(Translation.get("OpenHouseChange"));
                    }
                    ;
                    if (HasNewImageUpdate) {
                        parts.push(Translation.get("ImageChange"));
                    }
                    ;
                    notificationText = parts.join(", ");
                    HasNotifications = HasPriceUpdate || HasOpenHouseUpdate || HasNewImageUpdate;
                    if (HasNotifications) {
                        $(this).find('.m_notification_pill').html(Translation.get("UPDATED") + ":");
                        $(this).find(".m_listingCardNotificationsText").html(notificationText);
                        $(this).show();
                    }
                });
            };
            return NotificationsSignUp;
        }(WebPage));
        Pages.NotificationsSignUp = NotificationsSignUp;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=NotificationsSignUp.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Office = /** @class */ (function (_super) {
            __extends(Office, _super);
            //cards: Array<string> = [];
            //cardsAppendCounter: number = 0;
            function Office(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.organizationId = "";
                _this.init();
                return _this;
                //checkDisclaimerAccepted();
            }
            Office.prototype.loadModel = function (model) {
                this.organizationId = model.organizationId;
                Pages.Office.instance = this;
            };
            Office.prototype.registerEventHandlers = function () {
                Binding.setControlValsFromHash($('#officeDetailsRealtorsCon'));
                var me = this;
                $('#officeBackBtn').click(function () {
                    history.back();
                });
                //Events.Listen(Controls.Desktop.ListingCardCarousel.slideChanging, function (e: CustomEvent) {
                //    let swiper: Swiper = e.detail.slider;
                //    let controlid: string = e.detail.controlid;
                //    let numberOfActualSlides: number = $(swiper.slides).not('.swiper-slide-duplicate').length;
                //    let currentSlide: number = swiper.realIndex + 1;
                //    if (swiper.realIndex + 1 == numberOfActualSlides) {
                //        if (Pages.Office.instance.totalListingCount / 4 > numberOfActualSlides) {
                //            swiper.lockSwipes();
                //            var nextPageCritieria: Object = Pages.Office.instance.listingCriteria;
                //            nextPageCritieria["CurrentPage"] = (Number(nextPageCritieria["CurrentPage"]) + 1).toString();
                //            nextPageCritieria["RecordsPerPage"] = 8;
                //            nextPageCritieria["OrderBy"] = 6;
                //            APIProxy.propertySearch(nextPageCritieria, function (results: APIReturnValues.ListingSearchResults) { Pages.Office.instance.appendToListingCarousel(swiper, results, Pages.Office.instance); });
                //        }
                //    }
                //});
                Events.Listen(Controls.Desktop.RealtorResults.realtorResultsLoaded, me.updateRealtorPagination);
                Events.Listen(Controls.Desktop.Pagination.paginationPageChanged, function (data) {
                    URLHash.set("page", data.detail.page.toString(), false, true);
                });
                $(window).on('hashchange', function () {
                    if (location.hash) {
                        me.updateRealtorResults();
                    }
                });
                $('#ddlOfficeRealtorSort').change(function () {
                    var sortVal = $(this).val();
                    if (sortVal != URLHash.get("sort", "")) {
                        URLHash.setValues({ page: "1", sort: sortVal }, false, true);
                    }
                });
                $('.ddlResultsPages').change(function () {
                    var page = $(this).val();
                    URLHash.set("page", page, true, true);
                });
                Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                    var args = e.detail;
                    //updateLoadedContent($('#officeListings'));
                    me.loadOfficeListingData();
                });
            };
            Office.prototype.loadOfficeListingData = function () {
                if ($('#ListingsCardCarouselCon').length > 0) { //Control may be hidden server-side
                    this.getListingCarouselData();
                }
            };
            Office.prototype.render = function () {
                var me = this;
                showLoadingAnimation($('.loadingPlaceholder'));
                if (this.organizationId != null) {
                    me.loadOfficeListingData();
                    DropDown.loadSelect2($('#ddlOfficeRealtorSort'), {
                        allowClear: false,
                        closeOnSelect: true,
                        containerCssClass: "homeFilter",
                        dropdownCssClass: "homeFilterItemsCon",
                        stopOpenOnClear: true,
                        width: "300px"
                    });
                    if ($('#officeDetailsRealtorsCon').length > 0) {
                        this.updateRealtorResults();
                    }
                    var cardCon = $('#OfficeCard-' + this.organizationId);
                    cardCon.find(".officeDetailsLink").removeAttr("href");
                }
                me.checkForEmailTrigger();
            };
            Office.prototype.checkForEmailTrigger = function () {
                var me = this;
                var openEmail = Utilities.getParamValueByName("OpenEmail", URLParamType.Query);
                if (openEmail.toLowerCase() == "true") {
                    LoadEmailOfficeForm(me.organizationId);
                }
            };
            Office.prototype.updateRealtorPagination = function (data) {
                var me = this;
                $('.realtorResultsInnerCon').removeClass("hidden");
                var model = data.detail;
                $('.paginationTotalPagesNum').text(Math.min(model.TotalPages, Desktop.Pages.RealtorResults.maxPages));
                $('.realtorResultsTotalResultsNum').text(Number(model.TotalResults).toLocaleString(ApplicationState.LanguageAttribute));
                $('.realtorResultsStartNum').text(Number(model.StartNum).toLocaleString(ApplicationState.LanguageAttribute));
                $('.realtorResultsEndNum').text(Number(model.EndNum).toLocaleString(ApplicationState.LanguageAttribute));
                var currentPage = model.CurrentPage.toString();
                $('.ddlResultsPages').empty();
                for (var i = 1; i <= Math.min(model.TotalPages, Desktop.Pages.RealtorResults.maxPages); i++) {
                    var newState = new Option(i.toString(), i.toString());
                    // Append it to the select
                    $('.ddlResultsPages').append(newState);
                }
                $('.ddlResultsPages').val(currentPage).trigger('change');
            };
            Office.prototype.updateRealtorResults = function () {
                var fetchArgs = new ControlFetcherArgs("", "realtorResultsCon");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.showLoadingSpinner = true;
                fetchArgs.removeFromCacheAfterFetch = true;
                var controlArgs = new RealtorSearchResultsControlArgs();
                controlArgs.showOfficeDetails = false;
                fetchArgs.postCallHandler = function (val) {
                    if (val.d == ControlFetcher.NoResultsResponse) {
                        $("#officeDetailsTopCon").css("margin-bottom", "20px");
                    }
                    else {
                        $("#officeDetailsRealtorsCon").show();
                        Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                        $('#ddlOfficeRealtorSort').removeAttr("disabled");
                        //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                        //$('.paginationLink').removeAttr("disabled");
                    }
                };
                fetchArgs.errorHandler = function (request, error) {
                    Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                    $('#ddlOfficeRealtorSort').removeAttr("disabled");
                    //alert(error);
                    //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                    //$('.paginationLink').removeAttr("disabled");
                };
                var hashVals = URLHash.getObject();
                controlArgs.organizationId = this.organizationId;
                controlArgs.currentPage = hashVals['page'] || 1;
                ;
                controlArgs.recordsPerPage = 9;
                var sortVal = hashVals["sort"] || "11-A";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                $('#ddlOfficeRealtorSort').val(sortVal).change();
                $('.paginationLink, .ddlResultsPages, .ResultsPaginationCon, #ddlOfficeRealtorSort').attr("disabled", "true");
                ControlFetcher.fetchRealtorResults(fetchArgs, controlArgs);
            };
            //appendToListingCarousel(swiper: Swiper, results: APIReturnValues.ListingSearchResults, page: Pages.Office): void {
            //    $('#listingLoader').hide();
            //    $('#listingCarouselCon').show();
            //    for (var i = 0; i < results.Results.length; i++) {
            //        let model: ListingCardModel = new ListingCardModel(results.Results[i]);
            //        let args: ControlFetcherArgs = new ControlFetcherArgs("realtorListingCarousel");
            //        args.postCallHandler = function (html: string) {
            //            page.cards.push('<div class="office-card">' + html + '</div>');
            //            if (page.cards.length > 0 && page.cards.length % 4 == 0) {
            //                swiper.appendSlide('<div class="swiper-slide">' + page.cards.slice(-4).join("") + '</div>');
            //                page.cardsAppendCounter += 4;
            //            } else if (page.cards.length == page.totalListingCount) {
            //                swiper.appendSlide('<div class="swiper-slide">' + page.cards.slice(page.cardsAppendCounter).join("") + '</div>');
            //            }
            //        };
            //        ControlFetcherJS.fetchListingCard(args, model);
            //    }
            //    setConsistantHeights('#listingCarouselCon .listingCardBody');
            //    Favourite.refreshIcons($('#listingCarouselCon'));
            //    swiper.unlockSwipes(); 
            //}
            //loadListingCarousel(results: APIReturnValues.ListingSearchResults, page: Pages.Office): void {
            //    page.totalListingCount = results.Paging.TotalRecords;
            //    let sliderObj: Controls.Desktop.ListingCardCarousel = ApplicationState.Current.Controls["OfficeListingCardCarousel"];
            //    page.appendToListingCarousel(sliderObj.slider, results, page);
            //}
            Office.prototype.loadOfficeListings = function (results, page) {
                page.totalListingCount = results.Paging.TotalRecords;
                var cardModels = [];
                for (var i = 0; i < results.Results.length; i++) {
                    cardModels.push(new ListingCardModel(results.Results[i]));
                }
                TemplateFetcher.fetchListingCard(function (response) {
                    var html = "";
                    for (var i = 0; i < cardModels.length; i++) {
                        html += '<div class="cardCon">' + TemplateBinding.fillTemplateValues($(response.ControlHTML), cardModels[i]) + '</div>';
                    }
                    $('#officeListings').html(html);
                    setDetailsCardLayout($('#listingCarouselCon'), cardModels.length);
                    updateLoadedContent($('#listingCarouselCon'), true, { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                });
            };
            Office.prototype.getListingCarouselData = function () {
                var criteria = { OrganizationId: this.organizationId, CurrentPage: "1", SortBy: "23", RecordsPerPage: "4", Currency: ApplicationState.CurrencyValue || "CAD" };
                this.listingCriteria = criteria;
                APIProxy.propertySearch(criteria, this.loadOfficeListings, this, false);
            };
            //me: Office;        
            Office.maxPages = 50;
            return Office;
        }(WebPage));
        Pages.Office = Office;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Office.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var OfficeResults = /** @class */ (function (_super) {
            __extends(OfficeResults, _super);
            function OfficeResults(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.currentlyFetchingResults = false;
                _this.pushSortDataLayerEvent = false;
                _this.init();
                return _this;
            }
            OfficeResults.prototype.loadModel = function (model) { };
            OfficeResults.prototype.render = function () {
                DropDown.loadSelect2($('#ddlOfficeSort'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    stopOpenOnClear: true,
                    width: "200px"
                });
                this.updateResults(false);
            };
            OfficeResults.prototype.registerEventHandlers = function () {
                Binding.setControlValsFromHash($('#officeResultsOuterCon'));
                var me = this;
                $('#officeResultsBackBtn').click(function () {
                    //history.back();
                    var criteria = URLHash.getObject();
                    delete criteria["sort"];
                    delete criteria["page"];
                    location.href = RouteHelper.getURL("meet-a-realtor") + "#v=office&" + $.param(criteria);
                });
                Events.Listen(Controls.Desktop.OfficeResults.officeResultsLoaded, me.updatePagination);
                Events.Listen(Controls.Desktop.Pagination.paginationPageChanged, function (data) {
                    URLHash.set("page", data.detail.page.toString(), true, true);
                });
                $(window).on('hashchange', function () {
                    me.updateResults();
                });
                $(window).on('popstate', function (e) {
                    me.pushSortDataLayerEvent = false;
                });
                ApplicationState.Current.Controls["officePagination"].pageChange.Listen(function (arg) {
                    $("html,body").animate({ scrollTop: $('#officeSearchResultsHeaderCon').offset().top }, 150);
                });
                $('#ddlOfficeSort').change(function () {
                    var sortVal = $(this).val();
                    if (sortVal != URLHash.get("sort", "")) {
                        var newHash = URLHash.getObject();
                        newHash["page"] = "1";
                        newHash["sort"] = sortVal;
                        URLHash.setValues(newHash, true, true);
                    }
                });
                $('.ddlResultsPages').change(function () {
                    var page = $(this).val();
                    URLHash.set("page", page, true, true);
                });
                $('#btnModifySearch').click(function () {
                    if (location.hash && location.hash != "") {
                        window.location.href = RouteHelper.getURL("meet-a-realtor/office") + location.hash;
                        return false;
                    }
                });
            };
            /**
             * Updates the pagination controls client side with the event data from the new SearchResults control via the realtorResultsLoaded event.
             * @param data
             */
            OfficeResults.prototype.updatePagination = function (data) {
                var me = this;
                $('.officeResultsInnerCon').removeClass("hidden");
                var model = data.detail;
                if (model.TotalResults > model.RecordsPerPage * model.TotalPages) {
                    $('.paginationTotalPagesNum').text(model.TotalPages + "+");
                }
                else {
                    $('.paginationTotalPagesNum').text(Math.min(model.TotalPages, Desktop.Pages.OfficeResults.maxPages));
                }
                $('.officeResultsTotalResultsNum').text(Number(model.TotalResults).toLocaleString(ApplicationState.LanguageAttribute));
                $('.officeResultsStartNum').text(Number(model.StartNum).toLocaleString(ApplicationState.LanguageAttribute));
                $('.officeResultsEndNum').text(Number(model.EndNum).toLocaleString(ApplicationState.LanguageAttribute));
                var currentPage = model.CurrentPage.toString();
                $('.ddlResultsPages').empty();
                for (var i = 1; i <= Math.min(model.TotalPages, Desktop.Pages.OfficeResults.maxPages); i++) {
                    var newState = new Option(i.toString(), i.toString());
                    // Append it to the select
                    $('.ddlResultsPages').append(newState);
                }
                $('.ddlResultsPages').val(currentPage).trigger('change');
            };
            OfficeResults.prototype.updateResults = function (pushSortDataLayerEvent) {
                if (pushSortDataLayerEvent === void 0) { pushSortDataLayerEvent = true; }
                var me = this;
                var fetchArgs = new ControlFetcherArgs("", "officeResultsCon");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.showLoadingSpinner = true;
                fetchArgs.removeFromCacheAfterFetch = true;
                var controlArgs = new OfficeSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (val) {
                    Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                    $('#ddlOfficeSort').removeAttr("disabled");
                    //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                    //$('.paginationLink').removeAttr("disabled");
                };
                fetchArgs.errorHandler = function (request, error) {
                    Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                    $('#ddlOfficeSort').removeAttr("disabled");
                    alert(error);
                    //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                    //$('.paginationLink').removeAttr("disabled");
                };
                var hashVals = URLHash.getObject();
                controlArgs.name = hashVals["office"] || "";
                controlArgs.city = hashVals["city"] || "";
                controlArgs.provinceIDs = hashVals["province"] || "";
                controlArgs.postalCode = hashVals["postalcode"] || "";
                controlArgs.address = hashVals["address"] || "";
                controlArgs.currentPage = hashVals['page'] || 1;
                controlArgs.recordsPerPage = 20;
                var sortVal = hashVals["sort"] || "2-A";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                $('#ddlOfficeSort').val(sortVal).change();
                //Add datalayer for FindaRealtorResultsSort when needed
                if (me.pushSortDataLayerEvent) {
                    DataLayer.push({
                        event: "e_FindaRealtorResultsSort"
                    });
                }
                else {
                    me.pushSortDataLayerEvent = true;
                }
                $('.paginationLink, .ddlResultsPages, .ResultsPaginationCon, #ddlOfficeSort').attr("disabled", "true");
                ControlFetcher.fetchOfficeResults(fetchArgs, controlArgs);
            };
            OfficeResults.maxPages = 50;
            return OfficeResults;
        }(WebPage));
        Pages.OfficeResults = OfficeResults;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=OfficeResults.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var PrivacyPolicy = /** @class */ (function (_super) {
            __extends(PrivacyPolicy, _super);
            function PrivacyPolicy(model, controlId, ppContentId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.page_loaded = false;
                _this.should_scroll_to_subsections = true;
                _this.ppContentId = ppContentId;
                _this.init();
                return _this;
            }
            PrivacyPolicy.prototype.loadModel = function (model) { };
            PrivacyPolicy.prototype.registerEventHandlers = function () {
                var me = this;
                $('.privacyTab_Section_Title_Con').click(function () {
                    //Change the hash value in the URL to match the subsection we selected.
                    if (me.should_scroll_to_subsections) {
                        URLHash.replaceHash($(this).parents(".privacyTab_Section").attr("id"), false);
                    }
                    $(this).parents(".privacyTab_Con").find('.privacyTab_Section').removeClass('open');
                    $(this).parents(".privacyTab_Con").find(".privacyTab_Section_Content").addClass("closed");
                    if ($(this).parent(".privacyTab_Section").hasClass("open")) {
                        $(this).parent(".privacyTab_Section").removeClass("open");
                        $(this).siblings(".privacyTab_Section_Content").addClass("closed");
                    }
                    else {
                        $(this).parent(".privacyTab_Section").addClass('open');
                        $(this).siblings(".privacyTab_Section_Content").removeClass("closed");
                    }
                });
                //Manage the clicking on inner sections
                $("a[data-id]").click(function (event) {
                    //Hide All the sections
                    $("#PrivacyInnerContent").find(".privacyTab_Con.open").removeClass("open");
                    //Show the clicked section only
                    $("#" + $(this).attr("data-id")).addClass("open");
                    //Change the URL to the corresponding one clicked and manage the section selected
                    //URL with a link to a sub-section
                    if ($(this).attr("data-sub-id") && $(this).attr("data-sub-id").length > 0) {
                        //Select the correct sub-section
                        $("#" + $(this).attr("data-sub-id")).find(".privacyTab_Section_Title_Con").click();
                        //Push a new page in the history
                        if (decodeURI(window.location.pathname) != $(this).attr("data-link")) {
                            history.pushState(null, null, $(this).attr("data-link") + "#" + $(this).attr("data-sub-id"));
                        }
                        else {
                            history.replaceState('', '', $(this).attr("data-link") + "#" + $(this).attr("data-sub-id"));
                        }
                        //Scroll to the sub-section
                        var subId_1 = $(this).attr("data-sub-id");
                        setTimeout(function () {
                            ScrollToElement($("#" + subId_1), 0, true);
                        }, 1);
                    }
                    else { //URL with no subsection specified
                        //Push a new page in the history
                        if (decodeURI(window.location.pathname) != $(this).attr("data-link")) {
                            history.pushState(null, null, $(this).attr("data-link"));
                        }
                        else {
                            history.replaceState('', '', $(this).attr("data-link"));
                        }
                        //Select the first subsection by default and scroll to top of page
                        me.should_scroll_to_subsections = false;
                        if ($("#" + $(this).attr("data-id") + " .privacyTab_Section").length > 0) {
                            $($("#" + $(this).attr("data-id") + " .privacyTab_Section")[0]).find('.privacyTab_Section_Title_Con').click();
                        }
                        me.should_scroll_to_subsections = true;
                        setTimeout(function () {
                            ScrollToElement($("html"), 0, true);
                        }, 100);
                    }
                    //Change the selected item from the menu
                    $("#privacyTab_Nav_InnerCon").find(".selected").removeClass("selected");
                    $("#privacyTab_Nav_InnerCon").find(".privacyTabNav_Item[data-id='" + $(this).attr("data-id") + "']").addClass("selected");
                    event.preventDefault();
                    //Change the URL language to switch
                    $(".toggleOption[data-value='1']").attr("href", RouteHelper.getURL($(this).attr("data-id"), true, 1));
                    $(".toggleOption[data-value='2']").attr("href", RouteHelper.getURL($(this).attr("data-id"), true, 2));
                    $('link[rel="alternate"][hreflang="en"]').attr("href", RouteHelper.getURL($(this).attr("data-id"), true, 1));
                    $('link[rel="alternate"][hreflang="fr"]').attr("href", RouteHelper.getURL($(this).attr("data-id"), true, 2));
                    return false; // prevent default browser refresh on "#" link
                });
                //Detect user going back and forward and show the correct section
                window.onpopstate = function (event) {
                    if (!me.page_loaded) {
                        me.page_loaded = true;
                        return false;
                    }
                    //Find the id of the section to show using menu items and URL
                    var cleanUrl = decodeURI(window.location.pathname).replace(/(^[^\n\r]\/+$)/gi, "");
                    var contentId = $("#privacyTab_Nav_InnerCon").find("[data-link='" + cleanUrl + "']").attr("data-id");
                    //Hide all the other section
                    $("#PrivacyInnerContent").find(".privacyTab_Con.open").removeClass("open");
                    //Show the content section
                    $("#PrivacyInnerContent").show();
                    $("#" + contentId).addClass("open");
                    //Select the current subsection
                    if (window.location.hash.length > 0 && $(window.location.hash).offset() && $(window.location.hash).offset().top > 0) {
                        $(window.location.hash).find('.privacyTab_Section_Title_Con').click();
                        setTimeout(function () {
                            ScrollToElement($(window.location.hash), 0, true);
                        }, 100);
                    }
                    else { //Default to first subsection
                        if ($("#" + contentId + " .privacyTab_Section").length > 0) {
                            $($("#" + contentId + " .privacyTab_Section")[0]).find('.privacyTab_Section_Title_Con').click();
                        }
                    }
                    //select the correct right navigation item
                    $("#privacyTab_Nav_InnerCon").find(".selected").removeClass("selected");
                    $("#privacyTab_Nav_InnerCon").find(".privacyTabNav_Item[data-id='" + contentId + "']").addClass("selected");
                    //Change the URL language to switch
                    $(".toggleOption[data-value='1']").attr("href", RouteHelper.getURL(contentId, true, 1));
                    $(".toggleOption[data-value='2']").attr("href", RouteHelper.getURL(contentId, true, 2));
                    $('link[rel="alternate"][hreflang="en"]').attr("href", RouteHelper.getURL(contentId, true, 1));
                    $('link[rel="alternate"][hreflang="fr"]').attr("href", RouteHelper.getURL(contentId, true, 2));
                };
            };
            PrivacyPolicy.prototype.render = function () {
                var me = this;
                me.page_loaded = true;
                //Manage the opened section
                $("#PrivacyInnerContent").find(".privacyTab_Con.open").removeClass("open");
                $("#" + me.ppContentId).addClass("open");
                $("#PrivacyInnerContent").show();
                $("#ppLoadingBlock").hide();
                //Manage the menu item selection
                $("#privacyTab_Nav_InnerCon").find(".selected").removeClass("selected");
                $("#privacyTab_Nav_InnerCon").find(".privacyTabNav_Item[data-id='" + me.ppContentId + "']").addClass("selected");
                //Scroll to the correct subsection on load
                if (window.location.hash.length > 0 && $(window.location.hash).offset() && $(window.location.hash).offset().top > 0) {
                    $(window.location.hash).find('.privacyTab_Section_Title_Con').click();
                    setTimeout(function () {
                        ScrollToElement($(window.location.hash), 0, true);
                    }, 1);
                }
            };
            return PrivacyPolicy;
        }(WebPage));
        Pages.PrivacyPolicy = PrivacyPolicy;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=PrivacyPolicy.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Province = /** @class */ (function (_super) {
            __extends(Province, _super);
            function Province(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Province.prototype.loadModel = function (model) {
            };
            Province.prototype.render = function () {
                DropDown.loadSelect2($('#ddl_Cities'), {
                    tags: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    allowSearch: false,
                    width: "325px"
                });
            };
            Province.prototype.registerEventHandlers = function () {
                var me = this;
                $('#ddl_Cities').change(function () {
                    me.setSearchUrlValue();
                });
                $('#prov_search_btn').click(function () {
                    if ($('#ddl_Cities').val() != "0") {
                        me.DiscMap();
                    }
                });
            };
            Province.prototype.setSearchUrlValue = function () {
                var me = this;
                me.selectCityUrl = $("#ddl_Cities").val();
            };
            Province.prototype.DiscMap = function () {
                var me = this;
                var mapQuery = me.selectCityUrl;
                if (mapQuery != "0") {
                    Core.GoToPage(mapQuery);
                }
            };
            return Province;
        }(WebPage));
        Pages.Province = Province;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Province.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var Desktop;
    (function (Desktop) {
        var Realtor = /** @class */ (function (_super) {
            __extends(Realtor, _super);
            function Realtor(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.individualId = "";
                _this.organizationId = "";
                _this.showListingsSection = false;
                _this.showOfficeListings = false;
                _this.firstName = "";
                _this.totalListingCount = 0;
                _this.totalOfficeListingCount = 0;
                _this.ratings = [];
                _this.videoSliderInitialized = false;
                _this.init();
                return _this;
            }
            Realtor.prototype.loadModel = function (model) {
                this.model = model;
                this.individualId = model.individualId;
                this.organizationId = model.organizationId;
                this.showListingsSection = model.showListingsSection;
                this.showOfficeListings = model.showOfficeListings;
                this.firstName = model.firstName;
                try {
                    this.ratings = (model.RatingsJSON != null && model.RatingsJSON != "" ? JSON.parse(model.RatingsJSON) : "");
                }
                catch (err) {
                    this.ratings = [];
                }
            };
            Realtor.prototype.render = function () {
                var me = this;
                showLoadingAnimation($('.loadingPlaceholder'));
                me.loadRealtorOfficeListings();
                if (this.ratings.length > 0) {
                    for (var r = 0; r < this.ratings.length; r++) {
                        if (this.ratings[r].RatingType === RatingType.Rank) {
                            this.loadRankMyAgent(this.ratings[r].RatingId);
                        }
                        if (this.ratings[r].RatingType === RatingType.RealSatisfied) {
                            this.loadRealSatisfied(this.ratings[r].RatingId);
                        }
                    }
                }
                if (URLHash.containsKey("RankMyAgent")) {
                    ScrollToElement($("#RealtorTestimonialCon"));
                }
                else if (URLHash.containsKey("RealSatisfied")) {
                    ScrollToElement($("#RealtorRankingCon"));
                }
                var cardCon = $('#RealtorCard-' + this.individualId);
                cardCon.find(".realtorDetailsLink").removeAttr("href");
                me.checkForEmailTrigger();
                if (me.model.multimedia != null && me.model.multimedia.length > 0) {
                    //Load only the first multimedia video and its adjacent ones..
                    //Set the video queue name for the first two adjacent videos to the first video
                    var adjacentAndFirstVideos_1 = new Array();
                    adjacentAndFirstVideos_1.push(me.model.multimedia[0]);
                    if (me.model.multimedia.length > 1) {
                        adjacentAndFirstVideos_1.push(me.model.multimedia[1]);
                    }
                    if (me.model.multimedia.length > 2) {
                        adjacentAndFirstVideos_1.push(me.model.multimedia[me.model.multimedia.length - 1]);
                    }
                    adjacentAndFirstVideos_1.forEach(function (element, index, array) {
                        element.AjaxVideoDataQueueName = MultimediaModel.AjaxVideoDataQueueBaseName + "_first+adjacent";
                        adjacentAndFirstVideos_1[index].StartEmbed();
                    });
                    //Set the other non adjacent videos queue name pair to load one after the other
                    var filterNonAdjacentVideos = function (element, index, array) { return (index != array.length - 1 && index > 1); };
                    var ajaxQueueVirtualVideoName_1;
                    var nonAdjacentVideos_1 = me.model.multimedia.filter(filterNonAdjacentVideos);
                    nonAdjacentVideos_1.forEach(function (element, index, array) {
                        if (index % 2 == 0) {
                            ajaxQueueVirtualVideoName_1 =
                                MultimediaModel.AjaxVideoDataQueueBaseName + "_" + index;
                        }
                        nonAdjacentVideos_1[index].AjaxVideoDataQueueName = ajaxQueueVirtualVideoName_1;
                    });
                    me.profileVideoSlider = new Swiper("#profile-swiper-videos", {
                        threshold: 10,
                        pagination: {
                            el: "#profile-swiper-videos-pagination",
                            dynamicBullets: true,
                            clickable: true
                        },
                        navigation: {
                            nextEl: '#profile-swiper-videos-btn-next',
                            prevEl: '#profile-swiper-videos-btn-prev',
                        },
                        loop: true,
                        slidesPerView: 1,
                        spaceBetween: 25,
                        on: {
                            init: function (swiper) {
                                me.videoSliderInitialized = true;
                                //We dont want to see the arrows before the slider is initialized because we see it load...
                                $("#profile-swiper-videos #profile-swiper-videos-navigator").css('visibility', "visible");
                                //Disable the navigation of the slide
                                if (me.model.multimedia.length == 1) {
                                    $("#profile-swiper-videos #profile-swiper-videos-navigator .swiper-button-next, #profile-swiper-videos #profile-swiper-videos-navigator .swiper-button-prev").addClass("swiper-button-disabled");
                                    swiper.allowSlideNext = false;
                                    swiper.allowSlidePrev = false;
                                    swiper.allowTouchMove = false;
                                }
                                swiper.update();
                            },
                            click: function (swiper) { },
                            transitionStart: function (swiper) {
                            },
                            slidePrevTransitionStart: function (swiper) {
                                if (me.videoSliderInitialized) {
                                    var multiIndex = Utilities.getSwiperjsRealIndex(swiper);
                                    if (multiIndex < me.model.multimedia.length &&
                                        multiIndex >= 0 &&
                                        !me.model.multimedia[multiIndex].videoLoading &&
                                        !me.model.multimedia[multiIndex].videoLoaded) {
                                        me.model.multimedia[multiIndex].StartEmbed();
                                    }
                                    if (multiIndex - 1 < me.model.multimedia.length &&
                                        multiIndex - 1 >= 0 &&
                                        !me.model.multimedia[multiIndex - 1].videoLoading &&
                                        !me.model.multimedia[multiIndex - 1].videoLoaded) {
                                        me.model.multimedia[multiIndex - 1].StartEmbed();
                                    }
                                }
                            },
                            slideNextTransitionStart: function (swiper) {
                                if (me.videoSliderInitialized) {
                                    var multiIndex = Utilities.getSwiperjsRealIndex(swiper);
                                    if (multiIndex < me.model.multimedia.length &&
                                        multiIndex >= 0 &&
                                        !me.model.multimedia[multiIndex].videoLoading &&
                                        !me.model.multimedia[multiIndex].videoLoaded) {
                                        me.model.multimedia[multiIndex].StartEmbed();
                                    }
                                    if (multiIndex + 1 < me.model.multimedia.length &&
                                        multiIndex + 1 >= 0 &&
                                        !me.model.multimedia[multiIndex + 1].videoLoading &&
                                        !me.model.multimedia[multiIndex + 1].videoLoaded) {
                                        me.model.multimedia[multiIndex + 1].StartEmbed();
                                    }
                                }
                            },
                            slidePrevTransitionEnd: function (swiper) {
                                if (me.videoSliderInitialized) {
                                    me.videoSliderFsCallBack(me, swiper.previousIndex - 1);
                                }
                            },
                            slideNextTransitionEnd: function (swiper) {
                                if (me.videoSliderInitialized) {
                                    me.videoSliderFsCallBack(me, swiper.previousIndex - 1);
                                }
                            }
                        }
                    });
                }
            };
            Realtor.prototype.loadRealtorOfficeListings = function () {
                if (this.showListingsSection) {
                    if (this.individualId != null && $('#realtorDetailsListingsCon').length > 0) { //realtorDetailsListingsCon might be hidden at server level
                        this.getRealtorListings(); //Get data and fill via template
                    }
                }
                if (this.showOfficeListings) {
                    if (this.individualId != null && $('#realtorDetailsOfficeListingsCon').length > 0) { //realtorDetailsOfficeListingsCon might be hidden at server level
                        this.getOfficeListings(); //Get data and fill via template
                    }
                }
            };
            Realtor.prototype.registerEventHandlers = function () {
                var me = this;
                $('#realtorBackBtnCon').click(function () {
                    history.back();
                });
                $('#realtorDetailsCard').find("div[id$='RankMyAgent']").click(function () {
                    URLHash.removeHash();
                    URLHash.set("RankMyAgent", null, false);
                    ScrollToElement($("#RealtorTestimonialCon"));
                    return false;
                });
                $('#realtorDetailsCard').find("div[id$='RealSatisfied']").click(function () {
                    URLHash.removeHash();
                    URLHash.set("RealSatisfied", null, false);
                    ScrollToElement($("#RealtorRankingCon"));
                    return false;
                });
                Events.Listen(Controls.Desktop.CurrencyCtrl.currencyUpdated, function (e) {
                    var args = e.detail;
                    //updateLoadedContent($('#listingsCon'));
                    //updateLoadedContent($('#officeListingsCon'));
                    me.loadRealtorOfficeListings();
                });
                MultimediaModel.virtualTourLoadEvent.Listen(function (arg) {
                });
                MultimediaModel.virtualTourAddVideoEvent.Listen(function (arg) {
                    var activeSlideDomEl = $("." + me.profileVideoSlider.params.slideActiveClass);
                    $(arg.detail.iframeHtmlToAppend).appendTo(activeSlideDomEl.find("#" + arg.detail.model.VideoInnerContainerId));
                    me.swiperEnterFullscreen($("#profile-swiper-videos"), me.profileVideoSlider);
                    Analytics.log(me.model.individualId, 'profile-virtual-videos');
                });
                MultimediaModel.virtualTourDataFetched.Listen(function (arg) {
                });
                $(document).on("click", "#profile-swiper-videos .profile-close-swiper-btn", function (e) {
                    me.swiperExitFullScreen($('#profile-swiper-videos'), me.profileVideoSlider, me.videoSliderFsCallBack);
                });
            };
            Realtor.prototype.swiperEnterFullscreen = function (swiperContainer, swiper) {
                if (!swiperContainer.hasClass("swiperFullscreen")) {
                    swiperContainer.css("opacity", 0);
                    $("header").css("pointer-events", "none");
                    swiperContainer.addClass("swiperFullscreen");
                    $("body,html").addClass("fsNoScroll");
                    Utilities.queueTask(function () { swiper.update(); swiperContainer.css("opacity", 1); });
                }
            };
            Realtor.prototype.swiperExitFullScreen = function (swiperContainer, swiper, swiperCallBack) {
                if (swiperCallBack === void 0) { swiperCallBack = null; }
                if (swiperContainer.hasClass("swiperFullscreen")) {
                    swiperCallBack != null ? swiperCallBack(this) : null;
                    swiperContainer.css("opacity", 0);
                    swiperContainer.removeClass('swiperFullscreen');
                    $("body,html").removeClass("fsNoScroll");
                    $("header").css("pointer-events", "");
                    Utilities.queueTask(function () { swiper.update(); swiperContainer.css("opacity", 1); });
                }
            };
            /**
           * Empty video container and show thumbnail because we dont want the player to continu playing after slide change
           * And we put the video state to its thumbnail display
           */
            Realtor.prototype.videoSliderFsCallBack = function (realtor, forceSlideIndex) {
                if (forceSlideIndex === void 0) { forceSlideIndex = -1; }
                var actualIndex = forceSlideIndex > -1 ? forceSlideIndex : Utilities.getSwiperjsRealIndex(realtor.profileVideoSlider);
                if (realtor.profileVideoSlider != null &&
                    actualIndex >= 0 &&
                    actualIndex < realtor.model.multimedia.length) {
                    realtor.model.multimedia[actualIndex].emptyVideoContainer();
                    realtor.model.multimedia[actualIndex].showVideoIframe(false);
                    realtor.model.multimedia[actualIndex].showLoadingVideoContainer(false);
                    realtor.model.multimedia[actualIndex].showVideoThumbnail();
                }
            };
            Realtor.prototype.checkForEmailTrigger = function () {
                var me = this;
                var openEmail = Utilities.getParamValueByName("OpenEmail", URLParamType.Query);
                if (openEmail.toLowerCase() == "true") {
                    //$('#RealtorCard-' + EmailRealtorId + ' .lnkEmailRealtor').click();
                    LoadEmailRealtorForm(me.individualId);
                }
            };
            Realtor.prototype.loadRealtorListings = function (results, page) {
                page.totalListingCount = results.Paging.TotalRecords || 0;
                //$('#listingLoader').hide();
                //$('#listingsCon').empty().show();
                if (results.Results.length > 0) {
                    var cardModels_1 = [];
                    for (var i = 0; i < results.Results.length; i++) {
                        cardModels_1.push(new ListingCardModel(results.Results[i]));
                    }
                    TemplateFetcher.fetchListingCard(function (response) {
                        var html = "";
                        for (var i = 0; i < cardModels_1.length; i++) {
                            html += '<div class="cardCon">' + TemplateBinding.fillTemplateValues($(response.ControlHTML), cardModels_1[i]) + '</div>';
                        }
                        var htmlHeader = "";
                        htmlHeader += '<div id="realtorDetailsListingDetailsHeaderCon" class="realtorDetailsHeader"><div class="contentBoxHeading">' + Translation.get("RealtorNamesListings", page.firstName) + '</div></div>';
                        var htmlFooter = "";
                        //htmlFooter += '<div style="text-align: center"><a href="' + RouteHelper.getURL("map") + '#IndividualId=' + page.individualId + '" id="lnkRealtorDetailsListingMap" class="realtorDetailsHeaderLink viewOnMapLink"><img src="/images/common/icons/svg/map-with-pin.svg" /><div id="realtorDetailsViewOnMapText">' + Translation.get("ViewOnMap") + '</div></a></div>';
                        $('#listingsInnerCon').html('<div id="realtorListings"><div class="listingsCon">' + html + '</div>' + htmlFooter + '</div>');
                        $('#listingsInnerCon').css("min-height", "");
                        //setUniformHeightsForLargeListingCards('#listingsCon');                
                        setDetailsCardLayout($("#listingsInnerCon"), cardModels_1.length);
                        updateLoadedContent($('#listingsInnerCon'), true, { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                    });
                }
                else {
                    $('#officeListingsCon').hide();
                }
            };
            Realtor.prototype.getRealtorListings = function () {
                var criteria = { IndividualId: this.individualId, CurrentPage: "1", RecordsPerPage: "4", SortBy: "23", Currency: ApplicationState.CurrencyValue || "CAD" };
                this.listingCriteria = criteria;
                APIProxy.propertySearch(criteria, this.loadRealtorListings, this, false);
            };
            Realtor.prototype.loadOfficeListings = function (results, page) {
                page.totalOfficeListingCount = results.Paging.TotalRecords || 0;
                //$('#officeListingLoader').hide();
                //$('#officeListingsCon').empty().show();
                if (results.Results.length > 0) {
                    var cardModels_2 = [];
                    for (var i = 0; i < results.Results.length; i++) {
                        cardModels_2.push(new ListingCardModel(results.Results[i]));
                    }
                    TemplateFetcher.fetchListingCard(function (response) {
                        var html = "";
                        for (var i = 0; i < cardModels_2.length; i++) {
                            html += '<div class="cardCon">' + TemplateBinding.fillTemplateValues($(response.ControlHTML), cardModels_2[i]) + '</div>';
                        }
                        var htmlFooter = "";
                        //htmlFooter += '<div style="text-align: center"><a href="' + RouteHelper.getURL("map") + '#OrganizationId=' + page.organizationId + '" id="lnkRealtorDetailsOfficeListingMap" class="realtorDetailsHeaderLink viewOnMapLink"><img src="/images/common/icons/svg/map-with-pin.svg" /><div id="realtorDetailsViewOfficeListingsOnMapText">' + Translation.get("ViewOnMap") + '</div></a></div>';
                        $('#officeListingsInnerCon').html('<div id="officeListings"><div class="listingsCon">' + html + '</div>' + htmlFooter + '</div>');
                        $('#officeListingsInnerCon').css("min-height", "");
                        //setUniformHeightsForLargeListingCards('#officeListingsCon');                
                        setDetailsCardLayout($('#officeListingsInnerCon'), cardModels_2.length);
                        updateLoadedContent($('#officeListingsInnerCon'), true, { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                    });
                }
                else {
                    $('#officeListingsCon').hide();
                }
            };
            Realtor.prototype.getOfficeListings = function () {
                var criteria = { OrganizationId: this.organizationId, CurrentPage: "1", RecordsPerPage: "4", SortBy: "23", Currency: ApplicationState.CurrencyValue || "CAD" };
                this.officeListingCriteria = criteria;
                APIProxy.propertySearch(criteria, this.loadOfficeListings, this, false);
            };
            Realtor.prototype.loadRankMyAgent = function (rankMyAgentKey) {
                $("#rankMyAgentLoader").show();
                var fetcherArgs = new ControlFetcherArgs(null, 'RealtorTestimonialCon');
                fetcherArgs.showLoadingAnimation = false;
                fetcherArgs.showLoadingSpinner = true;
                fetcherArgs.cacheResult = true;
                fetcherArgs.postCallHandler = function (results, args) {
                    if (results && (results.d.toLowerCase().indexOf('id="rankcardcon"') !== -1)) { //if no results are found, the html id of the control won't be there
                        $("#RealtorTestimonialCon").show();
                        $("#rankMyAgentLoader").hide();
                        Events.Fire(Pages.Desktop.Realtor.rankMyAgentLoaded);
                    }
                };
                fetcherArgs.timeoutHandler = function (request, error) {
                    $("#rankMyAgentLoader").hide();
                    $("#RealtorTestimonialCon").hide();
                };
                fetcherArgs.errorHandler = function (request, error) {
                    $("#rankMyAgentLoader").hide();
                    $("#RealtorTestimonialCon").hide();
                };
                var rankMyAgentArgs = new RankMyAgentCardArgs();
                rankMyAgentArgs.RankMyAgentKey = rankMyAgentKey;
                ControlFetcher.fetchRankMyAgentCard(fetcherArgs, rankMyAgentArgs);
            };
            Realtor.prototype.loadRealSatisfied = function (realSatisfiedKey) {
                $("#realSatisfiedLoader").show();
                var fetcherArgs = new ControlFetcherArgs(null, 'RealtorRankingCon');
                fetcherArgs.showLoadingAnimation = false;
                fetcherArgs.showLoadingSpinner = true;
                fetcherArgs.cacheResult = true;
                fetcherArgs.postCallHandler = function (results, args) {
                    if (results && (results.d.toLowerCase().indexOf('id="realsatisfiedcardcon"') !== -1)) { //if no results are found, the html id of the control won't be there
                        $("#RealtorRankingCon").show();
                        $("#realSatisfiedLoader").hide();
                        Events.Fire(Pages.Desktop.Realtor.realSatisfiedLoaded);
                    }
                };
                fetcherArgs.timeoutHandler = function (request, error) {
                    $("#realSatisfiedLoader").hide();
                    $("#RealtorRankingCon").hide();
                };
                fetcherArgs.errorHandler = function (request, error) {
                    $("#realSatisfiedLoader").hide();
                    $("#RealtorRankingCon").hide();
                };
                var realSatisfiedArgs = new RealSatisfiedCardArgs();
                realSatisfiedArgs.RealSatisfiedKey = realSatisfiedKey;
                ControlFetcher.fetchRealSatisfiedCard(fetcherArgs, realSatisfiedArgs);
            };
            Realtor.rankMyAgentLoaded = "rankMyAgentLoaded";
            Realtor.realSatisfiedLoaded = "realSatisfiedLoaded";
            return Realtor;
        }(WebPage));
        Desktop.Realtor = Realtor;
    })(Desktop = Pages.Desktop || (Pages.Desktop = {}));
})(Pages || (Pages = {}));
//# sourceMappingURL=Realtor.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var RealtorCodeOfEthics = /** @class */ (function (_super) {
            __extends(RealtorCodeOfEthics, _super);
            function RealtorCodeOfEthics(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            RealtorCodeOfEthics.prototype.loadModel = function (model) { };
            RealtorCodeOfEthics.prototype.registerEventHandlers = function () {
                var me = this;
            };
            RealtorCodeOfEthics.prototype.render = function () {
            };
            return RealtorCodeOfEthics;
        }(WebPage));
        Pages.RealtorCodeOfEthics = RealtorCodeOfEthics;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=RealtorCodeOfEthics.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var RealtorResults = /** @class */ (function (_super) {
            __extends(RealtorResults, _super);
            function RealtorResults(model, controlId, seoCriteria) {
                var _this = _super.call(this, model, controlId) || this;
                _this.currentlyFetchingResults = false;
                _this.pushSortDataLayerEvent = false;
                _this.SEOCriteria = "";
                _this.InitialResultsLoaded = false;
                _this.SEOCriteria = seoCriteria;
                _this.init();
                return _this;
            }
            RealtorResults.prototype.loadModel = function (model) { };
            RealtorResults.prototype.render = function () {
                DropDown.loadSelect2($('#ddlRealtorSort'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    stopOpenOnClear: true,
                    width: "200px"
                });
                this.pushSortDataLayerEvent = false;
                this.updateResults();
            };
            RealtorResults.prototype.registerEventHandlers = function () {
                var me = this;
                if (me.SEOCriteria) {
                    Binding.setControlValsFromObject(URLHash.getObject(null, me.SEOCriteria), $('#realtorResultsOuterCon'));
                }
                else {
                    Binding.setControlValsFromHash($('#realtorResultsOuterCon'));
                }
                $('#realtorResultsBackBtn').click(function () {
                    //history.back();
                    //let criteria: Object = URLHash.getObject();
                    //delete criteria["sort"];
                    //delete criteria["page"];
                    //if (URLHash.get("v", "") == "realtor") {
                    //    delete criteria["v"];
                    //    location.href = RouteHelper.getURL("meet-a-realtor") + "#v=realtor&" + $.param(criteria);
                    //} else {
                    //    delete criteria["v"];
                    //    location.href = RouteHelper.getURL("meet-a-realtor") + "#v=location&" + $.param(criteria);
                    //}
                });
                Events.Listen(Controls.Desktop.RealtorResults.realtorResultsLoaded, function (val) {
                    var model = val.detail;
                    me.updatePagination(val);
                    me.toggleResultsControlsVisibility(model.TotalResults && model.TotalResults > 0);
                });
                Events.Listen(Controls.Desktop.Pagination.paginationPageChanged, function (data) {
                    me.resetSEOURL();
                    URLHash.set("page", data.detail.page.toString(), true, true);
                });
                $(window).on('hashchange', function (e) {
                    me.resetSEOURL();
                    me.updateResults();
                });
                $(window).on('popstate', function (e) {
                    me.pushSortDataLayerEvent = false;
                });
                ApplicationState.Current.Controls["realtorPagination"].pageChange.Listen(function (arg) {
                    me.resetSEOURL();
                    $("html,body").animate({ scrollTop: $('#realtorSearchResultsHeaderCon').offset().top }, 150);
                });
                $('#ddlRealtorSort').change(function () {
                    if (me.InitialResultsLoaded) {
                        me.resetSEOURL();
                        var sortVal = $(this).val();
                        if (sortVal != URLHash.get("sort", "")) {
                            $('#realtorResultsCon').css("min-height", $('#realtorResultsCon').height() + "px"); //Reduce layout shift                        
                            var newHash = URLHash.getObject();
                            newHash["page"] = "1";
                            newHash["sort"] = sortVal;
                            URLHash.setValues(newHash, true, true);
                        }
                    }
                });
                $('.ddlResultsPages').change(function () {
                    if (me.InitialResultsLoaded) {
                        me.resetSEOURL();
                        var page = $(this).val();
                        URLHash.set("page", page, true, true);
                    }
                });
                $('#btnModifySearch').click(function () {
                    var hashObj;
                    if (me.SEOCriteria) {
                        hashObj = URLHash.getObject(true, me.SEOCriteria);
                    }
                    else if (location.hash && location.hash != "") {
                        hashObj = URLHash.getObject(true);
                    }
                    if (hashObj) {
                        delete hashObj["recordsperpage"];
                        delete hashObj["page"];
                        delete hashObj["sort"];
                        delete hashObj["v"];
                        if (hashObj["firstname"] || hashObj["lastname"])
                            window.location.href = RouteHelper.getURL("meet-a-realtor/name") + '#' + $.param(hashObj);
                        else
                            window.location.href = RouteHelper.getURL("meet-a-realtor/location") + '#' + $.param(hashObj);
                    }
                    else {
                        window.location.href = RouteHelper.getURL("meet-a-realtor/location");
                    }
                    return false;
                });
            };
            RealtorResults.prototype.toggleResultsControlsVisibility = function (hasResults) {
                $('#realtorSearchResultsSort, #RealtorResultsBottomPaginationCon, #realtorSearchResultsLabel').toggleClass("hidden", !hasResults);
            };
            RealtorResults.prototype.resetSEOURL = function () {
                var me = this;
                if (RouteHelper.getURL("realtor-search-results").toLowerCase() != location.href.replace(location.hash, "").toLowerCase()) {
                    var changedHash = URLHash.getObject();
                    var currentHash = URLHash.getObject(null, me.SEOCriteria);
                    var returnedTarget = Object.assign(currentHash, changedHash);
                    var newHash = $.param(returnedTarget);
                    history.replaceState("", document.title, RouteHelper.getURL("realtor-search-results") + "#" + newHash); //clear existing hash
                    me.SEOCriteria = null;
                }
            };
            /**
             * Updates the pagination controls client side with the event data from the new SearchResults control via the realtorResultsLoaded event.
             * @param data
             */
            RealtorResults.prototype.updatePagination = function (data) {
                var me = this;
                var model = data.detail;
                if (model.TotalResults > model.RecordsPerPage * model.TotalPages) {
                    $('.paginationTotalPagesNum').text(model.TotalPages + "+");
                }
                else {
                    $('.paginationTotalPagesNum').text(Math.min(model.TotalPages, Desktop.Pages.RealtorResults.maxPages));
                }
                $('.realtorResultsTotalResultsNum').text(Number(model.TotalResults).toLocaleString(ApplicationState.LanguageAttribute));
                $('.realtorResultsStartNum').text(Number(model.StartNum).toLocaleString(ApplicationState.LanguageAttribute));
                $('.realtorResultsEndNum').text(Number(model.EndNum).toLocaleString(ApplicationState.LanguageAttribute));
                var currentPage = model.CurrentPage.toString();
                $('.ddlResultsPages').empty();
                for (var i = 1; i <= Math.min(model.TotalPages, Desktop.Pages.RealtorResults.maxPages); i++) {
                    var newState = new Option(i.toString(), i.toString());
                    // Append it to the select
                    $('.ddlResultsPages').append(newState);
                }
                $('.ddlResultsPages').val(currentPage).trigger('change');
            };
            RealtorResults.prototype.updateResults = function () {
                var me = this;
                var fetchArgs = new ControlFetcherArgs("", "realtorResultsCon");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.showLoadingSpinner = true;
                fetchArgs.removeFromCacheAfterFetch = true;
                var controlArgs = new RealtorSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (val) {
                    Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                    $('#realtorResultsCon').css("min-height", "");
                    $('#ddlRealtorSort').removeAttr("disabled");
                    $('#realtorResultsCon').removeClass("loadingOut");
                    me.InitialResultsLoaded = true;
                    if (val.d && val.d == "NoResults") {
                        $('#realtorResultsCon').html('<div style="text-align:center;">' + Translation.get("NoRealtors") + "</div>");
                        me.toggleResultsControlsVisibility(false);
                    }
                    //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                    //$('.paginationLink').removeAttr("disabled");
                };
                fetchArgs.errorHandler = function (request, error) {
                    Events.Fire(Controls.Desktop.Pagination.paginationNeedsRefresh);
                    $('#ddlRealtorSort').removeAttr("disabled");
                    //alert(error);
                    //Controls.Desktop.Pagination.updateUIState();//TODO: use and event? 
                    //$('.paginationLink').removeAttr("disabled");
                };
                var hashVals = me.SEOCriteria ? URLHash.getObject(null, me.SEOCriteria) : URLHash.getObject();
                controlArgs.firstName = hashVals["firstname"] || "";
                controlArgs.lastName = hashVals["lastname"] || "";
                controlArgs.city = hashVals["city"] || "";
                controlArgs.provinceIds = hashVals["province"] || "";
                controlArgs.companyName = hashVals["office"] || "";
                controlArgs.languages = hashVals["languages"] || "";
                controlArgs.designations = hashVals["designations"] || "";
                controlArgs.specialties = hashVals["specialties"] || "";
                controlArgs.isCCCMember = hashVals["isccn"] || "";
                controlArgs.currentPage = hashVals['page'] || 1;
                var sortVal = hashVals["sort"] || "11-A";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                $('#ddlRealtorSort').val(sortVal).change();
                //Add datalayer for FindaRealtorResultsSort when needed
                if (me.pushSortDataLayerEvent) {
                    DataLayer.push({
                        event: "e_FindaRealtorResultsSort"
                    });
                }
                else {
                    me.pushSortDataLayerEvent = true;
                }
                $('.paginationLink, .ddlResultsPages, .ResultsPaginationCon, #ddlRealtorSort').attr("disabled", "true");
                ControlFetcher.fetchRealtorResults(fetchArgs, controlArgs);
            };
            RealtorResults.maxPages = 50;
            return RealtorResults;
        }(WebPage));
        Pages.RealtorResults = RealtorResults;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=RealtorResults.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var RealtorSearch = /** @class */ (function (_super) {
            __extends(RealtorSearch, _super);
            function RealtorSearch(model, controlId, reatorSearchVideoIntroUrl, view) {
                var _this = _super.call(this, model, controlId) || this;
                _this.realtorSingleResultURL = "";
                _this.officeSingleResultURL = "";
                _this.realtorSearchVideoIntroUrl = reatorSearchVideoIntroUrl;
                _this.init();
                _this.setView(view, true);
                return _this;
            }
            RealtorSearch.prototype.loadModel = function (model) {
                Pages.RealtorSearch.instance = this;
            };
            RealtorSearch.prototype.render = function () {
                var me = this;
                me.loadMultiSelects();
                //me.showCurrentTab(true);
            };
            RealtorSearch.prototype.loadMultiSelects = function () {
                var multiSelects = $('#ddlLocationDesignation, #ddlLocationLanguages, #ddlLocationSpeciality, #ddlRealtorDesignations, #ddlRealtorLanguage, #ddlRealtorSpecialty');
                DropDown.loadSelect2(multiSelects, {
                    allowClear: false,
                    placeholderText: 0 + " " + Translation.get("ItemsSelectedSingular"),
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    multiSelectWithoutTags: true,
                    width: "100%"
                });
                DropDown.loadSelect2($('#realtorSearchCon select').not(multiSelects), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "100%"
                });
            };
            RealtorSearch.prototype.registerEventHandlers = function () {
                var me = this;
                var videoContainer = $($("#realtorSearchVideo").outerHTML());
                $("#Realtor_search_play_button, .BackgroundRealtorSearchConEnUrl, #RealtorSearchHeaderVideoIntroContainer").click(function () {
                    //Open a modal view container with a video using the URL
                    var urlAction = me.realtorSearchVideoIntroUrl;
                    var model = new ModalContentModel("videoModal-realtor-search", "", videoContainer);
                    model.CssClass = "VideoModalEnabled";
                    model.ButtonCloseID = "btnVideoCancel";
                    model.AfterOpen = function () {
                        var videoModel = new MultimediaModel(urlAction, "realtorSearchVideo", VideoLoadingDisplay.Yes, VideoDisplay.VideoNoThumbnail, VideoLoadingType.LoadingNow);
                        videoModel.setContentOptions("", "videoThumbnailLoading", "videoThumbnail", "realtorSearchVideo-upper-inner", "realtorSearchVideo-inner-", "play_button");
                        MultimediaModel.virtualTourLoadEvent.Listen(function (arg) {
                            if (arg.detail.loaded) {
                                $("#realtorSearchVideo").css("min-width", "");
                                $("#bannerCarouselVideo").css("min-height", "");
                            }
                        });
                        MultimediaModel.virtualTourAddVideoEvent.Listen(function (arg) {
                            $("#" + arg.detail.model.VideoInnerContainerId).html(arg.detail.iframeHtmlToAppend);
                        });
                        videoModel.MultiManager.overwriteVideoAccessTypeProviders(VideoAccessType.BVD);
                        videoModel.MultiManager.Youtube.AdditionalParam = videoModel.MultiManager.Youtube.AdditionalParam + ApplicationConfig.RealtorSearchVideoAdditionalVideoIDS;
                        $("#realtorSearchVideoContainer").remove(); //Remove the parent container to prevent DOM initializing issues
                        videoModel.StartEmbed();
                        $(".featherlight-content").addClass("VideoModeSpecialParam");
                    };
                    model.DisplayType = ModalDisplayTypes.Featherlight;
                    showModalContent(model);
                });
                $('#btnFindARealtorBuyerInfo').click(function () {
                    location.href = RouteHelper.getURL("tips-for-buyers");
                    return false;
                });
                $("#searchByRealtorTab").click(function () {
                    me.setView("name");
                });
                $("#searchByLocationTab").click(function () {
                    me.setView("location");
                });
                $("#searchByOfficeTab").click(function () {
                    me.setView("office");
                });
                $("#btnLocationSearch").click(function () {
                    me.locationSearch();
                    return false;
                });
                $("#btnByNameSearch").click(function () {
                    me.realtorSearch();
                    return false;
                });
                $("#btnOfficeSearch").click(function () {
                    me.officeSearch();
                    return false;
                });
                $('#btnFindARealtorOfficeReset').click(function () {
                    resetInputControls($('#SearchByOffice'));
                });
                $('#btnFindARealtorByNameReset').click(function () {
                    resetInputControls($('#SearchByRealtor'));
                });
                $('#btnFindARealtorLocationReset').click(function () {
                    resetInputControls($('#SearchByLocation'));
                });
                $(document).keypress(function (e) {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                        if ($('#searchByLocationTab').hasClass("active")) {
                            $('#btnLocationSearch').click();
                        }
                        else if ($('#searchByRealtorTab').hasClass("active")) {
                            $('#btnByNameSearch').click();
                        }
                        else if ($('#searchByOfficeTab').hasClass("active")) {
                            $('#btnOfficeSearch').click();
                        }
                        e.stopPropagation();
                        return false;
                    }
                });
                Events.Listen(Controls.Desktop.RealtorResults.realtorSingleResultLoaded, me.checkRealtorSingleResult);
                Events.Listen(Controls.Desktop.OfficeResults.officeSingleResultLoaded, me.checkOfficeSingleResult);
            };
            RealtorSearch.prototype.setView = function (view, rebindFromHash) {
                if (rebindFromHash === void 0) { rebindFromHash = false; }
                var me = this;
                var description = "";
                var h1 = "";
                var title = "";
                var url = "";
                var controlsContainer;
                $("#SearchByRealtor, #SearchByOffice, #SearchByLocation").hide();
                $("#searchByLocationTab, #searchByRealtorTab, #searchByOfficeTab").removeClass('active');
                if (view == "name") {
                    title = Translation.get("PageTitleRealtorSearch");
                    url = RouteHelper.getURL("meet-a-realtor/name");
                    h1 = Translation.get("RealtorSearchH1");
                    description = Translation.get("MetaDescriptionRealtorSearch");
                    $('#SearchByRealtor').show();
                    $('#searchByRealtorTab').addClass('active');
                    controlsContainer = $('#SearchByRealtor');
                    Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.rssm });
                }
                else if (view == "location") {
                    title = Translation.get("PageTitleRealtorSearch");
                    url = RouteHelper.getURL("meet-a-realtor/location");
                    h1 = Translation.get("RealtorSearchH1");
                    description = Translation.get("MetaDescriptionRealtorSearch");
                    $('#SearchByLocation').show();
                    $('#searchByLocationTab').addClass('active');
                    controlsContainer = $('#SearchByLocation');
                    Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.rssm });
                }
                else {
                    title = Translation.get("PageTitleOfficeSearch");
                    url = RouteHelper.getURL("meet-a-realtor/office");
                    h1 = Translation.get("OfficeSearchH1");
                    description = Translation.get("MetaDescriptionOfficeSearch");
                    $('#SearchByOffice').show();
                    $('#searchByOfficeTab').addClass('active');
                    controlsContainer = $('#SearchByOffice');
                    Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.ossm });
                }
                if (rebindFromHash) {
                    Binding.setControlValsFromHash(controlsContainer);
                    this.refreshMultiSelects();
                }
                history.replaceState(null, title, url + location.hash);
                $('#findARealtorTitle').html(h1);
                document.title = title;
                $('meta[name="description"]').attr("content", description);
                $('link[rel="canonical"]').attr("href", url);
            };
            RealtorSearch.prototype.refreshMultiSelects = function () {
                $('#ddlLocationDesignation, #ddlLocationLanguages, #ddlLocationSpeciality,#ddlRealtorDesignations,#ddlRealtorLanguage,#ddlRealtorSpecialty').trigger("change");
            };
            RealtorSearch.prototype.checkRealtorSingleResult = function (data) {
                var me = Pages.RealtorSearch.instance;
                var model = data.detail;
                if (model.SingleResultURL != "") {
                    me.realtorSingleResultURL = model.SingleResultURL;
                }
            };
            RealtorSearch.prototype.checkForResults_Realtors = function (criteria) {
                var me = Pages.RealtorSearch.instance;
                var fetchArgs = new ControlFetcherArgs("", "resultsHidden");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.cacheResult = true;
                var controlArgs = new RealtorSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (response) {
                    if (response.d == ControlFetcher.NoResultsResponse) {
                        showMessage(Translation.get("NoRealtors"), MessageType.Normal, DisplayType.Toast);
                    }
                    else {
                        var criteriaCopy = Object.assign({}, criteria);
                        delete criteriaCopy["sort"];
                        delete criteriaCopy["page"];
                        URLHash.setValues(criteriaCopy, false);
                        if (me.realtorSingleResultURL != "") {
                            Core.GoToPage(me.realtorSingleResultURL + "#" + $.param(criteria));
                        }
                        else {
                            Core.GoToPage(RouteHelper.getURL("realtor-search-results") + "#" + $.param(criteria));
                        }
                    }
                };
                var hashVals = URLHash.getObject();
                controlArgs.firstName = criteria["firstname"] || "";
                controlArgs.lastName = criteria["lastname"] || "";
                controlArgs.city = criteria["city"] || "";
                controlArgs.provinceIds = criteria["province"] || "";
                controlArgs.companyName = criteria["office"] || "";
                controlArgs.languages = criteria["languages"] || "";
                controlArgs.designations = criteria["designations"] || "";
                controlArgs.specialties = criteria["specialties"] || "";
                controlArgs.isCCCMember = criteria["isccn"] || "";
                controlArgs.currentPage = criteria['page'] || 1;
                var sortVal = criteria["sort"] || "";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                ControlFetcher.fetchRealtorResults(fetchArgs, controlArgs);
            };
            RealtorSearch.prototype.checkOfficeSingleResult = function (data) {
                var me = Pages.RealtorSearch.instance;
                var model = data.detail;
                if (model.SingleResultURL != "") {
                    me.officeSingleResultURL = model.SingleResultURL;
                }
            };
            RealtorSearch.prototype.checkForResults_Offices = function (criteria) {
                var me = Pages.RealtorSearch.instance;
                var fetchArgs = new ControlFetcherArgs("", "resultsHidden");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.cacheResult = true;
                var controlArgs = new OfficeSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (response) {
                    if (response.d == ControlFetcher.NoResultsResponse) {
                        showMessage(Translation.get("NoOffices"), MessageType.Normal, DisplayType.Toast);
                    }
                    else {
                        var criteriaCopy = Object.assign({}, criteria);
                        delete criteriaCopy["sort"];
                        delete criteriaCopy["page"];
                        URLHash.setValues(criteriaCopy, false);
                        if (me.officeSingleResultURL != "") {
                            Core.GoToPage(me.officeSingleResultURL + "#" + $.param(criteria));
                        }
                        else {
                            Core.GoToPage(RouteHelper.getURL("office-search-results") + "#" + $.param(criteria));
                        }
                    }
                };
                controlArgs.name = criteria["office"] || "";
                controlArgs.city = criteria["city"] || "";
                controlArgs.provinceIDs = criteria["province"] || "";
                controlArgs.postalCode = criteria["postalcode"] || "";
                controlArgs.address = criteria["address"] || "";
                controlArgs.currentPage = criteria['page'] || 1;
                controlArgs.recordsPerPage = 20;
                var sortVal = criteria["sort"] || "";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                ControlFetcher.fetchOfficeResults(fetchArgs, controlArgs);
            };
            RealtorSearch.prototype.locationSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByLocation'], false, null, false);
                this.SetDefaultLocationSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                this.checkForResults_Realtors(criteria);
            };
            RealtorSearch.prototype.officeSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByOffice'], false, null, false);
                this.SetDefaultOfficeSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                this.checkForResults_Offices(criteria);
            };
            /**
            * Changes default sort based on input value for office search.
            */
            RealtorSearch.prototype.SetDefaultOfficeSort = function () {
                if ($('#txtOfficeName').val().trim() != '') {
                    this.sortOrder = '2-A'; //Name A-Z
                }
                else {
                    this.sortOrder = '8-A'; // Random/No Preference
                }
            };
            /**
             * * Changes default sort based on input value for Realtor search.
             */
            RealtorSearch.prototype.SetDefaultRealtorSort = function () {
                if ($('#txtRealtorFirstName').val().trim() != '' || $('#txtRealtorLastName').val().trim() != '') {
                    this.sortOrder = '3-A'; //Last Name A-Z
                }
                else {
                    this.sortOrder = '11-A'; // Random/No Preference
                }
            };
            /**
             * * Changes default sort based on input value for Location (Realtor) search.
             */
            RealtorSearch.prototype.SetDefaultLocationSort = function () {
                //if ($('#txtLocationOfficeName').val().trim() != '') {
                this.sortOrder = '11-A'; // Random/No Preference
                //} else {
                //$('#txtOfficeSort').val('3-A'); //Last Name A-Z
                //}
            };
            RealtorSearch.prototype.realtorSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByRealtor'], false, null, false);
                this.SetDefaultRealtorSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                this.checkForResults_Realtors(criteria);
            };
            return RealtorSearch;
        }(WebPage));
        Pages.RealtorSearch = RealtorSearch;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=RealtorSearch.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var RealtorSearchOld = /** @class */ (function (_super) {
            __extends(RealtorSearchOld, _super);
            function RealtorSearchOld(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.realtorSingleResultURL = "";
                _this.officeSingleResultURL = "";
                _this.init();
                return _this;
            }
            RealtorSearchOld.prototype.loadModel = function (model) {
                Pages.RealtorSearchOld.instance = this;
            };
            RealtorSearchOld.prototype.render = function () {
                var me = this;
                me.loadMultiSelects();
                me.showCurrentTab(true);
            };
            RealtorSearchOld.prototype.loadMultiSelects = function () {
                var multiSelects = $('#ddlLocationDesignation, #ddlLocationLanguages, #ddlLocationSpeciality, #ddlRealtorDesignations, #ddlRealtorLanguage, #ddlRealtorSpecialty');
                DropDown.loadSelect2(multiSelects, {
                    allowClear: false,
                    placeholderText: 0 + " " + Translation.get("ItemsSelectedSingular"),
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    multiSelectWithoutTags: true,
                    width: "100%"
                });
                DropDown.loadSelect2($('#realtorSearchCon select').not(multiSelects), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "100%"
                });
            };
            RealtorSearchOld.prototype.registerEventHandlers = function () {
                var me = this;
                $(window).on('hashchange', function () {
                    me.showCurrentTab();
                    //Change the linkback urls for the socialshare to the right campaign
                    var view = URLHash.get("v", "").toLowerCase();
                    if (view == "realtor") {
                        Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.rssm });
                    }
                    else if (view == "location" || view == "") {
                        Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.rssm });
                    }
                    else if (view == "office") {
                        Controls.Desktop.SocialShare.overwriteSocialShareEvent.Fire({ ssm: me.ossm });
                    }
                });
                $('#btnFindARealtorBuyerInfo').click(function () {
                    location.href = RouteHelper.getURL("tips-for-buyers");
                    return false;
                });
                $("#searchByRealtorTab").click(function () {
                    //URLHash.set("v", "realtor");
                    location.hash = "v=realtor";
                    me.showCurrentTab(false);
                });
                $("#searchByLocationTab").click(function () {
                    //URLHash.set("v", "location");
                    location.hash = "v=location";
                    me.showCurrentTab(false);
                });
                $("#searchByOfficeTab").click(function () {
                    location.hash = "v=office";
                    //URLHash.set("v", "office");
                    me.showCurrentTab(false);
                });
                $("#btnLocationSearch").click(function () {
                    me.locationSearch();
                    return false;
                });
                $("#btnByNameSearch").click(function () {
                    me.realtorSearch();
                    return false;
                });
                $("#btnOfficeSearch").click(function () {
                    me.officeSearch();
                    return false;
                });
                $('#btnFindARealtorOfficeReset').click(function () {
                    resetInputControls($('#SearchByOffice'));
                });
                $('#btnFindARealtorByNameReset').click(function () {
                    resetInputControls($('#SearchByRealtor'));
                });
                $('#btnFindARealtorLocationReset').click(function () {
                    resetInputControls($('#SearchByLocation'));
                });
                $(document).keypress(function (e) {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                        if ($('#searchByLocationTab').hasClass("active")) {
                            $('#btnLocationSearch').click();
                        }
                        else if ($('#searchByRealtorTab').hasClass("active")) {
                            $('#btnByNameSearch').click();
                        }
                        else if ($('#searchByOfficeTab').hasClass("active")) {
                            $('#btnOfficeSearch').click();
                        }
                        e.stopPropagation();
                        return false;
                    }
                });
                Events.Listen(Controls.Desktop.RealtorResults.realtorSingleResultLoaded, me.checkRealtorSingleResult);
                Events.Listen(Controls.Desktop.OfficeResults.officeSingleResultLoaded, me.checkOfficeSingleResult);
            };
            RealtorSearchOld.prototype.updateSearchView = function () {
            };
            RealtorSearchOld.prototype.resetAllSearchFields = function () {
                resetInputControls($('#SearchByOffice'));
                resetInputControls($('#SearchByRealtor'));
                resetInputControls($('#SearchByLocation'));
            };
            RealtorSearchOld.prototype.refreshMultiSelects = function () {
                $('#ddlLocationDesignation, #ddlLocationLanguages, #ddlLocationSpeciality,#ddlRealtorDesignations,#ddlRealtorLanguage,#ddlRealtorSpecialty').trigger("change");
            };
            RealtorSearchOld.prototype.showCurrentTab = function (bindFromHash) {
                if (bindFromHash === void 0) { bindFromHash = false; }
                var me = this;
                var view = URLHash.get("v", "").toLowerCase();
                if (view == "realtor") {
                    $("#SearchByRealtor").show();
                    $("#SearchByOffice").hide();
                    $("#SearchByLocation").hide();
                    $("#searchByRealtorTab").addClass("active");
                    if ($('#searchByLocationTab').hasClass('active')) {
                        $('#searchByLocationTab').removeClass('active');
                    }
                    if ($('#searchByOfficeTab').hasClass('active')) {
                        $('#searchByOfficeTab').removeClass('active');
                    }
                    if (bindFromHash) {
                        Binding.setControlValsFromHash($('#SearchByRealtor'));
                        this.refreshMultiSelects();
                    }
                    else {
                        location.hash = "v=realtor";
                    }
                }
                else if (view == "location" || view == "") {
                    $("#SearchByLocation").show();
                    $("#SearchByRealtor").hide();
                    $("#SearchByOffice").hide();
                    $("#searchByLocationTab").addClass("active");
                    if ($('#searchByRealtorTab').hasClass('active')) {
                        $('#searchByRealtorTab').removeClass('active');
                    }
                    if ($('#searchByOfficeTab').hasClass('active')) {
                        $('#searchByOfficeTab').removeClass('active');
                    }
                    if (bindFromHash) {
                        Binding.setControlValsFromHash($('#SearchByLocation'));
                        this.refreshMultiSelects();
                    }
                    else {
                        location.hash = "v=location";
                    }
                }
                else if (view == "office") {
                    $("#SearchByRealtor").hide();
                    $("#SearchByLocation").hide();
                    $("#SearchByOffice").show();
                    $("#searchByOfficeTab").addClass("active");
                    if ($('#searchByRealtorTab').hasClass('active')) {
                        $('#searchByRealtorTab').removeClass('active');
                    }
                    if ($('#searchByLocationTab').hasClass('active')) {
                        $('#searchByLocationTab').removeClass('active');
                    }
                    if (bindFromHash) {
                        Binding.setControlValsFromHash($('#SearchByOffice'));
                        this.refreshMultiSelects();
                    }
                    else {
                        location.hash = "v=office";
                    }
                }
            };
            RealtorSearchOld.prototype.checkRealtorSingleResult = function (data) {
                var me = Pages.RealtorSearchOld.instance;
                var model = data.detail;
                if (model.SingleResultURL != "") {
                    me.realtorSingleResultURL = model.SingleResultURL;
                }
            };
            RealtorSearchOld.prototype.checkForResults_Realtors = function (criteria) {
                var me = Pages.RealtorSearchOld.instance;
                var fetchArgs = new ControlFetcherArgs("", "resultsHidden");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.cacheResult = true;
                var controlArgs = new RealtorSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (response) {
                    if (response.d == ControlFetcher.NoResultsResponse) {
                        showMessage(Translation.get("NoRealtors"), MessageType.Normal, DisplayType.Toast);
                    }
                    else {
                        var criteriaCopy = Object.assign({}, criteria);
                        delete criteriaCopy["sort"];
                        delete criteriaCopy["page"];
                        URLHash.setValues(criteriaCopy, false);
                        delete criteria["v"];
                        if (me.realtorSingleResultURL != "") {
                            Core.GoToPage(me.realtorSingleResultURL + "#" + $.param(criteria));
                        }
                        else {
                            Core.GoToPage(RouteHelper.getURL("realtor-search-results") + "#" + $.param(criteria));
                        }
                    }
                };
                var hashVals = URLHash.getObject();
                controlArgs.firstName = criteria["firstname"] || "";
                controlArgs.lastName = criteria["lastname"] || "";
                controlArgs.city = criteria["city"] || "";
                controlArgs.provinceIds = criteria["province"] || "";
                controlArgs.companyName = criteria["office"] || "";
                controlArgs.languages = criteria["languages"] || "";
                controlArgs.designations = criteria["designations"] || "";
                controlArgs.specialties = criteria["specialties"] || "";
                controlArgs.isCCCMember = criteria["isccn"] || "";
                controlArgs.currentPage = criteria['page'] || 1;
                var sortVal = criteria["sort"] || "";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                ControlFetcher.fetchRealtorResults(fetchArgs, controlArgs);
            };
            RealtorSearchOld.prototype.checkOfficeSingleResult = function (data) {
                var me = Pages.RealtorSearchOld.instance;
                var model = data.detail;
                if (model.SingleResultURL != "") {
                    me.officeSingleResultURL = model.SingleResultURL;
                }
            };
            RealtorSearchOld.prototype.checkForResults_Offices = function (criteria) {
                var me = Pages.RealtorSearchOld.instance;
                var fetchArgs = new ControlFetcherArgs("", "resultsHidden");
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.cacheResult = true;
                var controlArgs = new OfficeSearchResultsControlArgs();
                fetchArgs.postCallHandler = function (response) {
                    if (response.d == ControlFetcher.NoResultsResponse) {
                        showMessage(Translation.get("NoOffices"), MessageType.Normal, DisplayType.Toast);
                    }
                    else {
                        var criteriaCopy = Object.assign({}, criteria);
                        delete criteriaCopy["sort"];
                        delete criteriaCopy["page"];
                        URLHash.setValues(criteriaCopy, false);
                        delete criteria["v"];
                        if (me.officeSingleResultURL != "") {
                            Core.GoToPage(me.officeSingleResultURL + "#" + $.param(criteria));
                        }
                        else {
                            Core.GoToPage(RouteHelper.getURL("office-search-results") + "#" + $.param(criteria));
                        }
                    }
                };
                controlArgs.name = criteria["office"] || "";
                controlArgs.city = criteria["city"] || "";
                controlArgs.provinceIDs = criteria["province"] || "";
                controlArgs.postalCode = criteria["postalcode"] || "";
                controlArgs.address = criteria["address"] || "";
                controlArgs.currentPage = criteria['page'] || 1;
                controlArgs.recordsPerPage = 20;
                var sortVal = criteria["sort"] || "";
                controlArgs.sortBy = sortVal.toString().split("-")[0]; //11; //No Pref
                controlArgs.sortOrder = sortVal.toString().split("-")[1]; //"A";
                ControlFetcher.fetchOfficeResults(fetchArgs, controlArgs);
            };
            RealtorSearchOld.prototype.locationSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByLocation'], false, null, false);
                this.SetDefaultLocationSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                this.checkForResults_Realtors(criteria);
            };
            RealtorSearchOld.prototype.officeSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByOffice'], false, null, false);
                this.SetDefaultOfficeSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                criteria["v"] = "office";
                this.checkForResults_Offices(criteria);
            };
            /**
            * Changes default sort based on input value for office search.
            */
            RealtorSearchOld.prototype.SetDefaultOfficeSort = function () {
                if ($('#txtOfficeName').val().trim() != '') {
                    this.sortOrder = '2-A'; //Name A-Z
                }
                else {
                    this.sortOrder = '8-A'; // Random/No Preference
                }
            };
            /**
             * * Changes default sort based on input value for Realtor search.
             */
            RealtorSearchOld.prototype.SetDefaultRealtorSort = function () {
                if ($('#txtRealtorFirstName').val().trim() != '' || $('#txtRealtorLastName').val().trim() != '') {
                    this.sortOrder = '3-A'; //Last Name A-Z
                }
                else {
                    this.sortOrder = '11-A'; // Random/No Preference
                }
            };
            /**
             * * Changes default sort based on input value for Location (Realtor) search.
             */
            RealtorSearchOld.prototype.SetDefaultLocationSort = function () {
                //if ($('#txtLocationOfficeName').val().trim() != '') {
                this.sortOrder = '11-A'; // Random/No Preference
                //} else {
                //$('#txtOfficeSort').val('3-A'); //Last Name A-Z
                //}
            };
            RealtorSearchOld.prototype.realtorSearch = function (forceNoCache) {
                if (forceNoCache === void 0) { forceNoCache = false; }
                var criteria = WebControl.getValuesFromControlsAsObject(['SearchByRealtor'], false, null, false);
                this.SetDefaultRealtorSort();
                criteria["page"] = "1";
                criteria["sort"] = this.sortOrder;
                criteria["v"] = "realtor";
                this.checkForResults_Realtors(criteria);
            };
            return RealtorSearchOld;
        }(WebPage));
        Pages.RealtorSearchOld = RealtorSearchOld;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=RealtorSearchOld.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var SavedSearches = /** @class */ (function (_super) {
            __extends(SavedSearches, _super);
            function SavedSearches(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.savedSearches = [];
                _this.settingInitialValues = false;
                _this.triggeredClosingNotificationNewEmailMsg = false;
                _this.init();
                return _this;
            }
            SavedSearches.prototype.loadModel = function (model) { };
            SavedSearches.prototype.registerEventHandlers = function () {
                var _this = this;
                var me = this;
                $(document).on('click', function (event) {
                    if (!$(event.target).hasClass("calloutCloseBtn") && $(event.target).parents(".calloutCloseBtn").length <= 0
                        && !$(event.target).hasClass("calloutBtn") && $(event.target).parents(".calloutBtn").length <= 0) {
                        me.triggeredClosingNotificationNewEmailMsg = false;
                    }
                    else {
                        me.triggeredClosingNotificationNewEmailMsg = true;
                    }
                });
                Events.Listen(SavedSearch.savedSearchesUpdated, function (arg) {
                    if (SavedSearch.detectedSavedSearchesDiff(me.savedSearches, SavedSearch.GetAll())) {
                        me.RefreshUI();
                    }
                });
                SavedSearch.consumerSavedSearchesSuccess.Listen(function (e) {
                    GigyaInit.Events.consumerProfileLoaded.ListenOnce(function (e) {
                        if (ApplicationState.UserIsSignedIn && SavedSearch.detectedSavedSearchesDiff(me.savedSearches, SavedSearch.GetAll())) {
                            _this.LoadData(me);
                        }
                    });
                });
                GigyaInit.Events.consumerLoggedIn.Listen(function (arg) {
                    //this event will refresh the searches on user login
                    if (ApplicationState.UserIsSignedIn) {
                        _this.LoadConsumerData(me);
                    }
                });
                $('#lnkSavedSearchDeleteAll').click(function () {
                    var Model = new ConfirmationDialogModel2("ConfirmDeleteAllSavedSearches", "", Translation.get("ConfirmSaveSearchDeleteAll"), Translation.get("Yes"), function (e, control) {
                        //DataLayer notification objects
                        DataLayer.handleNotificationProfileToDataLayer({
                            changedSavedSearches: [],
                            previousSavedSearches: SavedSearch.GetAll(),
                            changedFavNotification: null,
                            previousFavNotification: null,
                            additionalEvent: DataLayerEventsValue.SavedSearchDeleteAllEvent
                        });
                        SavedSearch.DeleteAll(null);
                        Events.Fire(SavedSearch.savedSearchesUpdated, { updateGigya: true });
                        control.Featherlight.close();
                        $('#SavedSearchesCon').hide();
                        showMessage(Translation.get("Deleted"));
                        me.RefreshUI();
                    }, Translation.get("No"), function (e, control) {
                        control.Featherlight.close();
                    });
                    Model.ShowTitleBar = false;
                    showConfirmationDialog2(Model);
                    return false;
                });
                $('#lnkSavedSearchNotificationSettings').click(function (event) {
                    if (ApplicationState.UserIsSignedIn) {
                        Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                        return false;
                    }
                    else {
                        //Wait until the gigya sign screens are dealt with and redirect to account...
                        //free up the post login and fwd to overwrite gigya redirect
                        SessionStorage.PostLoginRedirect.delete();
                        Cookie.FWDAccountURL.delete();
                        Gigya.runAfterScreensClosed([gigyaScreen.SignIn], function () {
                            if (ApplicationState.UserIsSignedIn) {
                                Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                            }
                        });
                        Gigya.showScreen(gigyaScreen.SignIn, null);
                    }
                    event.preventDefault();
                    return false;
                });
                $('#btnNoSavedSearches').click(function () {
                    Core.PerformListingSearch($('#NoSavedSearchesInput'), null);
                    return false;
                });
                $('#NoSavedSearchesInput').keypress(function (e) {
                    if (e.which == 13) {
                        document.activeElement.blur(); //Get rid of virtual keyboard since iOS will hide toast under it (android doesn't)
                        $('#btnNoSavedSearches').click();
                        return false;
                    }
                });
                $('#ddlSavedSearchesSort').change(function () {
                    if (me.settingInitialValues)
                        return;
                    //URLHash.set("page", "1");
                    URLHash.set("sort", $('#ddlSavedSearchesSort').val());
                    me.LoadData(me);
                    DataLayer.push({ event: "e_savedSearchSort" });
                });
            };
            SavedSearches.prototype.render = function () {
                var _this = this;
                var me = this;
                me.setInitialControlValuesViaHash();
                DropDown.loadSelect2($('#ddlSavedSearchesSort'), {
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "200px"
                });
                var addNotificationEmailMsgBox = function (savedSearches) {
                    if (savedSearches.length > 0)
                        _this.initNewNotificationEmailsMsg();
                };
                if (ApplicationState.UserIsSignedIn) {
                    this.LoadConsumerData(me, addNotificationEmailMsgBox);
                }
                else {
                    this.LoadData(me, addNotificationEmailMsgBox);
                }
            };
            SavedSearches.prototype.setInitialControlValuesViaHash = function () {
                var me = this;
                me.settingInitialValues = true;
                //me.getConsumerSort();
                Binding.setControlValsFromHashResetOthers($('#SavedSearchesSortByCon'));
                me.settingInitialValues = false;
            };
            SavedSearches.prototype.LoadConsumerData = function (me, postDataDisplay) {
                var _this = this;
                var callbackArgs = new GetAccountFromBOLCallbackArgs();
                callbackArgs.page = me;
                callbackArgs.functionCalls = function (me) {
                    if (SavedSearch.detectedSavedSearchesDiff(me.savedSearches, SavedSearch.GetAll())) {
                        _this.LoadData(me, postDataDisplay);
                    }
                    else {
                        me.RefreshUI();
                    }
                };
                GigyaInit.GetAccountFromBOL(ApplicationConfig.GigyaSyncRealTime, false, callbackArgs);
            };
            SavedSearches.prototype.LoadData = function (me, postDataDisplay) {
                me.loadSearches();
                me.loadSearchedIntoListView(me.savedSearches, "SavedSearchesDataCon", postDataDisplay);
                me.RefreshUI();
            };
            SavedSearches.prototype.RefreshUI = function () {
                //if (ApplicationState.UserIsSignedIn) {
                //    $('#SavedSearchLoadingCon').hide();
                //}
                var me = this;
                var hasAnySearches = SavedSearch.GetAll().length > 0;
                $('#SavedSearchDeleteAllCon').toggle(hasAnySearches);
                $('#NoSavedSearchesCon').toggle(!hasAnySearches);
                $('#SavedSearchesCon').toggle(hasAnySearches);
                //$("#SavedSearchNotifcationPreferencesLinkCon").toggle(ApplicationState.UserIsSignedIn);
                //let showPageHeaderActions: boolean = hasAnySearches || ApplicationState.UserIsSignedIn;
                //$('.PageHeaderActionsCon').toggle(showPageHeaderActions);
                if ($('#SavedSearchesPageInnerCon').is(":visible") == false && hasAnySearches == false) {
                    AnimateIn($('#SavedSearchesPageInnerCon'), EntryAnimations.fadeIn, 0.3, TransitionTiming.ease_in);
                }
            };
            SavedSearches.prototype.loadSearches = function () {
                this.savedSearches = [];
                var sortOrder = this.getSortOrder('SavedSearchesSortByCon');
                var searches = SavedSearch.GetAll(null, sortOrder, null);
                for (var i = 0; i < searches.length; i++) {
                    this.savedSearches.push(searches[i]);
                }
            };
            SavedSearches.prototype.loadSearchedIntoListView = function (searches, containerId, postDataDisplay) {
                $('#SavedSearchesCon').toggle(searches.length != 0);
                $('#SavedSearchDeleteAllCon').toggle(searches.length != 0);
                $('#NoSavedSearchesCon').toggle(searches.length == 0);
                $('#' + containerId).find(":not(.sk-spinning-circle)").empty();
                var me = this;
                TemplateFetcher.fetchSavedSearch(function (template) {
                    for (var i = 0; i < searches.length; i++) {
                        var fetchArgs = new ControlFetcherArgs("Search" + i.toString(), containerId);
                        fetchArgs.skipWrappingElement = true;
                        var model = new SavedSearchModel(searches[i]);
                        fetchArgs.postCallHandler = function (html) {
                            var _a, _b;
                            $('#' + containerId).append("<div class='loadingIn' style='display:none;'>" + html + "</div>");
                            //Refresh qTip if exists
                            if ($("#qtip-notificationEmailsToolTipBox").data('qtip')) {
                                $("#qtip-notificationEmailsToolTipBox").data('qtip').options.position.target = $($("#SavedSearchesDataCon").find('.SavedSearchCon')[0]).find('.SavedSearchNotificaionsIconCon');
                            }
                            //Display the saved searches when they are all loaded only
                            if (((_a = me.savedSearches) === null || _a === void 0 ? void 0 : _a.length) == ((_b = $("#SavedSearchesDataCon .SavedSearchCon")) === null || _b === void 0 ? void 0 : _b.length)) {
                                $('#' + containerId).children(":not(.sk-spinning-circle)").show();
                                $("#myNotificationsSavedSearchesLoading").hide();
                                setTimeout(function () {
                                    callAfterAnimation($('.loadingIn'), function () {
                                        $(".loadingIn").removeClass("loadingIn");
                                    });
                                }, 500);
                                if (postDataDisplay)
                                    postDataDisplay(SavedSearch.GetAll());
                            }
                        };
                        ControlFetcherJS.fetchSavedSearch(fetchArgs, model);
                    }
                });
            };
            //getConsumerSort(): void {
            //    if (ApplicationState.UserIsSignedIn) {
            //        let View: ViewPref = LocalAccountStorage.ViewPrefCP.getObject();
            //        if (View != null) {
            //            if (View.Res_View != null) {
            //                //URLHash.remove('page', true);
            //                URLHash.remove('sort', true);
            //                //URLHash.set("page", "1");
            //                if (View.Res_View.sortBy && Utilities.isExpiredSortByValue(View.Res_View.sortBy)) { //SREQ_0235413 retiring some sorts
            //                    URLHash.set("sort", "6-D"); //Date posted new to old
            //                } else {
            //                    URLHash.set("sort", View.Res_View.sortBy);
            //                }
            //            }
            //        }
            //    }
            //}
            SavedSearches.prototype.getSortOrder = function (controlId) {
                var criteria = WebControl.getValuesFromControlsAsObject([controlId], false);
                var sortOrder = criteria["sort"];
                if (sortOrder == '0-D' || sortOrder == '0-A' || sortOrder == null) {
                    sortOrder = "6-D"; //API doesn't know/care about this client based sort order
                }
                return sortOrder;
            };
            //Handles rendering of the new notification emails message
            SavedSearches.prototype.initNewNotificationEmailsMsg = function () {
                var me = this;
                var init = function () {
                    //Find the first savedsearch frequency dropdown....
                    var firstSavedSearchBell = $($("#SavedSearchesDataCon").find('.SavedSearchCon')[0]).find('.SavedSearchNotificaionsIconCon');
                    var notifNewEmailsObj = !LocalStorage.NotificationNewEmails.getObject() ?
                        { TriggerPageLoadFromResumeSearch: false, MessageBoxAcknowledged: false, CurrentPageLoadedFromResumeSearch: false } :
                        LocalStorage.NotificationNewEmails.getObject();
                    if (!notifNewEmailsObj.MessageBoxAcknowledged) {
                        var notifEmailsMsgControlArgs = {
                            PositiveBtnText: Translation.get("GotIt"),
                            MainTextContent: Translation.get("NewNotifMsgForSavedSearchBody"),
                            TitleText: Translation.get("NewNotifMsgForSavedSearchTitle")
                        };
                        var controlFetchArgs = new ControlFetcherArgs();
                        controlFetchArgs.idToOutputResults = "notificationEmailsNewMsg";
                        controlFetchArgs.postCallHandler = function (html, postCallArgs) {
                            if ($("#qtip-notificationEmailsToolTipBox").data('qtip') == null) {
                                var args = {
                                    id: "notificationEmailsToolTipBox",
                                    style: {
                                        tip: {
                                            width: 24,
                                            height: 15
                                        },
                                        classes: 'popIn emphasizedDropShadow standardMsgFormStyle',
                                        width: 300
                                    },
                                    position: {
                                        my: 'left top',
                                        at: 'right center',
                                        target: firstSavedSearchBell,
                                        container: $("#mainCon")
                                    },
                                    show: {
                                        modal: false,
                                        ready: false
                                    },
                                    hide: false,
                                    events: {
                                        show: function (event, api) {
                                            Events.Listen(Controls.Desktop.CustomToolTipBox.customToolTipClosing, function (e) {
                                                me.triggeredClosingNotificationNewEmailMsg = true;
                                                $(e.detail.parents(".qtip")[0]).qtip("enable");
                                                $(e.detail.parents(".qtip")[0]).qtip("hide");
                                                $(e.detail.parents(".qtip")[0]).qtip("disable");
                                                e.stopImmediatePropagation();
                                                return false;
                                            });
                                            $("#qtip-notificationEmailsToolTipBox").find(".tool-tip-main-box").removeClass("hide");
                                        },
                                        hide: function (event, api) {
                                            //Close/hide only when closed explicitely
                                            if (!me.triggeredClosingNotificationNewEmailMsg) {
                                                event.preventDefault(); // Stop it!
                                            }
                                        }
                                    }
                                };
                                $("#notificationEmailsNewMsg").show();
                                Controls.Desktop.CustomToolTipBox.initToolTipContentAdvanced($("#notificationEmailsToolTipBoxWrap"), $("#notificationEmailsNewMsg"), $("#notificationEmailsNewMsg .notification-message-main"), false, args);
                            }
                            else {
                                $("#qtip-notificationEmailsNewMsgToolTipBox").qtip('enable');
                                $("#qtip-notificationEmailsNewMsgToolTipBox").qtip('show');
                                setTimeout(function () {
                                    var tooltipDocClick = $(document).on('click', function (event) {
                                        if (!$(event.target).closest($("#qtip-notificationEmailsNewMsgToolTipBox")).hasClass("qtip-disabled")) {
                                            $("#qtip-notificationEmailsNewMsgToolTipBox").qtip("enable");
                                            $("#qtip-notificationEmailsNewMsgToolTipBox").qtip("hide");
                                            $("#qtip-notificationEmailsNewMsgToolTipBox").qtip("disable");
                                        }
                                    });
                                }, 1);
                            }
                        };
                        ControlFetcher.fetchNewNotificationEmailsMessage(controlFetchArgs, notifEmailsMsgControlArgs);
                    }
                };
                init();
            };
            return SavedSearches;
        }(WebPage));
        Pages.SavedSearches = SavedSearches;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=SavedSearches.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var SellerInfo = /** @class */ (function (_super) {
            __extends(SellerInfo, _super);
            function SellerInfo(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.canScrollInPage = false;
                _this.init();
                return _this;
            }
            SellerInfo.prototype.loadModel = function (model) { };
            SellerInfo.prototype.render = function () {
                var me = this;
                Controls.Desktop.TabHighlighter.insert($('.infoContentSection').find('.infoContentSection_SubSection_TabItem:first'), InfoPage.initPageAfterTabSelector);
            };
            ;
            SellerInfo.prototype.registerEventHandlers = function () {
                InfoPage.registerEventHandlers();
            };
            return SellerInfo;
        }(WebPage));
        Pages.SellerInfo = SellerInfo;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=SellerInfo.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var SiteMap = /** @class */ (function (_super) {
            __extends(SiteMap, _super);
            function SiteMap(model, controlId) {
                var _this = _super.call(this, null, controlId) || this;
                _this.init();
                return _this;
            }
            SiteMap.prototype.loadModel = function (model) {
            };
            SiteMap.prototype.render = function () {
                var me = this;
            };
            ;
            SiteMap.prototype.registerEventHandlers = function () {
                var me = this;
                $('#SearchMapNearMe').click(function () {
                    me.getGeoLocatedMapFwd('r');
                });
                $('#CommercialPropertySearch').click(function () {
                    me.getGeoLocatedMapFwd('c');
                });
            };
            SiteMap.prototype.getGeoLocatedMapFwd = function (rSet) {
                var me = this;
                var isCanadianUser = ApplicationState.IsCandianIP;
                if (isCanadianUser && navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        if (rSet === 'r') {
                            var url = RouteHelper.getURL("map") + '#Latitude=' + position.coords.latitude + '&Longitude=' + position.coords.longitude + '&ZoomLevel=15';
                        }
                        else {
                            var url = RouteHelper.getURL("map") + '#Latitude=' + position.coords.latitude + '&Longitude=' + position.coords.longitude + '&ZoomLevel=15&PropertyTypeGroupID=2';
                        }
                        window.location.href = (url);
                    }, function () {
                        var url = RouteHelper.getURL("map") + '#Latitude=' + 54.920828 + '&Longitude=' + -99.316406 + '&ZoomLevel=4';
                        window.location.href = (url);
                    }, { maximumAge: 15000 });
                }
                else {
                    window.location.href = RouteHelper.getURL("map");
                }
                return false;
            };
            return SiteMap;
        }(WebPage));
        Pages.SiteMap = SiteMap;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=SiteMap.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var Status = /** @class */ (function (_super) {
            __extends(Status, _super);
            function Status(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.LocalStorageKeyForEmail = "LocalStorageKeyForEmail";
                _this.init();
                return _this;
            }
            Status.prototype.loadModel = function (model) {
            };
            Status.prototype.registerEventHandlers = function () {
                var me = this;
                $('#LnkGetRealtorStatus').click(function () {
                    me.TestRealtor();
                    return false;
                });
                $('#LnkGetRealorCacheStatus').click(function () {
                    me.TestRealtorCache();
                    return false;
                });
                $('#LnkGetAPIStatus').click(function () {
                    me.TestAPI();
                    return false;
                });
                $('#LnkGetAPICacheStatus').click(function () {
                    me.TestAPICache();
                    return false;
                });
                $('#ClearCacheBtn').click(function () {
                    me.FlushAPICache();
                    return false;
                });
                $('#ClearCacheBtn_Realtor').click(function () {
                    me.FlushRealtorCache();
                    return false;
                });
                $('#btnAPIVersion').click(function (event) {
                    var args = new AjaxCallArgs(null);
                    args.callHandler = function (html) {
                        me.showResults(html);
                    };
                    args.contentType = 'application/json; charset=UTF-8';
                    AjaxEngine.POST("/services/actions.asmx/GetAPIVersion", null, args);
                    event.preventDefault();
                });
                $('#btnShowHttpCacheKeys').click(function () {
                    $('#HTTPCacheTable').toggle();
                    return false;
                });
                $('.btnClearHttpCacheEntry').click(function () {
                    var cacheKey = $(this).attr("data-key");
                    $.ajax({
                        url: "/Services/Actions.asmx/ClearHTTPCacheItem",
                        data: "{\"key\":\"" + Utilities.cleanJSONValue(cacheKey) + "\" }",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (msg) {
                            alert(msg.d);
                        },
                        error: function (a) {
                            alert('An error has occured: ' + a.responseText);
                        }
                    });
                    return false;
                });
                $('#btnErrorLoggingTest').click(function (event) {
                    var args = new AjaxCallArgs(null);
                    args.callHandler = function (html) {
                        me.showResults(html);
                    };
                    args.contentType = 'application/json; charset=UTF-8';
                    AjaxEngine.POST("/services/actions.asmx/TestErrorLogging", null, args);
                    event.preventDefault();
                });
                $('#btnEmailLoggingTest').click(function (event) {
                    var args = new AjaxCallArgs(null);
                    args.callHandler = function (html) {
                        me.showResults(html);
                    };
                    args.contentType = 'application/json; charset=UTF-8';
                    AjaxEngine.POST("/services/actions.asmx/TestEmailLogging", null, args);
                    event.preventDefault();
                });
            };
            Status.prototype.showResults = function (value) {
                var model = new ConfirmationDialogModel2("Result", " ", value.d, Translation.get("OK"), function (event, control) {
                    control.ForceCloseDialog();
                });
                model.ShowCloseButton = true;
                showConfirmationDialog2(model);
            };
            Status.prototype.render = function () {
                if (localStorage.getItem(this.LocalStorageKeyForEmail) !== null) {
                    $('#emailaddress').val(localStorage.getItem(this.LocalStorageKeyForEmail) || "");
                }
            };
            Status.prototype.TestAPICache = function () {
                showLoadingAnimation($('#APICacheResults'));
                $.ajax({
                    url: "/Services/Actions.asmx/TestAPICache",
                    //data: "{\"email\":\"" + $("#emailaddress").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        $('#APICacheResults').html(msg.d);
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                    }
                });
            };
            Status.prototype.TestRealtorCache = function () {
                showLoadingAnimation($('#RealtorCacheResults'));
                $.ajax({
                    url: "/Services/Actions.asmx/TestRealtorCache",
                    //data: "{\"email\":\"" + $("#emailaddress").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        $('#RealtorCacheResults').html(msg.d);
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                    }
                });
            };
            Status.prototype.FlushRealtorCache = function () {
                $('#ClearCacheBtn_Realtor, #CacheLoadingCon_Realtor').toggle();
                $.ajax({
                    url: "/Services/Actions.asmx/FlushRealtorCache",
                    data: "{\"cacheName\":\"" + $("#RealtorCacheNamesDDL").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        if (msg.d.indexOf("Error:") == -1) {
                            showMessage('Success: ' + msg.d);
                        }
                        else {
                            showMessage(msg.d);
                        }
                        $('#ClearCacheBtn_Realtor, #CacheLoadingCon_Realtor').toggle();
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                        $('#ClearCacheBtn_Realtor, #CacheLoadingCon_Realtor').toggle();
                    }
                });
            };
            Status.prototype.FlushAPICache = function () {
                $('#ClearCacheBtn, #CacheLoadingCon').toggle();
                $.ajax({
                    url: "/Services/Actions.asmx/ClearCache",
                    data: "{\"cacheName\":\"" + $("#CacheNamesDDL").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        if (msg.d.indexOf("Error:") == -1) {
                            showMessage('Success: ' + msg.d);
                        }
                        else {
                            showMessage(msg.d);
                        }
                        $('#ClearCacheBtn, #CacheLoadingCon').toggle();
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                        $('#ClearCacheBtn, #CacheLoadingCon').toggle();
                    }
                });
            };
            Status.prototype.TestRealtor = function () {
                if ($('#emailaddress').val() == '') {
                    showMessage("Invalid Email");
                    return false;
                }
                localStorage.setItem(this.LocalStorageKeyForEmail, $('#emailaddress').val());
                showLoadingAnimation($('#RealtorResults'));
                $.ajax({
                    url: "/Services/Actions.asmx/TestRealtor",
                    data: "{\"email\":\"" + $("#emailaddress").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        $('#RealtorResults').html(msg.d);
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                    }
                });
            };
            Status.prototype.TestAPI = function () {
                if ($('#emailaddress').val() == '') {
                    showMessage("Invalid Email");
                    return false;
                }
                localStorage.setItem(this.LocalStorageKeyForEmail, $('#emailaddress').val());
                showLoadingAnimation($('#APIResults'));
                $.ajax({
                    url: "/Services/Actions.asmx/TestAPI",
                    data: "{\"email\":\"" + $("#emailaddress").val() + "\" }",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        $('#APIResults').html(msg.d);
                    },
                    error: function (a) {
                        alert('An error has occured: ' + a.responseText);
                    }
                });
            };
            return Status;
        }(WebPage));
        Pages.Status = Status;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=Status.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var TermsOfUse = /** @class */ (function (_super) {
            __extends(TermsOfUse, _super);
            function TermsOfUse(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            TermsOfUse.prototype.loadModel = function (model) { };
            TermsOfUse.prototype.registerEventHandlers = function () {
                var me = this;
            };
            TermsOfUse.prototype.render = function () {
                DataLayer.push({
                    event: 'termOfUseLoaded',
                    page: {
                        path: RouteHelper.getURL("terms-of-use"),
                        title: document.title
                    }
                });
            };
            TermsOfUse.TermsOfUseAcceptedEvent = "TermsOfUseAcceptedEvent";
            return TermsOfUse;
        }(WebPage));
        Pages.TermsOfUse = TermsOfUse;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=terms-of-use.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var UnsubscribeEmails = /** @class */ (function (_super) {
            __extends(UnsubscribeEmails, _super);
            function UnsubscribeEmails(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.firstName = "";
                _this.lastName = "";
                //CREA_mail_updates: boolean = false;
                //REALTOR_mail_updates: boolean = false;
                _this.REALTOR_mail = false;
                _this.EmailRealtorConfirmation = false;
                _this.Salesforce_Contact_CREA_ID = 0;
                _this.NotificationsEnabled = false;
                _this.FavNotificationsEnabled = false;
                _this.CompareNotificationsEnabled = false;
                _this.SavedSearchNotificationsEnabled = false;
                _this.init();
                return _this;
            }
            UnsubscribeEmails.prototype.loadModel = function (model) {
                var _a, _b;
                //this.firstName = model.firstName;
                //this.lastName = model.lastName;
                //this.user = AccountSessionStorage.ConsumerUser.getObject<consumeruser>(consumeruser.CreateFromJSON);
                this.user = model.user;
                this.firstName = this.user.firstName;
                this.lastName = this.user.lastName;
                this.SavedSearches = model.user.Searches;
                //this.CREA_mail_updates = model.CREA_mail_updates;
                //this.REALTOR_mail_updates = model.REALTOR_mail_updates;
                this.REALTOR_mail = model.REALTOR_mail;
                this.EmailRealtorConfirmation = model.EmailRealtorConfirmation;
                this.Salesforce_Contact_CREA_ID = model.Salesforce_Contact_CREA_ID;
                this.NotificationsEnabled = model.NotificationsEnabled;
                this.FavNotificationsEnabled = model.FavNotificationsEnabled;
                if (((_b = (_a = model.user.Notifications) === null || _a === void 0 ? void 0 : _a.favourite) === null || _b === void 0 ? void 0 : _b.filter(function (value) {
                    return value.method == NotificationMethod.Email.toString();
                }).length) > 0) {
                    this.FavNotificationsSetting = new NotificationSetting({
                        frequency: parseInt(model.user.Notifications.favourite.filter(function (value) {
                            return value.method == NotificationMethod.Email.toString();
                        })[0].frequency),
                        method: NotificationMethod.Email
                    });
                }
                this.CompareNotificationsEnabled = model.CompareNotificationsEnabled;
                this.SavedSearchNotificationsEnabled = model.SavedSearchNotificationsEnabled;
                Pages.UnsubscribeEmails.instance = this;
            };
            UnsubscribeEmails.prototype.registerEventHandlers = function () {
                var _UnsubscribeEmailsPage = this;
                $("#btnUnsubscribeCancel").click(function (e) {
                    e.preventDefault();
                    Core.redirectTo('index');
                });
                $("#btnUnsubscribeSubmit").click(function (e) {
                    var _this = this;
                    e.preventDefault();
                    if ($(this).hasClass("loading") == false) {
                        $(this).addClass("loading");
                        _UnsubscribeEmailsPage.saveUnsubscribeSettings(_UnsubscribeEmailsPage, function () { $(_this).removeClass("loading"); }, function () { $(_this).removeClass("loading"); });
                    }
                    return false;
                });
                $('#chk_Notify_SavedSearchAll').click(function (e) {
                    $('#ulSearches input:checkbox').prop("checked", $('#chk_Notify_SavedSearchAll').is(':checked'));
                });
                //$('#ulSearches input:checkbox').click(() => {
                //    $('#chk_Notify_SavedSearchAll').prop("checked", false);
                //})
            };
            UnsubscribeEmails.prototype.render = function () {
                var _UnsubscribeEmailsPage = this;
                $('body').css('overflow', 'auto');
                var User = new ConsumerProfile.Consumer(_UnsubscribeEmailsPage);
                User.REALTOR_mail = _UnsubscribeEmailsPage.REALTOR_mail;
                AccountSessionStorage.REALTORMail.save(String(_UnsubscribeEmailsPage.REALTOR_mail));
                User.EmailRealtorConfirmation = _UnsubscribeEmailsPage.EmailRealtorConfirmation;
                AccountSessionStorage.EmailRealtorConfirmation.save(String(_UnsubscribeEmailsPage.EmailRealtorConfirmation));
                User.FavNotificationsEnabled = _UnsubscribeEmailsPage.FavNotificationsEnabled;
                AccountSessionStorage.FavouriteNotificationEnabled.save(String(_UnsubscribeEmailsPage.FavNotificationsEnabled));
                User.CompareNotificationsEnabled = _UnsubscribeEmailsPage.CompareNotificationsEnabled;
                User.SavedSearchNotificationsEnabled = _UnsubscribeEmailsPage.SavedSearchNotificationsEnabled;
                User.NotificationsEnabled = _UnsubscribeEmailsPage.NotificationsEnabled;
                ConsumerProfile.UserAccountSettings.REALTOR_mail = _UnsubscribeEmailsPage.REALTOR_mail;
                ConsumerProfile.UserAccountSettings.EmailRealtorConfirmation = _UnsubscribeEmailsPage.EmailRealtorConfirmation;
            };
            UnsubscribeEmails.prototype.saveUnsubscribeSettings = function (me, successCallback, failureCallback) {
                var _this = this;
                var showConfirmation = false;
                var needCRMupdate = false;
                var screenOptions = new ScreenUnsubscribeConfirmationArgs();
                //let CREA_updates: boolean = $("#chk_Marketing").is(':checked');
                //let REALTOR_updates: boolean = $("#chk_Product").is(':checked');
                var chkREALTOR_mail = $("#chk_RealtorMail").is(':checked');
                var chkEmailRealtorConfirmation = $("#chk_EmailRealtorConfirmation").is(':checked');
                var Fave_updates = $("#chk_Notify_Fave").is(':checked');
                var changeHasBeenMade = (!$("#chk_RealtorMail").is(':checked') && $("#chk_RealtorMail").is(':visible')) ||
                    (!$("#chk_Notify_Fave").is(':checked') && $("#chk_Notify_Fave").is(':visible')) || (!$("#chk_EmailRealtorConfirmation").is(':checked') && $("#chk_EmailRealtorConfirmation").is(':visible')) || $('#ulSearches input:checkbox:not(:checked)').length > 0;
                if (!changeHasBeenMade) {
                    if (successCallback) {
                        successCallback();
                    }
                    return;
                }
                var _UnsubscribeEmailsPage = this;
                //if (chkREALTOR_mail && chkEmailRealtorConfirmation && Fave_updates) {
                //    if (successCallback) {
                //        successCallback();
                //    }
                //    return;
                //}
                screenOptions.user_json = JSON.stringify(_UnsubscribeEmailsPage.user);
                //if (CREA_updates === false) {
                //    let storedCREA_mail_updates: string = AccountSessionStorage.CREAMailUpdates.get('');
                //    if (storedCREA_mail_updates != 'false') {
                //        screenOptions.showComm = true;
                //        showConfirmation = true;
                //        needCRMupdate = true;
                //    }
                //    //$("#unsub_chk_Marketing").hide();
                //}
                //if (REALTOR_updates === false) {
                //    let storedREALTOR_mail_updates: string = AccountSessionStorage.REALTORMailUpdates.get('');
                //    if (storedREALTOR_mail_updates != 'false') {
                //        screenOptions.showComm = true;
                //        showConfirmation = true;
                //        needCRMupdate = true;
                //    }
                //    //$("#unsub_chk_Product").hide();
                //} 
                if (chkREALTOR_mail === false) {
                    var storedREALTOR_mail_updates = AccountSessionStorage.REALTORMail.get('');
                    if (storedREALTOR_mail_updates != 'false') {
                        screenOptions.showComm = true;
                        showConfirmation = true;
                        needCRMupdate = true;
                    }
                }
                if (chkEmailRealtorConfirmation === false) {
                    var storedEmailRealtorConfirmation = AccountSessionStorage.EmailRealtorConfirmation.get('');
                    if (storedEmailRealtorConfirmation != 'false') {
                        screenOptions.showComm = false;
                        showConfirmation = false;
                    }
                }
                if (Fave_updates === false) {
                    var storedFavNotificationsEnabled = AccountSessionStorage.FavouriteNotificationEnabled.get("");
                    if (storedFavNotificationsEnabled != 'false') {
                        screenOptions.showNotify = true;
                        showConfirmation = true;
                    }
                    //$("#unsub_chk_Notify_Fave").hide();
                }
                var dataObject = new Object();
                //dataObject.CREA_mail_updates = CREA_updates;
                //dataObject.REALTOR_mail_updates = REALTOR_updates;
                dataObject.REALTOR_mail = chkREALTOR_mail;
                dataObject.EmailRealtorConfirmation = chkEmailRealtorConfirmation;
                var args = new AccountSetInfoArgs();
                args.data = JSON.stringify(dataObject);
                args.CRM_update = needCRMupdate;
                args.UID = $("#" + me.clientId + "_hdn_UserId").val();
                screenOptions.hdn_UserId = args.UID;
                var callbackArgs = new SetAccountInfoCallbackArgs();
                if (successCallback != null) {
                    callbackArgs.onSuccessFunc.push(function () {
                        successCallback();
                    });
                }
                if (failureCallback != null) {
                    callbackArgs.onFailFunc.push(function () {
                        failureCallback();
                    });
                }
                var notificationSettingsIds = [];
                if (showConfirmation) {
                    callbackArgs.targetScreen = gigyaScreen.UnsubscribeConfirmation;
                    callbackArgs.targetScreenOptions = screenOptions;
                }
                var pendingCalls = 0;
                var checkIfAllDone = function () {
                    if (pendingCalls == 0 && !showConfirmation)
                        Core.redirectTo("Index");
                };
                //DataLayer notification objects
                var prevSavedSearches = [];
                var changedSavedSearches = [];
                var changedFavNotification = new NotificationSetting({
                    frequency: !Fave_updates && me.FavNotificationsEnabled ? NotificationFrequency.Never : null,
                    method: NotificationMethod.Email
                });
                $('#ulSearches input:checkbox:not(:checked)').each(function (index, element) {
                    notificationSettingsIds.push($(element).attr('data-notificationid'));
                    $(_this).attr("disabled", "true");
                });
                //Build Datalayer notification savedsearches
                $('#ulSearches input:checkbox').each(function (index, element) {
                    //Build Datalayer notification savedsearch values
                    var savedSearchId = $(element).siblings("label[for='" + $(element).attr('id') + "']").text();
                    //changed saved search handling
                    var changedConsumerSearchObj = me.SavedSearches.filter(function (value) { return value.name == savedSearchId; })[0];
                    var changedSearchObj = new SavedSearch(savedSearchId);
                    changedSearchObj.notifications = changedConsumerSearchObj === null || changedConsumerSearchObj === void 0 ? void 0 : changedConsumerSearchObj.notifications;
                    if (!$(element).is(":checked"))
                        changedSearchObj.notifications = [];
                    changedSavedSearches.push(changedSearchObj);
                    //Previous saved search handling
                    var prevConsumerSearchObj = me.SavedSearches.filter(function (value) { return value.name == savedSearchId; })[0];
                    var prevSearchObj = new SavedSearch(savedSearchId);
                    prevSearchObj.notifications = prevConsumerSearchObj === null || prevConsumerSearchObj === void 0 ? void 0 : prevConsumerSearchObj.notifications;
                    prevSavedSearches.push(prevSearchObj);
                });
                if (notificationSettingsIds.length > 0 && me.SavedSearchNotificationsEnabled) {
                    pendingCalls++;
                    callbackArgs.onSuccessFunc.push(function () {
                        Actions.DeleteEmailSearchNotifications({ uid: args.UID, notificationSettingsIds: notificationSettingsIds }, function (val) {
                            pendingCalls--;
                            checkIfAllDone();
                        }, function (request, textStatus, exception) { showMessage("Failed (" + textStatus + ")", MessageType.Error, DisplayType.Toast); });
                    });
                }
                if (!Fave_updates && me.FavNotificationsEnabled) {
                    pendingCalls++;
                    callbackArgs.onSuccessFunc.push(function () {
                        Actions.DeleteEmailFavouriteNotifications({ uid: args.UID, notificationSettingsIds: [$('#chk_Notify_Fave').attr('data-settingid')] }, function (val) {
                            pendingCalls--;
                            checkIfAllDone();
                        }, function (request, textStatus, exception) { showMessage("Failed (" + textStatus + ")", MessageType.Error, DisplayType.Toast); });
                    });
                }
                checkIfAllDone();
                //AccountSessionStorage.CREAMailUpdates.delete();
                //AccountSessionStorage.REALTORMailUpdates.delete();
                AccountSessionStorage.REALTORMail.delete();
                AccountSessionStorage.FavouriteNotificationEnabled.delete();
                AccountSessionStorage.EmailRealtorConfirmation.delete();
                //AccountSessionStorage.CREAMailUpdates_Profile.delete();
                //AccountSessionStorage.REALTORMailUpdates_Profile.delete();
                AccountSessionStorage.REALTORMail_Profile.delete();
                AccountSessionStorage.EmailRealtorConfirmation_Profile.delete();
                Gigya.AccountSetInfo(args, callbackArgs);
                DataLayer.handleNotificationProfileToDataLayer({
                    changedFavNotification: changedFavNotification,
                    previousFavNotification: this.FavNotificationsSetting,
                    changedSavedSearches: changedSavedSearches,
                    previousSavedSearches: prevSavedSearches,
                    additionalEvent: DataLayerEventsValue.UnsubscribeSubmitEvent
                });
            };
            return UnsubscribeEmails;
        }(WebPage));
        Pages.UnsubscribeEmails = UnsubscribeEmails;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=UnsubscribeEmails.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var UnsubscribeNotificationEmails = /** @class */ (function (_super) {
            __extends(UnsubscribeNotificationEmails, _super);
            function UnsubscribeNotificationEmails(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.Unem = model;
                _this.init();
                return _this;
            }
            UnsubscribeNotificationEmails.prototype.loadModel = function (model) {
            };
            UnsubscribeNotificationEmails.prototype.registerEventHandlers = function () {
                var me = this;
                $("#btnUnsubscribe").click(function (event) {
                    $("#UnsubscribeNotificationAppLoading").css("display", "block");
                    $("#UnsubscribeEmailsButtonCon").css("display", "none");
                    $("#UnsubscribeMsgContainer").css("display", "none");
                    me.Unem.AddUnsubscribedUser(me.displayUnsubscriberMsg);
                });
            };
            UnsubscribeNotificationEmails.prototype.displayUnsubscriberMsg = function (failed, actionType, unem) {
                $("#UnsubscribeNotificationAppLoading").css("display", "none");
                if (failed) {
                    if (actionType == UnsubscribeNotificationAction.Append) {
                        $("#UnsubscribeEmailsButtonCon").css("display", "block");
                    }
                    $("#x-mark-icon").css("display", "block");
                    $("#UnsubscribeMsgInnerContainer").html(unem.FailedUnsubNotifAppMsg);
                    $("#UnsubscribeMsgContainer").css("display", "block");
                }
                else {
                    if (actionType == UnsubscribeNotificationAction.Append) {
                        $("#UnsubscribeMsgInnerContainer").html(unem.SuccessUnsubNotifAppMsg);
                        $("#check-mark-icon").css("display", "block");
                    }
                    else if (actionType == UnsubscribeNotificationAction.Get) {
                        if (unem.Data.CunbList.length > 0) {
                            $("#UnsubscribeMsgInnerContainer").html(unem.SuccessUnsubNotifAppMsg);
                            $("#check-mark-icon").css("display", "block");
                        }
                        else {
                            $("#UnsubscribeEmailsButtonCon").css("display", "block");
                        }
                    }
                }
                $("#UnsubscribeMsgContainer").css("display", "block");
                $("#UnsubscribeNotificationAppLoading").css("display", "none");
            };
            UnsubscribeNotificationEmails.prototype.render = function () {
                var me = this;
                if (this.Unem.ValidUnsubscribeCriterias) {
                    this.Unem.getUnsubscribeUser(me.displayUnsubscriberMsg);
                }
                else {
                    $("#UnsubscribeNotificationAppLoading").css("display", "none");
                    $("#UnsubscribeMsgContainer").css("display", "block");
                    $("#x-mark-icon").css("display", "block");
                }
            };
            return UnsubscribeNotificationEmails;
        }(WebPage));
        Pages.UnsubscribeNotificationEmails = UnsubscribeNotificationEmails;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=UnsubscribeNotificationEmails.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Desktop;
(function (Desktop) {
    var Pages;
    (function (Pages) {
        var WhyGetAccount = /** @class */ (function (_super) {
            __extends(WhyGetAccount, _super);
            function WhyGetAccount(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            WhyGetAccount.prototype.loadModel = function (model) { };
            WhyGetAccount.prototype.render = function () {
                if (ApplicationState.UserIsSignedIn) {
                    $("#btnWhyGetAccountSignUp").text(Translation.get("GetNotifications2"));
                    $("#benefitsSection6").hide();
                }
            };
            WhyGetAccount.prototype.registerEventHandlers = function () {
                $(".hme_youtubeVideo").click(function () {
                    var options = {};
                    var vars = {};
                    options.width = 500;
                    options.height = 280;
                    options.videoId = this.id;
                    vars.modestbranding = 1;
                    vars.theme = 'light';
                    vars.showinfo = 0;
                    vars.rel = 0;
                    vars.enablejsapi = 1;
                    vars.autoplay = 1;
                    options.playerVars = vars;
                    var player = new YT.Player(this.id, options);
                });
                $("#btnWhyGetAccountSignUp, #btnWhyGetAccountFtrSignUp").click(function () {
                    if (ApplicationState.UserIsSignedIn) {
                        Core.redirectTo(RouteHelper.getURL("my-account") + '#section=Notifications');
                    }
                    else {
                        SessionStorage.PostLoginRedirect.save("index");
                        Gigya.SignInPopup();
                    }
                    return;
                });
            };
            return WhyGetAccount;
        }(WebPage));
        Pages.WhyGetAccount = WhyGetAccount;
    })(Pages = Desktop.Pages || (Desktop.Pages = {}));
})(Desktop || (Desktop = {}));
//# sourceMappingURL=WhyGetAccount.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var AuthorPage = /** @class */ (function (_super) {
        __extends(AuthorPage, _super);
        function AuthorPage(model, controlId, blogInError, errorCtrlId, blogMainContainerId) {
            var _this = _super.call(this, model, controlId) || this;
            _this.BlogInError = false;
            _this.BlogInError = blogInError;
            _this.BlogMainContainerId = blogMainContainerId;
            _this.ErrorCtrlId = errorCtrlId;
            _this.init();
            return _this;
        }
        AuthorPage.prototype.onError = function (errorMsg) {
            Logging.Error(errorMsg);
        };
        AuthorPage.prototype.loadModel = function (model) { };
        AuthorPage.prototype.render = function () {
            AuthorPage.AuthorPageLoaded.Fire({ loaded: true });
            if (this.BlogInError) {
                $("#" + this.ErrorCtrlId).show();
                $("#" + this.BlogMainContainerId).hide();
            }
        };
        AuthorPage.prototype.registerEventHandlers = function () {
        };
        AuthorPage.AuthorPageLoaded = new RealtorEvent("AuthorPageLoaded");
        return AuthorPage;
    }(WebPage));
    Pages.AuthorPage = AuthorPage;
})(Pages || (Pages = {}));
//# sourceMappingURL=AuthorPage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var CategoryArticle = /** @class */ (function (_super) {
        __extends(CategoryArticle, _super);
        function CategoryArticle(model, controlId, blogInError, errorCtrlId, blogMainContainerId) {
            var _this = _super.call(this, model, controlId) || this;
            _this.BlogInError = false;
            _this.BlogInError = blogInError;
            _this.BlogMainContainerId = blogMainContainerId;
            _this.ErrorCtrlId = errorCtrlId;
            _this.init();
            return _this;
        }
        CategoryArticle.prototype.onError = function (errorMsg) {
            Logging.Error(errorMsg);
        };
        CategoryArticle.prototype.loadModel = function (model) { };
        CategoryArticle.prototype.render = function () {
            CategoryArticle.CatPageLoaded.Fire({ loaded: true });
            if (this.BlogInError) {
                $("#" + this.ErrorCtrlId).show();
                $("#" + this.BlogMainContainerId).hide();
            }
        };
        CategoryArticle.prototype.registerEventHandlers = function () {
        };
        CategoryArticle.CatPageLoaded = new RealtorEvent("CatPageLoaded");
        return CategoryArticle;
    }(WebPage));
    Pages.CategoryArticle = CategoryArticle;
})(Pages || (Pages = {}));
//# sourceMappingURL=CategoryArticle.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var ContributorsPage = /** @class */ (function (_super) {
        __extends(ContributorsPage, _super);
        function ContributorsPage(model, controlId, blogInError, errorCtrlId, blogMainContainerId) {
            var _this = _super.call(this, model, controlId) || this;
            _this.BlogInError = false;
            _this.BlogInError = blogInError;
            _this.BlogMainContainerId = blogMainContainerId;
            _this.ErrorCtrlId = errorCtrlId;
            _this.init();
            return _this;
        }
        ContributorsPage.prototype.onError = function (errorMsg) {
            Logging.Error(errorMsg);
        };
        ContributorsPage.prototype.loadModel = function (model) { };
        ContributorsPage.prototype.render = function () {
            ContributorsPage.ContPageLoaded.Fire({ loaded: true });
            this.equalizeHeightColumns($(".blogAuthorBlock"));
            if (this.BlogInError) {
                $("#" + this.ErrorCtrlId).show();
                $("#" + this.BlogMainContainerId).hide();
            }
        };
        //Make all the author block to be the same height
        ContributorsPage.prototype.equalizeHeightColumns = function (classElements) {
            //Find the highest author block column
            var blocks = $(classElements);
            var highestBlockValue = 0;
            for (var x = 0; x < blocks.length; x++) {
                var blockHeight = blocks[x].clientHeight;
                if (blockHeight > highestBlockValue) {
                    highestBlockValue = blockHeight;
                }
            }
            for (var x = 0; x < blocks.length; x++) {
                $(blocks[x]).height(highestBlockValue);
            }
        };
        ContributorsPage.prototype.registerEventHandlers = function () {
        };
        ContributorsPage.ContPageLoaded = new RealtorEvent("ContPageLoaded");
        return ContributorsPage;
    }(WebPage));
    Pages.ContributorsPage = ContributorsPage;
})(Pages || (Pages = {}));
//# sourceMappingURL=ContributorsPage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var PostPageArticle = /** @class */ (function (_super) {
        __extends(PostPageArticle, _super);
        function PostPageArticle(model, controlId, blogInError, errorCtrlId, blogMainContainerId) {
            var _this = _super.call(this, model, controlId) || this;
            _this.BlogInError = false;
            _this.BlogInError = blogInError;
            _this.BlogMainContainerId = blogMainContainerId;
            _this.ErrorCtrlId = errorCtrlId;
            _this.init();
            return _this;
        }
        PostPageArticle.prototype.loadModel = function (model) { };
        PostPageArticle.prototype.render = function () {
            PostPageArticle.postPageLoaded.Fire({ loaded: true });
            if (this.BlogInError) {
                $("#" + this.ErrorCtrlId).show();
                $("#" + this.BlogMainContainerId).hide();
            }
        };
        PostPageArticle.prototype.onError = function (errorMsg) {
            Logging.Error(errorMsg);
        };
        PostPageArticle.prototype.registerEventHandlers = function () {
            var me = this;
            Events.Listen(JSException.windowError, function (e) {
                var exception = e.detail;
                //$("#" + me.BlogMainContainerId).hide();
                //$("#" + me.ErrorCtrlId).show();
                //Logging.Error(e.detail.ErrorMessage);
            });
        };
        PostPageArticle.postPageLoaded = new RealtorEvent("postPageLoaded");
        return PostPageArticle;
    }(WebPage));
    Pages.PostPageArticle = PostPageArticle;
})(Pages || (Pages = {}));
//# sourceMappingURL=PostPageArticle.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Pages;
(function (Pages) {
    var SearchPage = /** @class */ (function (_super) {
        __extends(SearchPage, _super);
        function SearchPage(model, controlId, blogInError, errorCtrlId, blogMainContainer) {
            var _this = _super.call(this, model, controlId) || this;
            _this.BlogInError = blogInError;
            _this.ErrorCtrlId = errorCtrlId;
            _this.init();
            return _this;
        }
        SearchPage.prototype.onError = function (errorMsg) {
            Logging.Error(errorMsg);
        };
        SearchPage.prototype.loadModel = function (model) { };
        SearchPage.prototype.render = function () {
            if (this.BlogInError) {
                $("#" + this.ErrorCtrlId).show();
                $("#" + this.BlogMainContainerId).hide();
            }
        };
        SearchPage.prototype.registerEventHandlers = function () {
        };
        return SearchPage;
    }(WebPage));
    Pages.SearchPage = SearchPage;
})(Pages || (Pages = {}));
//# sourceMappingURL=SearchPage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var GetCalendardArgs = /** @class */ (function () {
            function GetCalendardArgs() {
            }
            return GetCalendardArgs;
        }());
        Desktop.GetCalendardArgs = GetCalendardArgs;
        var AddToCalendar = /** @class */ (function (_super) {
            __extends(AddToCalendar, _super);
            //TimezoneOffset: string = "";
            //TimezoneOffsetRegular: string = "";
            //TimezoneOffsetDaylight: string = "";
            function AddToCalendar(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.ListingId = "";
                _this.isMultipleDates = false;
                _this.Title = "";
                _this.Description = "";
                _this.DescriptionRealtorURL = "";
                _this.DescriptionListingURL = "";
                _this.DescriptionNoHTML = "";
                _this.Location = "";
                _this.TimezoneId = "";
                _this.init();
                return _this;
            }
            AddToCalendar.prototype.loadModel = function (model) {
                this.ListingId = model.ListingId || "";
                this.Title = model.Title || "";
                this.Description = model.Description || "";
                this.DescriptionRealtorURL = $("#DescriptionRealtorURL").val();
                this.DescriptionListingURL = $("#DescriptionListingURL").val();
                this.DescriptionNoHTML = $("#DescriptionNoHTML").val();
                this.Location = model.Location || "";
                this.TimezoneId = model.TimezoneId || "";
                this.AnalyticsEvent = model.AnalyticsEvent;
                //this.TimezoneOffset = model.TimezoneOffset || "";
                //this.TimezoneOffsetRegular = model.TimezoneOffsetRegular || "";
                //this.TimezoneOffsetDaylight = model.TimezoneOffsetDaylight || "";
                this.isMultipleDates = $("#isMultipleDates").val().toLowerCase() == 'true' ? true : false;
            };
            AddToCalendar.prototype.registerEventHandlers = function () {
                var me = this;
                DropDown.loadSelect2($('#ddlPreferredDate'), {
                    tags: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon"
                });
                $('#ddlPreferredDate').change(function (e) {
                    var index = $("#ddlPreferredDate").prop('selectedIndex');
                    $("#ddlPreferredDateUTC").prop('selectedIndex', index);
                });
                $("#calendarGoogle").click(function () {
                    var baseUrl = "https://calendar.google.com/calendar/r/eventedit?";
                    //let baseUrl: string = "https://www.google.com/calendar/render?action=TEMPLATE&";
                    var title = "text=" + me.Title;
                    var description = "&details=" + me.Description;
                    var location = "&location=" + me.Location;
                    var dates = "&dates=";
                    if (me.isMultipleDates) {
                        dates = dates + $("#ddlPreferredDate").val();
                    }
                    else {
                        dates = dates + $('#' + me.clientId + "_hdnOpenHouseDate").val();
                    }
                    var dateSplit = dates.split("/");
                    var dateStartEnd = dateSplit[0] + "/" + dateSplit[1];
                    var timezone = "&ctz=" + me.TimezoneId;
                    var url = baseUrl + title + dateStartEnd + description + location + timezone;
                    var windowParams = "height=620,width=850,scrollbars=yes";
                    window.open(url, "_blank", windowParams);
                    Analytics.log(me.ListingId, me.AnalyticsEvent);
                });
                $("#calendarYahoo").click(function () {
                    var baseUrl = "https://calendar.yahoo.com/?v=60";
                    var title = "&title=" + me.Title;
                    var description = "&desc=" + me.DescriptionNoHTML;
                    var location = "&in_loc=" + me.Location;
                    var dates = "";
                    if (me.isMultipleDates) {
                        dates = $("#ddlPreferredDate").val();
                    }
                    else {
                        dates = dates + $('#' + me.clientId + "_hdnOpenHouseDate").val();
                    }
                    var dateSplit = dates.split("/");
                    var startTime = "&st=" + dateSplit[0];
                    var endTime = "&et=" + dateSplit[1];
                    var url = baseUrl + title + startTime + endTime + description + location;
                    var windowParams = "height=620,width=850,scrollbars=yes";
                    window.open(url, "_blank", windowParams);
                    Analytics.log(me.ListingId, me.AnalyticsEvent);
                });
                $("#calendarOutlookLive").click(function () {
                    var baseUrl = "https://outlook.office.com/owa/?path=/calendar/action/compose&rru=addevent";
                    var title = "&subject=" + me.Title;
                    var description = "&body=" + me.DescriptionNoHTML;
                    var location = "&location=" + me.Location;
                    var dates = "";
                    if (me.isMultipleDates) {
                        dates = $("#ddlPreferredDate").val();
                    }
                    else {
                        dates = $('#' + me.clientId + "_hdnOpenHouseDate").val();
                    }
                    var dateSplit = dates.split("/");
                    var Offset = dateSplit[5];
                    var startTime = "&startdt=" + dateSplit[6] + Offset;
                    var endTime = "&enddt=" + dateSplit[7] + Offset;
                    var url = baseUrl + title + startTime + endTime + description + location;
                    var windowParams = "height=620,width=850,scrollbars=yes";
                    window.open(url, "_blank", windowParams);
                    Analytics.log(me.ListingId, me.AnalyticsEvent);
                });
                $("#calendarApple, #calendarOutlook").click(function () {
                    var dates = "";
                    if (me.isMultipleDates) {
                        dates = $("#ddlPreferredDate").val();
                    }
                    else {
                        dates = $('#' + me.clientId + "_hdnOpenHouseDate").val();
                    }
                    var dateSplit = dates.split("/");
                    var startTime = dateSplit[0];
                    var endTime = dateSplit[1];
                    var TimezoneOffset = dateSplit[2];
                    var TimezoneOffsetRegular = dateSplit[3];
                    var TimezoneOffsetDaylight = dateSplit[4];
                    var argsCalendar = new GetCalendardArgs();
                    argsCalendar.dtStart = startTime;
                    argsCalendar.dtEnd = endTime;
                    argsCalendar.title = me.Title;
                    argsCalendar.description = me.DescriptionNoHTML;
                    argsCalendar.location = me.Location;
                    argsCalendar.timezoneId = me.TimezoneId;
                    argsCalendar.timezoneOffset = TimezoneOffset; //me.TimezoneOffset;
                    argsCalendar.timezoneOffsetRegular = TimezoneOffsetRegular; //me.TimezoneOffsetRegular;
                    argsCalendar.timezoneOffsetDaylight = TimezoneOffsetDaylight; //me.TimezoneOffsetDaylight;
                    Analytics.log(me.ListingId, me.AnalyticsEvent);
                    Actions.GetCalendarICS(argsCalendar, AddToCalendar.calendarHandler, function (request, textStatus, exception) {
                        showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                    });
                });
            };
            AddToCalendar.prototype.render = function () {
            };
            AddToCalendar.calendarHandler = function (response) {
                var reader = new FileReader();
                var blob = new Blob([response.d], { type: 'text/calendar' });
                reader.onload = function (e) {
                    // Edge/IE doesn't allow using a blob object directly as link href
                    // instead it is necessary to use msSaveOrOpenBlob
                    if (window.navigator && window.navigator.msSaveOrOpenBlob) {
                        window.navigator.msSaveOrOpenBlob(blob, 'calendar.ics');
                        return;
                    }
                    window.location.href = reader.result.toString();
                };
                reader.readAsDataURL(blob);
                setTimeout(function () {
                    hideLoadingBar();
                }, 350);
            };
            return AddToCalendar;
        }(WebPage));
        Desktop.AddToCalendar = AddToCalendar;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=AddToCalendar.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var BannerCarousel = /** @class */ (function (_super) {
            __extends(BannerCarousel, _super);
            function BannerCarousel(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            BannerCarousel.prototype.loadModel = function (model) {
            };
            BannerCarousel.prototype.registerEventHandlers = function () {
                var videoContainer = $($("#bannerCarouselVideo").outerHTML());
                $(".bannerCarousel > a").click(function (e) {
                    e.preventDefault();
                    var urlAction = $(this).attr("href");
                    var data_type_action = ActionType[$(this).attr("data-type-action")];
                    if (data_type_action == ActionType.Redirect) {
                        window.location.href = urlAction;
                    }
                    else if (data_type_action == ActionType.NewPage) {
                        window.open(urlAction, '_blank');
                    }
                    else if (data_type_action == ActionType.Modal) {
                        //Open a modal view container with a video using the URL
                        if (MultimediaModel.isEmbedableVideoUrl(urlAction)) {
                            var uid = "";
                            while (uid == "" || !isUniqueUIElement(uid)) {
                                uid = Utilities.GenerateUID();
                            }
                            var model = new ModalContentModel("VideoModal-" + uid, "", videoContainer);
                            model.CssClass = "VideoModalEnabled";
                            model.ButtonCloseID = "btnVideoCancel";
                            model.AfterOpen = function () {
                                var videoModel = new MultimediaModel(urlAction, "bannerCarouselVideo", VideoLoadingDisplay.Yes, VideoDisplay.VideoNoThumbnail, VideoLoadingType.LoadingNow);
                                videoModel.setContentOptions("", "videoThumbnailLoading", "videoThumbnail", "bannerCarouselVideo-upper-inner", "bannerCarouselVideo-inner-", "play_button");
                                MultimediaModel.virtualTourLoadEvent.Listen(function (arg) {
                                    if (arg.detail.loaded) {
                                        $("#bannerCarouselVideo").css("min-width", "");
                                        $("#bannerCarouselVideo").css("min-height", "");
                                    }
                                });
                                MultimediaModel.virtualTourAddVideoEvent.Listen(function (arg) {
                                    $("#" + arg.detail.model.VideoInnerContainerId).html(arg.detail.iframeHtmlToAppend);
                                });
                                videoModel.MultiManager.overwriteVideoAccessTypeProviders(VideoAccessType.BVD);
                                videoModel.LimitWidthVideoSize = true;
                                $("#bannerCarouselVideoContainer").remove(); //Remove the parent container to prevent DOM initializing issues
                                videoModel.StartEmbed();
                                $(".featherlight-content").addClass("VideoModeSpecialParam");
                            };
                            model.DisplayType = ModalDisplayTypes.Featherlight;
                            showModalContent(model);
                        }
                        else { //Simply open the link in a new tab page
                            window.open(urlAction, '_blank');
                        }
                    }
                    else { //Simply open the link in a new tab page
                        window.open(urlAction, '_blank');
                    }
                });
            };
            BannerCarousel.prototype.render = function () {
                var me = this;
                //--Detect if all the conditions are met to show the button on the banners-- %>
                var btnBanners = $(".bannerCarousel > a");
                for (var x = 0; x < btnBanners.length; x++) {
                    var btnBanner = $(btnBanners[x]);
                    //--Detect the presence of label for button-- %>
                    var labelbtn = Utilities.LimitWording(40, btnBanner.text().trim(), true);
                    btnBanner.text(labelbtn);
                    //--Detect the presence of action type on button-- %>
                    var btnActionType = btnBanner.attr('data-type-action');
                    //--Detect the presence of a link for the button-- %>
                    var btnLink = btnBanner.attr('href');
                    if (btnLink != "" && labelbtn == "") { //Has btn link, but not text? Make the whole thing a link.
                        btnBanner.removeClass(); //Remove all the classes
                        btnBanner.css({
                            'position': 'absolute',
                            'top': '0',
                            'bottom': '0',
                            'left': '0',
                            'right': '0'
                        });
                    }
                    else if (btnLink.length == 0 || btnActionType.length == 0 || labelbtn.length == 0) {
                        btnBanner.css('visibility', 'hidden');
                    }
                }
                Utilities.queueTask(function () {
                    me.Swiper = new Swiper('#bannerCarousel.swiper-container', {
                        pagination: { el: ".swiper-pagination", clickable: true },
                        autoHeight: true
                    });
                });
                //for (var i = 0; i < me.Swiper.bullets.length; i++) {
                //    let currentIndex: number = i;
                //    $(me.Swiper.bullets[i]).click(function () {
                //        me.Swiper.slideTo(currentIndex);
                //    });
                //}
            };
            return BannerCarousel;
        }(WebControl));
        Desktop.BannerCarousel = BannerCarousel;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=BannerCarousel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var BoardsListingWidget = /** @class */ (function (_super) {
            __extends(BoardsListingWidget, _super);
            function BoardsListingWidget(model, controlId, jsonBoardData) {
                var _this = _super.call(this, model, controlId) || this;
                _this.currentResults = null;
                _this.currentCriteria = null;
                _this.pagingChanged = false;
                _this.bwdi = JSON.parse(jsonBoardData);
                _this.init();
                return _this;
            }
            BoardsListingWidget.prototype.loadModel = function (model) { };
            /**Function displaying the number of filter changed items in the search filter
            * @return {void}
            * */
            BoardsListingWidget.prototype.refreshNbOfSearchFilterElemChanged = function () {
                var numFilters = this.getNbOfSearchFilterElemChanged();
                $('#moreFiltersNum').text(numFilters.toString());
                $('#moreFiltersNum').toggle(numFilters != 0);
            };
            /**Function displaying the number of filter changed items value but not their default value
            * @return {number} The number of selected elements
            * */
            BoardsListingWidget.prototype.getNbOfSearchFilterElemChanged = function () {
                var returnValue = 0;
                var activeValueFilterHashKeys = [];
                var activeValueFilters = $('.boardMoreFilterCon.hasValue [data-hashkey]').not("#ddlPropertyTypeRes, #ddlPropertyTypeCom");
                for (var i = 0; i < activeValueFilters.length; i++) {
                    if ($(activeValueFilters[i]).siblings(".select2").is(":visible")) {
                        var hashKey = $(activeValueFilters[i]).attr("data-hashkey");
                        //activeValueFilterHashKeys.push(hashKey);
                    }
                }
                var activeFilters = $('.boardMoreFilterCon.active [data-hashkey]').not("#ddlPropertyTypeRes, #ddlPropertyTypeCom");
                for (var i = 0; i < activeFilters.length; i++) {
                    var hashKey = $(activeFilters[i]).attr("data-hashkey");
                    if (activeValueFilterHashKeys.indexOf(hashKey) == -1) {
                        var value = WebControl.getControlValue(activeFilters[i], false);
                        var defaultValue = $(activeFilters[i]).attr("data-default");
                        if (value != null && value != defaultValue) {
                            returnValue++;
                        }
                    }
                }
                return returnValue;
            };
            /**Function that sets the control values using a criteria object passed
                * @param {object} paramObj
                * @param {JQuery} control
                * @param {boolean} resetOthers
                * @return {void}
            * */
            BoardsListingWidget.prototype.setControlsValsFromParamObject = function (paramObj, control, resetOthers) {
                if (resetOthers === void 0) { resetOthers = true; }
                var me = this;
                if (resetOthers) {
                    Binding.setControlValsFromObjectResetOthers(paramObj, control);
                }
                else {
                    Binding.setControlValsFromObject(paramObj, control);
                }
            };
            BoardsListingWidget.prototype.registerEventHandlers = function () {
                var me = this;
                //Message event for the main site to pass information to its iframe
                var Message = function (event) {
                    if (event != null && event.data == BoardListingWidgetEvents.BoardListingMainDocumentClick) {
                        //Close anything that can be opened on the screen for selection
                        $("#searchFilterContainer").addClass('hide');
                        $('select').select2('close');
                    }
                };
                window.addEventListener("message", Message, false);
                //Handle the min/max price value to be properly specified
                $('#ddlMinPrice').on("change", function (e) {
                    minValueChanged($('#ddlMaxPrice'), $('#ddlMinPrice'));
                });
                $('#ddlMaxPrice').on("change", function (e) {
                    maxValueChanged($('#ddlMinPrice'), $('#ddlMaxPrice'));
                });
                //Manage the manual value selection by the user
                $('#searchFilterInnerCon select').on("change select2:select", function (evt) {
                    $(this).parent(".boardMoreFilterCon").toggleClass("hasValue", ($(this).val() || "") != "");
                });
                //Reset BTN logic for the search filter
                $("#moreFiltersResetBtn").click(function (e) {
                    resetInputControls($("#searchFilterInnerCon"));
                    setTimeout(function () {
                        me.refreshNbOfSearchFilterElemChanged();
                    }, 1);
                });
                //Manage the [size change] communicaion to the parent iframe container
                $(window).resize(function (e) {
                    //Send information back to iframe about the height of widget
                    var postMsgData = {
                        data: { iframeHeight: $("#listCon").height() },
                        type: BoardListingWidgetEvents.BoardListingHeightUpdate
                    };
                    window.parent.postMessage(JSON.stringify(postMsgData), "*");
                });
                //Manage the display of the menu filter using global mousedown event
                $(document).mousedown(function (e) {
                    //hide the menu if no clicks are in the menu
                    if ($(e.target).parents("#listViewHeader_right").length == 0) {
                        $("#searchFilterContainer").addClass('hide');
                        //Reset the controls also with their nb filter element selected
                        me.setControlsValsFromParamObject(me.currentCriteria, $('#searchFilterInnerCon, #txtPropertyTypeGroupID'));
                        me.refreshNbOfSearchFilterElemChanged();
                    }
                });
                //Manage the display of the menu filter with the BTN filter
                $("#searchMoreBtn").click(function (e) {
                    $("#searchFilterContainer").toggleClass('hide');
                });
                //Sorting options changed
                $('#ddlListResultsSort').change(function () {
                    $('#listInnerCon').addClass("loadingOut");
                    $('#txtSort').val($(this).val());
                    $('#txtPage').val("1"); //Back to page 1
                    //TODO- change it to be in a iframe model to detect desktop/mobile controls this for temporary desktop mode forcing
                    if (me.bwdi.ForceDesktop) {
                        Cookie.MobileRedirectionChoice.save("mainsite");
                    }
                    APIProxy.propertySearch(me.getCurrentCriteria(), me.searchResultsHandler, me, null, true, "BoardListingSearch");
                });
                //Hide the search filter when sort is open
                $('#ddlListResultsSort').on("select2:open", function (e) {
                    $("#searchFilterContainer").addClass('hide');
                });
                //Add Select design and functionalities to the search filter elements
                DropDown.loadSelect2($('#ddlTransactionTypeRes, #ddlPropertyTypeRes, #ddlLocationCities, #ddlListResultsSort'), {
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon"
                });
                DropDown.loadSelect2($('#ddlMaxPrice, #ddlMinPrice'), {
                    allowClear: false,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    tags: true,
                    maximumInputLength: 8,
                    createTag: function (params) {
                        // Don't offset to create a tag if there is no @ symbol
                        if (params.term.match(/[^\d]/)) {
                            // Return null to disable tag creation
                            return null;
                        }
                        return {
                            id: params.term,
                            text: Number(params.term).toLocaleString(ApplicationState.LanguageAttribute)
                        };
                    }
                });
                //Execute a search of listings for the current board using selected search filters
                $("#moreFiltersSearchBtn").click(function (e) {
                    //Show the loading bar
                    $('#listInnerCon').addClass("loadingOut");
                    //Reset the paging value if has not changed to detect first page
                    if (!me.pagingChanged) {
                        $('#txtPage').val("1");
                    }
                    //TODO- change it to be in a iframe model to detect desktop/mobile controls this for temporary desktop mode forcing
                    if (me.bwdi.ForceDesktop) {
                        Cookie.MobileRedirectionChoice.save("mainsite");
                    }
                    APIProxy.propertySearch(me.getCurrentCriteria(), me.searchResultsHandler, me, null, true, "BoardListingSearch");
                    $("#searchFilterContainer").addClass('hide');
                });
                //Upon cancel, remove the searchfilter from display, set the controls to previous search criterias, refresh nb elem select
                $("#moreFiltersCancelBtn").click(function (e) {
                    me.setControlsValsFromParamObject(me.currentCriteria, $('#searchFilterInnerCon, #txtPropertyTypeGroupID'));
                    me.refreshNbOfSearchFilterElemChanged();
                    $("#searchFilterContainer").addClass('hide');
                });
                //Paging change events firing a search for the requested page
                ApplicationState.Current.Controls["ListViewPagination_Bottom"].pageChange.Listen(function (arg) {
                    var pageNum = arg.detail.args.page.toString(); //Current Page
                    $('#txtPage').val(pageNum); //Back to page 1
                    me.pagingChanged = true; //Note paging change to determine display of the paging
                    $("#moreFiltersSearchBtn").click(); //Fire the board search listings...
                    //Scolling for the page and for the iframe
                    $("html,body").animate({ scrollTop: $('#listCon').offset().top }, 150);
                    if (window.parent != null) {
                        //$(window.parent.document).find("html,body").animate({ scrollTop: $($(window.parent.document).find("iframe")[0]).offset().top - 65 }, 150);
                        var postMsgData = {
                            data: $("#boardListingWidgetForm").offset().top - 65,
                            type: BoardListingWidgetEvents.BoardListingScrollToPosition
                        };
                        window.parent.postMessage(JSON.stringify(postMsgData), "*");
                    }
                });
            };
            BoardsListingWidget.prototype.render = function () {
                var me = this;
                //Set the controls to be active by default
                $('.boardMoreFilterCon').each(function () {
                    $(this).toggleClass("active", true);
                });
                $('#listInnerCon').addClass("loadingOut");
                //Fire a board search listings...
                //TODO- change it to be in a iframe model to detect desktop/mobile controls this for temporary desktop mode forcing
                if (me.bwdi.ForceDesktop) {
                    Cookie.MobileRedirectionChoice.save("mainsite");
                }
                APIProxy.propertySearch(me.getCurrentCriteria(), me.searchResultsHandler, me, null, true, "BoardListingSearch");
            };
            /**Function handling the listing cards display
            * @param {Array<ListingCardModel>} cards
            * @param {PublicContracts.Paging} pagingInfo
            * @param {boolean} isInitialSEOPage
            * @return {void}
            * */
            BoardsListingWidget.prototype.updateListView = function (cards, pagingInfo, isInitialSEOPage) {
                if (isInitialSEOPage === void 0) { isInitialSEOPage = false; }
                var me = this;
                $('#listInnerCon').removeClass("loadingOut");
                if (cards.length > 0) {
                    TemplateFetcher.fetchListingCard(function (response) {
                        var html = "";
                        for (var i = 0; i < cards.length; i++) {
                            html += '<div class="cardCon">' + TemplateBinding.fillTemplateValues($(response.ControlHTML), cards[i]) + '</div>';
                        }
                        $('#listInnerCon').html(html);
                        updateLoadedContent($('#listInnerCon'), true, { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                        if (ApplicationConfig.EnableDesktopMapListingDetailsLinksOpenInNewTab) {
                            Utilities.Desktop.addBlankTargetToListingLinks($('#listInnerCon'));
                        }
                        //Send information back to iframe about the height of the widget
                        setTimeout(function () {
                            var postMsgData = {
                                data: { iframeHeight: $("#listCon").height() },
                                type: BoardListingWidgetEvents.BoardListingHeightUpdate
                            };
                            window.parent.postMessage(JSON.stringify(postMsgData), "*");
                        }, 1);
                        Cookie.MobileRedirectionChoice.delete(); //We dont want the desktop forcing to persist
                    });
                    ApplicationState.Current.Controls["ListViewPagination_Bottom"].refreshUI(pagingInfo);
                }
                else {
                    $('#listInnerCon').html("<div id='NoResultsListViewMsg'>" + Translation.get("NoResultsRefineCriteria") + "</div>");
                    $('#listViewSortCon, #pageListViewPagination').hide();
                    //Send information back to iframe about the height of the widget
                    setTimeout(function () {
                        var postMsgData = {
                            data: { iframeHeight: $("#listCon").height() },
                            type: BoardListingWidgetEvents.BoardListingHeightUpdate
                        };
                        window.parent.postMessage(JSON.stringify(postMsgData), "*");
                    }, 1);
                    Cookie.MobileRedirectionChoice.delete(); //We dont want the desktop forcing to persist
                }
            };
            /**Function updating the UI affected by search listing results
            * @param {APIReturnValues.ListingSearchResults} results
            * @return {void}
            * */
            BoardsListingWidget.prototype.updateUIWithResults = function (results) {
                //The number of listings founds
                $('#listViewResultsNumVal').text(results.Paging.TotalRecords.toString());
            };
            /**Function handling the search result returned when firing a board listing search
            * @param {APIReturnValues.ListingSearchResults} results
            * @param {BoardsListingWidget} me
            * @return {void}
            * */
            BoardsListingWidget.prototype.searchResultsHandler = function (results, me) {
                me.refreshNbOfSearchFilterElemChanged();
                //Listing cards display 
                var cardsModels = [];
                if (results.Paging.TotalRecords > 0) {
                    for (var _i = 0, _a = results.Results; _i < _a.length; _i++) {
                        var val = _a[_i];
                        cardsModels.push(new ListingCardModel(val));
                    }
                }
                me.updateListView(cardsModels, results.Paging);
                //Update UI affected by the results
                me.updateUIWithResults(results);
                //Manage the paging control display
                var criteria = me.getCurrentCriteria();
                if (results.Paging.TotalRecords > 0 && (me.pagingChanged || criteria.CurrentPage == null)) {
                    $('.showOnResults').removeClass("hide");
                    $('.showOnNoResults').addClass("hide");
                }
                else {
                    $('.showOnResults').addClass("hide");
                    $('.showOnNoResults').removeClass("hide");
                }
                //Ungraying out list now that the search is over
                $('#listInnerCon').removeClass("loadingOut");
                $("#loadingInnerConSpinner").hide();
                me.currentResults = results; //Save the results
                me.pagingChanged = false; //Reset paging change
                me.currentCriteria = criteria; //Save current criterias
            };
            /**
             * Returns the current search criteria object fetched via the bound controls
             * @param { includeHash: boolean } params
             */
            BoardsListingWidget.prototype.getCurrentCriteria = function (params) {
                var me = this;
                var returnValue = new APICriteria.PropertySearchCriteria();
                returnValue = WebControl.getValuesFromControlsAsObject(['hiddenFields', 'listViewSortCon'], false);
                var visibleCriteria = WebControl.getValuesFromControlsAsObject(['searchFilterInnerCon', 'listViewResultsSortCon'], false);
                $.extend(returnValue, visibleCriteria); //merge
                //Set the default search listing with the board id passed
                returnValue.UploadedBy = me.bwdi.BoardId.toString();
                //Set board listings search to be for sale only
                returnValue.TransactionTypeID = TransactionType.Sale.toString();
                //Select open house date by default as per design
                var currentDate = new Date();
                var next_week = new Date();
                next_week.setDate(next_week.getDate() + 7); // eg. 07/04/2017
                returnValue.OpenHouseStartDate = dateToString(currentDate);
                returnValue.OpenHouseEndDate = dateToString(next_week);
                returnValue.OpenHouse = "1";
                //Propertysearch type rule for condo
                if (returnValue.PropertySearchTypeId == "3") { //Condo			
                    returnValue.OwnershipTypeGroupId = "2"; //Condo/Strata -- Not in API            
                }
                //SREQ_0235413 retiring some sorts
                if (returnValue.Sort && Utilities.isExpiredSortByValue(returnValue.Sort)) {
                    returnValue.Sort = "6-D"; //Date posted new to old
                }
                return returnValue;
            };
            return BoardsListingWidget;
        }(WebControl));
        Desktop.BoardsListingWidget = BoardsListingWidget;
        var BoardWidgetDetailInfo = /** @class */ (function () {
            function BoardWidgetDetailInfo() {
            }
            return BoardWidgetDetailInfo;
        }());
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=BoardsListingWidget.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Calculator = /** @class */ (function (_super) {
            __extends(Calculator, _super);
            function Calculator(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Calculator.prototype.loadModel = function (model) {
            };
            Calculator.prototype.render = function () {
                var me = this;
                // me.LoadRateHub();
                Controls.Desktop.TabHighlighter.insert($('.tabSection'), function () { me.showCurrentTab(true); });
            };
            Calculator.prototype.registerEventHandlers = function () {
                var me = this;
                var localModel = this.model;
                $('.CalculatorTab').click(function () {
                    var index = $(".CalculatorTab").index(this);
                    me.menuslider(index);
                    //let tabname: string = this.id;
                    //$('#tabHighlighter').css("left", (index * 100).toString() + "%");        
                    //$('.CalculatorTab').removeClass("active");
                    //$(this).addClass('active');
                });
                $("#MortgageTab").click(function () {
                    location.hash = "v=payment";
                    me.showCurrentTab();
                });
                $("#LandTransferTab").click(function () {
                    location.hash = "v=landtransfertax";
                    me.showCurrentTab();
                });
                $("#AffordabilityTab").click(function () {
                    location.hash = "v=affordability";
                    me.showCurrentTab();
                });
                var receiveMessage = function (event) {
                    //if (event.origin == location.origin) { //allow-same-origin not set on iframe so this won't work
                    if (event.data == "PaymentCalcLoaded") {
                        $('#PaymentCalcLoadingCon').hide();
                        $('#PaymentCalculatorWidgetIFrame').css("opacity", "1");
                    }
                    else if (event.data == "PaymentCalcWidgetError") {
                        $('#PaymentCalculatorWidgetIFrame').text("Loading Error");
                    }
                    else if (event.data == "PaymentCalcWidgetLoading") {
                        $('#PaymentCalculatorWidgetIFrame').css("opacity", "0");
                        $('#PaymentCalculatorWidgetIFrame').show();
                    }
                    else if (event.data == "AffordabilityCalcLoaded") {
                        $('#AffordabilityCalcLoadingCon').hide();
                        $('#AffordabilityCalculatorWidgetIFrame').css("opacity", "1");
                    }
                    else if (event.data == "AffordabilityCalcLoading") {
                        $('#AffordabilityCalculatorWidgetIFrame').css("opacity", "0");
                        $('#AffordabilityCalculatorWidgetIFrame').show();
                    }
                    else if (event.data == "AffordabilityCalcWidgetError") {
                        $('#AffordabilityCalculatorWidgetIFrame').text("Loading Error");
                    }
                    else if (event.data == "LandTransferTaxCalcLoaded") {
                        $('#LandTransferTaxCalcLoadingCon').hide();
                        $('#LandTransferTaxCalculatorWidgetIFrame').css("opacity", "1");
                    }
                    else if (event.data == "LandTransferTaxCalcWidgetLoading") {
                        $('#LandTransferTaxCalculatorWidgetIFrame').css("opacity", "0");
                        $('#LandTransferTaxCalculatorWidgetIFrame').show();
                    }
                    else if (event.data == "LandTransferTaxCalcWidgetError") {
                        $('#LandTransferTaxCalculatorWidgetIFrame').text("Loading Error");
                    }
                    //}
                };
                window.addEventListener("message", receiveMessage, false);
            };
            Calculator.prototype.loadIframeResizeScript = function (iframeId) {
                var iframeresize;
                if (!document.getElementById("iframeResizeScript")) {
                    var script = Utilities.createScriptTag("/scripts/iframeResizer.min.js", "iframeResizeScript");
                    script.onload = function () {
                        iframeresize = iFrameResize({
                            log: false, checkOrigin: false, heightCalculationMethod: "taggedElement"
                        }, '#' + iframeId);
                    };
                    document.head.appendChild(script);
                }
                else {
                    iframeresize = iFrameResize({ log: false, checkOrigin: false }, '#' + iframeId);
                }
            };
            Calculator.prototype.showCurrentTab = function (bindFromHash) {
                if (bindFromHash === void 0) { bindFromHash = false; }
                var view = URLHash.get("v", "").toLowerCase();
                var me = this;
                if (view == "payment" || view == "") {
                    document.title = Translation.get("PageTitleMortgageCalculator");
                    $('#Mortgagetax').show();
                    $("#LandTransfertax").hide();
                    $("#Affordabilitytax").hide();
                    me.menuslider(0);
                    var iframe = $('#PaymentCalculatorWidgetIFrame');
                    if (!iframe.attr("loaded")) {
                        var frame = iframe[0];
                        frame.contentWindow.location.replace(iframe.data("src"));
                        iframe.attr("loaded", "true");
                        me.loadIframeResizeScript("PaymentCalculatorWidgetIFrame");
                    }
                }
                else if (view == "landtransfertax") {
                    document.title = Translation.get("PageTitleLandTransferTaxCalculator");
                    $('#LandTransfertax').show();
                    $("#Mortgagetax").hide();
                    $("#Affordabilitytax").hide();
                    me.menuslider(1);
                    var iframe = $('#LandTransferTaxCalculatorWidgetIFrame');
                    if (!iframe.attr("loaded")) {
                        var frame = iframe[0];
                        frame.contentWindow.location.replace(iframe.data("src"));
                        iframe.attr("loaded", "true");
                        me.loadIframeResizeScript("LandTransferTaxCalculatorWidgetIFrame");
                    }
                }
                else if (view == "affordability") {
                    document.title = Translation.get("PageTitleMortgageAffordabilityCalculator");
                    $('#Affordabilitytax').show();
                    $("#Mortgagetax").hide();
                    $("#LandTransfertax").hide();
                    me.menuslider(2);
                    var iframe = $('#AffordabilityCalculatorWidgetIFrame');
                    if (!iframe.attr("loaded")) {
                        var frame = iframe[0];
                        frame.contentWindow.location.replace(iframe.data("src"));
                        iframe.attr("loaded", "true");
                        me.loadIframeResizeScript("AffordabilityCalculatorWidgetIFrame");
                    }
                }
            };
            Calculator.prototype.menuslider = function (tabindex) {
                $('.tabHighlighter').css("left", (tabindex * 100).toString() + "%");
                $('.CalculatorTab').removeClass("active");
                $(this).addClass('active');
            };
            Calculator.rateHubJSLoaded = "rateHubJSLoaded";
            return Calculator;
        }(WebControl));
        Desktop.Calculator = Calculator;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Calculator.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var ConfirmationDialog = /** @class */ (function (_super) {
            __extends(ConfirmationDialog, _super);
            function ConfirmationDialog(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            ConfirmationDialog.prototype.loadModel = function (model) {
                this.model = model;
            };
            ConfirmationDialog.prototype.render = function () {
                var me = this;
                if (me.model.InitiallyHiddenDiag) {
                    $('#' + me.model.ID).hide();
                }
                me.show_dialog();
                Events.Fire(Controls.Desktop.ConfirmationDialog.ConfirmationDialogOpened, new DialogOpenedEventArgs(this.model.ID, this.ForceCloseDialog));
            };
            ConfirmationDialog.prototype.registerEventHandlers = function () {
                var me = this;
                $('#' + this.clientId + ' #' + this.model.ButtonNegativeID).click(function (e) {
                    if (me.model.ButtonNegativeOnClick != null) {
                        me.model.ButtonNegativeOnClick(e, me);
                    }
                });
                $('#' + this.clientId + ' #' + this.model.ButtonPositiveID).click(function (e) {
                    if (me.model.ButtonPositiveOnClick != null) {
                        me.model.ButtonPositiveOnClick(e, me);
                    }
                });
                $('#' + this.clientId + ' #' + this.model.ButtonCloseID).click(function () {
                    if (me.model.ButtonCloseOnClick != null) {
                        me.model.ButtonCloseOnClick(me);
                    }
                    me.Featherlight.close();
                });
            };
            ConfirmationDialog.prototype.show_dialog = function () {
                var me = this;
                me.Featherlight = $.featherlight($('#' + me.model.ID), {
                    closeIcon: null,
                    closeOnClick: true,
                    type: 'html',
                    variant: 'confirmation ' + (me.model.FooterContent ? "footer" : ""),
                    openSpeed: 50,
                    closeSpeed: 150,
                    openTrigger: me.model.OpenTrigger,
                    closeTrigger: me.model.CloseTrigger,
                    beforeOpen: function (event) {
                        if (me.model.BeforeOpen != null) {
                            me.model.BeforeOpen(me);
                        }
                    },
                    beforeClose: function (event) {
                        if (me.model.BeforeClose != null) {
                            me.model.BeforeClose(me);
                        }
                        $('#' + me.model.ID).addClass('ConfirmationOverlayHidden');
                    },
                    afterOpen: function (event) {
                        window.setTimeout(function () {
                            $('#' + me.model.ID).removeClass('ConfirmationOverlayHidden');
                            //Make sure you focus after modal is displayed because it triggers content jumping otherwise US-171300
                            if (me.model.SetFocusOnLoad) {
                                SetFocusOnFirstInput($('#' + me.model.ID));
                            }
                        }, 100);
                        if (me.model.AfterOpen != null) {
                            me.model.AfterOpen(me);
                        }
                    },
                    afterClose: function (event) {
                        if (me.model.AfterClose != null) {
                            me.model.AfterClose(me);
                        }
                        Events.Fire(Controls.Desktop.ConfirmationDialog.ConfirmationDialogClosed, new DialogClosedEventArgs(me.model.ID));
                        window.setTimeout(function () {
                            $('#' + me.model.ID + '_con').remove();
                        }, 200);
                    }
                });
                me.ForceCloseDialog = function () {
                    me.Featherlight.close();
                    $('#' + me.model.ID).addClass('ConfirmationOverlayHidden');
                    window.setTimeout(function () {
                        $('#' + me.model.ID + '_con').remove();
                    }, 200);
                };
            };
            ConfirmationDialog.ConfirmationDialogOpened = "ConfirmationDialogOpened";
            ConfirmationDialog.ConfirmationDialogClosed = "ConfirmationDialogClosed";
            ConfirmationDialog.ConfirmationDialogWait = "ConfirmationDialogWait";
            ConfirmationDialog.ConfirmationDialoglimitReached = "ConfirmationDialoglimitReached";
            return ConfirmationDialog;
        }(WebControl));
        Desktop.ConfirmationDialog = ConfirmationDialog;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=ConfirmationDialog.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var CovidMessage = /** @class */ (function (_super) {
            __extends(CovidMessage, _super);
            function CovidMessage(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            CovidMessage.prototype.loadModel = function (model) { };
            CovidMessage.prototype.registerEventHandlers = function () {
                $('#closeCovidMessageCon').click(function () {
                    Cookie.COVID.save("1");
                    $('#CovidMsgCon').remove();
                });
            };
            CovidMessage.prototype.render = function () { };
            return CovidMessage;
        }(WebControl));
        Desktop.CovidMessage = CovidMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=CovidMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var CovidOpenHouseBanner = /** @class */ (function (_super) {
            __extends(CovidOpenHouseBanner, _super);
            function CovidOpenHouseBanner(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            CovidOpenHouseBanner.prototype.loadModel = function (model) {
            };
            CovidOpenHouseBanner.prototype.registerEventHandlers = function () {
            };
            CovidOpenHouseBanner.prototype.render = function () {
                $("#Modal-covidOpenHouseBanner .covidOpenHouseBannerCon").removeClass("hide");
            };
            return CovidOpenHouseBanner;
        }(WebControl));
        Desktop.CovidOpenHouseBanner = CovidOpenHouseBanner;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=CovidOpenHouseBanner.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var CurrencyCtrl = /** @class */ (function (_super) {
            __extends(CurrencyCtrl, _super);
            function CurrencyCtrl(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            CurrencyCtrl.prototype.loadModel = function (model) {
            };
            CurrencyCtrl.prototype.registerEventHandlers = function () {
                //DropDown.loadSelect2($('#ddlCurrencySelect'), {
                //    closeOnSelect: true,
                //    containerCssClass: "homeFilter",
                //    dropdownCssClass: "homeFilterItemsCon"
                //});
                //$("#ddlCurrencySelect option").filter(function (index) { return $(this).val() === ApplicationState.CurrencyValue; }).attr('selected', 'selected').trigger('change');
                //$("#btnUpdateCurrencyPref").click(function () {
                //    let currency: string = $("#ddlCurrencySelect").val();
                //    Cookie.Currency.save(currency);
                //    ApplicationState.CurrencyID = CurrencyType[currency];
                //    ApplicationState.CurrencyValue = currency;
                //    CurrencyCtrl.GetCurrencyRate();
                //    Events.Fire(CurrencyCtrl.currencyUpdated, { currency: currency });
                //});
                $("#headerCurrencyDropdown .m_hdr_dropdown_menu").click(function () {
                    var currency = $(this).attr('id');
                    CurrencyCtrl.SetCurrency(currency);
                });
            };
            CurrencyCtrl.prototype.render = function () {
            };
            CurrencyCtrl.SetCurrency = function (currency, callBackArgs) {
                Cookie.Currency.save(currency);
                ApplicationState.CurrencyID = CurrencyType[currency];
                ApplicationState.CurrencyValue = currency;
                ApplicationState.CurrencyName = Utilities.CurrencyToDisplayString(currency, false);
                CurrencyCtrl.SetCurrencyHeaderLabel(ApplicationState.CurrencyName);
                Utilities.updatePriceLabels(currency);
                CurrencyCtrl.GetCurrencyRate(callBackArgs);
            };
            CurrencyCtrl.SetCurrencyHeaderLabel = function (CurrencyName) {
                $("#headerCurrencyDisplayName").html(CurrencyName);
            };
            CurrencyCtrl.GetCurrencyRate = function (callbackArgs) {
                Actions.GetCurrencyRate(CurrencyCtrl.getCurrencyRateHandler, function (request, textStatus, exception) {
                    showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                }, callbackArgs);
            };
            CurrencyCtrl.getCurrencyRateHandler = function (val, callbackArgs) {
                if (val != null) {
                    //ApplicationState.CurrencyRate = val.v || 1;
                    //ApplicationState.CurrencyMultiplier = val.m || 1;
                    ApplicationState.CurrencyRate = val.CurrencyRate || 1;
                    ApplicationState.CurrencyMultiplier = val.CurrencyMultiplier || 1;
                    //ApplicationState.CurrencyExceptionMessage = val.CurrencyExceptionMessage || "";
                    //console.time('refreshPriceDropdown');
                    Currency.refreshPriceDropdown();
                    Events.Fire(CurrencyCtrl.currencyUpdated, { currency: CurrencyType[ApplicationState.CurrencyID] });
                    if (callbackArgs != null) {
                        callbackArgs.functionCalls(callbackArgs.page);
                    }
                    //console.timeEnd('refreshPriceDropdown');
                }
            };
            CurrencyCtrl.currencyUpdated = 'currencyUpdated';
            return CurrencyCtrl;
        }(WebControl));
        Desktop.CurrencyCtrl = CurrencyCtrl;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=CurrencyCtrl.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var CustomToolTipBox = /** @class */ (function (_super) {
            __extends(CustomToolTipBox, _super);
            function CustomToolTipBox(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            CustomToolTipBox.prototype.loadModel = function (model) {
            };
            CustomToolTipBox.prototype.registerEventHandlers = function () {
                var me = this;
                $('.qtip').on("click", "#" + me.clientId + " .calloutCloseBtn", function (e) {
                    Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipClosing, $(e.target));
                });
            };
            CustomToolTipBox.prototype.render = function () {
                var me = this;
                Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipPageRendered, me.clientId);
            };
            CustomToolTipBox.initToolTipContent = function (toolTipId, toolTipBoxContainer, toolTipBoxElement, toolTipAnchor, elementToAddToToolTip, elementToAddToToolTipInnerContainer, isToolTipSticky) {
                elementToAddToToolTipInnerContainer.removeClass("hide");
                elementToAddToToolTip.appendTo(toolTipBoxElement.find(".tool-tip-inner-content"));
                var defaultOptions = {
                    id: toolTipId,
                    content: toolTipBoxElement.outerHTML(),
                    style: {
                        tip: {
                            width: 24,
                            height: 15
                        },
                        classes: 'popIn'
                    },
                    position: {
                        my: 'top left',
                        at: 'bottom right',
                        target: toolTipAnchor,
                        container: toolTipBoxContainer
                    },
                    show: {
                        modal: false,
                        ready: false
                    },
                    events: {
                        render: function (event, api) {
                            $("#qtip-" + toolTipId).find(".tool-tip-main-box").removeClass("hideOffScreen");
                        },
                        show: function (event, api) {
                            Events.Listen(Controls.Desktop.CustomToolTipBox.customToolTipClosing, function (e) {
                                $(e.detail.parents(".qtip")[0]).qtip("enable");
                                $(e.detail.parents(".qtip")[0]).qtip("hide");
                                $(e.detail.parents(".qtip")[0]).qtip("disable");
                                e.stopImmediatePropagation();
                                return false;
                            });
                        }
                    },
                    hide: false // Don't specify a hide event
                };
                toolTipAnchor.qtip(defaultOptions);
                if (!isToolTipSticky) {
                    setTimeout(function () {
                        var tooltipDocClick = $(document).on('click', function (event) {
                            if (!$(event.target).closest($("#qtip-" + toolTipId)).hasClass("qtip-disabled")) {
                                $("#qtip-" + toolTipId).qtip("enable");
                                $("#qtip-" + toolTipId).qtip("hide");
                                $("#qtip-" + toolTipId).qtip("disable");
                            }
                        });
                    });
                }
                toolTipBoxElement.remove();
                toolTipAnchor.qtip("show");
            };
            CustomToolTipBox.initToolTipContentAdvanced = function (toolTipBoxElement, elementToAddToToolTip, elementToAddToToolTipInnerContainer, isToolTipSticky, toolTipOptions) {
                elementToAddToToolTipInnerContainer.removeClass("hide");
                elementToAddToToolTip.appendTo(toolTipBoxElement.find(".tool-tip-inner-content"));
                if (toolTipOptions) {
                    toolTipOptions.content = toolTipBoxElement.outerHTML();
                    toolTipOptions.position.target.qtip(toolTipOptions);
                }
                if (!isToolTipSticky) {
                    setTimeout(function () {
                        var tooltipDocClick = $(document).on('click', function (event) {
                            if (!$(event.target).closest($("#qtip-" + toolTipOptions.id)).hasClass("qtip-disabled")) {
                                $("#qtip-" + toolTipOptions.id).qtip("enable");
                                $("#qtip-" + toolTipOptions.id).qtip("hide");
                                $("#qtip-" + toolTipOptions.id).qtip("disable");
                            }
                        });
                    });
                }
                toolTipBoxElement.remove();
                toolTipOptions.position.target.qtip("show");
            };
            CustomToolTipBox.customToolTipClosing = "toolTipClosing";
            CustomToolTipBox.customToolTipPageRendered = "customToolTipPageRendered";
            return CustomToolTipBox;
        }(WebControl));
        Desktop.CustomToolTipBox = CustomToolTipBox;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=CustomToolTipBox.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var DDFFAQ = /** @class */ (function (_super) {
            __extends(DDFFAQ, _super);
            function DDFFAQ(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            DDFFAQ.prototype.loadModel = function (model) {
            };
            DDFFAQ.prototype.registerEventHandlers = function () {
                var me = this;
                $('.DDF_faqTabNav_Item').click(function () {
                    $('.DDF_faqTabNav_Item').removeClass("selected");
                    $(this).addClass("selected");
                    var tabId = $(this).attr("data-tabid");
                    $('.DDF_faqTab_Con').removeClass("open");
                    $('.DDF_faqTab_Con[data-tabid=' + tabId + ']').addClass("open");
                    $(".DDF_faqTab_Section").removeClass("open");
                    $(".DDF_faqTab_Section_Content").addClass("closed");
                });
                $('.DDF_FaqTab_Section_Title_Con').click(function () {
                    $('.DDF_FaqTab_Section').removeClass('open');
                    $(".DDF_FaqTab_Section_Content").addClass("closed");
                    if ($(this).parent(".DDF_FaqTab_Section").hasClass("open")) {
                        $(this).parent(".DDF_FaqTab_Section").removeClass("open");
                        $(this).siblings(".DDF_FaqTab_Section_Content").addClass("closed");
                    }
                    else {
                        $(this).parent(".DDF_FaqTab_Section").addClass('open');
                        $(this).siblings(".DDF_FaqTab_Section_Content").removeClass("closed");
                    }
                });
            };
            DDFFAQ.prototype.SetupSubSection = function (sectionLink, section, sectionName) {
                if (sectionLink.length > 0) {
                    sectionLink.checkExists().click(function () {
                        ScrollLocation.Set();
                        URLHash.set("section", sectionName, true);
                        return false;
                    });
                    section.find('.subSectionBackLink').checkExists().click(function () {
                        history.back();
                        return false;
                    });
                    section.swiperight(function () { section.find('.subSectionBackLink').click(); });
                }
            };
            DDFFAQ.prototype.render = function () {
                $('.DDF_FaqTab_Con.open .DDF_FaqTab_Section_Title_Con').first().click();
            };
            return DDFFAQ;
        }(WebControl));
        Desktop.DDFFAQ = DDFFAQ;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=DDF-FAQ.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var DDFGetstarted = /** @class */ (function (_super) {
            __extends(DDFGetstarted, _super);
            function DDFGetstarted(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            DDFGetstarted.prototype.loadModel = function (model) {
            };
            DDFGetstarted.prototype.registerEventHandlers = function () {
                var me = this;
            };
            DDFGetstarted.prototype.render = function () {
            };
            return DDFGetstarted;
        }(WebControl));
        Desktop.DDFGetstarted = DDFGetstarted;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=DDF-GetStarted.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var DDFTestimonials = /** @class */ (function (_super) {
            __extends(DDFTestimonials, _super);
            function DDFTestimonials(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            DDFTestimonials.prototype.loadModel = function (model) {
            };
            DDFTestimonials.prototype.registerEventHandlers = function () {
                var me = this;
            };
            DDFTestimonials.prototype.render = function () {
            };
            return DDFTestimonials;
        }(WebControl));
        Desktop.DDFTestimonials = DDFTestimonials;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=DDF-Testimonials.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var DDFWhoWeWorkWith = /** @class */ (function (_super) {
            __extends(DDFWhoWeWorkWith, _super);
            function DDFWhoWeWorkWith(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.swiperInitialized = false;
                _this.regroupSliderSlides = function (swiper, slideWidth, slideWrapperWidth) {
                    var me = _this;
                    var currentSlideIdx = swiper === null || swiper === void 0 ? void 0 : swiper.activeIndex;
                    var nbImgPerSlideToFit = parseInt((slideWrapperWidth / slideWidth).toString());
                    var swiperOpt;
                    var currentHtmlImg;
                    var currentSwiperImgSet;
                    try {
                        if (swiper === null || swiper === void 0 ? void 0 : swiper.params) {
                            swiperOpt = JSON.parse(JSON.stringify(swiper === null || swiper === void 0 ? void 0 : swiper.params));
                            swiperOpt.on = swiper.params.on;
                            swiperOpt.slidesPerView = 1;
                        }
                        if ((!currentSlideIdx || currentSlideIdx < 0) || !me.swiperInitialized) {
                            currentHtmlImg = $("#swiper-work-with .swiper-slide img")[0];
                        }
                        else {
                            currentHtmlImg = ($(swiper.slides[currentSlideIdx]).find("img")[0]);
                        }
                        //Rebuild the slides with the right number of images
                        currentSwiperImgSet = $("#swiper-work-with .swiper-slide:not(.swiper-slide-duplicate) img");
                        //Error lookup
                        if (!currentHtmlImg || !currentSwiperImgSet || (!nbImgPerSlideToFit || parseInt(nbImgPerSlideToFit.toString()) <= 0) ||
                            (!currentSlideIdx || currentSlideIdx < 0) || (!slideWrapperWidth || slideWrapperWidth < 0) || !swiperOpt) {
                            return;
                        }
                        var newSimilarNbSlides = parseInt((currentSwiperImgSet.length / nbImgPerSlideToFit).toString());
                        var newLastSlideImgSetLen = currentSwiperImgSet.length % nbImgPerSlideToFit;
                        var newSwiperSlideIdx = -1;
                        //Populate the slides with the same number of images
                        var swiperWrapperContent = $("<div></div>");
                        for (var x = 0; x < newSimilarNbSlides * nbImgPerSlideToFit; x += nbImgPerSlideToFit) {
                            var swiperSlide = $("<div class='swiper-slide'></div>");
                            for (var y = x; y < x + nbImgPerSlideToFit; y++) {
                                if (currentHtmlImg.src == currentSwiperImgSet[y].src) {
                                    newSwiperSlideIdx = swiperWrapperContent.find('.swiper-slide').length;
                                }
                                $(currentSwiperImgSet[y]).appendTo(swiperSlide);
                                swiperSlide.append(currentSwiperImgSet[y]);
                            }
                            swiperWrapperContent.append(swiperSlide);
                        }
                        //Populate the last slide with the remaining images
                        var newLastSlideImgIdx = newSimilarNbSlides * nbImgPerSlideToFit;
                        for (var x = newLastSlideImgIdx; x < newLastSlideImgIdx + newLastSlideImgSetLen; x += newLastSlideImgSetLen) {
                            var swiperSlide = $("<div class='swiper-slide'></div>");
                            for (var y = x; y < x + newLastSlideImgSetLen; y++) {
                                if (currentHtmlImg.src == currentSwiperImgSet[y].src) {
                                    newSwiperSlideIdx = swiperWrapperContent.find('.swiper-slide').length;
                                }
                                swiperSlide.append(currentSwiperImgSet[y]);
                            }
                            swiperWrapperContent.append(swiperSlide);
                        }
                        swiperOpt.initialSlide = newSwiperSlideIdx; //Set the new slide index using the old slider first image
                        $(swiper.$wrapperEl).empty(); //Empty the current html wrapper
                        //Append the built swiper slides to the DOM and recreate the swiper...
                        $(swiperWrapperContent.html()).appendTo($(swiper.$wrapperEl));
                        setTimeout(function () {
                            me.swiper.destroy(true, true);
                            me.swiper = new Swiper("#swiper-work-with", swiperOpt);
                        }, 1);
                    }
                    catch (e) {
                        Logging.Error(Utilities.safeStringify({
                            "currentHtmlImg": currentHtmlImg,
                            "currentSwiperImgSetLen": currentSwiperImgSet.length,
                            "nbImgPerSlideToFit": nbImgPerSlideToFit,
                            "currentSlideIdx": currentSlideIdx,
                            "slideWrapperWidth": slideWrapperWidth,
                            "swiperOpt": swiperOpt,
                            "error": e
                        }));
                    }
                };
                _this.init();
                return _this;
            }
            DDFWhoWeWorkWith.prototype.loadModel = function (model) {
            };
            DDFWhoWeWorkWith.prototype.registerEventHandlers = function () {
                var me = this;
                //Resize is triggered even on scroll
                //so we want to detect width page change also...
                var trackPageWidth = $(window).width();
                $(window).unbind('resize.' + DDFWhoWeWorkWith.eventNamespace);
                $(window).on("resize." + DDFWhoWeWorkWith.eventNamespace, (function (e) {
                    if (trackPageWidth != $(window).width()) {
                        me.swiperInitialized = true;
                        trackPageWidth = $(window).width();
                        me.regroupSliderSlides(me.swiper, 200, $("#swiper-work-with").innerWidth());
                    }
                }));
            };
            DDFWhoWeWorkWith.prototype.domManipulation = function () {
                this.regroupSliderSlides(this.swiper, 200, $("#swiper-work-with").innerWidth());
            };
            DDFWhoWeWorkWith.prototype.render = function () {
                var me = this;
                me.swiper = new Swiper("#swiper-work-with", {
                    pagination: {
                        el: "#swiper-work-with-pagination",
                        dynamicBullets: true,
                        clickable: true
                    },
                    navigation: {
                        nextEl: '#swiper-work-with-btn-next',
                        prevEl: '#swiper-work-with-btn-prev',
                    },
                    loop: true,
                    slidesPerView: 1,
                    spaceBetween: 25,
                    on: {
                        init: function (swiper) {
                            if (!me.swiperInitialized) {
                                me.swiperInitialized = true;
                                me.regroupSliderSlides(swiper, 200, $("#swiper-work-with").innerWidth());
                            }
                        },
                        resize: function (swiper) {
                        },
                        click: function (swiper) { },
                        transitionStart: function (swiper) {
                        },
                        slidePrevTransitionStart: function (swiper) {
                        },
                        slideNextTransitionStart: function (swiper) {
                        },
                        slidePrevTransitionEnd: function (swiper) {
                        },
                        slideNextTransitionEnd: function (swiper) {
                        }
                    }
                });
            };
            DDFWhoWeWorkWith.eventNamespace = "WhoWeWorkWith";
            return DDFWhoWeWorkWith;
        }(WebControl));
        Desktop.DDFWhoWeWorkWith = DDFWhoWeWorkWith;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=DDF-WhoWeWorkWith.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Demographics = /** @class */ (function (_super) {
            __extends(Demographics, _super);
            function Demographics(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.marker = null;
                _this.map = null;
                _this.init();
                return _this;
            }
            Demographics.prototype.loadModel = function (model) {
                this.polygonString = model.Polygon;
            };
            Demographics.prototype.registerEventHandlers = function () {
                var me = this;
                Events.Listen(Pages.Desktop.Listing.ViewingStatistics, function (e) {
                    window.setTimeout(function () { google.maps.event.trigger(me.map, 'resize'); }, 350); //Map can get into weird state when it's not visible and then comes back
                });
            };
            Demographics.prototype.render = function () {
                var me = this;
                if (me.polygonString != "") {
                    if (Utilities.isGoogleMapsDefined()) {
                        me.map = me.CreateMap();
                        me.LoadPolygon(me.polygonString, me.map);
                        me.addPin(me.model.LocationLat, me.model.LocationLon);
                    }
                    else {
                        Events.Listen(MasterPages.Desktop.GoogleAPILoaded, function (e) {
                            me.map = me.CreateMap();
                            me.LoadPolygon(me.polygonString, me.map);
                            me.addPin(me.model.LocationLat, me.model.LocationLon);
                        });
                    }
                }
            };
            Demographics.prototype.addPin = function (lat, lon) {
                var me = this;
                var icon = {
                    url: '/images/common/icons/svg/pin-filled-purple.svg',
                    size: new google.maps.Size(30, 30),
                    scaledSize: new google.maps.Size(30, 30),
                    textColor: '#ffffff',
                    textSize: 12,
                };
                me.marker = new google.maps.Marker({
                    position: new google.maps.LatLng(Number(lat), Number(lon)),
                    icon: icon,
                    map: me.map
                });
            };
            Demographics.prototype.LoadPolygon = function (polygonJSON, map) {
                if (polygonJSON || "" != "") {
                    var parsedPoly = $.parseJSON(polygonJSON);
                    var polyWithAllArrays = [];
                    for (var j = 0; j < parsedPoly.length; j++) {
                        var ringarray = [];
                        for (var i = 0; i < parsedPoly[j].length; i++) {
                            ringarray.push(new google.maps.LatLng(parsedPoly[j][i].latitude, parsedPoly[j][i].longitude));
                        }
                        polyWithAllArrays.push(ringarray);
                    }
                    var polygon = new google.maps.Polygon({
                        paths: polyWithAllArrays,
                        strokeColor: '#DC2828',
                        strokeOpacity: 0.8,
                        strokeWeight: 1,
                        fillColor: '#CFB0AB',
                        fillOpacity: 0.35
                    });
                    polygon.setMap(map);
                    map.fitBounds(Utilities.getPolygonBounds([polygon]));
                }
            };
            Demographics.prototype.CreateMap = function () {
                // Goole Map Init
                var options = {
                    zoomControl: false,
                    //Removing initial map set up
                    center: new google.maps.LatLng(54.920828, -99.316406),
                    zoom: 17,
                    fullscreenControl: false,
                    mapTypeControl: false,
                    clickableIcons: false //DEF_0006094
                };
                return new google.maps.Map(document.getElementById('DemographicsMap'), options);
            };
            return Demographics;
        }(WebControl));
        Desktop.Demographics = Demographics;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Demographics.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var DemographicsChart = /** @class */ (function (_super) {
            __extends(DemographicsChart, _super);
            function DemographicsChart(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            DemographicsChart.prototype.loadModel = function (model) {
                this.chartType = model.ChartType;
                this.data = model.Data;
                this.columns = model.Columns;
            };
            DemographicsChart.prototype.registerEventHandlers = function () {
            };
            DemographicsChart.prototype.render = function () {
                var me = this;
                if (me.chartType == 'bar') {
                    c3.generate({
                        bindto: '#' + me.clientId + '_ChartCon',
                        size: {
                            width: 800,
                            height: 420
                        },
                        data: {
                            x: 'x',
                            columns: me.data,
                            type: 'bar'
                        },
                        legend: { show: false },
                        axis: {
                            x: {
                                type: 'category' // this needed to load string x value                
                            }
                        }
                    });
                }
                else if (me.chartType == 'column') {
                    c3.generate({
                        bindto: '#' + me.clientId + '_ChartCon',
                        size: {
                            width: 800,
                            height: 420
                        },
                        data: {
                            x: 'x',
                            columns: me.data
                        },
                        legend: { show: false },
                        axis: {
                            x: {
                                padding: {
                                    left: 1,
                                    right: 1,
                                }
                            }
                        }
                    });
                }
                else if (me.chartType == 'pie') {
                    var pieConfig = void 0;
                    pieConfig =
                        {
                            bindto: '#' + me.clientId + '_ChartCon',
                            size: {
                                width: 600,
                                height: 420
                            },
                            data: {
                                columns: me.data,
                                type: 'pie',
                                //onclick: Function (d, i) { console.log("onclick", d, i); },   
                            },
                            legend: { show: false }
                        };
                    var cultureId = ApplicationState.CultureID.toString();
                    if (cultureId == "2") {
                        pieConfig.tooltip = {
                            format: {
                                value: function (value, ratio, id) {
                                    return d3.format(",.1f")(ratio * 100).toString().replace('.', ' ').replace(/,/g, '.').replace(' ', ',') + "%";
                                }
                            }
                        };
                        pieConfig.pie = {
                            label: {
                                format: function (value, ratio, id) {
                                    return d3.format(",.1f")(ratio * 100).toString().replace('.', ' ').replace(/,/g, '.').replace(' ', ',') + "%";
                                }
                            }
                        };
                    }
                    var chart_1 = c3.generate(pieConfig);
                    //Create custom legend, default legend causes all sort of issues with layout
                    //This isn't well documented at all, based on http://c3js.org/samples/legend_custom.html
                    d3.select('#' + me.clientId + '_ChartCon').insert('div', '.chart').attr('class', 'legend').selectAll('span')
                        .data(me.columns)
                        .enter().append('div')
                        .attr("class", "LegendItem")
                        .attr('data-id', function (datum, index, outerIndex) { return datum.toString(); })
                        .html(function (datum, index, outerIndex) {
                        return "<div class='LegendColorChip' style='background-color: " + chart_1.color(datum.toString()) + "'></div><div class='LegendLabel'>" + datum.toString() + "</div>";
                    })
                        //.each(function (id) {
                        //    d3.select(this).style('background-color', chart.color(id.toString()));
                        //})
                        .on('mouseover', function (id) {
                        chart_1.focus(id.toString());
                    })
                        .on('mouseout', function (id) {
                        chart_1.revert();
                    })
                        .on('click', function (id) {
                        chart_1.focus(id.toString());
                        //chart.toggle(id.toString());
                    });
                }
            };
            return DemographicsChart;
        }(WebControl));
        Desktop.DemographicsChart = DemographicsChart;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=DemographicsChart.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Disambiguation = /** @class */ (function (_super) {
            __extends(Disambiguation, _super);
            function Disambiguation(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Disambiguation.prototype.loadModel = function () { };
            Disambiguation.prototype.render = function () { };
            Disambiguation.prototype.registerEventHandlers = function () {
                $('.lnkDisambiguation').click(function () {
                    var disambiguationBoxLinkData = { link: $(this).attr("href"), type: DisambiguationBoxLinkType[DisambiguationBoxLinkType[$(this).attr("data-type")]] };
                    Disambiguation.disambiguationLinkClickedEvent.Fire({ data: disambiguationBoxLinkData });
                    return false;
                });
            };
            Disambiguation.disambiguationLinkClickedEvent = new RealtorEvent('disambiguationLinkClickedEvent');
            return Disambiguation;
        }(WebControl));
        Desktop.Disambiguation = Disambiguation;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Disambiguation.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var EmailFriendArgs = /** @class */ (function () {
            function EmailFriendArgs() {
                this.signedIn = 'false';
            }
            return EmailFriendArgs;
        }());
        Desktop.EmailFriendArgs = EmailFriendArgs;
        var EmailFriendFormType;
        (function (EmailFriendFormType) {
            EmailFriendFormType[EmailFriendFormType["EmailFriend"] = 0] = "EmailFriend";
            EmailFriendFormType[EmailFriendFormType["EmailFriendFavourites"] = 1] = "EmailFriendFavourites";
            EmailFriendFormType[EmailFriendFormType["EmailFriendCompares"] = 2] = "EmailFriendCompares";
            EmailFriendFormType[EmailFriendFormType["EmailFriendPage"] = 3] = "EmailFriendPage";
        })(EmailFriendFormType = Desktop.EmailFriendFormType || (Desktop.EmailFriendFormType = {}));
        var EmailAFriend = /** @class */ (function (_super) {
            __extends(EmailAFriend, _super);
            function EmailAFriend(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            EmailAFriend.prototype.loadModel = function () { };
            EmailAFriend.prototype.registerEventHandlers = function () {
                //$('#btnEmailAFriendCancel').click(function () {
                //    window.close();
                //    return false;
                //});
                $('#btnEmailAFriendSend').click(function () {
                    EmailAFriend.sendEmail();
                    return false;
                });
            };
            EmailAFriend.prototype.render = function () {
                if (typeof grecaptcha !== 'undefined') {
                    LoadCaptcha("emailAFriendCaptchaCon");
                }
                else {
                    Events.ListenOnce(MasterPages.Desktop.CaptchaLoaded, function () { LoadCaptcha("emailAFriendCaptchaCon"); });
                }
                $('#chkShareNotes').qtip({
                    content: Translation.get("T315")
                });
                FormValueStorage.fillForm($('#emailFriendCon'));
            };
            EmailAFriend.sendEmail = function () {
                var captchaResponse = (ApplicationConfig.CaptchaEnabled == true && grecaptcha) ? grecaptcha.getResponse(+$('#emailAFriendCaptchaCon').attr('data-captcha-widget-id')) : null;
                //Remove the capcha from validation 
                if (!ApplicationConfig.CaptchaEnabled || ApplicationConfig.SkipClientCaptchaValidation) {
                    $("div.inputCon[data-validation=captcha\\(emailAFriendCaptchaCon\\)]").removeAttr("data-validation");
                }
                if (FormValidation.validateForm($('#emailFriendInnerCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                    FormValueStorage.saveForm($('#emailFriendCon'));
                    var EmailFormType = EmailFriendFormType.EmailFriendPage; //default
                    if ($('#SharePage').val() != null && $('#SharePage').val() == "FAVE") {
                        EmailFormType = EmailFriendFormType.EmailFriendFavourites;
                    }
                    else if ($('#SharePage').val() != null && $('#SharePage').val() == "PDP") {
                        EmailFormType = EmailFriendFormType.EmailFriend;
                    }
                    else {
                        EmailFormType = EmailFriendFormType.EmailFriendPage;
                    }
                    if (EmailFormType == EmailFriendFormType.EmailFriend) {
                        var args = new EmailFriendArgs();
                        args.response = captchaResponse;
                        args.emailFrom = Utilities.cleanJSONValue($('#YourEmailTxt').val());
                        args.emailTo = Utilities.cleanJSONValue($('#FriendsEmailTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#YourNameTxt').val());
                        args.ccSender = Utilities.cleanJSONValue(($("#chkCCSender").is(":checked") ? "true" : "false"));
                        args.shareNotes = Utilities.cleanJSONValue(($("#chkShareNotes").is(":checked") ? "true" : "false"));
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.appId = Utilities.cleanJSONValue(ApplicationConfig.ApplicationID.toString());
                        args.deviceTypeId = Utilities.cleanJSONValue(ApplicationState.DeviceTypeID.toString());
                        args.propertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                        args.referenceNum = Utilities.cleanJSONValue($('#ReferenceNumber').val());
                        args.UID = $('#UID').val();
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        $('#btnEmailFriendSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailAFriend(args, EmailAFriend.handleEmailFriendResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        Analytics.log(args.propertyId, 'email_friend');
                        return true;
                    }
                    else if (EmailFormType == EmailFriendFormType.EmailFriendFavourites) {
                        var args = new EmailFriendArgs();
                        args.response = captchaResponse;
                        args.emailFrom = Utilities.cleanJSONValue($('#YourEmailTxt').val());
                        args.emailTo = Utilities.cleanJSONValue($('#FriendsEmailTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#YourNameTxt').val());
                        args.ccSender = Utilities.cleanJSONValue(($("#chkCCSender").is(":checked") ? "true" : "false"));
                        args.shareNotes = Utilities.cleanJSONValue(($("#chkShareNotes").is(":checked") ? "true" : "false"));
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.appId = Utilities.cleanJSONValue(ApplicationConfig.ApplicationID.toString());
                        args.applicationMode = Utilities.cleanJSONValue(ApplicationState.ApplicationModeString);
                        args.deviceTypeId = Utilities.cleanJSONValue(ApplicationState.DeviceTypeID.toString());
                        args.propIds = Utilities.cleanJSONValue($('#ListingIDs').val());
                        args.senderDisplayName = Utilities.cleanJSONValue($('#SenderDisplayName').val());
                        args.UID = $('#UID').val();
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        $('#btnEmailFriendSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailAFriendFavourites(args, EmailAFriend.handleEmailFriendResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                    else if (EmailFormType == EmailFriendFormType.EmailFriendPage) {
                        var args = new EmailFriendArgs();
                        args.response = captchaResponse;
                        args.emailFrom = Utilities.cleanJSONValue($('#YourEmailTxt').val());
                        args.emailTo = Utilities.cleanJSONValue($('#FriendsEmailTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#YourNameTxt').val());
                        args.ccSender = Utilities.cleanJSONValue(($("#chkCCSender").is(":checked") ? "true" : "false"));
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.appId = Utilities.cleanJSONValue(ApplicationConfig.ApplicationID.toString());
                        args.deviceTypeId = Utilities.cleanJSONValue(ApplicationState.DeviceTypeID.toString());
                        args.UID = $('#UID').val();
                        args.PageName = $('#PageName').val();
                        args.PageUrl = $('#PageUrl').val();
                        args.MediaSrc = $('#MediaSrc').val();
                        args.UtmCampaign = $('#UtmCampaign').val();
                        args.UtmEmailFriendMedium = $('#UtmMedium').val();
                        args.BaseMediaUrl = Utilities.cleanJSONValue(ApplicationConfig.BaseURL);
                        $('#btnEmailFriendSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailAFriendPage(args, EmailAFriend.handleEmailFriendResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                }
                else {
                    addAnimationClass($('#btnEmailFriendSend'), 'greenButtonFail');
                    return false;
                }
            };
            EmailAFriend.handleEmailFriendResponse = function (val) {
                $('#btnEmailFriendSend').prop('disabled', false).removeClass("loading");
                if (val != null && val.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    var shareNotesCheck = $("#chkShareNotes").is(":checked");
                    if (shareNotesCheck && (shareNotesCheck != ($("#IncludeNotes").val() == 'true'))) {
                        Gigya.notesIncludeConfirmation();
                    }
                    else {
                        Events.Fire(Controls.Desktop.EmailAFriend.EmailSentSuccessfullyEvent);
                        showMessage(Translation.get("EmailSentSuccessfully"));
                        //Add successfull event datalayer
                        DataLayer.push({
                            event: 'emailFriendFormSubmissionSuccess',
                            formId: 'emailFriendForm'
                        });
                    }
                }
                else {
                    showMessage(Translation.get("EmailSendError"));
                    Logging.Error(JSON.stringify(val.ErrorCode));
                }
            };
            EmailAFriend.EmailSentSuccessfullyEvent = "EmailAFriendSentSuccessfullyEvent";
            return EmailAFriend;
        }(WebPage));
        Desktop.EmailAFriend = EmailAFriend;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=EmailAFriend.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var EmailRealtorArgs = /** @class */ (function () {
            function EmailRealtorArgs() {
                this.signedIn = 'false';
            }
            return EmailRealtorArgs;
        }());
        Desktop.EmailRealtorArgs = EmailRealtorArgs;
        var EmailOfficeArgs = /** @class */ (function () {
            function EmailOfficeArgs() {
                this.signedIn = 'false';
            }
            return EmailOfficeArgs;
        }());
        Desktop.EmailOfficeArgs = EmailOfficeArgs;
        var EmailRealtor = /** @class */ (function (_super) {
            __extends(EmailRealtor, _super);
            function EmailRealtor(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            EmailRealtor.prototype.loadModel = function () { };
            EmailRealtor.prototype.registerEventHandlers = function () {
                var me = this;
                var localModel = me.model;
                //$('#' + this.clientId + ' #btnEmailRealtorCancel').click(function () {
                //    window.close();
                //    return false;
                //});
                $('#' + this.clientId + ' #btnEmailRealtorSend').click(function () {
                    EmailRealtor.sendEmail(localModel.FindTextToHyperlinksInMsg, localModel.HyperlinksToTextInMsg);
                    return false;
                });
                $('#' + this.clientId + ' #EmailRadio').change(function () {
                    if ($(this).is(':checked')) {
                        if (ApplicationState.UserIsSignedIn) {
                            var isOfficeEmail = $('#OrganizationId').val() != "";
                            if (isOfficeEmail && localModel.EmailAddress != null && localModel.EmailAddress.length > 0) {
                                $('#EmailAddressTxt').val(localModel.EmailAddress);
                            }
                            if (localModel.PhoneNumber != null && localModel.PhoneNumber.length > 0) {
                                $('#PhoneNumberTxt').val(localModel.PhoneNumber);
                            }
                        }
                        if ($('#' + me.clientId + ' #chkBookShowing').is(':checked') == false) {
                            FormValidation.removeValidatorFromField($('#PhoneNumberTxt'), 'required');
                        }
                        $('#PhoneNumberTxt').attr("placeholder", "");
                    }
                });
                $('#' + this.clientId + ' #PhoneContactPreferredRadio').change(function () {
                    if ($(this).is(':checked')) {
                        if (ApplicationState.UserIsSignedIn && localModel.PhoneNumber != null && localModel.PhoneNumber.length > 0)
                            $('#PhoneNumberTxt').val(localModel.PhoneNumber);
                        FormValidation.addValidatorToField($('#PhoneNumberTxt'), 'required');
                        $('#PhoneNumberTxt').attr("placeholder", "");
                    }
                });
                $('#' + this.clientId + ' #TextContactPreferredRadio').change(function () {
                    if ($(this).is(':checked')) {
                        $('#PhoneNumberTxt').attr("placeholder", Translation.get("TextPhonePlaceholderText"));
                        if (ApplicationState.UserIsSignedIn && localModel.MobilePhoneNumber != null && localModel.MobilePhoneNumber.length > 0)
                            $('#PhoneNumberTxt').val(localModel.MobilePhoneNumber);
                        FormValidation.addValidatorToField($('#PhoneNumberTxt'), 'required');
                    }
                    else {
                        $('#PhoneNumberTxt').attr("placeholder", "");
                    }
                });
                $('#' + this.clientId + ' #chkBookShowing').change(function () {
                    if ($(this).is(':checked')) {
                        FormValidation.addValidatorToField($('#PhoneNumberTxt'), 'required');
                        $("#BookShowingDateCon").empty();
                        EmailRealtor.ShowingDateTimes = [];
                        EmailHelper.addDteBookShow(EmailRealtor.ShowingDateTimes);
                        $("#BookShowingDateCon").show();
                    }
                    else {
                        if (!$('#' + me.clientId + ' #PhoneContactPreferredRadio').is(':checked') &&
                            !$('#' + me.clientId + ' #TextContactPreferredRadio').is(':checked')) {
                            FormValidation.removeValidatorFromField($('#PhoneNumberTxt'), 'required');
                        }
                        $("#BookShowingDateCon").hide();
                        $("#BookShowingDateCon").empty();
                        EmailRealtor.ShowingDateTimes = [];
                    }
                });
                $('#chkWorkingRealtor').change(function () {
                    if ($(this).is(':checked')) {
                        $("#WorkingRealtorName").show();
                    }
                    else {
                        $("#WorkingRealtorName").hide();
                    }
                });
                $('#txtMessageWithCTA').on('click change keydown focus', function () {
                    EmailHelper.swapMessage($('#txtMessageWithCTA'), $('#txtMessage'));
                    return false;
                });
            };
            EmailRealtor.prototype.render = function () {
                var me = this;
                var localModel = me.model;
                DropDown.loadSelect2($('#' + me.clientId + ' #ddl_Iam_emailrealtor'), {
                    allowClear: false,
                    closeOnSelect: true,
                    containerCssClass: "homeFilter",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "50%"
                });
                //$('#ddl_Iam_emailrealtor').val('').trigger('change');
                if (ApplicationState.UserIsSignedIn == false) {
                    $('#ddl_Iam_emailrealtor').val(0).change();
                }
                else {
                    $('#ddl_Iam_emailrealtor').val($('#hdnIam').val()).trigger('change');
                }
                if (localModel.BookAShowing) {
                    $("#chkBookShowing").attr("checked", "checked");
                    FormValidation.addValidatorToField($('#PhoneNumberTxt'), 'required');
                    $("#BookShowingDateCon").empty();
                    EmailRealtor.ShowingDateTimes = [];
                    EmailHelper.addDteBookShow(EmailRealtor.ShowingDateTimes);
                    $("#BookShowingDateCon").show();
                }
                //Fill form details locally only for non signed users as US-160262
                if (!ApplicationState.UserIsSignedIn) {
                    FormValueStorage.fillForm($('#emailRealtorCon'));
                }
                me.loadCaptcha();
            };
            EmailRealtor.prototype.loadCaptcha = function () {
                if (typeof grecaptcha !== 'undefined') {
                    LoadCaptcha("emailRealtorCaptchaCon");
                }
                else {
                    Events.ListenOnce(MasterPages.Desktop.CaptchaLoaded, function () { LoadCaptcha("emailRealtorCaptchaCon"); });
                }
                //if ($('#EmailRealtorCaptcha').length > 0 && $('#EmailRealtorCaptcha').html().trim() == '') {
                //    grecaptcha.render('EmailRealtorCaptcha', { 'sitekey': ApplicationConfig.RecaptchaSiteKey });
                //} else {
                //    $('#recaptcha').prependTo("#EmailRealtorCaptcha");
                //    $('#recaptcha').show();
                //}
                //if ($('#recaptcha').length == 0 || $('#recaptcha').html().trim() == '') {
                //    $("body").append("<div id='recaptcha'></div>");
                //    grecaptcha.render('recaptcha', { 'sitekey': ApplicationSettings.RecaptchaSiteKey });
                //}
                //if (containerid) {
                //    $('#recaptcha').prependTo("#" + containerid);
                //    $('#recaptcha').show();
                //}
            };
            EmailRealtor.sendEmail = function (findTextToHyperlinksInMsg, hyperlinksToTextInMsg) {
                var isOfficeEmail = $('#OrganizationId').val() != "";
                var captchaResponse = (ApplicationConfig.CaptchaEnabled == true && grecaptcha) ? grecaptcha.getResponse(+$('#emailRealtorCaptchaCon').attr('data-captcha-widget-id')) : null;
                //Remove the capcha from validation 
                if (!ApplicationConfig.CaptchaEnabled || ApplicationConfig.SkipClientCaptchaValidation) {
                    $("div.inputCon[data-validation=captcha\\(emailRealtorCaptchaCon\\)]").removeAttr("data-validation");
                }
                if (FormValidation.validateForm($('#emailRealtorInnerCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                    //Save form details locally only for non signed users as US-160262
                    if (!ApplicationState.UserIsSignedIn) {
                        FormValueStorage.saveForm($('#emailRealtorCon'));
                    }
                    if (isOfficeEmail) {
                        var args = new EmailOfficeArgs();
                        args.response = Utilities.cleanJSONValue(captchaResponse);
                        args.message = Utilities.cleanJSONValue($('#txtMessage').val());
                        args.emailFrom = Utilities.cleanJSONValue($('#EmailAddressTxt').val());
                        args.phone = Utilities.cleanJSONValue($('#PhoneNumberTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#FirstNameTxt').val());
                        args.fromLastName = Utilities.cleanJSONValue($('#LastNameTxt').val());
                        args.IamA = Utilities.cleanJSONValue($('.ddlEmailRealtor').val());
                        args.applicationmode = ApplicationState.CurrentMode.toString();
                        args.AnalyticsId = Utilities.cleanJSONValue(Utilities.getUserId());
                        args.PreferredOption = Utilities.cleanJSONValue($('input[name=MethodOfContact]:checked').val());
                        args.MoreInformationRequested = Utilities.cleanJSONValue(($("#chkMoreInformation").is(":checked") ? "true" : "false"));
                        args.InterestInBuying = Utilities.cleanJSONValue(($("#chkInterestedBuying").is(":checked") ? "true" : "false"));
                        args.InterestInSelling = Utilities.cleanJSONValue(($("#chkInterestedSelling").is(":checked") ? "true" : "false"));
                        args.HasGeneralQuestions = Utilities.cleanJSONValue(($("#chkQuestionAbout").is(":checked") ? "true" : "false"));
                        args.ShowingRequested = Utilities.cleanJSONValue(($("#chkBookShowing").is(":checked") ? "true" : "false"));
                        args.HasWorkingRealtor = Utilities.cleanJSONValue(($("#chkWorkingRealtor").is(":checked") ? "true" : "false"));
                        args.HasLocation = Utilities.cleanJSONValue(($("#chkLocation").is(":checked") ? "true" : "false"));
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.referenceNum = Utilities.cleanJSONValue($('#ReferenceNumber').val());
                        args.organizationId = Utilities.cleanJSONValue($('#OrganizationId').val());
                        args.propertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        args.ShowingDates = Utilities.cleanJSONValue(EmailHelper.getShowingDates(EmailRealtor.ShowingDateTimes));
                        args.WorkingRealtorName = Utilities.cleanJSONValue(EmailHelper.getWorkingRealtorName());
                        args.HasBeenPreApprovedMortgage = Utilities.cleanJSONValue(($("#chkMortgagePreApproved").is(":checked") ? "true" : "false"));
                        $('#btnEmailRealtorSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailAnOrganization(args, EmailRealtor.handleEmailOfficeResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                    else {
                        var args = new EmailRealtorArgs();
                        args.response = captchaResponse;
                        args.message = Utilities.cleanJSONValue($('#txtMessage').val());
                        args.emailFrom = Utilities.cleanJSONValue($('#EmailAddressTxt').val());
                        args.phone = Utilities.cleanJSONValue($('#PhoneNumberTxt').val());
                        args.fromName = Utilities.cleanJSONValue($('#FirstNameTxt').val());
                        args.fromLastName = Utilities.cleanJSONValue($('#LastNameTxt').val());
                        args.ShowingRequested = Utilities.cleanJSONValue(($("#chkBookShowing").is(":checked") ? "true" : "false"));
                        args.HasWorkingRealtor = Utilities.cleanJSONValue(($("#chkWorkingRealtor").is(":checked") ? "true" : "false"));
                        args.HasLocation = Utilities.cleanJSONValue(($("#chkLocation").is(":checked") ? "true" : "false"));
                        args.IamA = Utilities.cleanJSONValue($('.ddlEmailRealtor').val());
                        args.applicationmode = Utilities.cleanJSONValue(ApplicationState.CurrentMode.toString());
                        args.AnalyticsId = Utilities.cleanJSONValue(Utilities.getUserId());
                        args.PreferredOption = Utilities.cleanJSONValue($('input[name=MethodOfContact]:checked').val());
                        args.culture = Utilities.cleanJSONValue(ApplicationState.CultureID.toString());
                        args.propertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                        args.referenceNum = Utilities.cleanJSONValue($('#ReferenceNumber').val());
                        args.individualId = Utilities.cleanJSONValue($('#IndividualId').val());
                        args.message = Utilities.cleanJSONValue($('#txtMessage').val());
                        args.signedIn = Utilities.cleanJSONValue(ApplicationState.UserIsSignedIn.toString());
                        args.ShowingDates = Utilities.cleanJSONValue(EmailHelper.getShowingDates(EmailRealtor.ShowingDateTimes));
                        args.WorkingRealtorName = Utilities.cleanJSONValue(EmailHelper.getWorkingRealtorName());
                        args.findTextToHyperlinksInMsg = Utilities.cleanJSONValue(findTextToHyperlinksInMsg);
                        args.hyperlinksToTextInMsg = Utilities.cleanJSONValue(hyperlinksToTextInMsg);
                        args.HasBeenPreApprovedMortgage = Utilities.cleanJSONValue(($("#chkMortgagePreApproved").is(":checked") ? "true" : "false"));
                        args.GigyaUID = (ConsumerProfile.UserAccountSettings.UID || "");
                        $('#btnEmailRealtorSend').prop('disabled', 'disabled').addClass("loading");
                        Actions.emailARealtor(args, EmailRealtor.handleEmailRealtorResponse, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                        return true;
                    }
                }
                else {
                    addAnimationClass($('#btnEmailRealtorSend'), 'btnFail');
                    return false;
                }
            };
            EmailRealtor.handleEmailRealtorResponse = function (val) {
                $('#btnEmailRealtorSend').prop('disabled', false).removeClass("loading");
                var PropertyId = Utilities.cleanJSONValue($('#PropertyId').val());
                if (val != null && val.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    //if (PropertyId != null) {
                    //    Analytics.log(PropertyId, 'email_realtor');
                    //}   
                    Events.Fire(Controls.Desktop.EmailRealtor.EmailSentSuccessfullyEvent);
                    showMessage(Translation.get("EmailSentSuccessfully"));
                    //Add successfull event datalayer                
                    DataLayer.push({
                        event: 'emailRealtorFormSubmissionSuccess',
                        formId: 'emailRealtorForm'
                    });
                }
                else {
                    showMessage(Translation.get("EmailSendError"));
                    Logging.Error(JSON.stringify(val.ErrorCode));
                }
            };
            EmailRealtor.handleEmailOfficeResponse = function (val) {
                //let PropertyId: string = Utilities.cleanJSONValue($('#PropertyId').val());
                $('#btnEmailRealtorSend').prop('disabled', false).removeClass("loading");
                if (val != null && val.ErrorCode.Id == PublicContracts.ErrorCodeId.OK) {
                    //if (PropertyId != null) {
                    //    Analytics.log(PropertyId, 'email_office');
                    //}
                    Events.Fire(Controls.Desktop.EmailRealtor.EmailSentSuccessfullyEvent);
                    showMessage(Translation.get("EmailSentSuccessfully"));
                    //Add successfull event datalayer
                    DataLayer.push({
                        event: 'emailOfficeFormSubmissionSuccess',
                        formId: 'emailOfficeForm'
                    });
                }
                else {
                    showMessage(Translation.get("EmailSendError"));
                    Logging.Error(JSON.stringify(val.ErrorCode));
                }
            };
            EmailRealtor.ShowingDateTimes = [];
            EmailRealtor.EmailSentSuccessfullyEvent = "EmailSentSuccessfullyEvent";
            return EmailRealtor;
        }(WebPage));
        Desktop.EmailRealtor = EmailRealtor;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=EmailARealtor.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var FeatureCarousel = /** @class */ (function (_super) {
            __extends(FeatureCarousel, _super);
            function FeatureCarousel(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            FeatureCarousel.prototype.loadModel = function (model) {
            };
            FeatureCarousel.prototype.registerEventHandlers = function () {
                var videoContainer = $($("#featureCarouselVideo").outerHTML());
                $(".featureCarouselFooter > a").click(function (e) {
                    e.preventDefault();
                    var urlAction = $(this).attr("href");
                    var data_type_action = ActionType[$(this).attr("data-type-action")];
                    if (data_type_action == ActionType.Redirect) {
                        window.location.href = urlAction;
                    }
                    else if (data_type_action == ActionType.NewPage) {
                        window.open(urlAction, '_blank');
                    }
                    else if (data_type_action == ActionType.Modal) {
                        //Open a modal view container with a video using the URL
                        if (MultimediaModel.isEmbedableVideoUrl(urlAction)) {
                            var uid = "";
                            while (uid == "" || !isUniqueUIElement(uid)) {
                                uid = Utilities.GenerateUID();
                            }
                            var model = new ModalContentModel("VideoModal-" + uid, "", videoContainer);
                            model.CssClass = "VideoModalEnabled";
                            model.ButtonCloseID = "btnVideoCancel";
                            model.AfterOpen = function () {
                                var videoModel = new MultimediaModel(urlAction, "featureCarouselVideo", VideoLoadingDisplay.Yes, VideoDisplay.VideoNoThumbnail, VideoLoadingType.LoadingNow);
                                videoModel.setContentOptions("", "videoThumbnailLoading", "videoThumbnail", "featureCarouselVideo-upper-inner", "featureCarouselVideo-inner-", "play_button");
                                MultimediaModel.virtualTourLoadEvent.Listen(function (arg) {
                                    if (arg.detail.loaded) {
                                        $("#featureCarouselVideo").css("min-width", "");
                                        $("#featureCarouselVideo").css("min-height", "");
                                    }
                                });
                                MultimediaModel.virtualTourAddVideoEvent.Listen(function (arg) {
                                    $("#" + arg.detail.model.VideoInnerContainerId).html(arg.detail.iframeHtmlToAppend);
                                });
                                videoModel.LimitWidthVideoSize = true;
                                videoModel.MultiManager.overwriteVideoAccessTypeProviders(VideoAccessType.BVD);
                                $("#featureCarouselVideoContainer").remove(); //Remove the parent container to prevent DOM initializing issues
                                videoModel.StartEmbed();
                                $(".featherlight-content").addClass("VideoModeSpecialParam");
                            };
                            model.DisplayType = ModalDisplayTypes.Featherlight;
                            showModalContent(model);
                        }
                        else { //Simply open the link in a new tab page
                            window.open(urlAction, '_blank');
                        }
                    }
                    else { //Simply open the link in a new tab page
                        window.open(urlAction, '_blank');
                    }
                });
            };
            FeatureCarousel.prototype.render = function () {
                //--Detect if all the conditions are met to show the button on the banners-- %>
                var btnBanners = $(".featureCarouselFooter > a");
                for (var x = 0; x < btnBanners.length; x++) {
                    var btnBanner = $(btnBanners[x]);
                    //--Detect the presence of label for button-- %>
                    var labelbtn = Utilities.LimitWording(40, btnBanner.text().trim(), true);
                    btnBanner.text(labelbtn);
                    //--Detect the presence of action type on button-- %>
                    var btnActionType = btnBanner.attr('data-type-action');
                    //--Detect the presence of a link for the button-- %>
                    var btnLink = btnBanner.attr('href');
                    if (btnLink != "" && labelbtn == "") { //Has btn link, but not text? Make the whole thing a link.
                        btnBanner.removeClass(); //Remove all the classes
                        btnBanner.css({
                            'position': 'absolute',
                            'top': '0',
                            'bottom': '0',
                            'left': '0',
                            'right': '0'
                        });
                    }
                    else if (btnLink.length == 0 || btnActionType.length == 0 || labelbtn.length == 0) {
                        btnBanner.css('visibility', 'hidden');
                    }
                }
                Utilities.queueTask(function () {
                    new Swiper('#featureCarousel.swiper-container', {
                        navigation: {
                            nextEl: '.swiper-button-next',
                            prevEl: '.swiper-button-prev'
                        },
                        autoHeight: true,
                        loop: true
                    });
                });
            };
            return FeatureCarousel;
        }(WebControl));
        Desktop.FeatureCarousel = FeatureCarousel;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=FeatureCarousel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var FindARealtorSection = /** @class */ (function (_super) {
            __extends(FindARealtorSection, _super);
            function FindARealtorSection(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            FindARealtorSection.prototype.loadModel = function (model) {
                this.cityName = model.CityName;
                this.cultureId = model.CultureId;
            };
            FindARealtorSection.prototype.render = function () {
                var me = this;
            };
            ;
            FindARealtorSection.prototype.registerEventHandlers = function () {
                var me = this;
                $('#city_button_find_realtor').click(function () {
                    me.DiscRealtor();
                });
            };
            FindARealtorSection.prototype.DiscRealtor = function () {
                //let me = this;
                //Core.CheckTOSAcceptance("/realtorresults#City=" + me.cityName + "&CultureId=" + me.cultureId + "&ApplicationId=1&RecordsPerPage=9&Page=1");
            };
            return FindARealtorSection;
        }(WebControl));
        Desktop.FindARealtorSection = FindARealtorSection;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=FindARealtorSection.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var FloatingContactRealtorBar = /** @class */ (function (_super) {
            __extends(FloatingContactRealtorBar, _super);
            function FloatingContactRealtorBar(model, controlId, individualId, listingId, referenceNumber) {
                var _this = _super.call(this, model, controlId) || this;
                _this.individualId = individualId;
                _this.listingId = listingId;
                _this.referenceNumber = referenceNumber;
                _this.init();
                return _this;
            }
            FloatingContactRealtorBar.prototype.loadModel = function (model) {
            };
            FloatingContactRealtorBar.prototype.registerEventHandlers = function () {
                var me = this;
                $('#' + me.clientId + ' .RealtorContactBar_RealtorEmailBtn').click(function () {
                    LoadEmailRealtorForm(me.individualId, me.listingId, me.referenceNumber);
                    return false;
                });
                $('#' + me.clientId + ' .RealtorContactBar_CloseIcon').click(function () {
                    $('#' + me.clientId + ' .RealtorContactBar').addClass("forceHide");
                });
                //document.addEventListener('scroll', (evt) => {
                //    jCache('.RealtorContactBar').toggleClass('open', isScrolledPassed($('#propertyDetailsRealtorsCon')));
                //}, { capture: true, passive: true });
                if (jCache('#propertyDetailsRealtorsCon .realtorCardCon').length > 0) {
                    var LastRealtorCard_1 = jCache('#propertyDetailsRealtorsCon .realtorCardCon').last();
                    $(window).scroll(function () {
                        jCache('.RealtorContactBar').toggleClass('open', isScrolledPassed(LastRealtorCard_1));
                    });
                }
            };
            FloatingContactRealtorBar.prototype.show = function () {
                var me = this;
                $('#' + me.clientId + ' .RealtorContactBar').addClass("open");
                $('#' + me.clientId + ' .RealtorContactBar_Content').removeClass("hide");
                $('.RealtorContactBar').css("transform", 'translatey(0px)');
            };
            FloatingContactRealtorBar.prototype.hide = function () {
                var me = this;
                $('#' + me.clientId + ' .RealtorContactBar').removeClass("open");
                $('#' + me.clientId + ' .RealtorContactBar_Content').addClass("hide");
                $('.RealtorContactBar').css("transform", 'translatey(' + ($('.RealtorContactBar_Content').outerHeight()) + 'px)');
            };
            FloatingContactRealtorBar.prototype.render = function () {
                var me = this;
            };
            return FloatingContactRealtorBar;
        }(WebControl));
        Desktop.FloatingContactRealtorBar = FloatingContactRealtorBar;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=FloatingContactRealtorBar.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Footer = /** @class */ (function (_super) {
            __extends(Footer, _super);
            function Footer(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Footer.prototype.loadModel = function (model) {
            };
            Footer.prototype.registerEventHandlers = function () {
                $('#lnkFooter_CreateAccount').click(function () {
                    if (!ApplicationState.UserIsSignedIn) {
                        Gigya.showScreen(gigyaScreen.SignIn, null, null, function () { $('#signUpHeaderTabLnk').click(); });
                        return false;
                    }
                });
                GigyaInit.Events.consumerPreferenceLoaded.Listen(function (arg) {
                    //Change the footer create account link label and link
                    //from "create account" to "my account"
                    if (ApplicationState.IsMobileDevice) {
                        //Nothing yet...
                    }
                    else {
                        $("#lnkFooter_CreateAccount").attr("href", RouteHelper.getURL("my-account") + "#section=AccountInformation");
                        $("#lnkFooter_CreateAccount").text(Translation.get("ViewAnAccount"));
                    }
                });
                // Connection to a broadcast channel                        
                //Receiving messages through the broadcast channel to update signedin user data
                BroadcastChannels.SignedInUserData.addListener("SUD", function (val) {
                    //Change the footer create account link label and link
                    //from "create account" to "my account"
                    if (ApplicationState.UserIsSignedIn) {
                        if (ApplicationState.IsMobileDevice) {
                            //Nothing yet...
                        }
                        else {
                            $("#lnkFooter_CreateAccount").attr("href", RouteHelper.getURL("my-account") + "#section=AccountInformation");
                            $("#lnkFooter_CreateAccount").text(Translation.get("ViewAnAccount"));
                        }
                    }
                });
            };
            Footer.prototype.render = function () {
            };
            return Footer;
        }(WebControl));
        Desktop.Footer = Footer;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Footer.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Header = /** @class */ (function (_super) {
            __extends(Header, _super);
            function Header(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            Header.prototype.loadModel = function (model) {
            };
            Header.prototype.registerEventHandlers = function () {
                var me = this;
                $("#lnkHeaderLogout").checkExists().click(function () {
                    var callbackArgs = new LogoutCallbackArgs();
                    callbackArgs.DT = DisplayType.Tempbox;
                    Gigya.Logout(callbackArgs);
                    return false;
                });
                $('.toggleOption').click(function () {
                    var href = $(this).attr("href");
                    href += (window.location.hash || "");
                    window.location.href = href;
                    return false;
                });
                $("#lnkProfileMenuSignin").checkExists().click(function () {
                    Gigya.showScreen(gigyaScreen.SignIn, null);
                });
                $('#lnkProfileMenuLogout').click(function () {
                    var callbackArgs = new LogoutCallbackArgs();
                    callbackArgs.DT = DisplayType.Tempbox;
                    Gigya.Logout(callbackArgs);
                    return false;
                });
                //$(document).click(function (e) {
                //    var $target = $(e.target);
                //    if ($target.is('#lnkProfileMenuMyAccount') || $target.is('#headerMyAccountImg') || $target.is('#headerMyAccountText')) {
                //        $('#headerProfileDropdown').toggleClass("hide",false);
                //    } else {
                //        $('#headerProfileDropdown').toggleClass("hide", true);
                //    }
                //});
                $("#cmsPreviewChbx").click(function () {
                    //Prepare the success and the error handler
                    var error = function (request, textStatus, exception) {
                        var cultureId = ApplicationState.CultureID.toString();
                        redirect(cultureId);
                    };
                    var success = function (data) {
                        var cultureId = ApplicationState.CultureID.toString();
                        redirect(cultureId);
                    };
                    //Send the request
                    Actions.SwitchPreviewMode({}, success, error);
                    //redirects to the proper url
                    function redirect(cultureId) {
                        var location = window.location.href;
                        if (cultureId === "1") {
                            if (location.indexOf(ApplicationState.TrendInsightsUrlEn) !== -1) {
                                window.location.href = "/" + ApplicationState.TrendInsightsUrlEn;
                            }
                            else {
                                window.location.reload();
                            }
                        }
                        else {
                            if (location.indexOf(ApplicationState.TrendInsightsUrlFr) !== -1) {
                                window.location.href = "/" + ApplicationState.TrendInsightsUrlFr;
                            }
                            else {
                                window.location.reload();
                            }
                        }
                    }
                    ;
                });
                $('#headerProfileDropdown').click(function () {
                    me.closeProfileMenu();
                });
                $(".profileMenuHeaderCon").click(function (e) {
                    if ($('#headerProfileDropdown').hasClass("hide") == false) {
                        me.closeProfileMenu();
                        me.closeCurrencyMenu();
                    }
                    else {
                        me.closeProfileMenu();
                        me.closeCurrencyMenu();
                        $('#headerProfileDropdown').removeClass("hide");
                    }
                    e.stopPropagation();
                });
                $('#headerCurrencyDropdown').click(function () {
                    me.closeCurrencyMenu();
                });
                $("#lnkCurrency").click(function (e) {
                    $(".dropdownIcon").toggleClass("open", false);
                    var controlArgs = new ControlFetcherArgs();
                    controlArgs.cacheResult = true;
                    controlArgs.canRetrieveFromCache = true;
                    controlArgs.postCallHandler = function (result) {
                        //let model: ModalContentModel = new ModalContentModel("CurrencySelect", Translation.get("CurrencySelect"), result.d);
                        //model.ButtonCloseID = "btnCurrencySelectCancel";
                        //model.CloseEvent = Controls.Desktop.CurrencyCtrl.currencyUpdated;
                        //model.TitleText = "Currency Settings";
                        //model.DisplayType = ModalDisplayTypes.LightboxMe;
                        //showModalContent(model);
                        if ($("#headerCurrencyDropdown").length <= 0) {
                            $("#Header #lnkCurrency").append(result.d);
                        }
                        if ($('#headerCurrencyDropdown').hasClass("hide") == false) {
                            me.closeCurrencyMenu();
                            me.closeProfileMenu();
                        }
                        else {
                            me.closeCurrencyMenu();
                            me.closeProfileMenu();
                            $('#headerCurrencyDropdown').removeClass("hide");
                            $("#lnkCurrency .dropdownIcon").toggleClass("open", true);
                            $("#headerCurrencyDropdown .m_hdr_dropdown_menu").removeAttr('style');
                            $("div#" + (ApplicationState.CurrencyValue || "CAD") + ".m_hdr_dropdown_menu").attr("style", 'background-color: #7d0a0a');
                        }
                    };
                    var currencyArgs = new ScreenGenericControlArgs();
                    ControlFetcher.fetchCurrencySelector(controlArgs, currencyArgs);
                    e.stopPropagation();
                    return false;
                });
                $(document.body).click(function (e) {
                    me.closeCurrencyMenu();
                    me.closeProfileMenu();
                });
            };
            Header.prototype.closeCurrencyMenu = function () {
                $('#headerCurrencyDropdown').not('.hide').addClass("hide");
                $("#lnkCurrency .dropdownIcon").toggleClass("open", false);
            };
            Header.prototype.closeProfileMenu = function () {
                $('#headerProfileDropdown').not('.hide').addClass("hide");
            };
            Header.prototype.render = function () {
                this.toggleProfileMenu(true);
            };
            Header.prototype.toggleProfileMenu = function (forceClose) {
                if (ApplicationState.UserIsSignedIn) {
                    $("#headerMyAccountText").html(Utilities.HTMLEncode(LocalAccountStorage.ConsumerDisplayName.get()));
                    $("#headerMyAccountText").attr("title", Utilities.HTMLEncode(LocalAccountStorage.ConsumerDisplayName.get()));
                }
                $("#lnkProfileMenuMyAccount").toggle(ApplicationState.UserIsSignedIn);
                $("#lnkProfileMenuSignin").toggle(ApplicationState.UserIsSignedIn == false);
            };
            return Header;
        }(WebControl));
        Desktop.Header = Header;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Header.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var LatestBlogPosts = /** @class */ (function (_super) {
            __extends(LatestBlogPosts, _super);
            function LatestBlogPosts(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            LatestBlogPosts.prototype.loadModel = function (model) {
            };
            LatestBlogPosts.prototype.registerEventHandlers = function () {
                var me = this;
                $('.homeLatestBlogPostsEntryCon').click(function () {
                    var link = $(this).attr("data-link");
                    location.href = link;
                });
            };
            LatestBlogPosts.prototype.render = function () {
            };
            return LatestBlogPosts;
        }(WebControl));
        Desktop.LatestBlogPosts = LatestBlogPosts;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=LatestBlogPosts.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var ListingCard = /** @class */ (function (_super) {
            __extends(ListingCard, _super);
            function ListingCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            ListingCard.prototype.loadModel = function (model) {
            };
            ListingCard.prototype.registerEventHandlers = function () {
                $('#' + this.clientId + ' .noteIcon').unbind('click').click(function () {
                    noteIconClicked($(this));
                    return false;
                });
            };
            ListingCard.prototype.render = function () {
            };
            return ListingCard;
        }(WebControl));
        Desktop.ListingCard = ListingCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=ListingCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var ListingCardCarousel = /** @class */ (function (_super) {
            __extends(ListingCardCarousel, _super);
            function ListingCardCarousel(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.slidesPerView = "auto";
                _this.init();
                return _this;
            }
            ListingCardCarousel.prototype.loadModel = function (model) {
                var me = this;
                if ((model.ShowBullets || false) == false) {
                    $('#' + me.clientId + ' .swiper-pagination').hide();
                }
                this.slidesPerPage = model.ItemsPerPage;
                this.slidesPerView = model.SlidesPerView;
                //if (ApplicationConfig.CurrencyConverterEnabled && (model.CurrencyExceptionMessage || "") != "") {
                //    if (ApplicationState.CurrencyID != 0) {
                //        showMessage(Translation.get("CurrencyException"), MessageType.Error, DisplayType.Toast);
                //    }
                //}
            };
            ListingCardCarousel.prototype.registerEventHandlers = function () {
                $('#' + this.clientId + ' .noteIcon').unbind('click').click(function () {
                    noteIconClicked($(this));
                    return false;
                });
            };
            ListingCardCarousel.prototype.render = function () {
                var me = this;
                //setUniformHeightsForLargeListingCards('#' + this.clientId);
                window.setTimeout(function () {
                    Favourite.refreshIcons($('#' + me.clientId), { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                    Note.refreshIcons($('#' + me.clientId));
                    ConsumerProfile.Notifications.refreshNotificationCon($('#' + me.clientId));
                }, 200);
                //if ($('#recentlyViewedListingsInnerCon .swiper-slide').length > 1) {
                me.slider = new Swiper('.listingCardCarousel_InnerCon.swiper-container', {
                    pagination: { el: '.swiper-pagination', clickable: true },
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev'
                    },
                    on: {
                        slideNextTransitionStart: function (swiper) {
                            DataLayer.push({ event: "e_listingSlideNext" });
                        },
                        slidePrevTransitionStart: function (swiper) {
                            DataLayer.push({ event: "e_listingSlidePrev" });
                        },
                        slideChangeTransitionStart: function () {
                            if (me.slider != null) {
                                //$('#' + me.clientId + ' #ListingCardCarouselRecordLabelCurrentVal').text(me.swiper.realIndex + 1);
                                Events.Fire(Controls.Desktop.ListingCardCarousel.slideChanging, { 'slider': me.slider, 'controlid': me.clientId });
                            }
                        },
                        slideChangeTransitionEnd: function () {
                            if (me.slider != null) {
                                //$('#' + me.clientId + ' #ListingCardCarouselRecordLabelCurrentVal').text(me.slider.realIndex + 1);
                                Events.Fire(Controls.Desktop.ListingCardCarousel.slideChanged, { 'slider': me.slider, 'controlid': me.clientId });
                            }
                        }
                    },
                });
                //callAfterAnimation($('#recentlyViewedListingsInnerCon'), function () {
                //    for (var i = 0; i < me.swiper.bullets.length; i++) {
                //        let currentIndex: number = i;
                //        $(me.swiper.bullets[i]).click(function () {
                //            alert("te")
                //            //me.swiper.slideTo(currentIndex);
                //        });
                //    }
                //});
                //window.setTimeout(function () {
                //    for (var i = 0; i < me.slider.bullets.length; i++) {
                //        let currentIndex: number = i;
                //        $(me.slider.bullets[i]).click(function () {
                //            //alert("te")
                //            me.slider.slideTo(currentIndex);
                //        });
                //    }
                //}, 400); //Wait for animate in to finish, otherwise event doesn't bind properly
                //}
            };
            ListingCardCarousel.prototype.updateSlideCount = function (current, total) {
                if (total == "0") {
                    $('#' + this.clientId + ' #ListingCardCarouselRecordLabelCon').hide();
                }
                else {
                    $('#' + this.clientId + ' #ListingCardCarouselRecordLabelCon').show();
                    $('#' + this.clientId + ' #ListingCardCarouselRecordLabelCurrentVal').text(current);
                    $('#' + this.clientId + ' #ListingCardCarouselRecordLabelEndVal').text(total);
                }
            };
            ListingCardCarousel.slideChanging = 'listingCardCarouselSlideChanging';
            ListingCardCarousel.slideChanged = 'listingCardCarouselSlideChanged';
            return ListingCardCarousel;
        }(WebControl));
        Desktop.ListingCardCarousel = ListingCardCarousel;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=ListingCardCarousel.js.map;
//namespace Controls.Desktop {
//    export class LocalLogicSchools extends WebControl {
//        constructor(model: ModelBase, controlId: string) {
//            super(model, controlId);
//            this.init();
//        }
//        loadModel(model: ModelBase) { }
//        registerEventHandlers() {
//            $("#btnSchoolsCalloutGotIt").click(function () {
//                $('#LocalLogicSchoolsCallout').qtip("destroy");
//                LocalStorage.SchoolsCallout.save("1");
//                return false;
//            });
//        }
//        render() {
//        }
//        loadCallout() {
//            let me = this;
//            if (ApplicationConfig.EnableLocalLogicSchools && ApplicationConfig.LocalLogicSchoolsPromoActive) {
//                if (LocalStorage.SchoolsCallout.get() != "1") {
//                    $('#LocalLogicSchoolsCallout').qtip({
//                        content: Translation.get("SchoolsCallout"),
//                        style: {
//                            tip: {
//                                width: 24,
//                                height: 15
//                            },
//                            classes: 'popIn'
//                        },
//                        position: {
//                            my: 'left center',  // Position my top left...
//                            at: 'right', // at the bottom right of...
//                            target: $('#LocalLogicSchoolsCallout') // my target
//                        },
//                        show: {
//                            modal: false,
//                            ready: false
//                        },                      
//                        events: {
//                            show: function (event, api) {
//                                me.registerEventHandlers();
//                            }
//                        },
//                        hide: false // Don't specify a hide event
//                    });
//                    if ($('#listCon').is(":hidden")) { //only if list view is hidden
//                        if (Cookie.PromoBannerShown.get() == "1" || !ApplicationConfig.PromoBannerActive) { //only if promo banner is not active
//                            $('#LocalLogicSchoolsCallout').qtip("show");
//                        }
//                    }
//                }
//            }
//        }
//        initSchools(map: google.maps.Map) {
//            let me = this;
//            var SchoolsMapControl = function (div, map) {
//                var d = document.createElement('div');
//                d.style.display = "none";
//                d.setAttribute('id', 'local-schools');
//                div.appendChild(d);
//            }
//            var controlDiv = document.getElementById('LocalLogicSchoolsInnerCon');
//            var controlComponent = new SchoolsMapControl(controlDiv, map);
//            //controlDiv.index = 1;
//            map.controls[google.maps.ControlPosition.LEFT_TOP].push(controlDiv);
//        }
//        loadSchools(map: google.maps.Map) {
//            let me = this;
//            me.initSchools(map);
//            var s = document.createElement("script");
//            s.setAttribute("src", "https://cdn.locallogic.co/sdk/?token=b7505b4db3e235cb1a0430fb0038e8da97b3257a6376a5085a2dfed7911ffdfd38164eab0b97340d&callback=initSchools");
//            s.onload = function initSchools() {
//                //var w = new locallogic.LocalSchools('local-schools', {
//                //    googleMapsMap: map,
//                //    //color: "#156073",
//                //    color: "#27B5D9",
//                //    locale: ApplicationState.LanguageAttribute,
//                //    asMapControl: true,
//                //    detailsMapPosition: "LEFT_TOP",
//                //    filterPanelOpen: false
//                //});
//                $("#local-schools").show(700, function () { me.loadCallout(); });
//            }
//            document.getElementById("LocalLogicSchools").appendChild(s);
//        }
//        toggleCallout(show: boolean) {
//            if (ApplicationConfig.EnableLocalLogicSchools) {
//                if (show) {
//                    if ($('#listCon').is(":hidden")) { //only if list view is hidden
//                        if (LocalStorage.SchoolsCallout.get() != "1") {
//                            $('#LocalLogicSchoolsCallout').qtip("show")
//                        }
//                    }
//                } else {
//                    $('#LocalLogicSchoolsCallout').qtip("hide");
//                }
//            }
//        }
//    }
//}
//# sourceMappingURL=LocalLogicSchools.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var MapCard = /** @class */ (function (_super) {
            __extends(MapCard, _super);
            function MapCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.lat = "";
                _this.lon = "";
                _this.showMap = true;
                _this.mapIsLoaded = false;
                _this.initialMapViewSet = false;
                _this.mapInTransition = false;
                _this.mapBeingDragged = false;
                _this.init();
                return _this;
                //this.registerEventHandlers(); //TODO - fix this hack? (see: https://github.com/Microsoft/TypeScript/issues/945)
            }
            MapCard.prototype.loadModel = function (model) {
                this.lat = model.Lat;
                this.lon = model.Lon;
                this.showMap = model.ShowMap;
            };
            MapCard.prototype.registerEventHandlers = function () {
                var me = this;
                Events.Listen(MasterPages.Desktop.GoogleAPILoaded, function () { if (me.showMap) {
                    me.initMap();
                } });
            };
            MapCard.prototype.render = function () {
                var me = this;
                if (me.showMap) {
                    me.loadGoogleMaps(ApplicationConfig.GoogleAPIKey);
                }
            };
            MapCard.prototype.loadGoogleMaps = function (key) {
                if (Utilities.isGoogleMapsDefined() == false) {
                    var id = "googleMapsAPI";
                    var script = document.getElementsByTagName('script')[0];
                    var js = document.createElement('script');
                    var version = "";
                    if (ApplicationConfig.IsQAMode) {
                        version = "&v=3"; //Force release mode
                    }
                    js.id = id;
                    if (ApplicationState.CultureID == 1) {
                        js.setAttribute("src", '//maps.googleapis.com/maps/api/js?callback=GoogleMapsLoaded&key=' + key + '&region=CA&language=en&libraries=places' + version);
                    }
                    else {
                        js.setAttribute("src", '//maps.googleapis.com/maps/api/js?callback=GoogleMapsLoaded&key=' + key + '&region=CA&language=fr&libraries=places' + version);
                    }
                    script.parentNode.insertBefore(js, script);
                }
            };
            MapCard.prototype.initMap = function () {
                var me = this;
                var LatLon = { lat: Number(me.lat), lng: Number(me.lon) };
                var map = new google.maps.Map(document.getElementById('mapCardBodyCon'), {
                    zoomControl: false,
                    center: LatLon,
                    zoom: 15,
                    fullscreenControl: false,
                    mapTypeControl: false,
                    clickableIcons: false,
                    gestureHandling: 'greedy' // Might need this like in r6?
                });
                this.map = map;
                var icon = {
                    url: '/images/common/icons/svg/pin-house-purple.svg',
                    size: new google.maps.Size(45, 45),
                    scaledSize: new google.maps.Size(45, 45),
                    textColor: '#ffffff',
                    textSize: 12,
                };
                me.officeMarker = new google.maps.Marker({
                    position: LatLon,
                    icon: icon,
                    map: map
                });
                google.maps.event.addListener(me.map, 'idle', function () {
                    if (me.initialMapViewSet == false) {
                        me.initialMapViewSet = true;
                    }
                    me.mapIsLoaded = true;
                });
                google.maps.event.addListener(me.map, 'resize', function () {
                    Logging.Debug("Map resize event", LogType.Map);
                    return;
                });
                google.maps.event.addListener(me.map, 'dragstart', function () {
                    Logging.Debug("Map dragstart event", LogType.Map);
                    me.mapBeingDragged = true;
                    return;
                });
                google.maps.event.addListener(me.map, 'dragend', function () {
                    Logging.Debug("Map dragend event", LogType.Map);
                    me.mapBeingDragged = false;
                    //google.maps.event.trigger(me.map, 'idle');
                    return;
                });
            };
            return MapCard;
        }(WebControl));
        Desktop.MapCard = MapCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=MapCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var ModalContent = /** @class */ (function (_super) {
            __extends(ModalContent, _super);
            function ModalContent(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.DisplayType = ModalDisplayTypes.Featherlight;
                _this.init();
                return _this;
            }
            ModalContent.prototype.loadModel = function (model) {
                this.model = model;
                this.DisplayType = model.DisplayType;
            };
            ModalContent.prototype.render = function () {
                var me = this;
                me.show_dialog();
                Events.Fire(Controls.Desktop.ModalContent.ModalContentOpened, new DialogOpenedEventArgs(this.model.ID, this.ForceCloseDialog));
            };
            ModalContent.prototype.registerEventHandlers = function () {
                var me = this;
                $('#' + this.clientId + ' #' + this.model.ButtonCloseID).click(function () {
                    if (me.model.ButtonCloseOnClick != null) {
                        me.model.ButtonCloseOnClick(me);
                    }
                    if (me.DisplayType == ModalDisplayTypes.LightboxMe) {
                        me.LightBox_Me.trigger("close");
                    }
                    else {
                        me.Featherlight.close();
                    }
                });
            };
            ModalContent.prototype.show_dialog = function () {
                var me = this;
                if (me.DisplayType == ModalDisplayTypes.LightboxMe) {
                    me.LightBox_Me = $('#' + me.model.ID + '_con').lightbox_me({
                        closeSelector: ".dialogCloseX",
                        centered: true,
                        destroyOnClose: true,
                        onLoad: function () {
                            $('.ModalOverlay').removeClass("hidden");
                            if (me.model.AfterOpen != null) {
                                me.model.AfterOpen(me);
                            }
                        },
                        onClose: function () {
                            if (me.model.AfterClose != null) {
                                me.model.AfterClose(me);
                            }
                            //Remove dead recaptcha frames, messed with prop details iframe detection
                            $('iframe[src="about:blank"]').remove();
                            //No need to move captcha anymore we render directly on the container
                            //MoveRecaptcha(me.model.ID + '_con');
                            Events.Fire(Controls.Desktop.ModalContent.ModalContentClosed, new DialogClosedEventArgs(me.model.ID));
                        }
                    });
                    me.LightBox_Me.trigger('reposition');
                    if (me.model.CloseEvent != "") {
                        Events.Listen(me.model.CloseEvent, function () { me.LightBox_Me.trigger('close'); });
                    }
                }
                else {
                    me.Featherlight = $.featherlight($('#' + me.model.ID + '_con'), {
                        closeIcon: null,
                        type: 'html',
                        variant: 'modalcontrol ' + me.model.CssClass,
                        openSpeed: 50,
                        closeSpeed: 150,
                        openTrigger: me.model.OpenTrigger,
                        closeTrigger: me.model.CloseTrigger,
                        beforeOpen: function (event) {
                            if (me.model.BeforeOpen != null) {
                                me.model.BeforeOpen(me);
                            }
                        },
                        beforeClose: function (event) {
                            if (me.model.BeforeClose != null) {
                                me.model.BeforeClose(me);
                            }
                        },
                        afterOpen: function (event) {
                            if (me.model.AfterOpen != null) {
                                me.model.AfterOpen(me);
                            }
                            $('.ModalOverlay').removeClass("hidden");
                        },
                        afterClose: function (event) {
                            if (me.model.AfterClose != null) {
                                me.model.AfterClose(me);
                            }
                            Events.Fire(Controls.Desktop.ModalContent.ModalContentClosed, new DialogClosedEventArgs(me.model.ID));
                        }
                    });
                    if (me.model.CloseEvent != "") {
                        Events.Listen(me.model.CloseEvent, function () { me.Featherlight.close(); });
                    }
                }
                if (this.model.SetFocusOnLoad) {
                    SetFocusOnFirstInput($('#' + me.clientId));
                }
                me.ForceCloseDialog = function () {
                    if (me.DisplayType == ModalDisplayTypes.LightboxMe) {
                        me.LightBox_Me.trigger("close");
                    }
                    else {
                        me.Featherlight.close();
                    }
                };
            };
            ModalContent.ModalContentOpened = "ModalContentOpened";
            ModalContent.ModalContentClosed = "ModalContentClosed";
            return ModalContent;
        }(WebControl));
        Desktop.ModalContent = ModalContent;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=ModalContent.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var NAC_CarouselBanner = /** @class */ (function (_super) {
            __extends(NAC_CarouselBanner, _super);
            function NAC_CarouselBanner(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            NAC_CarouselBanner.prototype.loadModel = function (model) {
            };
            NAC_CarouselBanner.prototype.registerEventHandlers = function () {
            };
            NAC_CarouselBanner.prototype.render = function () {
                var me = this;
                me.swiper = new Swiper("#swiperWhyUseRealtor", {
                    navigation: {
                        nextEl: '#swiperWhyUseRealtorBtnNext',
                        prevEl: '#swiperWhyUseRealtorBtnPrev',
                    },
                    loop: true,
                    slidesPerView: 1,
                    spaceBetween: 25,
                    on: {
                        init: function (swiper) {
                        },
                        click: function (swiper) { },
                        slidePrevTransitionStart: function (swiper) {
                        },
                        slideNextTransitionStart: function (swiper) {
                        }
                    }
                });
            };
            return NAC_CarouselBanner;
        }(WebControl));
        Desktop.NAC_CarouselBanner = NAC_CarouselBanner;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=NAC-Carousel-Banner.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var NotificationEmailsMessage = /** @class */ (function (_super) {
            __extends(NotificationEmailsMessage, _super);
            function NotificationEmailsMessage(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            NotificationEmailsMessage.prototype.loadModel = function (model) {
            };
            NotificationEmailsMessage.prototype.registerEventHandlers = function () {
                var me = this;
                $('.qtip').on("click", "#" + me.clientId + " .notification-message-mainBtn", function (e) {
                    e.preventDefault();
                    var notifNewEmailsObj = !LocalStorage.NotificationNewEmails.getObject() ?
                        { TriggerPageLoadFromResumeSearch: false, MessageBoxAcknowledged: false, CurrentPageLoadedFromResumeSearch: false } :
                        LocalStorage.NotificationNewEmails.getObject();
                    notifNewEmailsObj.MessageBoxAcknowledged = true;
                    LocalStorage.NotificationNewEmails.saveObject(notifNewEmailsObj);
                    Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipClosing, $(e.target));
                });
            };
            NotificationEmailsMessage.prototype.render = function () {
            };
            return NotificationEmailsMessage;
        }(WebControl));
        Desktop.NotificationEmailsMessage = NotificationEmailsMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=NotificationEmailsMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var OfficeCard = /** @class */ (function (_super) {
            __extends(OfficeCard, _super);
            function OfficeCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
                //this.registerEventHandlers(); //TODO - fix this hack? (see: https://github.com/Microsoft/TypeScript/issues/945)
            }
            OfficeCard.prototype.loadModel = function (model) {
                this.organizationId = model.OrganizationId;
                this.referenceNumber = model.ReferenceNumber;
                this.listingId = model.ListingId;
            };
            OfficeCard.prototype.registerEventHandlers = function () {
                var _card = this; //Won't let you use _this for some reason?
                if (this.organizationId != null) {
                    //let cardCon: JQuery = $("#" + _card.clientId);//.checkExists();
                    var cardCon = $('.OfficeCard-' + _card.organizationId); //.checkExists();
                    ////let cardCon: JQuery = .checkExists();                
                    //cardCon.find('.callLink').click(function () {
                    //    contactLinkClicked($(this), 'officeCardPhoneNumbersCon');
                    //    return false;
                    //});
                    //cardCon.find('.websiteLink').click(function () {
                    //    contactLinkClicked($(this), 'officeCardWebsitesCon');
                    //    if (_card.listingId != '') {
                    //        Analytics.log(_card.listingId, 'website_office')
                    //    }
                    //    return false;
                    //});
                    cardCon.find('.lnkEmailOffice').unbind('click');
                    cardCon.find('.lnkEmailOffice').click(function () {
                        LoadEmailOfficeForm(_card.organizationId, _card.listingId || "", _card.referenceNumber || "", false);
                        return false;
                    });
                    cardCon.find('.lnkEmailRealtorWithBooking').unbind('click');
                    cardCon.find('.lnkEmailRealtorWithBooking').click(function () {
                        LoadEmailOfficeForm(_card.organizationId, _card.listingId || "", _card.referenceNumber || "", true);
                        return false;
                    });
                }
            };
            OfficeCard.prototype.render = function () { };
            return OfficeCard;
        }(WebControl));
        Desktop.OfficeCard = OfficeCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=OfficeCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var OfficeResults = /** @class */ (function (_super) {
            __extends(OfficeResults, _super);
            function OfficeResults(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            OfficeResults.prototype.loadModel = function (model) {
                this.Model = model;
            };
            OfficeResults.prototype.registerEventHandlers = function () {
            };
            OfficeResults.prototype.render = function () {
                if (this.Model.TotalResults == 1 && this.Model.SingleResultURL != "") {
                    Events.Fire(Controls.Desktop.OfficeResults.officeSingleResultLoaded, this.Model);
                }
                Events.Fire(Controls.Desktop.OfficeResults.officeResultsLoaded, this.Model);
            };
            OfficeResults.officeResultsLoaded = 'officeResultsLoaded';
            OfficeResults.officeSingleResultLoaded = 'officeSingleResultLoaded';
            return OfficeResults;
        }(WebControl));
        Desktop.OfficeResults = OfficeResults;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=OfficeResults.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Pagination = /** @class */ (function (_super) {
            __extends(Pagination, _super);
            function Pagination(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.pageChange = new RealtorControlEvent(_this, "pageChange");
                _this.dropdownValuesLoaded = false;
                _this.refreshingUI = false;
                _this.allowPageSelection = true;
                _this.init();
                return _this;
            }
            Pagination.prototype.loadModel = function (model) {
                this.maxPages = model.MaxPages;
                this.allowPageSelection = model.AllowPageSelection;
            };
            Pagination.prototype.registerEventHandlers = function () {
                var me = this;
                //$("#" + me.clientId + " .ddlResultsPages").on("select2:open", function () {
                //    me.opened.Fire(me, {});
                //});
                //$("#" + me.clientId + " .ddlResultsPages").on("select2:close", function () {
                //    me.closed.Fire(me, {});
                //});
                $("#" + me.clientId + " .ddlResultsPages").change(function () {
                    if ($(this).is("[disabled]") == false) {
                        var currentPage = $(this).val(); //me.getCurrentPage();        
                        $("#" + me.clientId + " .ddlResultsPages").val(currentPage);
                        if (me.refreshingUI == false) {
                            Events.Fire(Controls.Desktop.Pagination.paginationPageChanged, { page: currentPage });
                        }
                        if (me.dropdownValuesLoaded && me.refreshingUI == false) {
                            me.pageChange.Fire(me, { page: currentPage.toString() });
                        }
                        //me.updateUIState();
                    }
                });
                $("#" + me.clientId + " .paginationLink").click(function (e) {
                    addAnimationClass($(this), "clicked");
                    e.preventDefault();
                });
                $("#" + me.clientId + " .lnkPreviousResultsPage").click(function (e) {
                    if ($(this).is("[disabled]") == false) {
                        var currentPage = me.getCurrentPage();
                        $("#" + me.clientId + " .ddlResultsPages").val(currentPage - 1); //.change();
                        if (me.refreshingUI == false) {
                            Events.Fire(Controls.Desktop.Pagination.paginationPageChanged, { page: currentPage - 1 });
                        }
                        if (me.dropdownValuesLoaded && me.refreshingUI == false) {
                            me.pageChange.Fire(me, { page: (currentPage - 1).toString() });
                        }
                        //me.updateUIState();
                    }
                });
                $("#" + me.clientId + " .lnkFirstResultsPage").click(function (e) {
                    if ($(this).is("[disabled]") == false) {
                        $("#" + me.clientId + " .ddlResultsPages").val(1); //.change();
                        if (me.refreshingUI == false) {
                            Events.Fire(Controls.Desktop.Pagination.paginationPageChanged, { page: 1 });
                        }
                        if (me.dropdownValuesLoaded && me.refreshingUI == false) {
                            me.pageChange.Fire(me, { page: "1" });
                        }
                        //me.updateUIState();
                    }
                });
                $("#" + me.clientId + " .lnkNextResultsPage").click(function (e) {
                    if ($(this).is("[disabled]") == false) {
                        var currentPage = me.getCurrentPage();
                        $("#" + me.clientId + " .ddlResultsPages").val(currentPage + 1); //.change();
                        if (me.refreshingUI == false) {
                            Events.Fire(Controls.Desktop.Pagination.paginationPageChanged, { page: currentPage + 1 });
                        }
                        if (me.dropdownValuesLoaded && me.refreshingUI == false) {
                            me.pageChange.Fire(me, { page: (currentPage + 1).toString() });
                        }
                        //me.updateUIState();
                    }
                });
                Events.Listen(Controls.Desktop.Pagination.paginationNeedsRefresh, function (val) {
                    me.updateUIState();
                });
            };
            Pagination.prototype.render = function () {
                var me = this;
                if (me.allowPageSelection) {
                    DropDown.loadSelect2($('#' + me.clientId + ' .ddlResultsPages'), {
                        allowClear: false,
                        closeOnSelect: true,
                        //containerCssClass: "homeFilter",
                        containerCssClass: "paginationDDLCon",
                        stopOpenOnClear: true,
                        width: "55px"
                    });
                }
                me.updateUIState();
                me.dropdownValuesLoaded = true;
            };
            Pagination.prototype.refreshUI = function (pagingInfo) {
                var me = this;
                me.refreshingUI = true;
                $("#" + me.clientId + " .paginationLink").removeAttr("disabled");
                if (pagingInfo.CurrentPage <= 1) {
                    $("#" + me.clientId + " .lnkFirstResultsPage").attr("disabled", "true");
                    $("#" + me.clientId + " .lnkPreviousResultsPage").attr("disabled", "true");
                }
                if (pagingInfo.CurrentPage == pagingInfo.TotalPages || ((pagingInfo.CurrentPage * pagingInfo.RecordsPerPage) >= pagingInfo.MaxRecords)) {
                    $("#" + me.clientId + " .lnkLastResultsPage").attr("disabled", "true");
                    $("#" + me.clientId + " .lnkNextResultsPage").attr("disabled", "true");
                }
                $("#" + me.clientId + " .ddlResultsPages").prop("disabled", false);
                $("#" + me.clientId + " .ResultsPaginationCon").removeAttr("disabled");
                if (pagingInfo.TotalRecords > pagingInfo.RecordsPerPage * pagingInfo.TotalPages) {
                    $("#" + me.clientId + " .paginationTotalPagesNum").text(pagingInfo.TotalPages + "+");
                }
                else {
                    $("#" + me.clientId + " .paginationTotalPagesNum").text(pagingInfo.TotalPages);
                }
                if (me.allowPageSelection) {
                    var options = [];
                    var maxPages = pagingInfo.TotalPages;
                    if (this.maxPages != null) {
                        maxPages = this.maxPages;
                    }
                    for (var i = 1; i <= maxPages; i++) {
                        var option = new Option(i.toString(), i.toString(), false, false);
                        options.push(option);
                    }
                    me.dropdownValuesLoaded = false;
                    DropDown.replaceValues($('#' + me.clientId + ' .ddlResultsPages'), options);
                    var select = $('#' + me.clientId + ' .ddlResultsPages')[0];
                    if (select.options.length > pagingInfo.TotalPages) {
                        for (var i = select.options.length; i > pagingInfo.TotalPages; i--) {
                            select.options[i - 1].remove();
                        }
                    }
                    $("#" + me.clientId + " .ddlResultsPages").val(Math.min(pagingInfo.TotalPages, pagingInfo.CurrentPage)).change();
                }
                else {
                    $("#" + me.clientId + " .paginationCurrentPage").text(Math.min(pagingInfo.TotalPages, pagingInfo.CurrentPage));
                }
                if (pagingInfo.TotalPages <= 1) {
                    $("#" + me.clientId).css("display", "none");
                }
                else {
                    $("#" + me.clientId).css("display", "inherit");
                }
                me.dropdownValuesLoaded = true;
                me.refreshingUI = false;
            };
            Pagination.prototype.getCurrentPage = function () {
                var returnValue;
                if (this.allowPageSelection) {
                    returnValue = Number($("#" + this.clientId + " .ddlResultsPages").val());
                }
                else {
                    returnValue = Number($("#" + this.clientId + " .paginationCurrentPage").text());
                }
                return returnValue;
            };
            Pagination.prototype.updateUIState = function () {
                var me = this;
                var currentPage = me.getCurrentPage();
                $(".paginationLink").removeAttr("disabled");
                if (currentPage <= 1) {
                    $(".lnkFirstResultsPage").attr("disabled", "true");
                    $(".lnkPreviousResultsPage").attr("disabled", "true");
                }
                var maxPages = $("#" + me.clientId + " .ddlResultsPages option:last-child").val();
                if (currentPage >= maxPages) {
                    $(".lnkLastResultsPage").attr("disabled", "true");
                    $(".lnkNextResultsPage").attr("disabled", "true");
                }
                if (me.allowPageSelection) {
                    $('.ddlResultsPages').prop("disabled", false);
                }
                $('.ResultsPaginationCon').removeAttr("disabled");
                if ((maxPages || 0) <= 1) {
                    $("#" + me.clientId).css("display", "none");
                }
                else {
                    $("#" + me.clientId).css("display", "inherit");
                }
            };
            //public opened: RealtorControlEvent<{}> = new RealtorControlEvent(this, "paginatorOpened"); 
            //public closed: RealtorControlEvent<{}> = new RealtorControlEvent(this, "paginatorClosed"); 
            Pagination.paginationPageChanged = 'paginationPageChanged';
            Pagination.paginationNeedsRefresh = 'paginationNeedsRefresh';
            return Pagination;
        }(WebControl));
        Desktop.Pagination = Pagination;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Pagination.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var PolygonClearingMessage = /** @class */ (function (_super) {
            __extends(PolygonClearingMessage, _super);
            function PolygonClearingMessage(model, controlId, cookieExpiryInDays) {
                var _this = _super.call(this, model, controlId) || this;
                _this.CookieExpiryInDays = cookieExpiryInDays;
                _this.init();
                return _this;
            }
            PolygonClearingMessage.prototype.loadModel = function (model) {
            };
            PolygonClearingMessage.prototype.registerEventHandlers = function () {
                var me = this;
                $('.qtip').on("click", "#" + me.clientId + " .polygon-clearing-mainBtn", function (e) {
                    e.preventDefault();
                    Cookie.PolygonClearingMessage.save("true", me.CookieExpiryInDays);
                    Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipClosing, $(e.target));
                });
            };
            PolygonClearingMessage.prototype.render = function () {
            };
            return PolygonClearingMessage;
        }(WebControl));
        Desktop.PolygonClearingMessage = PolygonClearingMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=PolygonClearingMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var PromoCarousel = /** @class */ (function (_super) {
            __extends(PromoCarousel, _super);
            function PromoCarousel(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            PromoCarousel.prototype.loadModel = function (model) {
            };
            PromoCarousel.prototype.registerEventHandlers = function () {
                var me = this;
                $(".promoCarouselBtnCon .btn").click(function (e) {
                    me.Swiper.slideTo(me.Swiper.realIndex + 1);
                });
                $(".promoCarouselBtnCon .btn.last").click(function (e) {
                    me.closePromoCarousel();
                });
                $(".promoCarouselCloseCon").click(function (e) {
                    me.closePromoCarousel();
                });
                $(document).keydown(function (e) {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                        return false;
                    }
                    else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                        me.closePromoCarousel();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            };
            PromoCarousel.prototype.render = function () {
                var me = this;
                window.setTimeout(function () {
                    $('.promoCarouselCon').show();
                    me.Swiper = new Swiper('#promoCarousel.swiper-container', {
                        pagination: { el: '.swiper-pagination', clickable: true },
                        autoHeight: true
                    });
                    $(".promoCarouselModal").show();
                }, 2000);
            };
            PromoCarousel.prototype.closePromoCarousel = function () {
                Cookie.PromoBannerShown.save("1");
                $(".promoCarouselModal").fadeOut(300, function () { $(this).remove(); });
                $("#promoCarousel").fadeOut(300, function () { $(this).remove(); });
                //if ((<Controls.Desktop.LocalLogicSchools>ApplicationState.Current.Controls["LocalLogicSchoolsCtrl"])) {
                //    (<Controls.Desktop.LocalLogicSchools>ApplicationState.Current.Controls["LocalLogicSchoolsCtrl"]).toggleCallout(true);
                //}
            };
            return PromoCarousel;
        }(WebControl));
        Desktop.PromoCarousel = PromoCarousel;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=PromoCarousel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var PublicOffersMessage = /** @class */ (function (_super) {
            __extends(PublicOffersMessage, _super);
            function PublicOffersMessage(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            PublicOffersMessage.prototype.loadModel = function (model) {
            };
            PublicOffersMessage.prototype.registerEventHandlers = function () {
                var me = this;
                $('.qtip').on("click", "#" + me.clientId + " .publicOffers-message-mainBtn", function (e) {
                    e.preventDefault();
                    var notifPublicOffersObj = !LocalStorage.PublicOffersNewMsgs.getObject() ?
                        { TriggerPageLoadFromResumeSearch: false, MessageBoxAcknowledged: false, CurrentPageLoadedFromResumeSearch: false } :
                        LocalStorage.PublicOffersNewMsgs.getObject();
                    notifPublicOffersObj.MessageBoxAcknowledged = true;
                    LocalStorage.PublicOffersNewMsgs.saveObject(notifPublicOffersObj);
                    Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipClosing, $(e.target));
                });
            };
            PublicOffersMessage.prototype.render = function () {
            };
            return PublicOffersMessage;
        }(WebControl));
        Desktop.PublicOffersMessage = PublicOffersMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=PublicOffersMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RankMyAgentCard = /** @class */ (function (_super) {
            __extends(RankMyAgentCard, _super);
            function RankMyAgentCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.initLoad = true;
                _this.init();
                return _this;
            }
            RankMyAgentCard.prototype.loadModel = function (model) {
                RankMyAgentCard.instance = this;
            };
            RankMyAgentCard.prototype.registerEventHandlers = function () {
                //if ($('#rankingTestmonialOuterCon .swiper-slide').length > 0) {
                //    RankMyAgentCard.instance.loadSwiper();
                //} else {
                Events.Listen(Pages.Desktop.Realtor.rankMyAgentLoaded, function () {
                    RankMyAgentCard.instance.loadSwiper();
                });
                //}
            };
            RankMyAgentCard.prototype.render = function () {
            };
            RankMyAgentCard.prototype.loadSwiper = function () {
                this.slider = new Swiper('#rankingTestmonialOuterCon', {
                    loop: true,
                    navigation: {
                        nextEl: '.swiperLinkTextNext',
                        prevEl: '.swiperLinkTextPrev'
                    },
                    on: {
                        slideNextTransitionStart: function (swiper) {
                            if (!RankMyAgentCard.instance.initLoad) {
                                DataLayer.push({ event: "e_RankMyAgentSlideNext" });
                            }
                        },
                        slidePrevTransitionStart: function (swiper) {
                            if (!RankMyAgentCard.instance.initLoad) {
                                DataLayer.push({ event: "e_RankMyAgentSlidePrev" });
                            }
                        }
                    }
                });
                var numberOfActualSlides = $(this.slider.slides).not('.swiper-slide-duplicate').length;
                if (numberOfActualSlides <= 1) {
                    this.slider.allowSlidePrev = this.slider.allowSlideNext = false;
                    this.slider.update();
                    $("#rankingTestmonialOuterCon .swiperLinkTextNext, #rankingTestmonialOuterCon .swiperLinkTextPrev").hide();
                }
                RankMyAgentCard.instance.initLoad = false;
            };
            RankMyAgentCard.slideChanging = 'rankingTestmonialOuterConSlideChanging';
            RankMyAgentCard.slideChanged = 'rankingTestmonialOuterConSlideChanged';
            return RankMyAgentCard;
        }(WebControl));
        Desktop.RankMyAgentCard = RankMyAgentCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RankMyAgentCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RealSatisfiedCard = /** @class */ (function (_super) {
            __extends(RealSatisfiedCard, _super);
            function RealSatisfiedCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.initLoad = true;
                _this.init();
                return _this;
            }
            RealSatisfiedCard.prototype.loadModel = function (model) {
                RealSatisfiedCard.instance = this;
                $('#RealSatisfiedTestmonialOuterCon').find('.swiper-button-next,.swiper-button-prev').addClass(".slide-swiper");
            };
            RealSatisfiedCard.prototype.registerEventHandlers = function () {
                //if ($('#RealSatisfiedTestmonialOuterCon .swiper-slide').length > 0) {
                //    RealSatisfiedCard.instance.loadSwiper();
                //} else {
                Events.Listen(Pages.Desktop.Realtor.realSatisfiedLoaded, function () {
                    RealSatisfiedCard.instance.loadSwiper();
                });
                //}
            };
            RealSatisfiedCard.prototype.render = function () {
            };
            RealSatisfiedCard.prototype.loadSwiper = function () {
                if ($('#RealSatisfiedTestmonialOuterCon').length > 0) {
                    this.slider = new Swiper('#RealSatisfiedTestmonialOuterCon', {
                        loop: true,
                        navigation: {
                            nextEl: '.swiperLinkTextNext',
                            prevEl: '.swiperLinkTextPrev'
                        },
                        on: {
                            slideNextTransitionStart: function (swiper) {
                                if (!RealSatisfiedCard.instance.initLoad) {
                                    DataLayer.push({ event: "e_RealSatisfiedSlideNext" });
                                }
                            },
                            slidePrevTransitionStart: function (swiper) {
                                if (!RealSatisfiedCard.instance.initLoad) {
                                    DataLayer.push({ event: "e_RealSatisfiedSlidePrev" });
                                }
                            }
                        }
                    });
                    var numberOfActualSlides = $(this.slider.slides).not('.swiper-slide-duplicate').length;
                    if (numberOfActualSlides <= 1) {
                        this.slider.allowSlidePrev = this.slider.allowSlideNext = false;
                        this.slider.update();
                        $("#RealSatisfiedTestmonialOuterCon .swiperLinkTextNext, #RealSatisfiedTestmonialOuterCon .swiperLinkTextPrev").hide();
                    }
                    RealSatisfiedCard.instance.initLoad = false;
                }
            };
            RealSatisfiedCard.slideChanging = 'ratingTestmonialOuterConSlideChanging';
            RealSatisfiedCard.slideChanged = 'ratingTestmonialOuterConSlideChanged';
            return RealSatisfiedCard;
        }(WebControl));
        Desktop.RealSatisfiedCard = RealSatisfiedCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RealSatisfiedCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RealtorCard = /** @class */ (function (_super) {
            __extends(RealtorCard, _super);
            function RealtorCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.ratings = [];
                _this.init();
                return _this;
                //this.registerEventHandlers(); //TODO - fix this hack? (see: https://github.com/Microsoft/TypeScript/issues/945)
            }
            RealtorCard.prototype.loadModel = function (model) {
                this.individualId = model.IndividualId;
                this.organizationId = model.OrganizationId;
                this.referenceNumber = model.ReferenceNumber;
                this.listingId = model.ListingId;
                try {
                    this.ratings = (model.RatingsJSON != null && model.RatingsJSON != "" ? JSON.parse(model.RatingsJSON) : "");
                }
                catch (err) {
                    this.ratings = [];
                }
            };
            RealtorCard.prototype.registerEventHandlers = function () {
                var _card = this;
                var cardCon = $('#RealtorCard-' + _card.individualId); //.checkExists();
                //cardCon.find('.callLink').click(function () {
                //    contactLinkClicked($(this), 'realtorCardPhoneNumbersCon');
                //    if (_card.listingId != '') {
                //        Analytics.log(_card.listingId, 'phone_agent')
                //    }
                //    return false;
                //});
                //cardCon.find('.websiteLink').click(function () {
                //    contactLinkClicked($(this), 'realtorCardWebsitesCon');
                //    if (_card.listingId != '') {
                //        Analytics.log(_card.listingId, 'website_agent')
                //    }
                //    return false;
                //});
                // window.setTimeout(function () {
                //Won't let you use _this for some reason?
                if ((_card.individualId || '') != '') {
                    cardCon.find('.lnkEmailRealtor').unbind('click');
                    cardCon.find('.lnkEmailRealtor').click(function () {
                        LoadEmailRealtorForm(_card.individualId, _card.listingId || "", _card.referenceNumber || "", false);
                        return false;
                    });
                    cardCon.find('.lnkEmailRealtorWithBooking').unbind('click');
                    cardCon.find('.lnkEmailRealtorWithBooking').click(function () {
                        LoadEmailRealtorForm(_card.individualId, _card.listingId || "", _card.referenceNumber || "", true);
                        return false;
                    });
                }
                //}, 200);
            };
            RealtorCard.prototype.render = function () {
                if (this.ratings.length > 0) {
                    for (var r = 0; r < this.ratings.length; r++) {
                        this.loadRealtorRating(this.ratings[r]);
                    }
                }
            };
            RealtorCard.prototype.loadRealtorRating = function (rating) {
                var me = this;
                var fetcherArgs = new ControlFetcherArgs();
                fetcherArgs.showLoadingAnimation = false;
                fetcherArgs.showLoadingSpinner = true;
                fetcherArgs.cacheResult = true;
                fetcherArgs.postCallHandler = function (results, args) {
                    $("#realtorRatingCon" + rating.RatingIdHTML + rating.LinkHash).html(results.d).show();
                };
                var realtorRatingArgs = new RealtorRatingArgs();
                realtorRatingArgs.Rating = rating;
                ControlFetcher.fetchRealtorRating(fetcherArgs, realtorRatingArgs);
            };
            return RealtorCard;
        }(WebControl));
        Desktop.RealtorCard = RealtorCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RealtorCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RealtorCardCarousel = /** @class */ (function (_super) {
            __extends(RealtorCardCarousel, _super);
            function RealtorCardCarousel(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            RealtorCardCarousel.prototype.loadModel = function (model) {
                var me = this;
                if (model.ShowXofX == true) {
                    $('#' + this.clientId + ' #RealtorCardCarouselRecordLabelCon').show();
                }
                //if ($('#RealtorCardCarouselCon .realtorCardCon').length > 1) {
                var swiper = new Swiper('#' + me.clientId + ' #RealtorCardCarouselOuterCon', {
                    pagination: { el: '.swiper-pagination', clickable: true },
                    loop: model.ContinuousSlides,
                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev'
                    },
                    on: {
                        slideNextTransitionStart: function (swiper) {
                            DataLayer.push({ event: "e_realtorSlideNext" });
                        },
                        slidePrevTransitionStart: function (swiper) {
                            DataLayer.push({ event: "e_realtorSlidePrev" });
                        },
                        slideChangeTransitionStart: function () {
                            if (me.slider != null) {
                                $('#' + me.clientId + ' #RealtorCardCarouselRecordLabelCurrentVal').text(me.slider.realIndex + 1);
                                Events.Fire(Controls.Desktop.RealtorCardCarousel.slideChanging, { 'slider': me.slider, 'controlid': me.clientId });
                            }
                        }
                    }
                });
                Controls.Desktop.RealtorCardCarousel.loaded.Fire({ control: this });
                me.slider = swiper;
                if (model.ShowBullets == false) {
                    $('#' + this.clientId + ' .swiper-pagination').hide();
                }
                //}
            };
            RealtorCardCarousel.prototype.render = function () {
                //if (typeof $.fn.fullpage.destroy == 'function') {
                //    $.fn.fullpage.destroy('all');
                //}
                setConsistantHeights('#' + this.clientId + ' .swiper-slide .realtorCardRight');
            };
            RealtorCardCarousel.prototype.registerEventHandlers = function () {
                var me = this;
                if ($('#' + this.clientId + ' #RealtorCardCarouselCon .realtorCardCon').length > 1) {
                    //$('#' + this.clientId + ' #RealtorCardCarouselOuterCon').swiperight(function () { $('.swiper-button-prev').click(); });
                    //$('#' + this.clientId + ' #RealtorCardCarouselOuterCon').swipeleft(function () { $('.swiper-button-next').click(); });
                }
            };
            RealtorCardCarousel.prototype.updateSlideCount = function (current, total) {
                if (total == "0") {
                    $('#' + this.clientId + ' #RealtorCardCarouselRecordLabelCon').hide();
                }
                else {
                    $('#' + this.clientId + ' #RealtorCardCarouselRecordLabelCon').show();
                    $('#' + this.clientId + ' #RealtorCardCarouselRecordLabelCurrentVal').text(current);
                    $('#' + this.clientId + ' #RealtorCardCarouselRecordLabelEndVal').text(total);
                }
            };
            RealtorCardCarousel.slideChanging = 'realtorCardCarouselSlideChanging';
            RealtorCardCarousel.loaded = new RealtorEvent("realtorCardCarousel_Loaded");
            return RealtorCardCarousel;
        }(WebControl));
        Desktop.RealtorCardCarousel = RealtorCardCarousel;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RealtorCardCarousel.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RealtorRating = /** @class */ (function (_super) {
            __extends(RealtorRating, _super);
            function RealtorRating(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
                //this.registerEventHandlers(); //TODO - fix this hack? (see: https://github.com/Microsoft/TypeScript/issues/945)
            }
            RealtorRating.prototype.loadModel = function (model) {
                this.title = model.Title;
                this.linkHash = model.LinkHash;
                this.detailsURL = model.DetailsURL;
                this.ratingId = model.RatingId;
                this.ratingIdHTML = model.RatingIdHTML;
                this.ratingNum = model.RatingNum;
                this.reviewCount = model.ReviewCount;
                this.show = model.Show;
            };
            RealtorRating.prototype.registerEventHandlers = function () {
            };
            RealtorRating.prototype.render = function () {
                var ratingCon = $("#realtorRatingCon" + this.ratingIdHTML + this.linkHash);
                var rating = parseFloat(this.ratingNum.toString().replace(",", "."));
                if (isNaN(rating) != true) {
                    ratingCon.find(".realtorRatingBarCon").show();
                    ratingCon.find(".realtorRatingBarReviews").html(Translation.get("Reviews", this.reviewCount.toString()));
                    ratingCon.find(".realtorRatingBar").barrating({
                        theme: 'fontawesome-stars-o',
                        initialRating: rating,
                        readonly: true,
                        onSelect: null,
                        onClear: null,
                        onDestory: null
                    });
                }
            };
            return RealtorRating;
        }(WebControl));
        Desktop.RealtorRating = RealtorRating;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RealtorRating.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var RealtorResults = /** @class */ (function (_super) {
            __extends(RealtorResults, _super);
            function RealtorResults(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            RealtorResults.prototype.loadModel = function (model) {
                this.Model = model;
            };
            RealtorResults.prototype.registerEventHandlers = function () {
            };
            RealtorResults.prototype.render = function () {
                if (this.Model.TotalResults == 1 && this.Model.SingleResultURL != "") {
                    Events.Fire(Controls.Desktop.RealtorResults.realtorSingleResultLoaded, this.Model);
                }
                Events.Fire(Controls.Desktop.RealtorResults.realtorResultsLoaded, this.Model);
            };
            RealtorResults.realtorResultsLoaded = 'realtorResultsLoaded';
            RealtorResults.realtorSingleResultLoaded = 'realtorSingleResultLoaded';
            return RealtorResults;
        }(WebControl));
        Desktop.RealtorResults = RealtorResults;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=RealtorResults.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var SavedSearchControl = /** @class */ (function (_super) {
            __extends(SavedSearchControl, _super);
            function SavedSearchControl(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.renderComplete = false;
                _this.init();
                return _this;
                //this.registerEventHandlers(); //TODO - fix this hack? (see: https://github.com/Microsoft/TypeScript/issues/945)
            }
            SavedSearchControl.prototype.loadModel = function (model) {
            };
            SavedSearchControl.prototype.registerEventHandlers = function () {
                var me = this;
                var cardCon = $('#' + me.clientId);
                cardCon.find('.SavedSearchNameCon').click(function (e) {
                    if (ApplicationState.UserIsSignedIn) {
                        var searchName = $(this).parents('.SavedSearchCon').find('.SavedSearchNameCon').text();
                        Actions.UpdateSavedSearchViewedDate({ uid: ConsumerProfile.UserAccountSettings.UID, searchName: searchName }, null, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                    }
                });
                cardCon.find('.SavedSearchDeleteButton').click(function () {
                    var _this = this;
                    var rejectDeleteFunction = function (e, dialog) {
                        dialog.Featherlight.close();
                    };
                    var confirmDeleteFunction = function (e, dialog) {
                        var name = $(_this).parents('.SavedSearchCon').find('.SavedSearchNameCon').text();
                        //DataLayer notification objects
                        DataLayer.handleNotificationProfileToDataLayer({
                            changedSavedSearches: SavedSearch.GetAll().filter(function (value) { return value.name != name; }),
                            previousSavedSearches: SavedSearch.GetAll(),
                            changedFavNotification: null,
                            previousFavNotification: null,
                            additionalEvent: DataLayerEventsValue.SavedSearchDeleteEvent
                        });
                        SavedSearch.Delete(name);
                        var args = { updateGigya: true };
                        Events.Fire(SavedSearch.savedSearchesUpdated, args);
                        dialog.Featherlight.close();
                        var container = $(_this).parents('.SavedSearchCon');
                        container.addClass('deleted');
                        showMessage(Translation.get("Deleted"));
                        callAfterAnimation(container, function () { container.replaceWith(""); });
                    };
                    var model = new ConfirmationDialogModel2("SavedSearchDelete", "", Translation.get("ConfirmSaveSearchDelete"), Translation.get("Yes"), confirmDeleteFunction, Translation.get("No"), rejectDeleteFunction);
                    model.ShowTitleBar = false;
                    showConfirmationDialog2(model);
                    return false;
                });
                cardCon.find('.ddlNotifiEmailFrequency').change(function (e) {
                    var searchName = $(this).parents('.SavedSearchCon').find('.SavedSearchNameCon').text();
                    var searchObj = SavedSearch.GetByName(searchName);
                    var frequency = $(this).val();
                    var GigyaLastPostFormMsgSavedSearch = { errorCode: GigyaErrorCodes.NoGigyaError, formType: null, screenRender: null };
                    var savedSearchPostSigninSaved = false;
                    if (me.renderComplete) {
                        //DataLayer preparation for push notifications
                        var dataLayerSearchNotifObj = SavedSearch.GetByName(searchName);
                        var dataLayerChangedSavedSearches_1 = SavedSearch.GetAll();
                        for (var x = 0; x < dataLayerChangedSavedSearches_1.length; x++) {
                            if (dataLayerChangedSavedSearches_1[x].name == dataLayerSearchNotifObj.name) {
                                dataLayerChangedSavedSearches_1[x] = dataLayerSearchNotifObj;
                            }
                        }
                        dataLayerSearchNotifObj.notifications = [new NotificationSetting({ method: NotificationMethod.Email, frequency: frequency })];
                        if (ApplicationState.UserIsSignedIn) {
                            DataLayer.handleNotificationProfileToDataLayer({
                                changedSavedSearches: dataLayerChangedSavedSearches_1,
                                previousSavedSearches: SavedSearch.GetAll(),
                                changedFavNotification: null,
                                previousFavNotification: null
                            });
                            SavedSearch.UpdateEmailNotificationFrequency(searchName, frequency, true);
                            $(this).parents('.SavedSearchNotificationCon').find('img').attr('src', frequency == NotificationFrequency.Never ? SavedSearchModel.emptyBellImageSrc : SavedSearchModel.fullBellImageSrc)
                                .toggleClass('.SavedSearchNotificationsOffIcon', frequency == NotificationFrequency.Never)
                                .toggleClass('.SavedSearchNotificationsOnIcon', frequency != NotificationFrequency.Never);
                            $(this).parents('.SavedSearchCon').find('.SavedSearchNotificationText').text(frequency != NotificationFrequency.Never ? Translation.get("ON") : Translation.get("OFF"));
                            showMessage(Translation.get("UPDATED"));
                            DataLayer.push({ event: "e_savedSearchNotificationEmailDropdown", savedSearchEmailFrequencyValue: frequency });
                        }
                        else {
                            $(this).val("0");
                            var runAfterScreens = function () {
                                if (((GigyaLastPostFormMsgSavedSearch === null || GigyaLastPostFormMsgSavedSearch === void 0 ? void 0 : GigyaLastPostFormMsgSavedSearch.formType) != formType.signUp) && ApplicationState.UserIsSignedIn) {
                                    if (SavedSearch.IsSearchNameIsUnique(searchName)) {
                                        //Datalayer push for notification
                                        DataLayer.handleNotificationProfileToDataLayer({
                                            changedSavedSearches: dataLayerChangedSavedSearches_1,
                                            previousSavedSearches: SavedSearch.GetAll(),
                                            changedFavNotification: null,
                                            previousFavNotification: null
                                        });
                                        savedSearchPostSigninSaved = true;
                                        //Notification update locally before saving
                                        searchObj.UpdateNotificationFrequencyLocally(NotificationMethod.Email, frequency);
                                        searchObj.Save(true);
                                        showMessage(Translation.get("SearchSaved"));
                                    }
                                    else {
                                        //DataLayer push for notifications
                                        DataLayer.handleNotificationProfileToDataLayer({
                                            changedSavedSearches: dataLayerChangedSavedSearches_1,
                                            previousSavedSearches: SavedSearch.GetAll(),
                                            changedFavNotification: null,
                                            previousFavNotification: null
                                        });
                                        savedSearchPostSigninSaved = true;
                                        SavedSearch.UpdateEmailNotificationFrequency(searchName, frequency, true);
                                        showMessage(Translation.get("UPDATED"));
                                    }
                                }
                                else {
                                    Events.RemoveListeners({ uniqueKey: "consumerPostMsgForm" });
                                    ApplicationState.GuestNotifyChgPending = false;
                                }
                                Gigya.DeferredImportSavedSearches.Fire({ waitForSearchSaved: savedSearchPostSigninSaved }); //Start import process if needed
                            };
                            Events.RemoveListeners({ uniqueKey: "consumerPostMsgForm" });
                            GigyaInit.Events.consumerPostMsgForm.Listen(function (arg) {
                                var _a, _b, _c;
                                GigyaLastPostFormMsgSavedSearch = {
                                    errorCode: (_a = arg === null || arg === void 0 ? void 0 : arg.detail) === null || _a === void 0 ? void 0 : _a.errorCode,
                                    formType: (_b = arg === null || arg === void 0 ? void 0 : arg.detail) === null || _b === void 0 ? void 0 : _b.formType,
                                    screenRender: (_c = arg === null || arg === void 0 ? void 0 : arg.detail) === null || _c === void 0 ? void 0 : _c.screenRender
                                };
                            }, { uniqueKey: "consumerPostMsgForm" });
                            Gigya.runAfterScreensClosed([gigyaScreen.SignIn], runAfterScreens, [gigyaScreen.ImportConfirmation]);
                            ApplicationState.GuestNotifyChgPending = true;
                            Gigya.showScreen(gigyaScreen.SignIn, null);
                        }
                    }
                });
            };
            SavedSearchControl.prototype.render = function () {
                var _a;
                var me = this;
                //Init the saved search dropdown value...
                var searchName = $('#' + this.clientId).find('.ddlNotifiEmailFrequency').parents('.SavedSearchCon').find('.SavedSearchNameCon').text();
                var searchObj = SavedSearch.GetByName(searchName);
                var frequencySavedSearch = ((_a = searchObj === null || searchObj === void 0 ? void 0 : searchObj.notifications) === null || _a === void 0 ? void 0 : _a.filter(function (val) { return val.method == NotificationMethod.Email; }).length) > 0 ?
                    searchObj === null || searchObj === void 0 ? void 0 : searchObj.notifications.filter(function (val) { return val.method == NotificationMethod.Email; })[0].frequency : NotificationFrequency.Never;
                $('#' + this.clientId).find('.ddlNotifiEmailFrequency').val(frequencySavedSearch).trigger("change");
                DropDown.loadSelect2($('#' + me.clientId + ' .ddlNotifiEmailFrequency'), {
                    closeOnSelect: true,
                    containerCssClass: "homeFilter compressed",
                    dropdownCssClass: "homeFilterItemsCon",
                    width: "125px"
                });
                me.renderComplete = true;
            };
            return SavedSearchControl;
        }(WebControl));
        Desktop.SavedSearchControl = SavedSearchControl;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SavedSearch.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var ScrollToTop = /** @class */ (function (_super) {
            __extends(ScrollToTop, _super);
            function ScrollToTop(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            ScrollToTop.prototype.loadModel = function (model) {
            };
            ScrollToTop.prototype.registerEventHandlers = function () {
                var me = this;
                $(window).scroll(function () {
                    $('#btnScrollToTop').toggleClass("show", $(this).scrollTop() > 500);
                });
                $('#btnScrollToTop').click(function () {
                    $("html, body").animate({ scrollTop: 0 }, 600);
                    return false;
                });
            };
            ScrollToTop.prototype.render = function () {
            };
            return ScrollToTop;
        }(WebControl));
        Desktop.ScrollToTop = ScrollToTop;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=ScrollToTop.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var SEOLandingPageLearnMoreOffers = /** @class */ (function (_super) {
            __extends(SEOLandingPageLearnMoreOffers, _super);
            function SEOLandingPageLearnMoreOffers(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SEOLandingPageLearnMoreOffers.prototype.loadModel = function (model) {
            };
            SEOLandingPageLearnMoreOffers.prototype.registerEventHandlers = function () {
                var me = this;
                var listViewConTransfStyle = $("#listViewCon").css('transform');
                MultimediaModel.virtualTourAddVideoEvent.Listen(function (arg) {
                    $(arg.detail.iframeHtmlToAppend).appendTo("#pilotVideoModal-inner");
                    me.enterFullscreen($("#pilotVideoModel"));
                });
                MultimediaModel.virtualTourLoadEvent.Listen(function (arg) {
                    $("#pilotVideoModal-upper-inner").show();
                });
                $(document).on("click", ".pilotVideo-close-btn", function (e) {
                    me.exitFullscreen($("#pilotVideoModel"));
                });
            };
            SEOLandingPageLearnMoreOffers.prototype.render = function () {
            };
            SEOLandingPageLearnMoreOffers.prototype.enterFullscreen = function (container) {
                if (!container.hasClass("fullscreenPilotVideo")) {
                    container.addClass("fullscreenPilotVideo");
                }
            };
            SEOLandingPageLearnMoreOffers.prototype.exitFullscreen = function (container) {
                container.removeClass("fullscreenPilotVideo");
            };
            return SEOLandingPageLearnMoreOffers;
        }(WebPage));
        Desktop.SEOLandingPageLearnMoreOffers = SEOLandingPageLearnMoreOffers;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SEOLandingPageLearnMoreOffers.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var SmallListingCard = /** @class */ (function (_super) {
            __extends(SmallListingCard, _super);
            function SmallListingCard(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SmallListingCard.prototype.loadModel = function (model) {
            };
            SmallListingCard.prototype.registerEventHandlers = function () {
                $('#' + this.clientId + ' .noteIcon').unbind('click').click(function () {
                    noteIconClicked($(this));
                    return false;
                });
            };
            SmallListingCard.prototype.render = function () {
            };
            return SmallListingCard;
        }(WebControl));
        Desktop.SmallListingCard = SmallListingCard;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SmallListingCard.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var SmallListingCardList = /** @class */ (function (_super) {
            __extends(SmallListingCardList, _super);
            function SmallListingCardList(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SmallListingCardList.prototype.loadModel = function (model) {
            };
            SmallListingCardList.prototype.registerEventHandlers = function () {
                $('#' + this.clientId + ' .noteIcon').unbind('click').click(function () {
                    noteIconClicked($(this));
                    return false;
                });
            };
            SmallListingCardList.prototype.render = function () {
                var me = this;
                window.setTimeout(function () {
                    Favourite.refreshIcons($('#' + me.clientId + ' #ListingCardsListOuterCon'), { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" });
                    //Compare.refreshIcons($('#' + me.clientId + ' #ListingCardsListOuterCon'));
                    Note.refreshIcons($('#' + me.clientId + ' #ListingCardsListOuterCon'));
                    ConsumerProfile.Notifications.refreshNotificationCon($('#' + me.clientId + ' #ListingCardsListOuterCon'));
                }, 200);
            };
            return SmallListingCardList;
        }(WebControl));
        Desktop.SmallListingCardList = SmallListingCardList;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SmallListingCardList.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Campaign;
        (function (Campaign) {
            Campaign[Campaign["ListingLink"] = 0] = "ListingLink";
            Campaign[Campaign["FavouriteListings"] = 1] = "FavouriteListings";
            Campaign[Campaign["FindanOffice"] = 2] = "FindanOffice";
            Campaign[Campaign["FindaRealtor"] = 3] = "FindaRealtor";
            Campaign[Campaign["Blog"] = 4] = "Blog";
            Campaign[Campaign["MtgCalculators"] = 5] = "MtgCalculators";
        })(Campaign = Desktop.Campaign || (Desktop.Campaign = {}));
        var SocialShare = /** @class */ (function (_super) {
            __extends(SocialShare, _super);
            function SocialShare(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SocialShare.prototype.loadModel = function (model) {
                this.ssm = model;
            };
            SocialShare.prototype.registerEventHandlers = function () {
                var me = this;
                $(document.body).click(function (e) {
                    $("#shareDialogBox").toggle(false);
                    lightBoxPageElements([$('.shareButtonsBox')], false);
                });
                $("#shareBtn").click(function () {
                    $("#shareDialogBox").toggle();
                    lightBoxPageElements([$('.shareButtonsBox')], $("#shareDialogBox").css('display') == "block");
                    return false;
                });
                $(".shareBtnIcon").click(function (e) {
                    //Open the window with the social sharing provider's URL
                    var sharingIcon = $(this);
                    me.openWindowedSocialSharingPage(sharingIcon.parent("a").attr("href"));
                    me.onShareClicked(sharingIcon);
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                });
                $("#lnkEmailFriend").click(function () {
                    //if (localModel.Campaign === "FindaRealtor") {
                    //    window.open("EmailFriend?PageName=" + encodeURIComponent(localModel.Description) + "&PageUrl=" + encodeURIComponent(localModel.LinkBack) + "&MediaSrc=" + localModel.MediaSrc + "&UtmCampaign=" + localModel.Campaign);
                    //} else if (localModel.Campaign === "ListingLink") {
                    //    window.open("EmailFriend?ListingId=" + localModel.Listings);
                    //} else if (localModel.Campaign === "FavouriteListings") {
                    //    window.open("EmailFriend?ListingIds=" + localModel.Listings);
                    //} else if (localModel.Campaign === "Calculators") {
                    //    window.open("EmailFriend?PageName=" + encodeURIComponent(localModel.Description) + "&PageUrl=" + encodeURIComponent(localModel.LinkBack) + "&MediaSrc=" + localModel.MediaSrc + "&UtmCampaign=" + localModel.Campaign);
                    //}
                    //me.ssm.overwriteSocialShareHashLink();//Overwrite the social share hash url before its passed
                    me.openEmailFriendForm();
                    //me.screenOverlayToggle(false);
                });
                //Event listener that will overwrite the social share model with the one passed
                SocialShare.overwriteSocialShareEvent.Listen(function (arg) {
                    if (arg.detail.ssm) {
                        me.ssm = arg.detail.ssm;
                        me.ssm.overwriteSocialShareHashLink();
                        me.overwriteShareBtnLink();
                    }
                });
                //Event that overwrites the number of favourites of the model and set the linkback URLS with the favourite IDS
                SocialShare.overwriteSocialSharingUrlWithFavourites.Listen(function (arg) {
                    if (arg.detail.idsCSV) {
                        me.ssm.Listings = arg.detail.idsCSV;
                        me.ssm.overwriteSocialShareHashLink();
                        me.overwriteShareBtnLink();
                    }
                });
            };
            SocialShare.prototype.openWindowedSocialSharingPage = function (url, waitForShareaholicShortenedURL) {
                if (waitForShareaholicShortenedURL === void 0) { waitForShareaholicShortenedURL = false; }
                var win = null;
                if (waitForShareaholicShortenedURL) {
                    var fileUrl = ApplicationState.CultureID == Language.English ? "/Localization/en-CA/content/ShareaholicShortenURLWindow.html" : "/Localization/fr-CA/content/ShareaholicShortenURLWindow.html";
                    win = window.open(fileUrl, "Waiting for shareaholic shortened URL response", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=900,height=652,top=" + (screen.height / 2 - 326) + ",left=" + (screen.width / 2 - 450));
                }
                else {
                    win = window.open(url, null, "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=900,height=652,top=" + (screen.height / 2 - 326) + ",left=" + (screen.width / 2 - 450));
                }
                return win;
            };
            SocialShare.prototype.render = function () {
                this.ssm.overwriteSocialShareHashLink();
                this.overwriteShareBtnLink();
            };
            SocialShare.prototype.openEmailFriendForm = function () {
                var me = this;
                var controlArgs = new ControlFetcherArgs();
                controlArgs.postCallHandler = function (result) {
                    var model = new ModalContentModel("EmailAFriend", Translation.get("EmailAFriend"), result.d);
                    model.ButtonCloseID = "btnEmailAFriendCancel";
                    model.CloseEvent = Controls.Desktop.EmailAFriend.EmailSentSuccessfullyEvent;
                    model.DisplayType = ModalDisplayTypes.LightboxMe;
                    showModalContent(model);
                };
                var emailArgs = new EmailAFriendControlArgs();
                if (me.ssm.Campaign !== Campaign[Campaign.MtgCalculators]) {
                    if (me.ssm.Listings) {
                        emailArgs.listingIds = me.ssm.Listings;
                    }
                    else if (me.ssm.Listing) {
                        emailArgs.listingId = me.ssm.Listing;
                    }
                    emailArgs.referenceNum = me.ssm.ReferenceNumber || "";
                }
                else {
                    emailArgs.listingId = "";
                    emailArgs.listingIds = "";
                    emailArgs.referenceNum = "";
                }
                emailArgs.mediaSrc = me.ssm.MediaSrc;
                emailArgs.pageURL = me.ssm.LinkBack;
                emailArgs.pageName = encodeURIComponent(me.ssm.Description);
                emailArgs.utmCampaign = me.ssm.Campaign;
                emailArgs.utmMedium = me.ssm.EmailFriendMedium;
                emailArgs.sharePage = me.ssm.SharePage;
                ControlFetcher.fetchEmailAFriend(controlArgs, emailArgs);
            };
            SocialShare.prototype.overwriteShareBtnLink = function () {
                var _this = this;
                var shareIcons = $(".shareBtnIcon");
                shareIcons.each(function (index, elem) {
                    var providerName = $(elem).attr("data-provider");
                    var urlQueryParams = Utilities.getQueryObjUrl(decodeURIComponent($(elem).parent("a").attr("href")));
                    urlQueryParams = _this.ssm.overwriteSSSProviderUrlQueryObj(urlQueryParams, providerName);
                    $(elem).parent("a").attr("href", Utilities.cleanQueryUrl($(elem).parent("a").attr("href")) +
                        Utilities.getURLQueryParamFormat(urlQueryParams, false));
                    $(elem).attr("data-listing-id", _this.ssm.Listings ? _this.ssm.Listings : _this.ssm.Listing);
                });
            };
            SocialShare.prototype.onShareClicked = function (btn) {
                var listingId = btn.attr("data-listing-id");
                if (listingId != '' && listingId != null) {
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.facebook) {
                        Analytics.log(listingId, 'share_facebook');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.twitter) {
                        Analytics.log(listingId, 'share_twitter');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.linkedin) {
                        Analytics.log(listingId, 'share_linkedIn');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.pinterest) {
                        Analytics.log(listingId, 'share_pinterest');
                    }
                }
            };
            SocialShare.overwriteSocialShareEvent = new RealtorEvent("overwriteSocialShareEvent");
            SocialShare.overwriteSocialSharingUrlWithFavourites = new RealtorEvent("overwriteSocialSharingWithFavourites");
            return SocialShare;
        }(WebControl));
        Desktop.SocialShare = SocialShare;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SocialShare.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        //export enum Campaign {
        //    'ListingLink',
        //    'FavouriteListings',
        //    'FindanOffice',
        //    'FindaRealtor',
        //    'Blog',
        //    'MtgCalculators'
        //}
        var SocialShareOffers = /** @class */ (function (_super) {
            __extends(SocialShareOffers, _super);
            function SocialShareOffers(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SocialShareOffers.prototype.loadModel = function (model) {
                this.ssm = model;
            };
            SocialShareOffers.prototype.registerEventHandlers = function () {
                var me = this;
                $(document.body).click(function (e) {
                    $("#socialshareDialogBox").toggle(false);
                    lightBoxPageElements([$('.shareButtonsBox')], false);
                });
                $("#shareRealtorBtn").click(function () {
                    $("#socialshareDialogBox").toggle();
                    lightBoxPageElements([$('.shareButtonsBox')], $("#socialshareDialogBox").css('display') == "block");
                    return false;
                });
                $(".shareBtnIcon").click(function (e) {
                    //Open the window with the social sharing provider's URL
                    var sharingIcon = $(this);
                    me.openWindowedSocialSharingPage(sharingIcon.parent("a").attr("href"));
                    me.onShareClicked(sharingIcon);
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                });
                $("#lnkEmailRealtor").click(function () {
                    var link = "mailto:?body=" + encodeURIComponent(me.ssm.LinkBack);
                    window.open(link);
                });
                //Event listener that will overwrite the social share model with the one passed
                Desktop.SocialShare.overwriteSocialShareEvent.Listen(function (arg) {
                    if (arg.detail.ssm) {
                        me.ssm = arg.detail.ssm;
                        me.ssm.overwriteSocialShareHashLink();
                        me.overwriteShareBtnLink();
                    }
                });
                //Event that overwrites the number of favourites of the model and set the linkback URLS with the favourite IDS
                Desktop.SocialShare.overwriteSocialSharingUrlWithFavourites.Listen(function (arg) {
                    if (arg.detail.idsCSV) {
                        me.ssm.Listings = arg.detail.idsCSV;
                        me.ssm.overwriteSocialShareHashLink();
                        me.overwriteShareBtnLink();
                    }
                });
            };
            SocialShareOffers.prototype.openWindowedSocialSharingPage = function (url, waitForShareaholicShortenedURL) {
                if (waitForShareaholicShortenedURL === void 0) { waitForShareaholicShortenedURL = false; }
                var win = null;
                if (waitForShareaholicShortenedURL) {
                    var fileUrl = ApplicationState.CultureID == Language.English ? "/Localization/en-CA/content/ShareaholicShortenURLWindow.html" : "/Localization/fr-CA/content/ShareaholicShortenURLWindow.html";
                    win = window.open(fileUrl, "Waiting for shareaholic shortened URL response", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=900,height=652,top=" + (screen.height / 2 - 326) + ",left=" + (screen.width / 2 - 450));
                }
                else {
                    win = window.open(url, null, "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=900,height=652,top=" + (screen.height / 2 - 326) + ",left=" + (screen.width / 2 - 450));
                }
                return win;
            };
            SocialShareOffers.prototype.render = function () {
                this.ssm.overwriteSocialShareHashLink();
                this.overwriteShareBtnLink();
            };
            SocialShareOffers.prototype.openEmailFriendForm = function () {
                var me = this;
                var controlArgs = new ControlFetcherArgs();
                controlArgs.postCallHandler = function (result) {
                    var model = new ModalContentModel("EmailAFriend", Translation.get("EmailAFriend"), result.d);
                    model.ButtonCloseID = "btnEmailAFriendCancel";
                    model.CloseEvent = Controls.Desktop.EmailAFriend.EmailSentSuccessfullyEvent;
                    model.DisplayType = ModalDisplayTypes.LightboxMe;
                    showModalContent(model);
                };
                var emailArgs = new EmailAFriendControlArgs();
                if (me.ssm.Campaign !== Desktop.Campaign[Desktop.Campaign.MtgCalculators]) {
                    if (me.ssm.Listings) {
                        emailArgs.listingIds = me.ssm.Listings;
                    }
                    else if (me.ssm.Listing) {
                        emailArgs.listingId = me.ssm.Listing;
                    }
                    emailArgs.referenceNum = me.ssm.ReferenceNumber || "";
                }
                else {
                    emailArgs.listingId = "";
                    emailArgs.listingIds = "";
                    emailArgs.referenceNum = "";
                }
                emailArgs.mediaSrc = me.ssm.MediaSrc;
                emailArgs.pageURL = me.ssm.LinkBack;
                emailArgs.pageName = encodeURIComponent(me.ssm.Description);
                emailArgs.utmCampaign = me.ssm.Campaign;
                emailArgs.utmMedium = me.ssm.EmailFriendMedium;
                emailArgs.sharePage = me.ssm.SharePage;
                ControlFetcher.fetchEmailAFriend(controlArgs, emailArgs);
            };
            SocialShareOffers.prototype.overwriteShareBtnLink = function () {
                var _this = this;
                var shareIcons = $(".shareBtnIcon");
                shareIcons.each(function (index, elem) {
                    var providerName = $(elem).attr("data-provider");
                    var urlQueryParams = Utilities.getQueryObjUrl(decodeURIComponent($(elem).parent("a").attr("href")));
                    urlQueryParams = _this.ssm.overwriteSSSProviderUrlQueryObj(urlQueryParams, providerName);
                    $(elem).parent("a").attr("href", Utilities.cleanQueryUrl($(elem).parent("a").attr("href")) +
                        Utilities.getURLQueryParamFormat(urlQueryParams, false));
                    $(elem).attr("data-listing-id", _this.ssm.Listings ? _this.ssm.Listings : _this.ssm.Listing);
                });
            };
            SocialShareOffers.prototype.onShareClicked = function (btn) {
                var listingId = btn.attr("data-listing-id");
                if (listingId != '' && listingId != null) {
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.facebook) {
                        Analytics.log(listingId, 'share_facebook');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.twitter) {
                        Analytics.log(listingId, 'share_twitter');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.linkedin) {
                        Analytics.log(listingId, 'share_linkedIn');
                    }
                    if (SocialShareProvider[btn.attr("data-provider")] == SocialShareProvider.pinterest) {
                        Analytics.log(listingId, 'share_pinterest');
                    }
                }
            };
            SocialShareOffers.overwriteSocialShareEvent = new RealtorEvent("overwriteSocialShareEvent");
            SocialShareOffers.overwriteSocialSharingUrlWithFavourites = new RealtorEvent("overwriteSocialSharingWithFavourites");
            return SocialShareOffers;
        }(WebControl));
        Desktop.SocialShareOffers = SocialShareOffers;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SocialShareOffers.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var SortOrderMessage = /** @class */ (function (_super) {
            __extends(SortOrderMessage, _super);
            function SortOrderMessage(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            SortOrderMessage.prototype.loadModel = function (model) {
            };
            SortOrderMessage.prototype.registerEventHandlers = function () {
                var me = this;
                $('.qtip').on("click", "#" + me.clientId + " .sortorder-message-mainBtn", function (e) {
                    e.preventDefault();
                    LocalStorage.SortOrderMessageGotIt.save("1");
                    Events.Fire(Controls.Desktop.CustomToolTipBox.customToolTipClosing, $(e.target));
                });
                $('.qtip').on("click", "#sortSetDefaultLink", function (e) {
                    LocalStorage.SortOrderMessageGotIt.save("1");
                    Core.redirectTo(RouteHelper.getURL("my-account") + "#section=ResultsView");
                    return false;
                });
            };
            SortOrderMessage.prototype.render = function () {
            };
            return SortOrderMessage;
        }(WebControl));
        Desktop.SortOrderMessage = SortOrderMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SortOrderMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var TabHighlighter = /** @class */ (function (_super) {
            __extends(TabHighlighter, _super);
            function TabHighlighter(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            TabHighlighter.refreshPosition = function (selector, selectorClass) {
                var selected = selector.filter('.' + selectorClass);
                var index = selector.filter(":visible").index(selected);
                selected.parent().find('.tabHighlighter').css("left", (index * 100).toString() + "%");
                Animate($('.tabHighlighterDot .fa'), "pulse2", 0.75, TransitionTiming.ease_in_out, null);
            };
            /**
             *
             * @param selector The selector for the tabs to be included.
             * @param callback Callback for when the highlighter has been output
             */
            TabHighlighter.insert = function (selector, callback) {
                if (callback === void 0) { callback = null; }
                var callAfter = function () {
                    selector.each(function () {
                        var current = $(this);
                        current.click(function () {
                            var index = selector.filter(":visible").index(this);
                            $(this).parent().find('.tabHighlighter').css("left", (index * 100).toString() + "%");
                            Animate($('.tabHighlighterDot .fa'), "pulse2", 0.75, TransitionTiming.ease_in_out, null);
                        });
                    });
                    if (callback != null) {
                        callback();
                    }
                };
                if (selector.first().children(".tabHighlighter").length == 0) {
                    ControlFetcher.fetchTabHighlighter(new ControlFetcherArgs(null, null, function (html) {
                        selector.first().append($(html));
                        callAfter();
                    }));
                }
                else {
                    callAfter();
                }
            };
            TabHighlighter.prototype.loadModel = function (model) {
            };
            TabHighlighter.prototype.registerEventHandlers = function () {
            };
            TabHighlighter.prototype.render = function () {
            };
            return TabHighlighter;
        }(WebControl));
        Desktop.TabHighlighter = TabHighlighter;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=TabHighlighter.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Toggle = /** @class */ (function (_super) {
            __extends(Toggle, _super);
            function Toggle(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.valueChanged = new RealtorControlEvent(_this, "toggleValueChanged");
                _this.init();
                return _this;
            }
            Toggle.prototype.refreshPosition = function (selector, itemIndex) {
                var numItems = $("#" + this.clientId + " .toggleOption").length;
                var precent = 100 / numItems;
                selector.css('left', '' + (precent * itemIndex).toString() + '%'); //Using calc here means edge can't transition the left property (Edge, lol)
            };
            Toggle.prototype.value = function (val) {
                if (val != null) {
                    var currentVal = $("#" + this.clientId + " .toggleOption.selected").attr("data-value");
                    if (currentVal.toLowerCase() != val.toLowerCase()) {
                        $("#" + this.clientId + " .toggleSelector");
                        $("#" + this.clientId + " .toggleOption").removeClass("selected");
                        var selected = $("#" + this.clientId + " .toggleOption[data-value='" + val + "']");
                        selected.addClass("selected");
                        var index = $("#" + this.clientId + " .toggleOption").index(selected);
                        this.refreshPosition($("#" + this.clientId + " .toggleSelector"), index);
                        this.valueChanged.Fire(this, { value: val });
                    }
                    return val;
                }
                else {
                    return $("#" + this.clientId + " .toggleOption.selected").attr("data-value");
                }
            };
            Toggle.prototype.loadModel = function (model) {
            };
            Toggle.prototype.registerEventHandlers = function () {
                var me = this;
                $("#" + me.clientId + " .toggleOption").click(function () {
                    var val = $(this).attr("data-value");
                    var href = $(this).attr("href");
                    me.value(val);
                    //Keep the triggered flag from resume search even when switching language...
                    var notifNewEmailsObj = !LocalStorage.NotificationNewEmails.getObject() ?
                        { TriggerPageLoadFromResumeSearch: false, MessageBoxAcknowledged: false, CurrentPageLoadedFromResumeSearch: false } :
                        LocalStorage.NotificationNewEmails.getObject();
                    if (notifNewEmailsObj.CurrentPageLoadedFromResumeSearch)
                        notifNewEmailsObj.TriggerPageLoadFromResumeSearch = true;
                    LocalStorage.NotificationNewEmails.saveObject(notifNewEmailsObj);
                    return false;
                });
            };
            Toggle.prototype.render = function () {
            };
            return Toggle;
        }(WebControl));
        Desktop.Toggle = Toggle;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Toggle.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var TopMenu = /** @class */ (function (_super) {
            __extends(TopMenu, _super);
            function TopMenu(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            TopMenu.prototype.loadModel = function (model) {
            };
            TopMenu.prototype.registerEventHandlers = function () {
                var me = this;
                $('.topMenuDropdownContent').click(function (e) {
                    e.stopPropagation();
                });
                $(".topMenuDropdownItem").mousedown(function (b) {
                    //Handle mousewheel click so we can close menus
                    if (b.which == 2) {
                        me.closeMenus();
                        window.open($(this).attr("href"));
                        return false;
                    }
                });
                //$('#langToggle .toggleOption.selected').click(function (e) {
                //    e.preventDefault();
                //    e.stopImmediatePropagation();
                //    return false;
                //});
                $('.topMenuDropdownItem').click(function () {
                    me.closeMenus();
                });
                $('.headerMenuItem').click(function (e) {
                    $(".dropdownIcon").toggleClass("open", false);
                    if ($(this).find('.topMenuDropdownContent').hasClass("hide") == false) {
                        me.closeMenus();
                    }
                    else {
                        me.closeMenus();
                        $(this).find('.topMenuDropdownContent').removeClass("hide");
                        $(this).find(".dropdownIcon").toggleClass("open", true);
                    }
                    e.stopPropagation();
                });
                $(document.body).click(function (e) {
                    me.closeMenus();
                });
                // Connection to a broadcast channel                        
                //Receiving messages through the broadcast channel to update the user count search
                BroadcastChannels.UserDataCounts.addListener("UCS", function (val) {
                    if (val && ApplicationState.UserIsSignedIn == val.SignedInUser) {
                        if (val.FavouriteCount != null) {
                            MasterPages.Desktop.updateFavouriteIcon(val.FavouriteCount);
                        }
                        if (val.NotificationCount != null) {
                            MasterPages.Desktop.updateNotificationIcon(val.NotificationCount);
                        }
                        if (val.SavedSearchCount != null) {
                            MasterPages.Desktop.updateSavedSearchIcon(val.SavedSearchCount);
                        }
                    }
                });
            };
            TopMenu.prototype.closeMenus = function () {
                $('.topMenuDropdownContent').not('.hide').addClass("hide");
                $(".dropdownIcon").toggleClass("open", false);
            };
            TopMenu.prototype.render = function () {
                var me = this;
            };
            return TopMenu;
        }(WebControl));
        Desktop.TopMenu = TopMenu;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=TopMenu.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var TOUMessage = /** @class */ (function (_super) {
            __extends(TOUMessage, _super);
            function TOUMessage(model, controlId) {
                var _this = _super.call(this, model, controlId) || this;
                _this.init();
                return _this;
            }
            TOUMessage.prototype.loadModel = function (model) { };
            TOUMessage.prototype.registerEventHandlers = function () {
                var _this = this;
                var me = this;
                $('#TOUdismissBtn').click(function (e) {
                    Cookie.TermsOfUse.save(ApplicationConfig.TOSDate);
                    me.dismiss(false);
                    e.preventDefault();
                });
                BroadcastChannels.TOS.addListener("TOS accepted", function (val) {
                    if (val.Accepted) {
                        _this.dismiss(true);
                    }
                });
                TOUMessage.revisedTOUAccepted.ListenOnce(function (e) {
                    me.dismiss(false);
                }, { scope: Events.ListenerScope.Page });
            };
            TOUMessage.prototype.dismiss = function (fromBroadCast) {
                if (fromBroadCast == false) {
                    BroadcastChannels.TOS.sendMessage({ Accepted: true });
                }
                $('#TOUMsgCon').remove();
            };
            TOUMessage.prototype.render = function () { };
            TOUMessage.revisedTOUAccepted = new RealtorEvent("revisedTOUAccepted");
            return TOUMessage;
        }(WebControl));
        Desktop.TOUMessage = TOUMessage;
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=TOUMessage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var SavedSearchControl = /** @class */ (function (_super) {
                __extends(SavedSearchControl, _super);
                function SavedSearchControl(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                SavedSearchControl.prototype.loadModel = function (model) {
                };
                SavedSearchControl.prototype.registerEventHandlers = function () {
                    var me = this;
                    var cardCon = $('#' + me.clientId);
                    $('#' + me.clientId + ' .SavedSearchMainCon').click(function (e) {
                        var checkBox = $(this).parent().find('input[type="checkbox"]');
                        checkBox.prop("checked", !checkBox.prop("checked"));
                    });
                    if (ApplicationState.UserIsSignedIn) {
                        $('#' + me.clientId + ' .savedSearchAccountLink').click(function (e) {
                            var searchName = $(this).text().trim();
                            Actions.UpdateSavedSearchViewedDate({ uid: ConsumerProfile.UserAccountSettings.UID, searchName: searchName }, null, function (request, textStatus, exception) {
                                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                            });
                        });
                    }
                };
                SavedSearchControl.prototype.render = function () { };
                return SavedSearchControl;
            }(WebControl));
            Consumer.SavedSearchControl = SavedSearchControl;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SavedSearchAccount.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var newEmailField = null;
            var reNewEmailField = null;
            var existingEmailField = null;
            var Screen_ChangeAccountEmail = /** @class */ (function (_super) {
                __extends(Screen_ChangeAccountEmail, _super);
                function Screen_ChangeAccountEmail(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_ChangeAccountEmail.prototype.loadModel = function (model) { };
                Screen_ChangeAccountEmail.prototype.registerEventHandlers = function () {
                    newEmailField = $("#cpAccountNewEmailTxt");
                    reNewEmailField = $("#cpAccountReEnterNewEmailTxt");
                    existingEmailField = $("#txtProfileEmail");
                    $("#btnChangeAccountEmailSubmit").click(function () {
                        if (FormValidation.validateForm($('#screenChangeAccountEmailCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var args = new ChangeAccountEmailArgs();
                            args.addLoginEmails = newEmailField.val();
                            args.removeLoginEmails = existingEmailField.val();
                            Actions.changeEmail(args, Screen_ChangeAccountEmail.changeEmailHandler, function (request, textStatus, exception) {
                                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                            });
                        }
                        else {
                            addAnimationClass($('#btnChangeAccountEmailSubmit'), 'btnFail');
                        }
                        return false;
                    });
                    $("#btnChangeAccountEmailCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountEmail);
                    });
                    $("#screen_ChangeAccountEmail").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnChangeAccountEmailSubmit')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountEmail);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_ChangeAccountEmail.changeEmailHandler = function (val) {
                    if (val != null) {
                        if (val.ErrorCode.Id == 200) {
                            GigyaInit.GetAccountFromBOL(false, true);
                            var args = new ConfirmationDialog2Args();
                            args.ID = "pnlChangeAccountEmailSuccess";
                            args.TitleText = Translation.get("FinalizeEmailChange");
                            args.BodyContent = $("<span>" + Translation.get("FinalizeEmailChangeText") + "</span>");
                            args.ButtonPositiveText = Translation.get("OK");
                            args.ButtonPositiveOnClick = function (e, control) { $.featherlight.close(); Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountEmail); };
                            args.ButtonNegativeOnClick = function (e, control) { $.featherlight.close(); };
                            var model = new ConfirmationDialogModel2(args.ID, args.TitleText, args.BodyContent, args.ButtonPositiveText, args.ButtonPositiveOnClick, null, args.ButtonNegativeOnClick);
                            model.ShowCloseButton = false;
                            showConfirmationDialog2(model);
                        }
                        else {
                            if (val.GigyaErrorCode == 403043) {
                                showMessage(Translation.get("EmailExists"), MessageType.Error, DisplayType.Lightbox);
                            }
                            else {
                                showMessage(val.GigyaErrorMsg, MessageType.Error, DisplayType.Lightbox);
                            }
                        }
                    }
                };
                Screen_ChangeAccountEmail.prototype.render = function () { };
                return Screen_ChangeAccountEmail;
            }(WebControl));
            Consumer.Screen_ChangeAccountEmail = Screen_ChangeAccountEmail;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_ChangeAccountEmail.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var existingPasswordField = null;
            var newPasswordField = null;
            var reNewPasswordField = null;
            var Screen_ChangeAccountPassword = /** @class */ (function (_super) {
                __extends(Screen_ChangeAccountPassword, _super);
                function Screen_ChangeAccountPassword(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_ChangeAccountPassword.prototype.loadModel = function (model) { };
                Screen_ChangeAccountPassword.prototype.registerEventHandlers = function () {
                    existingPasswordField = $("#cpAccountExistingPasswordTxt");
                    newPasswordField = $("#cpAccountNewPasswordTxt");
                    reNewPasswordField = $("#cpAccountReEnterNewPasswordTxt");
                    $("#btnChangeAccountPasswordSubmit").click(function () {
                        if (FormValidation.validateForm($('#screenChangeAccountPasswordCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var args = new ChangeAccountPasswordArgs();
                            args.password = existingPasswordField.val();
                            args.newPassword = newPasswordField.val();
                            Actions.changePassword(args, Screen_ChangeAccountPassword.changePasswordHandler, function (request, textStatus, exception) {
                                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                            });
                        }
                        else {
                            addAnimationClass($('#btnChangeAccountPasswordSubmit'), 'btnFail');
                        }
                        return false;
                    });
                    $("#btnChangeAccountPasswordCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountPassword);
                    });
                    $("#screen_ChangeAccountPassword").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnChangeAccountPasswordSubmit')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountPassword);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_ChangeAccountPassword.changePasswordHandler = function (val) {
                    var me = this;
                    if (val != null) {
                        if (val.ErrorCode == 0) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ChangeAccountPassword);
                            Gigya.hide_gigyaScreen(gigyaScreen.ForgotPassword);
                            showMessage(Translation.get("PasswordResetSuccess"), MessageType.Normal, DisplayType.Toast);
                        }
                        else if (val.ErrorCode == 403042) {
                            FormValidation.markFieldAsInvalid(existingPasswordField, Translation.get("ThisIsNotYourExistingPassword"));
                            addAnimationClass($('#btnChangeAccountPasswordSubmit'), 'btnFail');
                        }
                        else if (val.ErrorCode == 401030) {
                            FormValidation.markFieldAsInvalid(newPasswordField, Translation.get("OldPasswordUsed"));
                            addAnimationClass($('#btnChangeAccountPasswordSubmit'), 'btnFail');
                        }
                        else if (val.ErrorCode == 400006) {
                            showMessage(Translation.get("OldPasswordUsed"), MessageType.Error, DisplayType.Lightbox);
                        }
                        else {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Lightbox);
                        }
                    }
                };
                Screen_ChangeAccountPassword.prototype.render = function () { };
                return Screen_ChangeAccountPassword;
            }(WebControl));
            Consumer.Screen_ChangeAccountPassword = Screen_ChangeAccountPassword;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_ChangeAccountPassword.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var existingPasswordField = null;
            var newPasswordField = null;
            var reNewPasswordField = null;
            var Screen_ChangePassword = /** @class */ (function (_super) {
                __extends(Screen_ChangePassword, _super);
                function Screen_ChangePassword(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_ChangePassword.prototype.loadModel = function (model) {
                    this.pwrtToken = model.pwrtToken;
                };
                Screen_ChangePassword.prototype.registerEventHandlers = function () {
                    var _screenModel = this;
                    existingPasswordField = $("#cpExistingPasswordTxt");
                    newPasswordField = $("#cpNewPasswordTxt");
                    reNewPasswordField = $("#cpReEnterNewPasswordTxt");
                    $("#btnChangePasswordSubmit").click(function () {
                        if (FormValidation.validateForm($('#screenChangePasswordCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var argsReset = new ResetPasswordArgs();
                            argsReset.lang = ApplicationState.LanguageAttribute;
                            argsReset.newPassword = newPasswordField.val();
                            argsReset.passwordResetToken = _screenModel.pwrtToken;
                            Actions.resetPassword(argsReset, Screen_ChangePassword.resetPasswordHandler, function (request, textStatus, exception) {
                                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                            });
                        }
                        else {
                            addAnimationClass($('#btnChangePasswordSubmit'), 'btnFail');
                        }
                        return false;
                    });
                    $("#btnChangePasswordCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.ChangePassword);
                    });
                    $("#screen_ChangePassword").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnChangePasswordSubmit')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ChangePassword);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_ChangePassword.prototype.render = function () {
                    var me = this;
                    if ((me.pwrtToken == null || me.pwrtToken == "") && ApplicationState.UserIsSignedIn) {
                        $("#screenInputConExisting").show();
                    }
                };
                Screen_ChangePassword.resetPasswordHandler = function (val) {
                    var me = this;
                    if (val != null) {
                        if (val.ErrorCode == 0) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ChangePassword);
                            Gigya.hide_gigyaScreen(gigyaScreen.ForgotPassword);
                            showMessage(Translation.get("PasswordResetSuccess"), MessageType.Normal, DisplayType.Toast);
                        }
                        else if (val.ErrorCode == 403042) {
                            FormValidation.markFieldAsInvalid(existingPasswordField, Translation.get("ThisIsNotYourExistingPassword"));
                            addAnimationClass($('#btnChangePasswordSubmit'), 'btnFail');
                        }
                        else if (val.ErrorCode == 401030) {
                            FormValidation.markFieldAsInvalid(newPasswordField, Translation.get("OldPasswordUsed"));
                            addAnimationClass($('#btnChangePasswordSubmit'), 'btnFail');
                        }
                        else if (val.ErrorCode == 400006) {
                            showMessage(Translation.get("PasswordResetLinkExpired"), MessageType.Error, DisplayType.Lightbox);
                        }
                        else {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Lightbox);
                        }
                    }
                };
                return Screen_ChangePassword;
            }(WebControl));
            Consumer.Screen_ChangePassword = Screen_ChangePassword;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_ChangePassword.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var Screen_CheckYourEmail = /** @class */ (function (_super) {
                __extends(Screen_CheckYourEmail, _super);
                function Screen_CheckYourEmail(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_CheckYourEmail.prototype.loadModel = function (model) { };
                Screen_CheckYourEmail.prototype.registerEventHandlers = function () {
                    $('#btnCheckYourEmailOk').click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.CheckYourEmail);
                        $('#signInPageContent').show();
                        $('#signUpPageContent').hide();
                        URLHash.set("section", "SignIn", false);
                    });
                };
                Screen_CheckYourEmail.prototype.render = function () { };
                return Screen_CheckYourEmail;
            }(WebControl));
            Consumer.Screen_CheckYourEmail = Screen_CheckYourEmail;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_CheckYourEmail.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var emailField = null;
            var Screen_ForgotPassword = /** @class */ (function (_super) {
                __extends(Screen_ForgotPassword, _super);
                function Screen_ForgotPassword(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_ForgotPassword.prototype.loadModel = function (model) { };
                Screen_ForgotPassword.prototype.registerEventHandlers = function () {
                    emailField = $("#screenForgotPasswordEmailTxt");
                    $("#btnResetPasswordSubmit").click(function () {
                        Screen_ForgotPassword.sendPasswordReset();
                        return false;
                    });
                    $("#btnResetPasswordCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.ForgotPassword);
                        return false;
                    });
                    $("#screen_ForgotPassword").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnResetPasswordSubmit')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.ForgotPassword);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                    $(window).on("resize", function (e) {
                        Gigya.resize_gigyaScreen(gigyaScreen.ForgotPassword);
                    });
                };
                Screen_ForgotPassword.prototype.render = function () {
                    if (typeof grecaptcha !== 'undefined') {
                        LoadCaptcha("forgotPasswordCaptchaCon");
                    }
                    else {
                        Events.ListenOnce(MasterPages.Desktop.CaptchaLoaded, function () { LoadCaptcha("forgotPasswordCaptchaCon"); });
                    }
                };
                Screen_ForgotPassword.sendPasswordReset = function () {
                    var captchaResponse = (ApplicationConfig.CaptchaEnabled == true && grecaptcha) ? grecaptcha.getResponse(+$('#forgotPasswordCaptchaCon').attr('data-captcha-widget-id')) : null;
                    //Remove the capcha from validation 
                    if (!ApplicationConfig.CaptchaEnabled || ApplicationConfig.SkipClientCaptchaValidation) {
                        $("div.inputCon[data-validation=captcha\\(forgotPasswordCaptchaCon\\)]").removeAttr("data-validation");
                    }
                    if (FormValidation.validateForm($('#screenForgotPasswordCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                        var args = new ResetPasswordArgs();
                        args.loginID = emailField.val();
                        args.lang = ApplicationState.LanguageAttribute;
                        args.email = emailField.val();
                        args.captchaResponse = Utilities.cleanJSONValue(captchaResponse);
                        $("#btnResetPasswordSubmit").prop('disabled', 'disabled').addClass("loading");
                        Actions.forgotPassword(args, Screen_ForgotPassword.resetPasswordHandler, function (request, textStatus, exception) {
                            showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                        });
                    }
                    else {
                        addAnimationClass($('#btnResetPasswordSubmit'), 'btnFail');
                    }
                };
                Screen_ForgotPassword.resetPasswordHandler = function (val) {
                    $("#btnResetPasswordSubmit").prop('disabled', false).removeClass("loading");
                    if (val != null) {
                        if (val.ErrorCode == 0) {
                            var args = new ConfirmationDialog2Args();
                            args.ID = "pnlForgotPasswordSent";
                            args.TitleText = Translation.get("ForgotPassword");
                            args.BodyContent = $("<span>" + Translation.get("PasswordResetSuccessText") + "</span>");
                            args.ButtonPositiveText = Translation.get("OK");
                            args.ButtonPositiveOnClick = function (e, control) { Gigya.hide_gigyaScreen(gigyaScreen.ForgotPassword); $.featherlight.close(); };
                            var model = new ConfirmationDialogModel2(args.ID, args.TitleText, args.BodyContent, args.ButtonPositiveText, args.ButtonPositiveOnClick);
                            model.ShowCloseButton = false;
                            showConfirmationDialog2(model);
                        }
                        else {
                            showMessage(val.ErrorMsg, MessageType.Error, DisplayType.Toast);
                        }
                    }
                };
                return Screen_ForgotPassword;
            }(WebControl));
            Consumer.Screen_ForgotPassword = Screen_ForgotPassword;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_ForgotPassword.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var Screen_LinkAccounts = /** @class */ (function (_super) {
                __extends(Screen_LinkAccounts, _super);
                function Screen_LinkAccounts(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_LinkAccounts.prototype.loadModel = function (model) { };
                Screen_LinkAccounts.prototype.registerEventHandlers = function () {
                    var me = this;
                    $("#sm_link_facebook_login").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "facebook";
                        args.regToken = globalRegToken;
                        args.loginMode = "link";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_link_google_login").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "googleplus";
                        args.regToken = globalRegToken;
                        args.loginMode = "link";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_link_twitter_login").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "twitter";
                        args.regToken = globalRegToken;
                        args.loginMode = "link";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_link_linkedin_login").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "linkedin";
                        args.regToken = globalRegToken;
                        args.loginMode = "link";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_link_apple_login").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "apple";
                        args.regToken = globalRegToken;
                        args.loginMode = "link";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $('#btnLinkAccount').click(function () {
                        if ($('#btnLinkAccount').hasClass("loading") == false) {
                            if (FormValidation.validateForm($('#LinkAccountTabCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                                $('#btnLinkAccount').addClass("loading");
                                var args = new SignInArgs();
                                args.email = $('#linkAccountEmailTxt').val();
                                args.password = $('#linkAccountPasswordTxt').val();
                                args.loginMode = "link";
                                args.regToken = globalRegToken;
                                args.captchaText = null;
                                args.captchaToken = null;
                                var callbackArgs = new SignInCallbackArgs();
                                callbackArgs.sourceScreen = gigyaScreen.LinkAccounts;
                                Gigya.Login(args, callbackArgs);
                            }
                            else {
                                addAnimationClass($('#btnLinkAccount'), 'btnFail');
                            }
                        }
                        return false;
                    });
                    $('#btnLinkAccountCancel, #btnLinkAccountSocialCancel').click(function () {
                        var args = new ConfirmationDialog2Args();
                        args.ID = "pnlExitLinkConfirmMsg";
                        args.TitleText = Translation.get("StopThisSignIn");
                        args.BodyContent = $("<span>" + Translation.get("AreYouSureYouWantToLeaveThisPage", globalRequestSMProvider) + "</span>");
                        args.ButtonPositiveText = Translation.get("Yes");
                        args.ButtonPositiveOnClick = function (e, control) { Gigya.hide_gigyaScreen(gigyaScreen.LinkAccounts); $.featherlight.close(); };
                        args.ButtonNegativeText = Translation.get("No");
                        args.ButtonNegativeOnClick = function (e, control) { $.featherlight.close(); };
                        var model = new ConfirmationDialogModel2(args.ID, args.TitleText, args.BodyContent, args.ButtonPositiveText, args.ButtonPositiveOnClick, args.ButtonNegativeText, args.ButtonNegativeOnClick);
                        model.ShowCloseButton = false;
                        showConfirmationDialog2(model);
                    });
                    $('#linkAccountsForgotPasswordLnk').click(function () {
                        Gigya.showScreen(gigyaScreen.ForgotPassword, null);
                        return false;
                    });
                };
                Screen_LinkAccounts.prototype.render = function () {
                    gigya.accounts.getConflictingAccount({
                        regToken: globalRegToken,
                        callback: Screen_LinkAccounts.linkHandler
                    });
                };
                Screen_LinkAccounts.linkHandler = function (response) {
                    if (response.errorCode == 0) {
                        $("#LinkAccountTextSocial").html(Translation.get("LinkAccountTextSocial", globalRequestSMProvider));
                        $('#linkAccountEmailTxt').val(response.conflictingAccount.loginID);
                        var providers = response.conflictingAccount.loginProviders;
                        if (providers != null) {
                            if (providers.indexOf("site") > -1) {
                                $(".screen-container[data-login-identities='site-only']").show();
                                $(".screen-container[data-login-identities='social']").hide();
                            }
                            else {
                                $(".screen-container[data-login-identities='social']").show();
                                $(".screen-container[data-login-identities='site-only']").hide();
                                for (var item in providers) {
                                    $(".sm-item[data-sm-provider='" + providers[item] + "']").show();
                                }
                            }
                        }
                    }
                    else {
                        //TODO: hide all screens func
                        Gigya.hide_gigyaScreen(gigyaScreen.LinkAccounts);
                        Gigya.hide_gigyaScreen(gigyaScreen.MoreInfoRequired);
                        showMessage(response.errorMessage, MessageType.Error);
                    }
                };
                ;
                return Screen_LinkAccounts;
            }(WebControl));
            Consumer.Screen_LinkAccounts = Screen_LinkAccounts;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_LinkAccounts.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var MoreAboutYouDataFields = /** @class */ (function () {
                function MoreAboutYouDataFields() {
                    this.More_About_You = "Continue";
                    this.Buyer = 0;
                    this.Buyer_com = 0;
                    this.Interested = 1;
                    this.Interested_com = 1;
                    this.Looking = 0;
                    this.REALTOR_mail = false;
                    //public CREA_mail_updates = false;
                    //public REALTOR_mail_updates = false;
                }
                return MoreAboutYouDataFields;
            }());
            var Screen_MoreAboutYou = /** @class */ (function (_super) {
                __extends(Screen_MoreAboutYou, _super);
                function Screen_MoreAboutYou(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_MoreAboutYou.prototype.loadModel = function (model) { };
                Screen_MoreAboutYou.prototype.registerEventHandlers = function () {
                    DropDown.loadSelect2($('#screen_MoreAboutYou select'), {
                        tags: false,
                        closeOnSelect: true,
                        containerCssClass: "homeFilter",
                        dropdownCssClass: "screenFilterLightboxItemsCon"
                    });
                    var me = this;
                    $("#btnMAYContinue").click(function () {
                        if ($('#btnMAYContinue').hasClass("loading") == false) {
                            $('#btnMAYContinue').addClass("loading");
                            var data_object = new MoreAboutYouDataFields();
                            data_object.More_About_You = "Continue";
                            data_object.Buyer = $('#ddlIam option:selected').val();
                            data_object.Buyer_com = $('#ddlIam_com option:selected').val();
                            data_object.Interested = $('#ddlPrimary option:selected').val();
                            data_object.Interested_com = $('#ddlPrimary_com option:selected').val();
                            data_object.Looking = $('#ddlLooking option:selected').val();
                            //data_object.CREA_mail_updates = $('#' + me.clientId + '_chkCREA').is(':checked');
                            //data_object.REALTOR_mail_updates = $('#' + me.clientId + '_chkREALTOR').is(':checked');
                            data_object.REALTOR_mail = $('#' + me.clientId + '_chkREALTOR').is(':checked');
                            var dataJSON = JSON.stringify(data_object);
                            var args = new AccountSetInfoArgs();
                            args.profile = "";
                            args.data = dataJSON;
                            args.CRM_update = true;
                            var callArgs = new SetAccountInfoCallbackArgs();
                            callArgs.sourceScreen = gigyaScreen.MoreAboutYou;
                            Gigya.AccountSetInfo(args, callArgs);
                        }
                        return false;
                    });
                    $("#screen_MoreAboutYou").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnMAYContinue')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.MoreAboutYou);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_MoreAboutYou.prototype.render = function () {
                    if (ApplicationState.CurrentMode == ApplicationModes.Residential) {
                        $("#may_ddlP").show();
                        $("#may_ddlP_com").hide();
                    }
                    else {
                        $("#may_ddlP").hide();
                        $("#may_ddlP_com").show();
                    }
                };
                return Screen_MoreAboutYou;
            }(WebControl));
            Consumer.Screen_MoreAboutYou = Screen_MoreAboutYou;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_MoreAboutYou.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var requiredProfileFields = /** @class */ (function () {
                function requiredProfileFields() {
                    this.firstName = "";
                    this.lastName = "";
                    this.email = "";
                }
                return requiredProfileFields;
            }());
            var Screen_MoreInfoRequired = /** @class */ (function (_super) {
                __extends(Screen_MoreInfoRequired, _super);
                function Screen_MoreInfoRequired(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.firstName = "";
                    _this.lastName = "";
                    _this.email = "";
                    _this.init();
                    return _this;
                }
                Screen_MoreInfoRequired.prototype.loadModel = function (model) {
                    //this.firstName = model.firstName;
                    //this.lastName = model.lastName;
                    this.email = model.email;
                };
                Screen_MoreInfoRequired.prototype.registerEventHandlers = function () {
                    var me = this;
                    $('#btnMOCancel').click(function () {
                        var callbackArgs = new LogoutCallbackArgs();
                        callbackArgs.DT = DisplayType.Tempbox;
                        Gigya.Logout(callbackArgs);
                        Gigya.hide_gigyaScreen(gigyaScreen.MoreInfoRequired);
                        return false;
                    });
                    $("#btnMOContinue").click(function () {
                        if (FormValidation.validateForm($('#screenMoreInfoCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var profile_object = new requiredProfileFields();
                            profile_object.email = $("#" + me.clientId + "_screenMoreInfoEmailTxt").val();
                            profile_object.firstName = $("#" + me.clientId + "_screenMoreInfoFirstNameTxt").val();
                            profile_object.lastName = $("#" + me.clientId + "_screenMoreInfoLastNameTxt").val();
                            var profileJSON = JSON.stringify(profile_object);
                            var args = new SetAccountInfoArgs();
                            args.profile = profileJSON;
                            args.data = "";
                            args.conflictHandling = "saveProfileAndFail";
                            args.regToken = globalRegToken;
                            if (me.email == null || me.email == "") {
                                args.errorCode = 206002;
                            }
                            else {
                                args.errorCode = 206001;
                            }
                            var callArgs = new SetAccountInfoCallbackArgs();
                            callArgs.redirectTargetOnSuccess = RouteHelper.getURL("my-account");
                            callArgs.sourceScreen = gigyaScreen.MoreInfoRequired;
                            Gigya.SetAccountInfo(args, callArgs);
                        }
                        else {
                            addAnimationClass($('#btnMOContinue'), 'btnFail');
                        }
                        return false;
                    });
                    //$(window).on("resize", function (e) {
                    //    Gigya.resize_gigyaScreen(gigyaScreen.MoreInfoRequired);
                    //});
                };
                Screen_MoreInfoRequired.prototype.render = function () { };
                return Screen_MoreInfoRequired;
            }(WebControl));
            Consumer.Screen_MoreInfoRequired = Screen_MoreInfoRequired;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_MoreInfoRequired.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var Screen_ResendEmailVerification = /** @class */ (function (_super) {
                __extends(Screen_ResendEmailVerification, _super);
                function Screen_ResendEmailVerification(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_ResendEmailVerification.prototype.loadModel = function (model) {
                    this.regToken = model.regToken;
                    this.UID = model.UID;
                };
                Screen_ResendEmailVerification.prototype.registerEventHandlers = function () {
                    var me = this;
                    var _screenModel = this;
                    $('#btnRECancel').click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.ResendEmailVerification);
                        return false;
                    });
                    $("#btnRESubmit").click(function () {
                        if (FormValidation.validateForm($('#screenResendEmailVerificationCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var args = new ResendVerificationCodeArgs();
                            args.UID = _screenModel.UID;
                            args.regToken = _screenModel.regToken;
                            args.email = $("#" + me.clientId + "_screenResendEmailVerificationEmailTxt").val();
                            Actions.resendVerificationCode(args, Gigya.resendEmailVerificationHandler, function (request, textStatus, exception) {
                                showMessage(Translation.get("LogErrorMessage"), MessageType.Error, DisplayType.Toast);
                            });
                        }
                        else {
                            addAnimationClass($('#btnRESubmit'), 'btnFail');
                        }
                        return false;
                    });
                };
                Screen_ResendEmailVerification.prototype.render = function () { };
                return Screen_ResendEmailVerification;
            }(WebControl));
            Consumer.Screen_ResendEmailVerification = Screen_ResendEmailVerification;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_ResendEmailVerification.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var agreement_date_json = "";
            var Screen_RevisedTerms = /** @class */ (function (_super) {
                __extends(Screen_RevisedTerms, _super);
                function Screen_RevisedTerms(model, agreement_date, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    agreement_date_json = agreement_date;
                    _this.init();
                    return _this;
                }
                Screen_RevisedTerms.prototype.loadModel = function (model) { };
                Screen_RevisedTerms.prototype.registerEventHandlers = function () {
                    var me = this;
                    $("#btnRTSave").click(function () {
                        if (FormValidation.validateForm($('#screenRevisedTermsCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var args = new AccountSetInfoArgs();
                            args.profile = "";
                            args.data = agreement_date_json;
                            args.CRM_update = false;
                            var callArgs = new SetAccountInfoCallbackArgs();
                            callArgs.sourceScreen = gigyaScreen.RevisedTerms;
                            Gigya.AccountSetInfo(args, callArgs);
                            Cookie.TermsOfUse.save(ApplicationConfig.TOSDate);
                            Desktop.TOUMessage.revisedTOUAccepted.Fire(true);
                        }
                        else {
                            addAnimationClass($('#btnRTSave'), 'btnFail');
                        }
                        return false;
                    });
                    $("#btnRTCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.RevisedTerms);
                        //Gigya.ShiftDialogs();
                        var callbackArgs = new LogoutCallbackArgs();
                        callbackArgs.DT = DisplayType.Toast;
                        callbackArgs.URLHash = URLHash.set("section", "SignIn", true);
                        Gigya.Logout(callbackArgs);
                    });
                    $("#screen_RevisedTerms").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnRTSave')[0].click();
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_RevisedTerms.prototype.render = function () { };
                return Screen_RevisedTerms;
            }(WebControl));
            Consumer.Screen_RevisedTerms = Screen_RevisedTerms;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_RevisedTerms.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var agreement_date_json = "";
            var Screen_SaveMoreFavourites = /** @class */ (function (_super) {
                __extends(Screen_SaveMoreFavourites, _super);
                function Screen_SaveMoreFavourites(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_SaveMoreFavourites.prototype.loadModel = function (model) { };
                Screen_SaveMoreFavourites.prototype.registerEventHandlers = function () {
                    var me = this;
                    $('#' + me.clientId + ' .lnkSpn, #btnSaveMoreFavsSignUp').click(function () {
                        Gigya.showScreen(gigyaScreen.SignIn, null, null, function () { $('#signUpHeaderTabLnk').click(); });
                        return false;
                    });
                };
                Screen_SaveMoreFavourites.prototype.render = function () { };
                return Screen_SaveMoreFavourites;
            }(WebControl));
            Consumer.Screen_SaveMoreFavourites = Screen_SaveMoreFavourites;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_SaveMoreFavourites.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var Screen_SignIn = /** @class */ (function (_super) {
                __extends(Screen_SignIn, _super);
                function Screen_SignIn(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.email = "";
                    _this.firstName = "";
                    _this.lastName = "";
                    _this.GigyaErrorCode = 0;
                    _this.GigyaErrorMsg = "";
                    _this.LastLoginProviders = new Dictionary();
                    _this.reactivateCondition = false;
                    _this.UID = "";
                    _this.CRMUID = "";
                    _this.AccountStatus = "";
                    _this.init();
                    return _this;
                }
                Screen_SignIn.prototype.loadModel = function (model) {
                    this.email = model.email;
                    this.firstName = model.firstName;
                    this.lastName = model.lastName;
                    Desktop.Consumer.Screen_SignIn.instance = this;
                    if (LocalStorage.LastLoginTypeList.get() != "") {
                        var lastLoginProviderObj = LocalStorage.LastLoginTypeList.getObject();
                        this.LastLoginProviders.AddList(lastLoginProviderObj.values, lastLoginProviderObj.keys);
                    }
                    this.reactivateCondition = model.reactivateCondition;
                    this.UID = model.UID;
                    this.CRMUID = model.CRMUID;
                    this.AccountStatus = model.AccountStatus;
                    this.signInBackArrow = $($("#signInBackArrow").outerHTML());
                    $("#signInBackArrow").remove();
                    this.signInBackArrow.removeClass("hiddenSection");
                    //Hide the create account when guest notification is getting activated
                    if (ApplicationState.GuestNotifyChgPending)
                        $("#signInCreateAccount").hide();
                };
                Screen_SignIn.showSignInStandard = function (expandReadMoreSignIn) {
                    if (expandReadMoreSignIn === void 0) { expandReadMoreSignIn = false; }
                    $("#signUpPage").hide();
                    $("#signInPrevious").hide();
                    $("#signInAccount").hide();
                    $("#signInPage").show();
                    $("#signInAll").show();
                    if (expandReadMoreSignIn) {
                        $("#signInTabConSocialIconsCon").css('height', $("#signInSocialIconsConInitShow").outerHeight());
                        $("#signInTabConSocialIconsCon").css('overflow', 'hidden');
                        $("#signInTabConSocialIconsCon").css('max-height', 'none');
                    }
                    if (expandReadMoreSignIn) {
                        $("#signInSocialIconsConInitHidden").show();
                        expandReadMore($("#signInAll .readMoreLink")[0], "signInTabConSocialIconsCon");
                    }
                };
                Screen_SignIn.prototype.registerEventHandlers = function () {
                    var me = this;
                    $("#TOU_FromSignIn, #Privacy_FromSignIn").click(function (e) {
                        var url = location.protocol + "//" + location.host + e.target.getAttribute('href');
                        window.open(url, '_blank');
                        e.preventDefault();
                        return false;
                    });
                    $(document).on("click", "#signInBackArrow", function (e) {
                        if ($("#signInAccount").is(":visible")) {
                            $("#signInPage").show();
                            $("#signInAccount").hide();
                            $("#SignIn .ModalOverlayTitle").html(Translation.get("SignIn"));
                        }
                        else if ($("#signUpPage").is(":visible")) {
                            $("#signInWithEmail").click();
                        }
                        e.stopPropagation();
                        e.stopImmediatePropagation();
                    });
                    $("#btnReactivate").click(function () {
                        Gigya.ReactivateLogin(me.UID, me.CRMUID);
                    });
                    $("#signInCreateAccount").click(function () {
                        URLHash.removeHash(false);
                        URLHash.set("section", "SignUp", false);
                        $("#signInPage").hide();
                        $("#signInAccount").hide();
                        $("#signUpPage").show();
                        $("#SignIn .ModalOverlayTitle").html(me.signInBackArrow.outerHTML());
                    });
                    $("#signInWithEmail, #signInContinuWithEmail").click(function () {
                        URLHash.removeHash(false);
                        URLHash.set("section", "SignIn", false);
                        $("#signInAccount").show();
                        $("#signUpPage").hide();
                        $("#signInPage").hide();
                        $("#SignIn .ModalOverlayTitle").html(me.signInBackArrow.outerHTML());
                    });
                    $("#signInPrevious .read-more").click(function (e) {
                        $("#signInPrevious").hide();
                        Screen_SignIn.showSignInStandard(true);
                        e.preventDefault();
                    });
                    $("#signInAll .read-more").click(function (e) {
                        $("#signInSocialIconsConInitHidden").show();
                        e.preventDefault();
                    });
                    $('#btnSignIn').click(function () {
                        if ($('#btnSignIn').hasClass("loading") == false) {
                            if (FormValidation.validateForm($('#signInInputsCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                                $('#btnSignIn').addClass("loading");
                                var args = new SignInArgs();
                                args.email = $('#signInEmailTxt').val();
                                args.password = $('#signInPasswordTxt').val();
                                args.loginMode = null;
                                args.regToken = null;
                                args.captchaText = null;
                                args.captchaToken = null;
                                Gigya.LoginJS(args);
                            }
                            else {
                                addAnimationClass($('#btnSignIn'), 'btnFail');
                            }
                        }
                        return false;
                    });
                    $('#btnSignInPrev').click(function () {
                        if ($('#btnSignInPrev').hasClass("loading") == false) {
                            if (FormValidation.validateForm($('#signInPrevious'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                                $('#btnSignInPrev').addClass("loading");
                                var args = new SignInArgs();
                                args.email = $('#signInEmailTxtPrev').val();
                                args.password = $('#signInPasswordTxtPrev').val();
                                args.loginMode = null;
                                args.regToken = null;
                                args.captchaText = null;
                                args.captchaToken = null;
                                Gigya.LoginJS(args);
                            }
                            else {
                                addAnimationClass($('#btnSignInPrev'), 'btnFail');
                            }
                        }
                        return false;
                    });
                    $("#btnSignInCancel, #btnSignUpCancel").click(function () {
                        //MasterPages.Desktop.smoothState.load('index');
                        location.href = "/index";
                        return false;
                    });
                    $('#btnSignUp').click(function () {
                        if ($('#btnSignUp').hasClass("loading") == false) {
                            var captchaResponse = (ApplicationConfig.CaptchaEnabled == true && grecaptcha) ? grecaptcha.getResponse(+$('#signUpCaptchaCon').attr('data-captcha-widget-id')) : null;
                            //Remove the capcha from validation 
                            if (!ApplicationConfig.CaptchaEnabled || ApplicationConfig.SkipClientCaptchaValidation) {
                                $("div.inputSignUpCon[data-validation=captcha\\(signUpCaptchaCon\\)]").removeAttr("data-validation");
                            }
                            if (FormValidation.validateForm($('#signUpTabCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                                $('#btnSignUp').addClass("loading");
                                var args = new SignUpArgs();
                                args.firstName = $("#signInSignUpFirstNameTxt").val();
                                args.lastName = $("#signInSignUpLastNameTxt").val();
                                args.email = $("#signInSignUpEmailTxt").val();
                                args.password = $("#signInSignUpPasswordTxt").val();
                                args.lang = ApplicationState.LanguageAttribute;
                                args.captchaText = null;
                                args.captchaToken = null;
                                args.finalizeRegistration = true;
                                args.captchaResponse = Utilities.cleanJSONValue(captchaResponse);
                                Gigya.Register(args);
                            }
                            else {
                                addAnimationClass($('#btnSignUp'), 'btnFail');
                            }
                        }
                        return false;
                    });
                    $("#signInForgotPasswordLnk, #signInForgotPasswordLnkPrev").click(function () {
                        Gigya.showScreen(gigyaScreen.ForgotPassword, null);
                        return false;
                    });
                    $("#sm_facebook_login, #sm_facebook_login_previous").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "facebook";
                        args.loginMode = "standard";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_google_login, #sm_google_login_previous").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "googleplus";
                        args.loginMode = "standard";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_twitter_login, #sm_twitter_login_previous").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "twitter";
                        args.loginMode = "standard";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_linkedin_login, #sm_linkedin_login_previous").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "linkedin";
                        args.loginMode = "standard";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#sm_apple_login, #sm_apple_login_previous").click(function () {
                        var args = new SocializeSignInArgs();
                        args.provider = "apple";
                        args.loginMode = "standard";
                        args.session_expiration = 0;
                        Gigya.SocializeLogin(args);
                    });
                    $("#signInAccount").keypress(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnSignIn')[0].click();
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                    $("#signUpTabCon").keypress(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnSignUp')[0].click();
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_SignIn.prototype.render = function () {
                    var _this = this;
                    var me = this;
                    GigyaLastPostFormMsg == null; //Reset the last message from gigya form actions;
                    if (typeof grecaptcha !== 'undefined') {
                        LoadCaptcha("signUpCaptchaCon");
                    }
                    else {
                        Events.ListenOnce(MasterPages.Desktop.CaptchaLoaded, function () { LoadCaptcha("signUpCaptchaCon"); });
                    }
                    //Not so related condition to identify that the sign in comes from a guest saved search action
                    if (ApplicationState.GuestNotifyChgPending) {
                        $("#signInAlmostThereText, #signInAlmostThereTitle").show();
                        $("#signInHeaderTitle, #signInHeaderText").hide();
                        $("#signInButtonCon").css('padding', '30px 0px 30px 0px');
                    }
                    if (this.reactivateCondition) {
                        var StatusText = "";
                        if (me.AccountStatus == "2") {
                            StatusText = Translation.get("StatusExpired");
                        }
                        else if (me.AccountStatus == "3") {
                            StatusText = Translation.get("StatusDeactivated");
                        }
                        var ReactivateHeading = Translation.get("YourAccountStatus", StatusText);
                        $("#signInReactivateStatus").append(ReactivateHeading);
                        $("#signInReactivate").show();
                        $("#signInAll").hide();
                        $("#signInPrevious").hide();
                    }
                    else {
                        if (this.LastLoginProviders.Count() > 0) {
                            var creaLoginType_1 = null;
                            var socialMediaLogins_1 = new (Array.bind.apply(Array, __spreadArray([void 0], this.LastLoginProviders.Values(), false)))().filter(function (value, index, array) {
                                if (value.Type == AccountType.CREA)
                                    creaLoginType_1 = value;
                                return value.Type != AccountType.CREA;
                            });
                            //smedia sorting as in the requirements
                            socialMediaLogins_1.sort(function (a, b) {
                                if (a.TimeStamp > b.TimeStamp) {
                                    return -1;
                                }
                                else if (a.TimeStamp < b.TimeStamp) {
                                    return 1;
                                }
                                else {
                                    return 0;
                                }
                            });
                            //Reorder the remaining smedias to show in the right order top_down
                            //Find the smedias htmlelement
                            var smedias = $("#signInContinuSocialIconsConInit div[data-media]").filter(function (index, element) {
                                var data_media = Number(element.getAttribute("data-media"));
                                return socialMediaLogins_1.filter(function (value, index, array) {
                                    Number(value.Type) == data_media;
                                }).length > 0;
                            });
                            //Reorder them accordingly and move them at the top of the container
                            var html_elem_ordered = smedias.get().sort(function (a, b) {
                                var a_data_media = a.getAttribute("data-media");
                                var b_data_media = b.getAttribute("data-media");
                                var a_login_provider = _this.LastLoginProviders[a_data_media];
                                var b_login_provider = _this.LastLoginProviders[b_data_media];
                                if (a_login_provider.TimeStamp > b_login_provider.TimeStamp) {
                                    return -1;
                                }
                                else if (a_login_provider.TimeStamp < b_login_provider.TimeStamp) {
                                    return 1;
                                }
                                else {
                                    return 0;
                                }
                            });
                            $(html_elem_ordered).prependTo("#signInContinuSocialIconsConInitHidden");
                            //Render the smedias that should be visible that is not crea...
                            if (socialMediaLogins_1.length > 0) {
                                var maxSignInOptDisp = socialMediaLogins_1.length > Screen_SignIn.max_display_sign_opt ?
                                    Screen_SignIn.max_display_sign_opt : socialMediaLogins_1.length;
                                for (var index = 0; index < maxSignInOptDisp; index++) {
                                    $("#signInPrevious div[data-media='" + Number(socialMediaLogins_1[index].Type).toString() + "']").show();
                                    $("#signInPrevious div[data-media='" + Number(socialMediaLogins_1[index].Type).toString() + "']").css("display", "table-row");
                                }
                            }
                            //Render the email button for realtor.ca continued sign in
                            if (!!creaLoginType_1) {
                                $("#signInContinuWithEmailText").html(Translation.get("ContinueWithYourEmail"));
                                if (socialMediaLogins_1.length == 0) {
                                    $("#signInContinuWithEmailText").html(Translation.get("ContinueWithYourEmail"));
                                    $("#signInPrevious").children(":not(#signInContinuWithEmail,#RealtorContinuLogin,#signInContinuChooseOptionText,.read-more)").hide();
                                    $("#signInPrevious .signInTabHRHeading").hide();
                                    $($("#signInPrevious .read-more")).insertAfter("#signInContinuWithEmail");
                                }
                                else {
                                    $("#signInAll .signInTabHRHeading").hide();
                                }
                            }
                            $("#signInPrevious").show();
                        }
                        else {
                            Screen_SignIn.showSignInStandard();
                        }
                    }
                    if (URLHash.get("section") == "SignIn") {
                        me.signInHash();
                    }
                    else if (URLHash.get("section") == "SignUp") {
                        me.signUpHash();
                        $("#signInCreateAccount").click();
                    }
                    else {
                        me.signInHash();
                    }
                };
                Screen_SignIn.prototype.signUpHash = function () {
                    URLHash.set("section", "SignUp", true);
                    $("#SignIn .ModalOverlayTitle").html(Translation.get("SignUp"));
                    $("#signInSignUpFirstNameTxt").focus();
                };
                Screen_SignIn.prototype.signInHash = function () {
                    URLHash.set("section", "SignIn", true);
                    $("#SignIn .ModalOverlayTitle").html(Translation.get("SignIn"));
                    $("#signInEmailTxt").focus();
                };
                Screen_SignIn.max_display_sign_opt = 1;
                return Screen_SignIn;
            }(WebControl));
            Consumer.Screen_SignIn = Screen_SignIn;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_SignIn.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var agreement_date_json = "";
            var Screen_SocialTerms = /** @class */ (function (_super) {
                __extends(Screen_SocialTerms, _super);
                function Screen_SocialTerms(model, agreement_date, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    agreement_date_json = agreement_date;
                    _this.init();
                    return _this;
                }
                Screen_SocialTerms.prototype.loadModel = function (model) { };
                Screen_SocialTerms.prototype.registerEventHandlers = function () {
                    var me = this;
                    $("#btnSTSave").click(function () {
                        if (FormValidation.validateForm($('#screenSocialTermsCon'), FormValidation.markFieldAsInvalid, FormValidation.clearFieldValidation)) {
                            var args = new AccountSetInfoArgs();
                            args.profile = "";
                            args.data = agreement_date_json;
                            args.CRM_update = false;
                            var callArgs = new SetAccountInfoCallbackArgs();
                            callArgs.sourceScreen = gigyaScreen.SocialTerms;
                            Gigya.AccountSetInfo(args, callArgs);
                        }
                        else {
                            addAnimationClass($('#btnSTSave'), 'btnFail');
                        }
                        return false;
                    });
                    $("#btnSTCancel").click(function () {
                        var args = new DeleteAccountArgs();
                        args.cid = "SocialTerms";
                        Gigya.DeleteAccount(args);
                    });
                    $("#screen_SocialTerms").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnSTSave')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.SocialTerms);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_SocialTerms.prototype.render = function () { };
                return Screen_SocialTerms;
            }(WebControl));
            Consumer.Screen_SocialTerms = Screen_SocialTerms;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_SocialTerms.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var Screen_UnsubscribeConfirmation = /** @class */ (function (_super) {
                __extends(Screen_UnsubscribeConfirmation, _super);
                function Screen_UnsubscribeConfirmation(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                Screen_UnsubscribeConfirmation.prototype.loadModel = function (model) {
                    this.showComms = model.showComms;
                    this.showNotify = model.showNotify;
                    this.hdn_UserId = model.hdn_UserId;
                    this.redirectToIndex = model.redirectToIndex;
                    //this.user_json = model.user_json;
                    this.user = model.user;
                };
                Screen_UnsubscribeConfirmation.prototype.registerEventHandlers = function () {
                    var _screenModel = this;
                    $("#btnUnsubConfirmCancel").click(function () {
                        Gigya.hide_gigyaScreen(gigyaScreen.UnsubscribeConfirmation);
                        if (_screenModel.redirectToIndex) {
                            Core.redirectTo("Index");
                        }
                    });
                    $("#btnUnsubConfirmSubmit").click(function () {
                        if ($(this).hasClass("loading") == false) {
                            $(this).addClass("loading");
                            var user = _screenModel.user; //JSON.parse(_screenModel.user_json); //AccountSessionStorage.ConsumerUser.getObject<consumeruser>(consumeruser.CreateFromJSON);
                            var UnsubCids = "";
                            var UnsubNids = "";
                            var dataObject = new Object();
                            var unsubObject = new Object();
                            var hdnUnsubObject = user.Unsubscribe;
                            var unsubObjectArr = [];
                            if ($('#C1').is(':checked')) {
                                UnsubCids = UnsubCids + 'C1,';
                            }
                            if ($('#C2').is(':checked')) {
                                UnsubCids = UnsubCids + 'C2,';
                            }
                            if ($('#C3').is(':checked')) {
                                UnsubCids = UnsubCids + 'C3,';
                            }
                            if ($('#C4').is(':checked')) {
                                UnsubCids = UnsubCids + 'C4,';
                            }
                            if ($('#C5').is(':checked')) {
                                UnsubCids = UnsubCids + 'C5,';
                            }
                            if ($('#C6').is(':checked')) {
                                UnsubCids = UnsubCids + 'C6,';
                            }
                            if ($('#N1').is(':checked')) {
                                UnsubNids = UnsubNids + 'N1,';
                            }
                            if ($('#N2').is(':checked')) {
                                UnsubNids = UnsubNids + 'N2,';
                            }
                            if ($('#N3').is(':checked')) {
                                UnsubNids = UnsubNids + 'N3,';
                            }
                            if ($('#N4').is(':checked')) {
                                UnsubNids = UnsubNids + 'N4,';
                            }
                            if ($('#N5').is(':checked')) {
                                UnsubNids = UnsubNids + 'N5,';
                            }
                            if ($('#N6').is(':checked')) {
                                UnsubNids = UnsubNids + 'N6,';
                            }
                            if (UnsubCids != "") {
                                UnsubCids = UnsubCids.slice(0, -1); //remove last comma
                                unsubObject.Cids = UnsubCids;
                            }
                            if (UnsubNids != "") {
                                UnsubNids = UnsubNids.slice(0, -1); //remove last comma
                                unsubObject.Nids = UnsubNids;
                            }
                            if (UnsubCids != "" || UnsubNids != "") {
                                var d = new Date();
                                unsubObject.date = d.getFullYear() + "-" + ("00" + (d.getMonth() + 1)).slice(-2) + "-" + ("00" + d.getDate()).slice(-2) + "T" + ("00" + d.getHours()).slice(-2) + ":" + ("00" + d.getMinutes()).slice(-2) + ":" + ("00" + d.getSeconds()).slice(-2);
                                //put the old unsubscribe reason first, and the newest last, only last reason will be sent to pardot in API
                                if (hdnUnsubObject != null) {
                                    $(hdnUnsubObject).each(function () {
                                        unsubObjectArr.push(this);
                                    });
                                }
                                unsubObjectArr.push(unsubObject);
                                dataObject.Unsubscribe = unsubObjectArr;
                                var args = new AccountSetInfoArgs();
                                args.data = JSON.stringify(dataObject);
                                args.CRM_update = false;
                                var callbackArgs = new SetAccountInfoCallbackArgs();
                                if (_screenModel.redirectToIndex) {
                                    callbackArgs.redirectTargetOnSuccess = RouteHelper.getURL("");
                                }
                                callbackArgs.sourceScreen = gigyaScreen.UnsubscribeConfirmation;
                                if (ApplicationState.UserIsSignedIn == false) {
                                    //AccountSessionStorage.ConsumerUser.delete();
                                    args.UID = _screenModel.hdn_UserId;
                                }
                                Gigya.AccountSetInfo(args, callbackArgs);
                            }
                            else {
                                $(this).removeClass("loading");
                                showMessage(Translation.get("OneCheckboxMandatory"), MessageType.Error, DisplayType.Lightbox);
                            }
                        }
                    });
                    $("#screen_UnsubscribeConfirmation").keydown(function (e) {
                        if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                            $('#btnSTSave')[0].click();
                            return false;
                        }
                        else if ((e.which && e.which == 27) || (e.keyCode && e.keyCode == 27)) {
                            Gigya.hide_gigyaScreen(gigyaScreen.UnsubscribeConfirmation);
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                };
                Screen_UnsubscribeConfirmation.prototype.render = function () { };
                return Screen_UnsubscribeConfirmation;
            }(WebControl));
            Consumer.Screen_UnsubscribeConfirmation = Screen_UnsubscribeConfirmation;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=Screen_UnsubscribeConfirmation.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Controls;
(function (Controls) {
    var Desktop;
    (function (Desktop) {
        var Consumer;
        (function (Consumer) {
            var SharedNotes = /** @class */ (function (_super) {
                __extends(SharedNotes, _super);
                function SharedNotes(model, controlId) {
                    var _this = _super.call(this, model, controlId) || this;
                    _this.init();
                    return _this;
                }
                SharedNotes.prototype.loadModel = function (model) {
                };
                SharedNotes.prototype.registerEventHandlers = function () {
                    var me = this;
                    me.saveSharedNotes();
                };
                SharedNotes.prototype.render = function () {
                };
                SharedNotes.prototype.saveSharedNotes = function () {
                    var localModel = this.model;
                    if (decodeURIComponent($("#SharedNotesSenderUID").val()) == ConsumerProfile.UserAccountSettings.UID) {
                        AccountSessionStorage.SharedNotes.delete();
                    }
                    else {
                        GigyaInit.setCPSharedNotes(localModel.sharedNotesJSON);
                    }
                };
                return SharedNotes;
            }(WebControl));
            Consumer.SharedNotes = SharedNotes;
        })(Consumer = Desktop.Consumer || (Desktop.Consumer = {}));
    })(Desktop = Controls.Desktop || (Controls.Desktop = {}));
})(Controls || (Controls = {}));
//# sourceMappingURL=SharedNotes.js.map;
var scrollLocations = {};
//# sourceMappingURL=base.js.map;
var DesktopMapHelper = /** @class */ (function () {
    function DesktopMapHelper() {
    }
    DesktopMapHelper.highlightPushpin = function (listingid, latitude, longitude, clusterer, markers) {
        if ((listingid || "") == "" || (latitude || "") == "" || (longitude || "") == "") {
            return;
        }
        var pin = MapPinHelper.getMarkerById(listingid, latitude, longitude, markers, clusterer);
        if (pin) {
            //if (pin instanceof Cluster) {
            if (pin.clusterIcon_.div_ != null && pin.clusterIcon_.div_.className.indexOf("highlightedPin") == -1) {
                pin.clusterIcon_.div_.className += " highlightedPin";
            }
            //} else if (pin instanceof google.maps.Marker) {
            //    pin.setAnimation(google.maps.Animation.BOUNCE);
            //}
        }
        //$('.mapPin').toggleClass("fade", true);
    };
    DesktopMapHelper.unhighlightPushpin = function (listingid, latitude, longitude, clusterer, markers) {
        if ((listingid || "") == "" || (latitude || "") == "" || (longitude || "") == "") {
            return;
        }
        var pin = MapPinHelper.getMarkerById(listingid, latitude, longitude, markers, clusterer);
        if (pin) {
            //if (pin instanceof Cluster) {
            var div = pin.clusterIcon_.div_;
            //callAfterAnimation($(div), () => {\
            if (div != null) {
                div.classList.remove("highlightedPin");
            }
            //div.className = div.className.replace(" highlightedPin", "");
            //});
            //} else if (pin instanceof google.maps.Marker) {
            //    pin.setAnimation(null);
            //}
        }
        //$('.mapPin').toggleClass("fade", false);
    };
    return DesktopMapHelper;
}());
//# sourceMappingURL=DesktopMapHelper.js.map;
function minValueChanged(max, min, detachedOptions) {
    //minTxt.val(minTxt.val().replace(/\D/g, ''));
    //maxTxt.attr('min', minTxt.val());
    var minVal = Number(min.val());
    var maxVal = Number(max.val());
    //checks if it is an exact value or an existing value
    //if (min.find("option[data-cad='" + minVal + "']:not([data-select2-tag='true'])").length === 0) {
    min.find("option[data-select2-tag='true']").each(function (i, option) {
        if (minVal != 0) {
            //option.setAttribute('data-cad', (minVal * ApplicationState.CurrencyRate).toString());
            option.setAttribute('data-cad', (minVal / ApplicationState.CurrencyMultiplier).toString());
            //option.setAttribute('data-cad-exact', 'true');
        }
    });
    //}
    //if (min.data('unselecting')) {
    //    minVal = null;
    //    min.removeData('unselecting');}
    if (minVal != 0 && maxVal != 0 && minVal > maxVal) { // && max.is(':visible')
        //max.val(minVal).trigger("change");
        max.val(max.find("option:first-child").val()); //.trigger("change");
    }
    reattachHiddenSelectOptions(max, detachedOptions);
    if (minVal != 0) {
        if (detachedOptions != null) {
            detachedOptions[max.attr('id')] = max.find('option').filter(function () {
                return Number($(this).val()) < Number(minVal) && $(this).val() != "0";
            }).detach();
        }
        if (maxVal == 0) {
            $(this).val('').trigger("change");
        }
    }
}
/**
 * Function to load JQUery UI datepicker control for the listed since filter.
 * @param control
 */
function initListedSince(control, nbMonthsDisplay) {
    if (nbMonthsDisplay === void 0) { nbMonthsDisplay = 2; }
    control.datepicker({
        dateFormat: "mm/dd/yy",
        showOn: "both",
        showButtonPanel: true,
        numberOfMonths: nbMonthsDisplay,
        maxDate: 0,
        minDate: -363,
        buttonImageOnly: true,
        buttonImage: "/images/common/icons/svg/ArrowDown.svg",
        buttonText: "Calendar",
        beforeShow: function (input, inst) {
            if ($(this).parent().children('.ui-datepicker-trigger').hasClass('ui-datepicker-arrow-up')) {
                $(this).parent().children('.ui-datepicker-trigger').removeClass('ui-datepicker-arrow-up');
            }
            else {
                $(this).parent().children('.ui-datepicker-trigger').addClass('ui-datepicker-arrow-up');
            }
            setTimeout(function () {
                var buttonPane = $(input).datepicker("widget").find(".ui-datepicker-buttonpane");
                $("<button>", {
                    text: Translation.get('ClearDate'), click: function () {
                        $.datepicker._clearDate(input);
                    }
                }).addClass('clearDateBtn').attr('id', 'clearDateBtn').appendTo(buttonPane);
                //Add an event handler for the todays button to be handled
                var todayBtn = $(buttonPane.find(':button[data-handler=today]')[0]);
                if (todayBtn.length > 0) {
                    todayBtn.click(function (e) {
                        var todayDate = new Date();
                        $(input).val(todayDate.getUTCMonth() + "/" + (todayDate.getUTCDate()) + "/" + todayDate.getUTCFullYear());
                        $(input).datepicker('setDate', todayDate);
                        $(input).datepicker("hide");
                    });
                }
            }, 1);
        },
        onClose: function (dateText, inst) {
            $(this).parent().children('.ui-datepicker-trigger').removeClass('ui-datepicker-arrow-up');
        },
        onSelect: function () {
        }
    }, $.datepicker.regional[ApplicationState.CultureID == 1 ? "en-CA" : "fr-CA"]).mask('99/99/9999', {
        placeholder: 'mm/dd/yyyy',
        showMaskOnHover: true,
        showMaskOnFocus: true
    });
}
function maxValueChanged(min, max, detachedOptions) {
    var maxVal = Number(max.val());
    var minVal = Number(min.val());
    //checks if it is an exact value or an existing value
    //if (max.find("option[data-cad='" + maxVal + "']:not([data-select2-tag='true'])").length === 0) {
    max.find("option[data-select2-tag='true']").each(function (i, option) {
        if (maxVal != 0) {
            //option.setAttribute('data-cad', (maxVal * ApplicationState.CurrencyRate).toString());
            option.setAttribute('data-cad', (maxVal / ApplicationState.CurrencyMultiplier).toString());
            //option.setAttribute('data-cad-exact', 'true');
        }
    });
    //}
    if (maxVal < minVal && maxVal != 0) {
        //max.val(minVal).trigger("change");
        min.val(min.find("option:first-child").val()); //.trigger("change");
        maxVal = minVal;
    }
    reattachHiddenSelectOptions(min, detachedOptions);
    if (maxVal != 0) {
        if (detachedOptions != null) {
            Logging.Debug("Removing minDDL values > " + maxVal);
            var isBlank = (min.val() || "") == '';
            detachedOptions[min.attr('id')] = min.find('option').filter(function () {
                return Number($(this).val()) > Number(maxVal) && $(this).val() != "0";
            }).detach();
            if (isBlank) {
                min.val('');
            }
        }
    }
}
/**
 * Function to open the lightboxed email realtor form
 * @param individualId
 * @param listingId
 * @param referenceNumber
 */
function LoadEmailRealtorForm(individualId, listingId, referenceNumber, bookShowing, customDefaultMessage, findTextToHyperlinksInMsg, hyperlinksToTextInMsg) {
    if (bookShowing === void 0) { bookShowing = false; }
    if (customDefaultMessage === void 0) { customDefaultMessage = ""; }
    if (findTextToHyperlinksInMsg === void 0) { findTextToHyperlinksInMsg = ""; }
    if (hyperlinksToTextInMsg === void 0) { hyperlinksToTextInMsg = ""; }
    var controlArgs = new ControlFetcherArgs();
    controlArgs.postCallHandler = function (result) {
        var model = new ModalContentModel("EmailRealtor", Translation.get("EmailRealtor"), result.d);
        model.ButtonCloseID = "btnEmailRealtorCancel";
        model.CloseEvent = Controls.Desktop.EmailRealtor.EmailSentSuccessfullyEvent;
        model.DisplayType = ModalDisplayTypes.LightboxMe;
        showModalContent(model);
    };
    var emailArgs = new EmailRealtorControlArgs();
    emailArgs.individualId = individualId; //_card.individualId;
    emailArgs.listingId = listingId || ""; //_card.listingId || "";
    emailArgs.referenceNumber = referenceNumber || ""; //_card.referenceNumber || "";
    emailArgs.bookShowing = bookShowing;
    emailArgs.customDefaultMessage = customDefaultMessage;
    emailArgs.findTextToHyperlinksInMsg = findTextToHyperlinksInMsg;
    emailArgs.hyperlinksToTextInMsg = hyperlinksToTextInMsg;
    ControlFetcher.fetchEmailRealtor(controlArgs, emailArgs);
}
/**
 * Function to open the lightboxed email office form
 * @param individualId
 * @param listingId
 * @param referenceNumber
 */
function LoadEmailOfficeForm(organizationId, listingId, referenceNumber, bookShowing) {
    if (bookShowing === void 0) { bookShowing = false; }
    var controlArgs = new ControlFetcherArgs();
    controlArgs.postCallHandler = function (result) {
        var model = new ModalContentModel("EmailOffice", Translation.get("EmailOffice"), result.d);
        model.ButtonCloseID = "btnEmailRealtorCancel";
        model.CloseEvent = Controls.Desktop.EmailRealtor.EmailSentSuccessfullyEvent;
        model.DisplayType = ModalDisplayTypes.LightboxMe;
        showModalContent(model);
    };
    var emailArgs = new EmailRealtorControlArgs();
    emailArgs.organizationId = organizationId; //_card.individualId;
    emailArgs.listingId = listingId || ""; //_card.listingId || "";
    emailArgs.referenceNumber = referenceNumber || ""; //_card.referenceNumber || "";
    emailArgs.bookShowing = bookShowing;
    ControlFetcher.fetchEmailRealtor(controlArgs, emailArgs);
}
//# sourceMappingURL=DesktopUIHelpers.js.map;
/**
 * Class to contain Select2 dropdown functions.
 */
var DropDown = /** @class */ (function () {
    function DropDown() {
    }
    /**
     * Sets the default custom adapter functions
     */
    DropDown.defaultCustomAdapterDefinition = function () {
        $.fn.select2.amd.define("CustomSelectionAdapter", [
            "select2/utils",
            "select2/selection/multiple",
            "select2/selection/placeholder",
            "select2/selection/eventRelay",
            "select2/selection/single",
        ], function (Utils, MultipleSelection, Placeholder, EventRelay, SingleSelection) {
            // Decorates MultipleSelection with Placeholder
            var adapter = Utils.Decorate(MultipleSelection, Placeholder);
            // Decorates adapter with EventRelay - ensures events will continue to fire
            // e.g. selected, changed
            adapter = Utils.Decorate(adapter, EventRelay);
            adapter.prototype.render = function () {
                // Use selection-box from SingleSelection adapter
                // This implementation overrides the default implementation
                var $selection = SingleSelection.prototype.render.call(this);
                return $selection;
            };
            adapter.prototype.update = function (data) {
                // copy and modify SingleSelection adapter
                this.clear();
                var $rendered = this.$selection.find('.select2-selection__rendered');
                var noItemsSelected = data.length === 0;
                var formatted = "";
                if (noItemsSelected) {
                    formatted = this.options.get("placeholder") || "";
                }
                else {
                    var itemsData = {
                        selected: data || [],
                        all: this.$element.find("option") || []
                    };
                    // Pass selected and all items to display method
                    // which calls templateSelection
                    formatted = this.display(itemsData, $rendered);
                }
                $rendered.empty().append(formatted);
                $rendered.prop('title', formatted);
            };
            return adapter;
        });
        $.fn.select2.amd.define("CustomDropdownAdapter", [
            "select2/utils",
            "select2/dropdown",
            "select2/dropdown/attachBody",
            "select2/dropdown/attachContainer",
            "select2/dropdown/search",
            "select2/dropdown/minimumResultsForSearch",
            "select2/dropdown/closeOnSelect",
        ], function (Utils, Dropdown, AttachBody, AttachContainer, Search, MinimumResultsForSearch, CloseOnSelect) {
            // Decorate Dropdown with Search functionalities
            var dropdownWithSearch = Utils.Decorate(Dropdown, Search);
            dropdownWithSearch.prototype.render = function () {
                // Copy and modify default search render method
                var $rendered = Dropdown.prototype.render.call(this);
                // Add ability for a placeholder in the search box
                var placeholder = this.options.get("placeholderForSearch") || "";
                var $search = $('<span class="select2-search select2-search--dropdown">' +
                    '<input aria-label="Search Field" class="select2-search__field" placeholder="' + placeholder + '" type="search"' +
                    ' tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="off"' +
                    ' spellcheck="false" role="textbox" />' +
                    '</span>');
                this.$searchContainer = $search;
                this.$search = $search.find('input');
                return $rendered;
            };
            // Decorate the dropdown+search with necessary containers
            var adapter = Utils.Decorate(dropdownWithSearch, AttachContainer);
            adapter = Utils.Decorate(adapter, AttachBody);
            return adapter;
        });
    };
    /**
     * Sets the value of the dropdown
     * @param dropdown
     * @param value
     */
    DropDown.setSelect2Value = function (dropdown, value) {
        var currentVal = (dropdown.val() || "");
        if (currentVal.constructor === Array) {
            currentVal = currentVal.join(",").trim();
        }
        else {
            currentVal = currentVal.trim();
        }
        if (currentVal == "" && value == dropdown.attr("data-default")) {
            return;
        }
        if (currentVal != value) {
            //dropdown.trigger('change');
            var isPrice = false;
            if (dropdown.attr('data-hashkey') == 'PriceMin' || dropdown.attr('data-hashkey') == 'PriceMax' || dropdown.attr('data-hashkey') == 'RentMin' || dropdown.attr('data-hashkey') == 'RentMax') {
                isPrice = true;
            }
            var values = DropDown.createElements(value, isPrice);
            DropDown.addValuesIfNeeded(dropdown, values);
            dropdown.val(value.split(",")).trigger('change');
        }
    };
    /**
     * Creates a list of Option elements from the CSV string passed in.
     * @param value
     */
    DropDown.createElements = function (value, isPrice) {
        var returnValue = [];
        var values = value.split(",");
        for (var i = 0; i < values.length; i++) {
            var textVal = values[i];
            if ($.isNumeric(textVal)) {
                textVal = Number(textVal).toLocaleString(ApplicationState.LanguageAttribute);
            }
            var newOption = new Option(textVal, values[i], false, false);
            if (isPrice) {
                //let dataCAD = (Number(values[i]) * ApplicationState.CurrencyRate).toString();
                var dataCAD = "";
                var SavedSearchLoadFirstTime = SessionStorage.SavedSearchLoadFirstTime.get();
                var isSavedSearchModeFirstTime = (SavedSearchLoadFirstTime != null && SavedSearchLoadFirstTime.length > 0);
                if (isSavedSearchModeFirstTime) {
                    dataCAD = (Number(values[i])).toString();
                }
                else {
                    dataCAD = (Number(values[i]) / ApplicationState.CurrencyMultiplier).toString();
                }
                newOption.setAttribute('data-cad', dataCAD);
                //newOption.setAttribute('data-cad-exact', 'true');
            }
            returnValue.push(newOption);
        }
        return returnValue;
    };
    /**
     * Will add what passed in values are not currently in the dropdown.
     * @param dropdown
     * @param options
     */
    DropDown.addValuesIfNeeded = function (dropdown, options) {
        var itemsAdded = false;
        var itemsToAdd = [];
        for (var i = 0; i < options.length; i++) {
            if (DropDown.containsValue(dropdown, options[i].value) == false) {
                //dropdown.append(options[i]);
                itemsToAdd.push(options[i]);
                itemsAdded = true;
            }
        }
        if (itemsAdded) {
            dropdown.append(itemsToAdd);
            //dropdown.trigger('change');//Can cause loop issues since this is usually called before actually setting the value
        }
    };
    /**
    * Reaplces the current options inside the passed in dropdown (if all values aren't the same).
    * @param dropdown
    * @param options
    */
    DropDown.replaceValues = function (dropdown, options) {
        var existingOptions = dropdown[0].options;
        var needsReplacement = options.length != existingOptions.length;
        if (needsReplacement == false) {
            for (var i = 0; i < existingOptions.length; i++) {
                if (existingOptions[i].value != options[i].value) {
                    needsReplacement = true;
                    break;
                }
            }
        }
        if (needsReplacement) {
            dropdown[0].options.length = 0;
            dropdown.append(options);
            dropdown.trigger('change');
        }
    };
    /**
     * Adds the specified value to the specified dropdown.
     * @param dropdown
     * @param value
     * @param text
     */
    DropDown.addValue = function (dropdown, value, text) {
        if (text === void 0) { text = ""; }
        if (text == "") {
            text = value;
        }
        var newOption = new Option(text, value, false, false);
        dropdown.append(newOption).trigger('change');
    };
    /**
     * Returns in the passed in value exists in the passed in dropdown.
     * @param dropdown
     * @param value
     */
    DropDown.containsValue = function (dropdown, value) {
        var returnValue = false;
        if (dropdown.length > 0) {
            var options = dropdown[0].options;
            for (var i = 0; i < options.length; i++) {
                if (options[i].value == value) {
                    returnValue = true;
                    break;
                }
            }
        }
        return returnValue;
    };
    /**
     * Sets up a master->slave relationship between two drop downs. (Parent changes child, but not vice-versa)
     * @param dropdown1
     * @param dropdown2
     */
    DropDown.linkDropDownVals_OneWay = function (dropdown1, dropdown2) {
        var me = this;
        DropDown.linkDropDownVals(dropdown1, dropdown2, true);
    };
    /**
     * Links two drop downs - change a value in one and that change will be mirrored in the other drop down (and vice versa)
     * @param dropdown1
     * @param dropdown2
     * @param oneWayBinding if true then only dropdown1's changes will update dropdown2.
     */
    DropDown.linkDropDownVals = function (dropdown1, dropdown2, oneWayBinding) {
        if (oneWayBinding === void 0) { oneWayBinding = false; }
        var me = this;
        dropdown1.change(function () {
            var dropdown1IsMulti = $(this).attr("multiple") != null;
            var primaryVal = dropdown1.val();
            var primaryText = dropdown1.find("option:selected").text();
            var primaryDataCAD = dropdown1.find("option:selected").attr("data-cad");
            //let primaryDataCADExact = dropdown1.find("option:selected").attr("data-cad-exact");
            if (primaryVal == null && dropdown1IsMulti == false) {
                primaryVal = dropdown1.find("option:first-child").val();
            }
            var secondaryVal = dropdown2.val();
            if ((primaryVal || "").toString() != (secondaryVal || "").toString()) {
                // Set the value, creating a new option if necessary
                if (dropdown2.find("option[value='" + primaryVal + "']").length || dropdown1IsMulti) {
                    dropdown2.val(primaryVal).trigger('change');
                    DropDown.linkedDropdownUpdated.Fire({ control: dropdown2 });
                }
                else {
                    // Create a DOM Option and pre-select by default
                    var newOption = new Option(primaryText, primaryVal, true, true);
                    // Append it to the select
                    newOption.setAttribute('data-cad', primaryDataCAD);
                    //newOption.setAttribute('data-cad-exact', primaryDataCADExact);
                    dropdown2.append(newOption).trigger('change');
                    DropDown.linkedDropdownUpdated.Fire({ control: dropdown2 });
                }
            }
        });
        if (oneWayBinding == false) {
            dropdown2.change(function () {
                var dropdown2IsMulti = $(this).attr("multiple") != null;
                var primaryVal = dropdown2.val();
                var primaryText = dropdown2.find("option:selected").text();
                var primaryDataCAD = dropdown2.find("option:selected").attr("data-cad");
                //let primaryDataCADExact = dropdown2.find("option:selected").attr("data-cad-exact");
                if (primaryVal == null && dropdown2IsMulti == false) {
                    primaryVal = dropdown2.find("option:first-child").val();
                }
                var secondaryVal = dropdown1.val();
                if ((primaryVal || "").toString() != (secondaryVal || "").toString()) {
                    // Set the value, creating a new option if necessary
                    if (dropdown1.find("option[value='" + primaryVal + "']").length || dropdown2IsMulti) {
                        dropdown1.val(primaryVal).trigger('change');
                        DropDown.linkedDropdownUpdated.Fire({ control: dropdown1 });
                    }
                    else {
                        // Create a DOM Option and pre-select by default
                        var newOption = new Option(primaryText, primaryVal, true, true);
                        // Append it to the select
                        newOption.setAttribute('data-cad', primaryDataCAD);
                        //newOption.setAttribute('data-cad-exact', primaryDataCADExact);
                        dropdown1.append(newOption).trigger('change');
                        DropDown.linkedDropdownUpdated.Fire({ control: dropdown1 });
                    }
                }
            });
        }
    };
    /**
    * Will replace any of the default filter values eith their placeholder text for the main search bar filters.
    */
    DropDown.updateMainSearchFilterPlaceholders = function (container) {
        container.find("select").each(function (index, element) {
            var value = $(element).val();
            if ($(element).attr("multiple") == null && value != null) {
                if (value.trim() == "0" || value.trim() == "" || value.trim() == "0-0") {
                    $(element).val('').trigger("change");
                }
            }
        });
    };
    DropDown.updateMultiSelectNumSelection = function (dropdown) {
        var uldiv = dropdown.siblings('span.select2').find('ul');
        //var count = dropdown.select2('data').length;
        var count = dropdown.find(":selected").length;
        if (count == 0) {
            uldiv.html(uldiv.data("initial"));
        }
        else {
            var title_1 = "";
            dropdown.find(":selected").each(function (i, selected) {
                title_1 += $(selected).text() + ", ";
            });
            title_1 = title_1.substring(0, title_1.length - 2);
            var itemSelectedStr = Translation.get("ItemsSelectedSingular");
            if (count > 1)
                itemSelectedStr = Translation.get("ItemsSelected");
            uldiv.html("<li class='itemsSelectedLbl' title='" + title_1 + "'>" + count + " " + itemSelectedStr + "</li>");
        }
        if (dropdown.attr('data-reset') == "true") {
            dropdown.removeAttr('data-reset');
            uldiv.html(uldiv.data("initial"));
            dropdown.val('');
        }
    };
    DropDown.ReplaceDefaultValWithPlaceholder = function (select) {
        var defaultVal = (select.attr('data-default') || "").trim();
        var rawValue = select.val();
        var value = "";
        if (rawValue != null) {
            if (rawValue.constructor === Array) {
                value = rawValue.join(",");
            }
            else {
                value = (select.val() || "").trim();
            }
            if (defaultVal == value && select.val() != null) {
                select.val('').trigger("change", { "SkipNext": true });
            }
        }
    };
    DropDown.loadSelect2Lazily = function (selector, options) {
        selector.each(function () {
            var _this = this;
            Utilities.queueTask(function () {
                var element = $(_this);
                element.select2({
                    dropdownParent: options.dropdownParent,
                    dropdownPosition: options.dropdownPosition,
                    sorter: options.sorter,
                    allowClear: options.allowClear,
                    closeOnSelect: options.closeOnSelect,
                    containerCssClass: options.containerCssClass,
                    dropdownCssClass: options.dropdownCssClass,
                    maximumInputLength: options.maximumInputLength,
                    minimumResultsForSearch: (options.allowSearch || options.tags ? 0 : -1),
                    data: options.data,
                    createTag: options.createTag,
                    language: options.language,
                    //language: {
                    //    noResults: function (params) {
                    //        return "";
                    //    }              
                    //},
                    tokenSeparators: options.tokenSeparators,
                    tags: options.tags,
                    placeholder: options.placeholderText || "",
                    maximumSelectionLength: options.maximumSelectionLength,
                    width: (options.width || "100%"),
                    selectionAdapter: options.customSelectionAdapter,
                    dropdownAdapter: options.customDropDownAdapter,
                    templateSelection: options.customTemplateSelection,
                });
                if (options.onChange) {
                    element.on("change", function () { options.onChange(); });
                }
                if (options.maximumInputLength) {
                    element.on('select2:open', function () {
                        $('.select2-search__field').attr('maxlength', options.maximumInputLength);
                    });
                }
                if (options.clearOnDefaultValue) {
                    element.on('change', function (evt, data) {
                        if (data == null || (data["SkipNext"] || false) == false) {
                            DropDown.ReplaceDefaultValWithPlaceholder($(this));
                        }
                    });
                    DropDown.ReplaceDefaultValWithPlaceholder($(_this));
                }
                if (options.stopOpenOnClear) {
                    element.on('select2:unselecting', function () {
                        $(this).data('unselecting', true);
                    }).on('select2:opening', function (e) {
                        if ($(this).data('unselecting')) {
                            $(this).removeData('unselecting');
                            e.preventDefault();
                        }
                    });
                }
                if (options.multiSelectWithoutTags) {
                    element.each(function () {
                        //Store intial HTML for multiselect 
                        var uldiv = $(this).siblings('span.select2').find('ul');
                        if (uldiv.data("initial") == null) {
                            uldiv.data("initial", uldiv.html());
                        }
                        $(this).on('change', function (evt) {
                            DropDown.updateMultiSelectNumSelection($(this));
                        });
                        if (($(this).val() || "") != "") {
                            DropDown.updateMultiSelectNumSelection($(this));
                        }
                    });
                }
                //Remove tag doesn't open dropdown
                if (options.multiSelectWithoutTags != true && options.tags) {
                    element.on("select2:unselect", function (evt) {
                        if (!evt.params.originalEvent) {
                            return;
                        }
                        evt.params.originalEvent.stopPropagation();
                    });
                    element.on('change', function (evt) {
                        var uldiv = $(this).siblings('span.select2').find('ul');
                        if ($(this).attr('data-reset') == "true") {
                            $(this).removeAttr('data-reset');
                            uldiv.find(".select2-selection__choice").remove();
                        }
                    });
                }
            });
        });
    };
    /**
     * Converts the passed in dropdown(s) into Select2 dropdowns based on the passed in options.
     * @param selector
     * @param options
     */
    DropDown.loadSelect2 = function (selector, options) {
        selector.select2({
            dropdownParent: options.dropdownParent,
            dropdownPosition: options.dropdownPosition,
            sorter: options.sorter,
            allowClear: options.allowClear,
            closeOnSelect: options.closeOnSelect,
            containerCssClass: options.containerCssClass,
            dropdownCssClass: options.dropdownCssClass,
            maximumInputLength: options.maximumInputLength,
            minimumResultsForSearch: (options.allowSearch || options.tags ? 0 : -1),
            data: options.data,
            createTag: options.createTag,
            language: options.language,
            //language: {
            //    noResults: function (params) {
            //        return "";
            //    }              
            //},
            tokenSeparators: options.tokenSeparators,
            tags: options.tags,
            placeholder: options.placeholderText || "",
            maximumSelectionLength: options.maximumSelectionLength,
            width: (options.width || "100%"),
            selectionAdapter: options.customSelectionAdapter,
            dropdownAdapter: options.customDropDownAdapter,
            templateSelection: options.customTemplateSelection
        });
        if (options.maximumInputLength) {
            selector.on('select2:open', function () {
                $('.select2-search__field').attr('maxlength', options.maximumInputLength);
            });
        }
        if (options.onChange) {
            selector.on('change', function () {
                options.onChange();
            });
        }
        if (options.clearOnDefaultValue) {
            selector.on('change', function (evt, data) {
                if (data == null || (data["SkipNext"] || false) == false) {
                    DropDown.ReplaceDefaultValWithPlaceholder($(this));
                }
            });
            selector.each(function () {
                DropDown.ReplaceDefaultValWithPlaceholder($(this));
            });
        }
        if (options.stopOpenOnClear) {
            selector.on('select2:unselecting', function () {
                $(this).data('unselecting', true);
            }).on('select2:opening', function (e) {
                if ($(this).data('unselecting')) {
                    $(this).removeData('unselecting');
                    e.preventDefault();
                }
            });
        }
        if (options.multiSelectWithoutTags) {
            selector.each(function () {
                //Store intial HTML for multiselect 
                var uldiv = $(this).siblings('span.select2').find('ul');
                if (uldiv.data("initial") == null) {
                    uldiv.data("initial", uldiv.html());
                }
                $(this).on('change', function (evt) {
                    DropDown.updateMultiSelectNumSelection($(this));
                });
                if (($(this).val() || "") != "") {
                    DropDown.updateMultiSelectNumSelection($(this));
                }
            });
        }
        //Remove tag doesn't open dropdown
        if (options.multiSelectWithoutTags != true && options.tags) {
            selector.on("select2:unselect", function (evt) {
                if (!evt.params.originalEvent) {
                    return;
                }
                evt.params.originalEvent.stopPropagation();
            });
            selector.on('change', function (evt) {
                var uldiv = $(this).siblings('span.select2').find('ul');
                if ($(this).attr('data-reset') == "true") {
                    $(this).removeAttr('data-reset');
                    uldiv.find(".select2-selection__choice").remove();
                }
            });
        }
        return selector;
    };
    DropDown.linkedDropdownUpdated = new RealtorEvent('linkedDropdownUpdated');
    DropDown.multiSelectInitialHTML = {};
    return DropDown;
}());
var Select2TranslationArg = /** @class */ (function () {
    function Select2TranslationArg() {
    }
    return Select2TranslationArg;
}());
var Select2Translation = /** @class */ (function () {
    function Select2Translation() {
    }
    return Select2Translation;
}());
/**
 * Options used for initilizing a Select2 dropdown.
 */
var Select2Options = /** @class */ (function () {
    function Select2Options() {
        this.stopOpenOnClear = true;
        this.containerCssClass = "";
        this.dropdownCssClass = "";
        this.multiSelectWithoutTags = true;
        this.allowClear = false;
        this.closeOnSelect = true;
        this.allowSearch = false;
        //public formatNoMatches?: ({ term }) => string;
        this.tags = false;
        this.placeholderText = "";
        this.clearOnDefaultValue = false;
    }
    return Select2Options;
}());
//# sourceMappingURL=DropDown.js.map;
/**
 * Centralized functions for the tips-for-buyers/tips-for-sellers/commercial-resources pages
 */
var InfoPage = /** @class */ (function () {
    function InfoPage() {
    }
    InfoPage.showTabSubSection = function (tabSubSectionSelector) {
        var sectionId = tabSubSectionSelector.attr("data-sectionid");
        tabSubSectionSelector.parent('.infoContentSection_SubSection_TabsCon').find('.tabHighlighter').css("left", ((Number(sectionId) - 1) * 100).toString() + "%");
        $('.infoContentSection_SubSection_TabItem').removeClass("selected");
        tabSubSectionSelector.addClass('selected');
        $('.infoContentSection_SubSection_TabCon').hide();
        tabSubSectionSelector.parents('.infoContentSection').find('.infoContentSection_SubSection_TabCon[data-sectionid=' + sectionId + ']').show();
    };
    //public static updatePageHash() {
    //    //URLHash.removeHash(false);
    //    let tabid = $(".infoTopSectionItem.selected").attr("data-tabid");
    //    let sectionid = $('.infoContentSection[data-tabid=' + tabid + '] .infoContentSection_SubSection_TabItem.selected').attr("data-sectionid") || 1;
    //    URLHash.replaceHash(tabid + '-' + sectionid, false);
    //}
    InfoPage.showTab = function (tabid) {
        $('.infoTopSectionItem').removeClass("selected");
        var tabSelector = $(".infoTopSectionItem[data-tabid=" + tabid + "]");
        var tabSection = $(".infoContentSection[data-tabid=" + tabid + "]");
        tabSelector.addClass('selected');
        $('.infoContentSection').hide();
        tabSection.show();
        //Scroll to main content
        //if (this.canScrollInPage)$("html,body").animate({ scrollTop: tabSection.offset().top }, 500);
    };
    InfoPage.initPageAfterTabSelector = function () {
        var hashKeys = URLHash.getAllKeys();
        if (hashKeys.length == 1) {
            InfoPage.showContentInHash();
        }
        else {
            if ($('.infoTopSectionItem').length > 0) {
                $('.infoTopSectionItem')[0].click();
            }
        }
    };
    InfoPage.updatePageHash = function (tab, section, skipScrolling) {
        if (skipScrolling === void 0) { skipScrolling = false; }
        var newHash = '';
        if (section) {
            newHash = tab + "-" + section;
        }
        else {
            newHash = tab;
        }
        if (location.hash != "#" + newHash) {
            URLHash.replaceHash(newHash, false);
            $(window).trigger('hashchange', { skipScrolling: skipScrolling });
        }
    };
    InfoPage.showContentInHash = function (skipScrolling) {
        if (skipScrolling === void 0) { skipScrolling = false; }
        var hashKeys = URLHash.getAllKeys();
        if (hashKeys.length == 1) {
            var parts = hashKeys[0].split("-");
            var tabid = parts[0];
            var tab = $('.infoTopSectionItem[data-tabid=' + tabid + ']');
            if (tab.length == 1) {
                InfoPage.showTab(tabid);
            }
            if (parts.length > 1) {
                var sectionId = parts[1];
                var section_1 = $(".infoContentSection[data-tabid=" + tabid + "] [data-sectionid='" + sectionId + "']");
                if (section_1.length > 0) {
                    //section.click();
                    if (isScrolledIntoViewPlain(section_1[0]) == false && skipScrolling == false) {
                        ScrollToElement(section_1, -20);
                        window.setTimeout(function () {
                            InfoPage.showTabSubSection(section_1);
                        }, 800);
                    }
                    else {
                        InfoPage.showTabSubSection(section_1);
                    }
                }
            }
            else {
                var subsection = $('[data-tabid=' + tabid + ']').find('.infoContentSection_SubSection_TabItem[data-sectionid=1]:visible');
                InfoPage.showTabSubSection(subsection);
            }
        }
    };
    InfoPage.registerEventHandlers = function () {
        var me = this;
        $(window).on('hashchange', function (e, args) {
            if (args) {
                InfoPage.showContentInHash(args.skipScrolling || true);
            }
            else {
                InfoPage.showContentInHash(true);
            }
        });
        $('.PreviousTabSection, .NextTabSection').click(function () {
            var tabId = $('.infoTopSectionItem.selected').attr("data-tabid");
            var sectionId = $(this).attr("data-sectionid");
            var tabSelector = $(this).parents('.infoContentSection').find(".infoContentSection_SubSection_TabsCon");
            if (shouldScrollElementIntoView(tabSelector)) {
                $("html,body").animate({ scrollTop: tabSelector.offset().top - 200 }, 300, function () {
                    InfoPage.updatePageHash(tabId, sectionId);
                });
            }
            else {
                InfoPage.updatePageHash(tabId, sectionId);
            }
        });
        $('.infoContentSection_SubSection_TabItem').click(function () {
            var tabItem = $(this);
            var tab = $(this).parents(".infoContentSection");
            InfoPage.updatePageHash(tab.attr("data-tabid"), tabItem.attr("data-sectionid"));
        });
        $('.infoTopSectionItem').click(function () {
            var tabid = $(this).attr("data-tabid");
            var subsection = $('.infoContentSection[data-tabid=' + tabid + ']').find('.infoContentSection_SubSection_TabItem[data-sectionid=1]');
            InfoPage.updatePageHash(tabid, subsection.attr("data-sectionid"), true);
        });
    };
    return InfoPage;
}());
//# sourceMappingURL=InfoPage.js.map;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Centralized class for handling dropdown keyword content and input data
 */
var TypeScript;
(function (TypeScript) {
    var Desktop;
    (function (Desktop) {
        var KeywordsAutoComplete = /** @class */ (function (_super) {
            __extends(KeywordsAutoComplete, _super);
            function KeywordsAutoComplete(keywords, container, parentContainer, placeholderText) {
                var _this = _super.call(this, parentContainer, container, keywords, placeholderText) || this;
                _this.eventsInitiated = false;
                _this.keywordsAppended = false;
                return _this;
            }
            /**
            * Function that will add new keywords to a select2 field selector
            * @param selector
            * @param newKeywords
            */
            KeywordsAutoComplete.prototype.appendKeywords = function (selector, ignoreValues, emptySelectorFirst) {
                if (ignoreValues === void 0) { ignoreValues = ""; }
                if (emptySelectorFirst === void 0) { emptySelectorFirst = false; }
                //Initiate the values to ignore when adding the keywords
                //to prevent adding it more than one time
                if (emptySelectorFirst)
                    selector.empty().trigger('change');
                var ignoreKeywordsDict = new Dictionary();
                ignoreKeywordsDict.AddList(ignoreValues.split(","), ignoreValues.split(","));
                //Remove the option elements that are not selected
                selector.find("option:not(:selected)").remove();
                //Begin appending the keywords to the selector
                if (this.keywords != null) {
                    var keywordsArr = this.keywords.replace(/\"/g, "").split("|");
                    //Data for autocomplete dropdown display
                    var data = new Array();
                    var idx = 0;
                    for (var val in keywordsArr) {
                        idx++;
                        var formatedWord = keywordsArr[val].replace(/[\s]+/g, " ").trim();
                        var newOption = new Option(formatedWord, formatedWord, false, false);
                        //Append keyword to the selector option list
                        if (!ignoreKeywordsDict.ContainsKey(keywordsArr[val]) &&
                            selector.find("option[value=\"" + formatedWord + "\"]").length == 0) {
                            selector.append(newOption); //.trigger('change');
                        }
                        //Append keyword to the autocomplete data
                        data.push({ id: idx, text: formatedWord });
                    }
                    //Sort the data in ascending order by default
                    data.sort(function (a, b) {
                        // Compare the 2 dates
                        if (a.text < b.text)
                            return -1;
                        if (a.text > b.text)
                            return 1;
                        return 0;
                    });
                    // Add new keywords to the result dropdown for AutoComplete display
                    var options = selector.data('select2').options.options;
                    options.data = data;
                    selector.trigger("change");
                }
                this.keywordsAppended = true;
            };
            /**
            * Function that will init the events important to handle the keywords display
            */
            KeywordsAutoComplete.prototype.initKeywordsEvents = function () {
                var me = this;
                this.eventsInitiated = true;
                var pasteEvent = function (parentContainer, container) {
                    Logging.Debug("#txtKeywords is binding cut and paste function...");
                    container.siblings().find('.select2-search__field').on("paste", function (e, ui) {
                        var clipboardData = e['clipboardData'] || window['clipboardData'] || e.originalEvent['clipboardData'];
                        var newTags = clipboardData.getData('text/plain');
                        //Initiate the list of keywords data in order to add the proper ones
                        var currentKeywordsDict = new Dictionary();
                        var currentKeywordsArray = container.select2('data');
                        var currentKeywordsArrayKeys = new Array();
                        for (var x = 0; x < currentKeywordsArray.length; x++) {
                            currentKeywordsArrayKeys.push(currentKeywordsArray[x].text);
                        }
                        currentKeywordsDict.AddList(currentKeywordsArray, currentKeywordsArrayKeys);
                        //Add only unduplicated tags to the list of keywords
                        var tagArr = newTags.split(',');
                        var markedField = false;
                        var keywordTooLong = false;
                        var keywordTooMany = false;
                        var keywordTooLow = false;
                        var addedKeywordsCount = 0;
                        for (var x = 0; x < tagArr.length; x++) {
                            //Shorten the tag text to its limit + 1
                            if (!me.dbKeywordsDict.ContainsKey(tagArr[x])) {
                                tagArr[x] = tagArr[x].replace(/[\s]+/g, " ").trim();
                                tagArr[x] = tagArr[x].trim().substring(0, KeywordsAutoComplete.keywordLengthLimit + 1);
                            }
                            keywordTooMany = currentKeywordsArray.length + addedKeywordsCount >=
                                KeywordsAutoComplete.maxKeywords;
                            keywordTooLong = tagArr[x].length > KeywordsAutoComplete.keywordLengthLimit && !me.dbKeywordsDict.ContainsKey(tagArr[x]);
                            keywordTooLow = tagArr[x].length < KeywordModel.minChrShowAutoComplete;
                            //Adding keyword process
                            if (!currentKeywordsDict.ContainsKey(tagArr[x]) && !keywordTooMany
                                && !keywordTooLow) {
                                currentKeywordsDict.Add(tagArr[x], { text: tagArr[x], id: tagArr[x], selected: true });
                                var option = new Option(tagArr[x], tagArr[x], true, true);
                                container.append(option).trigger('change');
                                addedKeywordsCount++;
                            }
                            //Proccess of error message validation
                            if (!markedField && container.siblings('.select2').find(".validationFailedMessage").length == 0) {
                                if (keywordTooMany) {
                                    FormValidation.markFieldAsInvalid(container, Translation.get("KeywordTooMany"));
                                    container.siblings('.validationFailedMessage:not(:first)').remove();
                                    //Close the result box and keep the content keyword field
                                    me.currentKeywordTyping = container.siblings(".select2").find(".select2-search__field").val();
                                    container.siblings('.select2-container').find(".select2-results").find(".select2-results__message").remove();
                                    container.siblings('.select2-container').find(".select2-results").find(".select2-results__option").remove();
                                    container.siblings(".select2").find(".select2-search__field").val(me.currentKeywordTyping);
                                    markedField = true;
                                    me.disableKeywordValidation = true;
                                }
                                if (keywordTooLong) {
                                    FormValidation.markFieldAsInvalid(container, Translation.get("KeywordTooLong"));
                                    container.siblings('.validationFailedMessage:not(:first)').remove();
                                    //Close the result box and keep the content keyword field
                                    me.currentKeywordTyping = container.siblings(".select2").find(".select2-search__field").val();
                                    container.siblings('.select2-container').find(".select2-results").find(".select2-results__message").remove();
                                    container.siblings('.select2-container').find(".select2-results").find(".select2-results__option").remove();
                                    container.siblings(".select2").find(".select2-search__field").val(me.currentKeywordTyping);
                                    me.disableKeywordValidation = true;
                                    markedField = true;
                                    keywordTooLong = true;
                                }
                            }
                            //Dont add more keywords if a keyword is seen as too long
                            //or too many keywords are typed
                            if (keywordTooLong || keywordTooMany) {
                                $(this).val(''); //Empty the keyword field
                                break;
                            }
                        }
                        e.preventDefault();
                        Logging.Debug("trying to paste via paste event action...");
                        me.disableAddingKeywords = false;
                        return false;
                    });
                };
                //Manage the last keyword typed when the users tries to hit search
                var blurEvent = function (parentContainer, container) {
                    container.siblings('.select2').find('.select2-search__field').blur(function (e) {
                        Logging.Debug("txtkeyword unfocus...");
                        var newOption = new Option($(this).val(), $(this).val(), true, true);
                        //Determine if the keyword is not a duplicate before adding
                        var uniqueOption = !me.isKeywordInList($(this).val(), container.val().toString().split(","));
                        if (uniqueOption && $(this).val().length > 0 &&
                            container.val().length < KeywordsAutoComplete.maxKeywords &&
                            !me.disableAddingKeywords) {
                            container.append(newOption).trigger('change');
                        }
                        else {
                            container.siblings('.select2').find('.select2-search__field').val('');
                        }
                        //Validate the keyword container and prevent double marks displayed
                        FormValidation.validateForm(me.parentSelector);
                        container.siblings('.validationFailedMessage:not(:first)').remove();
                    });
                };
                var keyUpEvent = function (parentContainer, container) {
                    container.siblings('.select2').find('.select2-search__field').keyup(function (e) {
                        Logging.Debug("keycode up: " + e.keyCode);
                        //Dont show the result dropdown when the field length is too low
                        if ($(this).val().trim().length < KeywordModel.minChrShowAutoComplete
                            && container.siblings('.select2-container').find(".select2-results").length > 0) {
                            me.currentKeywordTyping = container.siblings(".select2").find(".select2-search__field").val();
                            container.siblings('.select2-container').find(".select2-results").find(".select2-results__message").remove();
                            container.siblings('.select2-container').find(".select2-results").find(".select2-results__option").remove();
                            container.siblings(".select2").find(".select2-search__field").val(me.currentKeywordTyping);
                            Logging.Debug("keyup- removing result box...");
                        }
                    });
                };
                var keyDownEvent = function (parentContainer, container) {
                    container.siblings('.select2').find('.select2-search__field').keydown(function (e) {
                        Logging.Debug("keycode down: " + e.key);
                        //Validate keyword field if its not a paste action
                        if (!(e.keyCode == 86 && e.ctrlKey == true)) {
                            if (!me.disableKeywordValidation) {
                                FormValidation.validateForm(me.parentSelector);
                                container.siblings('.validationFailedMessage:not(:first)').remove();
                            }
                            //Prevent double marks displayed
                            container.siblings('.validationFailedMessage:not(:first)').remove();
                            Logging.Debug("trying to paste via keydown(not)...");
                        }
                        else {
                            Logging.Debug("trying to paste via keydown...");
                        }
                        me.currentKeywordTyping = "";
                        me.disableKeywordValidation = false;
                        me.disableAddingKeywords = false;
                    });
                };
                //Init keydown and paste event for each selector
                for (var x = 0; x < me.selector.length; x++) {
                    //Event to validate simple keypress and copy paste on keydown
                    keyDownEvent(me.parentSelector, $(me.selector[x]));
                    //Mainly manages the result box showing
                    keyUpEvent(me.parentSelector, $(me.selector[x]));
                    //And add the logic for cut and paste  
                    pasteEvent(me.parentSelector, $(me.selector[x]));
                }
                me.selector.data('select2').on('selection:update', function (params) {
                    Logging.Debug("selection:update");
                    $(this.$element).siblings('.select2').find('.select2-search__field').attr("placeholder", Translation.get("KeywordsPlaceholder"));
                });
                //Event fired after the search input has been updated to re-attach the events listener
                //after they have been lost on the search input field...
                me.selector.on('searchupdatedone', function (params) {
                    ////And add the logic for cut and paste
                    pasteEvent(me.parentSelector, $(this));
                    ////Event to validate simple keypress and copy paste on keydown
                    keyDownEvent(me.parentSelector, $(this));
                    ////Mainly manages the result box showing
                    keyUpEvent(me.parentSelector, $(this));
                });
                //Manage the validation of the keyword field upon change
                me.selector.on('change', function (e) {
                    FormValidation.validateForm(me.parentSelector);
                    $(e.target).siblings('.validationFailedMessage:not(:first)').remove();
                    Logging.Debug("txtkeyword inputfield is being remove...");
                    me.disableAddingKeywords = false;
                    $(e.target).siblings('.select2').find('.select2-search__field').attr("placeholder", Translation.get("KeywordsPlaceholder"));
                });
                me.selector.on('select2:unselecting', function (e) {
                    //Remove the keyword from the option list if its not part of the autocomplete list
                    //and that its being added manually
                    if (!me.dbKeywordsDict.ContainsKey(e["params"].args.data.text)) {
                        $(e.target).find("option[value=\"" + e["params"].args.data.text + "\"]").remove();
                    }
                    //Empty keyword text to prevent it from being added automatically
                    //immediately after the keyword selection
                    $(e.target).siblings('.select2').find('.select2-search__field').val('');
                    me.disableAddingKeywords = true;
                });
                me.selector.on('select2:closing', function (e) {
                    //Manage the last keyword typed when the users tries to hit search
                    blurEvent(me.parentSelector, $(e.target));
                });
                me.selector.on('click', function (e) {
                    $(e.target).siblings(".select2").find(".select2-search__field").click();
                    $(e.target).siblings(".select2").find(".select2-search__field").focus();
                });
                me.selector.on('select2:opening', function (e) {
                    var select2Options = me.selector.select2('data');
                    //Prevent showing the keyword's autocomplete if its not allowed
                    if ($(e.target).siblings('.select2').find('.select2-search__field').val().length <
                        KeywordsAutoComplete.minChrShowAutoComplete &&
                        select2Options.length < KeywordsAutoComplete.maxKeywords) {
                        e.preventDefault();
                    }
                });
                //Prevent Adding bad keywords
                me.selector.on('select2:selecting', function (e) {
                    try {
                        var select2Options = $(e.target).select2('data');
                        var data = e['params']['args']['data'];
                        //Prevent adding duplicated keywords
                        var uniqueOption = !me.isKeywordInList(data.text, $(e.target).val().toString().split(","));
                        if (!uniqueOption) {
                            e.preventDefault();
                            $(e.target).siblings('.select2').find('.select2-search__field').val('');
                        }
                        else { //but is it still allowed to be added?
                            if ((data.text || "") == "" || data.text == "," || select2Options.length == KeywordsAutoComplete.maxKeywords) {
                                e.preventDefault();
                            }
                            else { //Let the keyword be added but 
                                //Empty keyword text to prevent it from being added automatically
                                //immediately after the keyword selection
                                $(e.target).siblings('.select2').find('.select2-search__field').val('');
                            }
                        }
                        me.disableAddingKeywords = true;
                    }
                    catch (e) {
                    }
                });
            };
            return KeywordsAutoComplete;
        }(KeywordModel));
        Desktop.KeywordsAutoComplete = KeywordsAutoComplete;
    })(Desktop = TypeScript.Desktop || (TypeScript.Desktop = {}));
})(TypeScript || (TypeScript = {}));
//# sourceMappingURL=KeywordsAutoComplete.js.map;
var PinInfoBoxHelper = /** @class */ (function () {
    function PinInfoBoxHelper() {
    }
    PinInfoBoxHelper.getPinVerticalSection = function (pinLocation, mapHeight) {
        // Split the height of the map into thirds (TOP, MIDDLE and BOTTOM)
        var mapHeightSectionSize = mapHeight / 3;
        if (pinLocation.y < mapHeightSectionSize) {
            return InfoBoxVerticalLocations.Top;
        }
        else if (pinLocation.y <= mapHeightSectionSize * 2) {
            return InfoBoxVerticalLocations.Middle;
        }
        else {
            return InfoBoxVerticalLocations.Bottom;
        }
    };
    PinInfoBoxHelper.getInfoBoxPositionRelativeToPin = function (pinLocation, mapHeight, mapWidth) {
        var returnValue;
        var IsInTopSection = pinLocation.y < mapHeight / 2;
        //var IsInBottomSection = pinLocation.y < 100;
        var IsInLeftSection = pinLocation.x < mapWidth / 2;
        //var IsInRightSection = pinLocation.x > mapWidth / 2;
        if (IsInTopSection) {
            if (IsInLeftSection) {
                returnValue = InfoBoxRelativePositions.BottomRight;
            }
            else {
                returnValue = InfoBoxRelativePositions.BottomLeft;
            }
        }
        else {
            if (IsInLeftSection) {
                returnValue = InfoBoxRelativePositions.TopRight;
            }
            else {
                returnValue = InfoBoxRelativePositions.TopLeft;
            }
        }
        return returnValue;
    };
    PinInfoBoxHelper.getPinSize = function (pin) {
        var returnValue = { height: 0, width: 0 }; // = new ({ height: 0, width: 0 });
        returnValue.width = pin.clusterIcon_.width_;
        returnValue.height = pin.clusterIcon_.height_;
        return returnValue;
    };
    //static getPinSize(pin: Cluster | google.maps.Marker): { height: number, width: number } {
    //    let returnValue = { height: 0, width: 0 };// = new ({ height: 0, width: 0 });
    //    if (pin instanceof Cluster) {
    //        returnValue.width = pin.clusterIcon_.width_;
    //        returnValue.height = pin.clusterIcon_.height_;
    //    } else if (pin instanceof google.maps.Marker) {
    //        returnValue.height = 16;
    //        returnValue.width = 16;
    //    }
    //    return returnValue;
    //}
    PinInfoBoxHelper.refreshInfoboxHeight = function () {
        var cards = $('#infoboxContents .SmallCardListCardCon');
        if (cards.length == 1) {
            $('#infoboxContentsCon').height(cards[0].clientHeight);
        }
        else if (cards.length > 1) {
            $('#infoboxContentsCon').height(cards[0].clientHeight + cards[1].clientHeight);
        }
    };
    PinInfoBoxHelper.refreshInfoboxPosition = function (map, overlay, pin) {
        var me = this;
        if (pin != null) {
            var infoboxPosition = void 0;
            var infobox = $('#sharedInfobox');
            var triangle = $('#triangle');
            var pinSize = PinInfoBoxHelper.getPinSize(pin);
            var mapHeight = map.getDiv().clientHeight;
            var mapWidth = map.getDiv().clientWidth;
            var triangleWidth = $('#triangle').width();
            var triangleHeight = $('#triangle').height();
            var infoBoxWidth = infobox.width();
            var infoBoxHeight = infobox.height();
            var x = void 0, y = void 0;
            // Pixel location relative to the top left of the map.
            var pinLocation = new google.maps.Point(0, 0); //map.tryLocationToPixel(pin.getLocation(), Microsoft.Maps.PixelReference.control);
            if (pin.constructor.name == "Cluster") {
                pinLocation = overlay.getProjection().fromLatLngToContainerPixel(pin.getCenter());
            }
            else if (pin.markers_) {
                var pinInstance = pin.markers_[0];
                if (pinInstance.getPosition != null) {
                    pinLocation = overlay.getProjection().fromLatLngToContainerPixel(pinInstance.getPosition());
                }
                else {
                    alert("pin doesn't exist? (cluster marker)");
                    return null; //Pin doesn't exist anymore
                }
            }
            else {
                Logging.Debug("Pin doesn't have any markers");
            }
            //}
            //else if (pin instanceof google.maps.Marker) {
            //    if (pin.getPosition != null) {
            //        pinLocation = overlay.getProjection().fromLatLngToContainerPixel(pin.getPosition());
            //        pinLocation.y = pinLocation.y - (pinSize.height / 2); //Don't know why, but if I don't do this the infobox location is off. 
            //    } else {
            //        alert("pin doesn't exist? (google marker)");
            //        return null;//Pin doesn't exist anymore
            //    }
            //}
            var verticalSection = PinInfoBoxHelper.getPinVerticalSection(pinLocation, mapHeight);
            var infoBoxRelativeLocation = PinInfoBoxHelper.getInfoBoxPositionRelativeToPin(pinLocation, mapHeight, mapWidth);
            Logging.Debug("Vertical Location: " + InfoBoxVerticalLocations[verticalSection], LogType.MapPin);
            Logging.Debug("Relative Location: " + InfoBoxRelativePositions[infoBoxRelativeLocation], LogType.MapPin);
            //Logging.Debug("Pin location: " + pinLocation.x + ', ' + pinLocation.y, LogType.MapPin);
            var skipTop = pinLocation.y - infoBoxHeight < 0;
            var skipBottom = pinLocation.y + infoBoxHeight + (pinSize.height / 2) > mapHeight;
            if (verticalSection == InfoBoxVerticalLocations.Bottom && skipTop == false) {
                if (infoBoxRelativeLocation == InfoBoxRelativePositions.TopLeft) {
                    y = pinLocation.y - infoBoxHeight - 22 - (pinSize.height / 4);
                    x = pinLocation.x - infoBoxWidth + (triangleWidth / 2);
                    triangle.css({
                        top: (infoBoxHeight - 17) + 'px', left: "292px"
                    });
                    infoboxPosition = new google.maps.Point(x, y);
                }
                else if (infoBoxRelativeLocation == InfoBoxRelativePositions.TopRight) {
                    y = pinLocation.y - infoBoxHeight - 22 - (pinSize.height / 4);
                    x = pinLocation.x - (triangleWidth / 2) - 4;
                    triangle.css({ top: (infoBoxHeight - 17) + 'px', left: "4px" });
                    infoboxPosition = new google.maps.Point(x, y);
                }
            }
            else if (verticalSection == InfoBoxVerticalLocations.Middle || skipBottom) {
                if (infoBoxRelativeLocation == InfoBoxRelativePositions.Left || infoBoxRelativeLocation == InfoBoxRelativePositions.TopLeft || infoBoxRelativeLocation == InfoBoxRelativePositions.BottomLeft) {
                    y = pinLocation.y - infoBoxHeight / 2 - 30;
                    x = pinLocation.x - infoBoxWidth - 20 - (pinSize.height / 4);
                    triangle.css({ top: ((infoBoxHeight / 2) + 15) + 'px', left: '305px' });
                    infoboxPosition = new google.maps.Point(x, y);
                }
                else if (infoBoxRelativeLocation == InfoBoxRelativePositions.Right || infoBoxRelativeLocation == InfoBoxRelativePositions.TopRight || infoBoxRelativeLocation == InfoBoxRelativePositions.BottomRight) {
                    y = pinLocation.y - (infoBoxHeight / 2) - 15 - (triangleHeight / 2);
                    x = pinLocation.x + 20 + (pinSize.height / 4);
                    triangle.css({ top: ((infoBoxHeight / 2) + 15) + 'px', left: '-10px' });
                    infoboxPosition = new google.maps.Point(x, y);
                }
            }
            else if (verticalSection == InfoBoxVerticalLocations.Top) {
                if (infoBoxRelativeLocation == InfoBoxRelativePositions.BottomLeft) {
                    y = pinLocation.y + 20 + 3 + (pinSize.height / 4);
                    x = pinLocation.x - infoBoxWidth + 20 - 2;
                    //triangle.css({ top: "-11px", left: "292px" });
                    triangle.css({ top: "-11px", left: (infoBoxWidth - triangleWidth - 4).toString() + "px" });
                    infoboxPosition = new google.maps.Point(x, y);
                }
                else if (infoBoxRelativeLocation == InfoBoxRelativePositions.BottomRight) {
                    y = pinLocation.y + (triangleHeight / 2) + (pinSize.height / 2);
                    x = pinLocation.x - (triangleWidth / 2) - 5;
                    triangle.css({ top: "-11px", left: "4px" });
                    infoboxPosition = new google.maps.Point(x, y);
                }
            }
            if (Math.max(infoboxPosition.y, 0) == 0) {
                Logging.Debug("Infobox passed top, adjusting", LogType.MapPin);
                triangle.css({
                    top: (parseInt(triangle.css('top'), 10) + (infoboxPosition.y) + 5) + "px"
                });
                infoboxPosition.y = Math.max(infoboxPosition.y, 5);
            }
            else if (Math.min(infoboxPosition.y, mapHeight - infoBoxHeight) == (mapHeight - infoBoxHeight)) {
                Logging.Debug("Infobox passed bottom, adjusting", LogType.MapPin);
                var difference = infoboxPosition.y - (mapHeight - infoBoxHeight);
                triangle.css({
                    top: (parseInt(triangle.css('top'), 10) + difference - 5) + "px"
                });
                infoboxPosition.y = Math.min(infoboxPosition.y, mapHeight - infoBoxHeight - 5);
            }
            Logging.Debug("Infobox location: top = " + infoboxPosition.y + " left = " + infoboxPosition.x, LogType.MapPin);
            $('#sharedInfobox').css({ 'top': infoboxPosition.y, 'left': infoboxPosition.x });
        }
    };
    PinInfoBoxHelper.enable = function () { PinInfoBoxHelper.enabled = true; };
    PinInfoBoxHelper.disable = function () {
        clearTimeout(PinInfoBoxHelper.infoboxShowTimeout);
        PinInfoBoxHelper.enabled = false;
    };
    PinInfoBoxHelper.clearHideTimer = function () {
        clearTimeout(PinInfoBoxHelper.infoboxCloseTimeout);
    };
    PinInfoBoxHelper.hideInfoBox_Timed = function () {
        clearTimeout(PinInfoBoxHelper.infoboxShowTimeout);
        PinInfoBoxHelper.infoboxCloseTimeout = setTimeout(function () {
            Logging.Debug("Hiding info box (via hideInfoBox_Timed)", LogType.MapPin);
            $('#sharedInfobox').hide();
        }, 400);
    };
    PinInfoBoxHelper.hideInfoBox = function () {
        Logging.Debug("Hiding info box (via hideInfoBox)", LogType.MapPin);
        $('#sharedInfobox').hide();
        $('#sharedInfobox select').select2("close");
    };
    PinInfoBoxHelper.showInfoBox_Timed = function (pin, map, overlay, pinCriteria, postCall) {
        clearTimeout(PinInfoBoxHelper.infoboxCloseTimeout);
        if (PinInfoBoxHelper.enabled) {
            PinInfoBoxHelper.infoboxShowTimeout = setTimeout(function () {
                PinInfoBoxHelper.showInfoBox(pin, map, overlay, pinCriteria, postCall);
            }, 400);
        }
    };
    PinInfoBoxHelper.showInfoBox = function (pin, map, overlay, pinCriteria, postCall) {
        if (PinInfoBoxHelper.enabled) {
            if (PinInfoBoxHelper.lastPushPin != pin) {
                $('#sharedInfobox').toggleClass("show", false);
            }
            // If the infobox was marked to be closed, cancel that timer.
            clearTimeout(PinInfoBoxHelper.infoboxCloseTimeout);
            //See if we have the same pin, and just show it to reduce flickering associated with un-neccesary reloading
            pinCriteria.RecordsPerPage = PinInfoBoxHelper.RecordPerPage.toString();
            if (PinInfoBoxHelper.lastPushPin != null && PinInfoBoxHelper.lastPushPin == pin && PinInfoBoxHelper.lastCriteria != null && ObjectCompare.areEqual(pinCriteria, PinInfoBoxHelper.lastCriteria) && (pinCriteria.CurrentPage || 1) == 1) {
                Logging.Debug("Showing last pin", LogType.MapPin);
                $('#sharedInfobox').show();
                if (postCall != null) {
                    postCall();
                }
            }
            else {
                $('#infoboxHeader').toggle((pin.count || 1) > 2);
                if (pin.count)
                    $('#infoboxResultCount').html(Number(pin.count).toLocaleString(ApplicationState.LanguageAttribute));
                else
                    $('#infoboxResultCount').html('');
                if (PinInfoBoxHelper.lastPushPin != pin) {
                    PinInfoBoxHelper.refreshInfoboxPosition(map, overlay, pin);
                }
                var criteriaArgs = new SmallListingCardListArgs();
                criteriaArgs.criteria = pinCriteria;
                criteriaArgs.criteria.Currency = ApplicationState.CurrencyValue || "CAD";
                var fetchArgs = new ControlFetcherArgs("", "infoboxContents");
                fetchArgs.contentWapperClass = '';
                fetchArgs.showLoadingAnimation = false;
                fetchArgs.refreshIconAnimInOutPref =
                    { animInFavClass: "listingCardHeaderFavourited", animOutFavClass: "listingCardHeaderUnFavourited" };
                fetchArgs.postCallHandler = function (response) {
                    $('#infoboxFooter').toggle(Number(pin.count) > PinInfoBoxHelper.RecordPerPage);
                    var startNum = (PinInfoBoxHelper.RecordPerPage * (Number(pinCriteria.CurrentPage || 1) - 1)) + 1;
                    var endNum = PinInfoBoxHelper.RecordPerPage * Number(pinCriteria.CurrentPage || 1);
                    $('#pinResultsStart').text(startNum);
                    $('#pinResultsEnd').text(endNum);
                    $('#pinResultsTotal').text(Number(pin.count));
                    $('#infoboxContentsCon').scrollTop(0);
                    $('#sharedInfobox').show();
                    if (PinInfoBoxHelper.lastPushPin != pin) {
                        PinInfoBoxHelper.refreshInfoboxHeight();
                        PinInfoBoxHelper.refreshInfoboxPosition(map, overlay, pin);
                    }
                    if (postCall != null) {
                        postCall();
                    }
                    if (ApplicationConfig.EnableDesktopMapListingDetailsLinksOpenInNewTab) {
                        Utilities.Desktop.addBlankTargetToListingLinks($('#infoboxContents'));
                    }
                    $('#sharedInfobox').toggleClass("show", true);
                    PinInfoBoxHelper.lastPushPin = pin;
                    PinInfoBoxHelper.lastCriteria = pinCriteria;
                };
                ControlFetcher.fetchSmallListingCardList(fetchArgs, criteriaArgs);
            }
        }
    };
    PinInfoBoxHelper.RecordPerPage = 10;
    PinInfoBoxHelper.enabled = true;
    return PinInfoBoxHelper;
}());
//# sourceMappingURL=PinInfoBoxHelper.js.map;
var Utilities;
(function (Utilities) {
    var Desktop;
    (function (Desktop) {
        /**
         * Show a browser unsupported message for IE <= 11
         */
        function checkIEWarning() {
            if ((navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0) && LocalStorage.IENotSupportedSeen.get("") == "") {
                showMessage(Translation.get("IENotSupportedWarning"), MessageType.Normal, DisplayType.Tempbox, function () { LocalStorage.IENotSupportedSeen.save("1"); });
            }
        }
        Desktop.checkIEWarning = checkIEWarning;
        /**
         * Adds taget=_blank to anchor tags with the listingDetailsLink class that don't currently have taget attribute.
         * @param container
         */
        function addBlankTargetToListingLinks(container) {
            container.find('a.listingDetailsLink:not([target])').attr("target", "_blank");
        }
        Desktop.addBlankTargetToListingLinks = addBlankTargetToListingLinks;
    })(Desktop = Utilities.Desktop || (Utilities.Desktop = {}));
})(Utilities || (Utilities = {}));
//# sourceMappingURL=Utilities.js.map;

var RoutingDictionary = new Object();
/*359 Records - 2022-10-16 2:17:49 PM */RoutingDictionary["office-details"] = new RoutingRecord("office-details","office%2F%7Bofficetype%7D%2F%7Borganizationid%7D%2F%7Bofficename%7D","bureau%2F%7Bofficetype%7D%2F%7Borganizationid%7D%2F%7Bofficename%7D","","",{});RoutingDictionary["realtor-details-noname"] = new RoutingRecord("realtor-details-noname","agent%2F%7Bindividualid%7D","courtier-immobilier%2F%7Bindividualid%7D","","",{});RoutingDictionary["realtor-details"] = new RoutingRecord("realtor-details","agent%2F%7Bindividualid%7D%2F%7Bnamestring%7D","courtier-immobilier%2F%7Bindividualid%7D%2F%7Bnamestring%7D","","",{});RoutingDictionary["listing-details-old"] = new RoutingRecord("listing-details-old","listing%2F%7Bbuildingtype%7D%2F%7Blistingid%7D%2F%7Baddress%7D","inscription%2F%7Bbuildingtype%7D%2F%7Blistingid%7D%2F%7Baddress%7D","","",{'AppMode':'1'});RoutingDictionary["listing-details"] = new RoutingRecord("listing-details","real-estate%2F%7Blistingid%7D%2F%7Baddress%7D","immobilier%2F%7Blistingid%7D%2F%7Baddress%7D","","",{'AppMode':'1'});RoutingDictionary["blog-basic-url"] = new RoutingRecord("blog-basic-url","blog%2F","blogue%2F","","",{'catid':'0','page':'1'});RoutingDictionary["blog-searchresult-default-term"] = new RoutingRecord("blog-searchresult-default-term","blog%2Fsearchpage%2Fpage%2F1","blogue%2Frecherche%2Fpage%2F1","","",{});RoutingDictionary["blog-author"] = new RoutingRecord("blog-author","blog%2Fauthors%2F%7Bauthorid%7D%2F%7Bauthorname%7D%2Fpage%2F%7Bpage%7D","blogue%2Fauteurs%2F%7Bauthorid%7D%2F%7Bauthorname%7D%2Fpage%2F%7Bpage%7D","","",{'page':'1'});RoutingDictionary[""] = new RoutingRecord("","en","fr","","",{});RoutingDictionary["realtor-search-results"] = new RoutingRecord("realtor-search-results","realtor-search-results","resultats-de-recherche-pour-realtor","","",{});RoutingDictionary["office-search-results"] = new RoutingRecord("office-search-results","office-search-results","resultats-de-recherche-pour-dagence","","",{});RoutingDictionary["calculator"] = new RoutingRecord("calculator","calculator","calculatrice","","",{});RoutingDictionary["calculator/mortgage-calculator"] = new RoutingRecord("calculator/mortgage-calculator","calculator%2Fmortgage-calculator","calculatrice%2Fcalculatrice-hypothecaire","%2Fcalculator%23v%3Dpayment","%2Fcalculatrice%23v%3Dpayment",{});RoutingDictionary["calculator/land-transfer-tax"] = new RoutingRecord("calculator/land-transfer-tax","calculator%2Fland-transfer-tax","calculatrice%2Fdroits-de-mutation","%2Fcalculator%23v%3Dlandtransfertax","%2Fcalculatrice%23v%3Dlandtransfertax",{});RoutingDictionary["calculator/affordability"] = new RoutingRecord("calculator/affordability","calculator%2Faffordability","calculatrice%2Fabordabilite","%2Fcalculator%23v%3Daffordability","%2Fcalculatrice%23v%3Daffordability",{});RoutingDictionary["sign-in"] = new RoutingRecord("sign-in","signin","connexion","","",{});RoutingDictionary["sign-out"] = new RoutingRecord("sign-out","signout","deconnexion","","",{});RoutingDictionary["sign-up-for-daily-notifications"] = new RoutingRecord("sign-up-for-daily-notifications","sign-up-for-daily-notifications","sabonner-aux-notifications-quotidiennes","","",{});RoutingDictionary["my-daily-notifications"] = new RoutingRecord("my-daily-notifications","my-daily-notifications","mes-notifications-quotidiennes","","",{});RoutingDictionary["my-account"] = new RoutingRecord("my-account","my-account","mon-compte","","",{});RoutingDictionary["my-account/account-information"] = new RoutingRecord("my-account/account-information","my-account%2Faccount-information","mon-compte%2Frenseignements-sur-le-compte","%2Fmy-account%23section%3Daccountinformation","%2Fmon-compte%23section%3Daccountinformation",{});RoutingDictionary["my-account/communication"] = new RoutingRecord("my-account/communication","my-account%2Fcommunication","mon-compte%2Fcommunications","%2Fmy-account%23section%3Dcommunications","%2Fmon-compte%23section%3Dcommunications",{});RoutingDictionary["my-settings/search-criteria"] = new RoutingRecord("my-settings/search-criteria","my-settings%2Fsearch-criteria","mes-parametres%2Fcriteres-de-recherche","%2Fmy-account%23section%3Dsearchcriteria","%2Fmon-compte%23section%3Dsearchcriteria",{});RoutingDictionary["my-settings/results-view"] = new RoutingRecord("my-settings/results-view","my-settings%2Fresults-view","mes-parametres%2Faffichage-des-resultats","%2Fmy-account%23section%3Dresultsview","%2Fmon-compte%23section%3Dresultsview",{});RoutingDictionary["my-notification-preferences/preferences"] = new RoutingRecord("my-notification-preferences/preferences","my-notification-preferences%2Fpreferences","parametres-de-mes-notifications%2Fpreferences","%2Fmy-account%23section%3Dnotifications","%2Fmon-compte%23section%3Dnotifications",{});RoutingDictionary["commercial-glossary"] = new RoutingRecord("commercial-glossary","commercial-resources%2Fglossary-of-terms","ressources-commerciales%2Fglossaire","","",{});RoutingDictionary["commercial-services"] = new RoutingRecord("commercial-services","commercial-resources%2Fcommercial-realtor-services","ressources-commerciales%2Fservices-dimmobiliers-commercial","","",{});RoutingDictionary["commercial-resources"] = new RoutingRecord("commercial-resources","commercial-resources","ressources-commerciales","","",{});RoutingDictionary["commercial-resources-leasers"] = new RoutingRecord("commercial-resources-leasers","commercial-resources%2Fleasers","ressources-commerciales%2Fleasers","%2Fcommercial-resources%234","%2Fressources-commerciales%234",{});RoutingDictionary["commercial-resources-leasers-business"] = new RoutingRecord("commercial-resources-leasers-business","commercial-resources%2Fleasers%2Fbusiness","ressources-commerciales%2Fleasers%2Fentreprise","%2Fcommercial-resources%234-0","%2Fressources-commerciales%234-1",{});RoutingDictionary["commercial-resources-leasers-hospitality"] = new RoutingRecord("commercial-resources-leasers-hospitality","commercial-resources%2Fleasers%2Fhospitality","ressources-commerciales%2Fleasers%2Fhospitalite","%2Fcommercial-resources%234-2","%2Fressources-commerciales%234-2",{});RoutingDictionary["commercial-resources-leasers-institutional"] = new RoutingRecord("commercial-resources-leasers-institutional","commercial-resources%2Fleasers%2Finstitutional","ressources-commerciales%2Fleasers%2Finstitutionnel","%2Fcommercial-resources%234-3","%2Fressources-commerciales%234-3",{});RoutingDictionary["commercial-resources-leasers-land"] = new RoutingRecord("commercial-resources-leasers-land","commercial-resources%2Fleasers%2Fland","ressources-commerciales%2Fleasers%2Fterrain","%2Fcommercial-resources%234-4","%2Fressources-commerciales%234-4",{});RoutingDictionary["commercial-resources-leasers-retail"] = new RoutingRecord("commercial-resources-leasers-retail","commercial-resources%2Fleasers%2Fretail","ressources-commerciales%2Fleasers%2Fdetail","%2Fcommercial-resources%234-5","%2Fressources-commerciales%234-5",{});RoutingDictionary["commercial-resources-leasers-agricultural"] = new RoutingRecord("commercial-resources-leasers-agricultural","commercial-resources%2Fleasers%2Fagricultural","ressources-commerciales%2Fleasers%2Fagricole","%2Fcommercial-resources%234-6","%2Fressources-commerciales%234-6",{});RoutingDictionary["commercial-resources-leasers-industrial"] = new RoutingRecord("commercial-resources-leasers-industrial","commercial-resources%2Fleasers%2Findustrial","ressources-commerciales%2Fleasers%2Findustriel","%2Fcommercial-resources%234-7","%2Fressources-commerciales%234-7",{});RoutingDictionary["commercial-resources-leasers-office"] = new RoutingRecord("commercial-resources-leasers-office","commercial-resources%2Fleasers%2Foffice","ressources-commerciales%2Fleasers%2Fagence","%2Fcommercial-resources%234-8","%2Fressources-commerciales%234-8",{});RoutingDictionary["commercial-resources-get-started"] = new RoutingRecord("commercial-resources-get-started","commercial-resources%2Fget-started","ressources-commerciales%2Fcommencer","%2Fcommercial-resources%231","%2Fressources-commerciales%231",{});RoutingDictionary["commercial-resources-buyers"] = new RoutingRecord("commercial-resources-buyers","commercial-resources%2Fbuyers","ressources-commerciales%2Facheteurs","%2Fcommercial-resources%232","%2Fressources-commerciales%232",{});RoutingDictionary["commercial-resources-buyers-business"] = new RoutingRecord("commercial-resources-buyers-business","commercial-resources%2Fbuyers%2Fbusiness","ressources-commerciales%2Facheteurs%2Fentreprise","%2Fcommercial-resources%232-1","%2Fressources-commerciales%232-1",{});RoutingDictionary["commercial-resources-buyers-hospitality"] = new RoutingRecord("commercial-resources-buyers-hospitality","commercial-resources%2Fbuyers%2Fhospitality","ressources-commerciales%2Facheteurs%2Fhospitalite","%2Fcommercial-resources%232-2","%2Fressources-commerciales%232-2",{});RoutingDictionary["commercial-resources-buyers-institutional"] = new RoutingRecord("commercial-resources-buyers-institutional","commercial-resources%2Fbuyers%2Finstitutional","ressources-commerciales%2Facheteurs%2Finstitutionnel","%2Fcommercial-resources%232-3","%2Fressources-commerciales%232-3",{});RoutingDictionary["commercial-resources-buyers-land"] = new RoutingRecord("commercial-resources-buyers-land","commercial-resources%2Fbuyers%2Fland","ressources-commerciales%2Facheteurs%2Fterrain","%2Fcommercial-resources%232-4","%2Fressources-commerciales%232-4",{});RoutingDictionary["commercial-resources-buyers-multi"] = new RoutingRecord("commercial-resources-buyers-multi","commercial-resources%2Fbuyers%2Fmulti-family","ressources-commerciales%2Facheteurs%2Fmultifamilial","%2Fcommercial-resources%232-5","%2Fressources-commerciales%232-5",{});RoutingDictionary["commercial-resources-buyers-retail"] = new RoutingRecord("commercial-resources-buyers-retail","commercial-resources%2Fbuyers%2Fretail","ressources-commerciales%2Facheteurs%2Fdetail","%2Fcommercial-resources%232-6","%2Fressources-commerciales%232-6",{});RoutingDictionary["commercial-resources-buyers-agricultural"] = new RoutingRecord("commercial-resources-buyers-agricultural","commercial-resources%2Fbuyers%2Fagriculture","ressources-commerciales%2Facheteurs%2Fagricole","%2Fcommercial-resources%232-7","%2Fressources-commerciales%232-7",{});RoutingDictionary["commercial-resources-buyers-industrial"] = new RoutingRecord("commercial-resources-buyers-industrial","commercial-resources%2Fbuyers%2Findustrial","ressources-commerciales%2Facheteurs%2Findustriel","%2Fcommercial-resources%232-8","%2Fressources-commerciales%232-8",{});RoutingDictionary["commercial-resources-buyers-office"] = new RoutingRecord("commercial-resources-buyers-office","commercial-resources%2Fbuyers%2Foffice","ressources-commerciales%2Facheteurs%2Fagence","%2Fcommercial-resources%232-9","%2Fressources-commerciales%232-9",{});RoutingDictionary["commercial-resources-sellers"] = new RoutingRecord("commercial-resources-sellers","commercial-resources%2Fsellers","ressources-commerciales%2Fproprios","%2Fcommercial-resources%233","%2Fressources-commerciales%233",{});RoutingDictionary["commercial-resources-sellers-business"] = new RoutingRecord("commercial-resources-sellers-business","commercial-resources%2Fsellers%2Fbusiness","ressources-commerciales%2Fproprios%2Fentreprise","%2Fcommercial-resources%233-1","%2Fressources-commerciales%233-1",{});RoutingDictionary["commercial-resources-sellers-hospitality"] = new RoutingRecord("commercial-resources-sellers-hospitality","commercial-resources%2Fsellers%2Fhospitality","ressources-commerciales%2Fproprios%2Fhospitalite","%2Fcommercial-resources%233-2","%2Fressources-commerciales%233-2",{});RoutingDictionary["commercial-resources-sellers-institutional"] = new RoutingRecord("commercial-resources-sellers-institutional","commercial-resources%2Fsellers%2Finstitutional","ressources-commerciales%2Fproprios%2Finstitutionnel","%2Fcommercial-resources%233-3","%2Fressources-commerciales%233-3",{});RoutingDictionary["commercial-resources-sellers-land"] = new RoutingRecord("commercial-resources-sellers-land","commercial-resources%2Fsellers%2Fland","ressources-commerciales%2Fproprios%2Fterrain","%2Fcommercial-resources%233-4","%2Fressources-commerciales%233-4",{});RoutingDictionary["commercial-resources-sellers-multi"] = new RoutingRecord("commercial-resources-sellers-multi","commercial-resources%2Fsellers%2Fmulti-family","ressources-commerciales%2Fproprios%2Fmultifamilial","%2Fcommercial-resources%233-5","%2Fressources-commerciales%233-5",{});RoutingDictionary["commercial-resources-sellers-retail"] = new RoutingRecord("commercial-resources-sellers-retail","commercial-resources%2Fsellers%2Fretail","ressources-commerciales%2Fproprios%2Fdetail","%2Fcommercial-resources%233-6","%2Fressources-commerciales%233-6",{});RoutingDictionary["commercial-resources-sellers-agricultural"] = new RoutingRecord("commercial-resources-sellers-agricultural","commercial-resources%2Fsellers%2Fagricultural","ressources-commerciales%2Fproprios%2Fagricole","%2Fcommercial-resources%233-7","%2Fressources-commerciales%233-7",{});RoutingDictionary["commercial-resources-sellers-industrial"] = new RoutingRecord("commercial-resources-sellers-industrial","commercial-resources%2Fsellers%2Findustrial","ressources-commerciales%2Fproprios%2Findustriel","%2Fcommercial-resources%233-8","%2Fressources-commerciales%233-8",{});RoutingDictionary["commercial-resources-sellers-office"] = new RoutingRecord("commercial-resources-sellers-office","commercial-resources%2Fsellers%2Foffice","ressources-commerciales%2Fproprios%2Fagence","%2Fcommercial-resources%233-9","%2Fressources-commerciales%233-9",{});RoutingDictionary["tips-for-sellers"] = new RoutingRecord("tips-for-sellers","tips-for-sellers","conseils-aux-vendeurs","","",{});RoutingDictionary["tips-for-sellers/prepare-to-sell"] = new RoutingRecord("tips-for-sellers/prepare-to-sell","tips-for-sellers%2Fprepare-to-sell","conseils-aux-vendeurs%2Fprepare-la-vendre","%2Ftips-for-sellers%231","%2Fconseils-aux-vendeurs%231",{});RoutingDictionary["tips-for-sellers/prepare-to-sell/decide-when-to-sell"] = new RoutingRecord("tips-for-sellers/prepare-to-sell/decide-when-to-sell","tips-for-sellers%2Fprepare-to-sell%2Fdecide-when-to-sell","conseils-aux-vendeurs%2Fprepare-la-vendre%2Fdecider-du-moment-de-vendre","%2Ftips-for-sellers%231-1","%2Fconseils-aux-vendeurs%231-1",{});RoutingDictionary["tips-for-sellers/prepare-to-sell/managing-your-money"] = new RoutingRecord("tips-for-sellers/prepare-to-sell/managing-your-money","tips-for-sellers%2Fprepare-to-sell%2Fmanaging-your-money","conseils-aux-vendeurs%2Fprepare-la-vendre%2Fg%C3%A9rer-votre-argent","%2Ftips-for-sellers%231-2","%2Fconseils-aux-vendeurs%231-2",{});RoutingDictionary["tips-for-sellers/prepare-to-sell/meet-a-realtor-who-is-right-for-you"] = new RoutingRecord("tips-for-sellers/prepare-to-sell/meet-a-realtor-who-is-right-for-you","tips-for-sellers%2Fprepare-to-sell%2Fmeet-a-realtor-who-is-right-for-you","conseils-aux-vendeurs%2Fprepare-la-vendre%2Ftrouver-le-coutier-ou-lagent-immobilier-qui-vous-convient","%2Ftips-for-sellers%231-3","%2Fconseils-aux-vendeurs%231-3",{});RoutingDictionary["tips-for-sellers/listing-your-home"] = new RoutingRecord("tips-for-sellers/listing-your-home","tips-for-sellers%2Flisting-your-home","conseils-aux-vendeurs%2Finscrire-votre-maison","%2Ftips-for-sellers%232","%2Fconseils-aux-vendeurs%232",{});RoutingDictionary["tips-for-sellers/listing-your-home/determine-your-homes-asking-price"] = new RoutingRecord("tips-for-sellers/listing-your-home/determine-your-homes-asking-price","tips-for-sellers%2Flisting-your-home%2Fdetermine-your-homes-asking-price","conseils-aux-vendeurs%2Finscrire-votre-maison%2Fetablir-le-prix-de-vente-de-votre-maison","%2Ftips-for-sellers%232-1","%2Fconseils-aux-vendeurs%232-1",{});RoutingDictionary["tips-for-sellers/listing-your-home/sign-a-listing-agreement"] = new RoutingRecord("tips-for-sellers/listing-your-home/sign-a-listing-agreement","tips-for-sellers%2Flisting-your-home%2Fsign-a-listing-agreement","conseils-aux-vendeurs%2Finscrire-votre-maison%2Fsignier-le-contrat-de-courtage","%2Ftips-for-sellers%232-2","%2Fconseils-aux-vendeurs%232-2",{});RoutingDictionary["tips-for-sellers/marketing-your-home"] = new RoutingRecord("tips-for-sellers/marketing-your-home","tips-for-sellers%2Fmarketing-your-home","conseils-aux-vendeurs%2Fcommercialiser-votre-maison","%2Ftips-for-sellers%233","%2Fconseils-aux-vendeurs%233",{});RoutingDictionary["tips-for-sellers/the-offer"] = new RoutingRecord("tips-for-sellers/the-offer","tips-for-sellers%2Fthe-offer","conseils-aux-vendeurs%2Floffer","%2Ftips-for-sellers%234","%2Fconseils-aux-vendeurs%234",{});RoutingDictionary["tips-for-sellers/the-offer/add-a-lawyer-to-your-team"] = new RoutingRecord("tips-for-sellers/the-offer/add-a-lawyer-to-your-team","tips-for-sellers%2Fthe-offer%2Fadd-a-lawyer-to-your-team","conseils-aux-vendeurs%2Floffre%2Fajouter-un-notaire-ou-un-avocat-a-lequation","%2Ftips-for-sellers%234-1","%2Fconseils-aux-vendeurs%234-1",{});RoutingDictionary["tips-for-sellers/the-offer/receive-an-offer"] = new RoutingRecord("tips-for-sellers/the-offer/receive-an-offer","tips-for-sellers%2Fthe-offer%2Freceive-an-offer","conseils-aux-vendeurs%2Floffre%2Frecevoir-une-offre","%2Ftips-for-sellers%234-2","%2Fconseils-aux-vendeurs%234-2",{});RoutingDictionary["tips-for-sellers/the-offer/close-the-sale"] = new RoutingRecord("tips-for-sellers/the-offer/close-the-sale","tips-for-sellers%2Fthe-offer%2Fclose-the-sale","conseils-aux-vendeurs%2Floffre%2Fconclure-la-vente","%2Ftips-for-sellers%234-3","%2Fconseils-aux-vendeurs%234-3",{});RoutingDictionary["tips-for-buyers"] = new RoutingRecord("tips-for-buyers","tips-for-buyers","conseils-aux-acheteurs","","",{});RoutingDictionary["tips-for-buyers/prepare-to-buy"] = new RoutingRecord("tips-for-buyers/prepare-to-buy","tips-for-buyers%2Fprepare-to-buy","conseils-aux-acheteurs%2Fse-prepare-a-acheter","%2Ftips-for-buyers%231","%2Fconseils-aux-acheteurs%231",{});RoutingDictionary["tips-for-buyers/prepare-to-buy/make-sure-youre-ready-to-buy"] = new RoutingRecord("tips-for-buyers/prepare-to-buy/make-sure-youre-ready-to-buy","tips-for-buyers%2Fprepare-to-buy%2Fmake-sure-youre-ready-to-buy","conseils-aux-acheteurs%2Fse-prepare-a-acheter%2Fassurez-vous-detre-pret-a-acheter","%2Ftips-for-buyers%231-1","%2Fconseils-aux-acheteurs%231-1",{});RoutingDictionary["tips-for-buyers/prepare-to-buy/decide-what-you-want-to-buy"] = new RoutingRecord("tips-for-buyers/prepare-to-buy/decide-what-you-want-to-buy","tips-for-buyers%2Fprepare-to-buy%2Fdecide-what-you-want-to-buy","conseils-aux-acheteurs%2Fse-prepare-a-acheter%2Fle-choix-de-la-propriete","%2Ftips-for-buyers%231-2","%2Fconseils-aux-acheteurs%231-2",{});RoutingDictionary["tips-for-buyers/prepare-to-buy/sell-your-current-home"] = new RoutingRecord("tips-for-buyers/prepare-to-buy/sell-your-current-home","tips-for-buyers%2Fprepare-to-buy%2Fsell-your-current-home","conseils-aux-acheteurs%2Fse-prepare-a-acheter%2Fvendre-votre-maison-actuelle","%2Ftips-for-buyers%231-3","%2Fconseils-aux-acheteurs%231-3",{});RoutingDictionary["tips-for-buyers/planning-your-finances"] = new RoutingRecord("tips-for-buyers/planning-your-finances","tips-for-buyers%2Fplanning-your-finances","conseils-aux-acheteurs%2Fla-planification-financiere","%2Ftips-for-buyers%232","%2Fconseils-aux-acheteurs%232",{});RoutingDictionary["tips-for-buyers/planning-your-finances/figure-out-how-much-you-can-afford"] = new RoutingRecord("tips-for-buyers/planning-your-finances/figure-out-how-much-you-can-afford","tips-for-buyers%2Fplanning-your-finances%2Ffigure-out-how-much-you-can-afford","conseils-aux-acheteurs%2Fla-planification-financiere%2Fle-calcul-du-montant-que-vous-pourrez-emprunter","%2Ftips-for-buyers%232-1","%2Fconseils-aux-acheteurs%232-1",{});RoutingDictionary["tips-for-buyers/planning-your-finances/arrange-a-mortgage"] = new RoutingRecord("tips-for-buyers/planning-your-finances/arrange-a-mortgage","tips-for-buyers%2Fplanning-your-finances%2Farrange-a-mortgage","conseils-aux-acheteurs%2Fla-planification-financiere%2Fcontracter-un-pret-hypothecaire","%2Ftips-for-buyers%232-2","%2Fconseils-aux-acheteurs%232-2",{});RoutingDictionary["tips-for-buyers/viewing-homes"] = new RoutingRecord("tips-for-buyers/viewing-homes","tips-for-buyers%2Fviewing-homes","conseils-aux-acheteurs%2Fvisionner-les-maisons","%2Ftips-for-buyers%233","%2Fconseils-aux-acheteurs%233",{});RoutingDictionary["tips-for-buyers/viewing-homes/find-a-realtor-who-is-right-for-you"] = new RoutingRecord("tips-for-buyers/viewing-homes/find-a-realtor-who-is-right-for-you","tips-for-buyers%2Fviewing-homes%2Ffind-a-realtor-who-is-right-for-you","conseils-aux-acheteurs%2Fvisionner-les-maisons%2Ftrouver-le-coutier-ou-lagent-immobilier-qui-vous-convient","%2Ftips-for-buyers%233-1","%2Fconseils-aux-acheteurs%233-1",{});RoutingDictionary["tips-for-buyers/viewing-homes/see-whats-out-there"] = new RoutingRecord("tips-for-buyers/viewing-homes/see-whats-out-there","tips-for-buyers%2Fviewing-homes%2Fsee-whats-out-there","conseils-aux-acheteurs%2Fvisionner-les-maisons%2Ftater-le-terrain","%2Ftips-for-buyers%233-2","%2Fconseils-aux-acheteurs%233-2",{});RoutingDictionary["tips-for-buyers/make-an-offer"] = new RoutingRecord("tips-for-buyers/make-an-offer","tips-for-buyers%2Fmake-an-offer","conseils-aux-acheteurs%2Ffaire-une-offre","%2Ftips-for-buyers%234","%2Fconseils-aux-acheteurs%234",{});RoutingDictionary["tips-for-buyers/make-an-offer/make-an-offer"] = new RoutingRecord("tips-for-buyers/make-an-offer/make-an-offer","tips-for-buyers%2Fmake-an-offer%2Fmake-an-offer","conseils-aux-acheteurs%2Ffaire-une-offre%2Ffaire-une-offre","%2Ftips-for-buyers%234-1","%2Fconseils-aux-acheteurs%234-1",{});RoutingDictionary["tips-for-buyers/make-an-offer/find-a-home-inspector"] = new RoutingRecord("tips-for-buyers/make-an-offer/find-a-home-inspector","tips-for-buyers%2Fmake-an-offer%2Ffind-a-home-inspector","conseils-aux-acheteurs%2Ffaire-une-offre%2Ftrover-un-inspecteur-dhabitations","%2Ftips-for-buyers%234-2","%2Fconseils-aux-acheteurs%234-2",{});RoutingDictionary["tips-for-buyers/closing-the-purchase"] = new RoutingRecord("tips-for-buyers/closing-the-purchase","tips-for-buyers%2Fclosing-the-purchase","conseils-aux-acheteurs%2Fconclure-lachat","%2Ftips-for-buyers%235","%2Fconseils-aux-acheteurs%235",{});RoutingDictionary["tips-for-buyers/closing-the-purchase/add-a-lawyer-to-your-team"] = new RoutingRecord("tips-for-buyers/closing-the-purchase/add-a-lawyer-to-your-team","tips-for-buyers%2Fclosing-the-purchase%2Fadd-a-lawyer-to-your-team","conseils-aux-acheteurs%2Fconclure-lachat%2Ffaire-appel-aux-services-dun-notaire-ou-dun-avocat","%2Ftips-for-buyers%235-1","%2Fconseils-aux-acheteurs%235-1",{});RoutingDictionary["tips-for-buyers/closing-the-purchase/close-the-purchase"] = new RoutingRecord("tips-for-buyers/closing-the-purchase/close-the-purchase","tips-for-buyers%2Fclosing-the-purchase%2Fclose-the-purchase","conseils-aux-acheteurs%2Fconclure-lachat%2Fconclure-lachat","%2Ftips-for-buyers%235-2","%2Fconseils-aux-acheteurs%235-2",{});RoutingDictionary["tips-for-buyers/closing-the-purchase/move-in"] = new RoutingRecord("tips-for-buyers/closing-the-purchase/move-in","tips-for-buyers%2Fclosing-the-purchase%2Fmove-in","conseils-aux-acheteurs%2Fconclure-lachat%2Flemmenagement","%2Ftips-for-buyers%235-3","%2Fconseils-aux-acheteurs%235-3",{});RoutingDictionary["meet-a-realtor"] = new RoutingRecord("meet-a-realtor","realtors","courtiers-immobiliers","","",{});RoutingDictionary["meet-a-realtor/office"] = new RoutingRecord("meet-a-realtor/office","brokerage","agence-immobiliere","","",{});RoutingDictionary["meet-a-realtor/location"] = new RoutingRecord("meet-a-realtor/location","realtors%2Flocation","courtiers-immobiliers%2Femplacement","","",{});RoutingDictionary["meet-a-realtor/name"] = new RoutingRecord("meet-a-realtor/name","realtors%2Fname","courtiers-immobiliers%2Fnom","","",{});RoutingDictionary["error"] = new RoutingRecord("error","error","erreur","","",{});RoutingDictionary["canada/real-estate"] = new RoutingRecord("canada/real-estate","canada%2Freal-estate","canada%2Fimmobilier","","",{});RoutingDictionary["email-realtor-feedback"] = new RoutingRecord("email-realtor-feedback","email-realtor-feedback","commentaires-courriel-courtier-agent","","",{});RoutingDictionary["map"] = new RoutingRecord("map","map","carte","","",{});RoutingDictionary["privacy-policy"] = new RoutingRecord("privacy-policy","privacy-policy","politique-de-confidentialite","","",{});RoutingDictionary["privacy-policy-realtor-ca"] = new RoutingRecord("privacy-policy-realtor-ca","privacy-policy%2Frealtor-ca","politique-de-confidentialite%2Frealtor-ca","","",{});RoutingDictionary["privacy-policy-all-crea"] = new RoutingRecord("privacy-policy-all-crea","privacy-policy%2Fall-crea-sites","politique-de-confidentialite%2Ftous-les-sites-de-l%E2%80%99aci","","",{});RoutingDictionary["privacy-policy-global"] = new RoutingRecord("privacy-policy-global","privacy-policy%2Frealtors-and-global-affiliates","politique-de-confidentialite%2Fmembres-de-l%E2%80%99aci-et-affilies-internationaux","","",{});RoutingDictionary["privacy-policy-buyers-sellers"] = new RoutingRecord("privacy-policy-buyers-sellers","privacy-policy%2Fbuyers-and-sellers","politique-de-confidentialite%2Facheteurs-et-proprietaires-vendeurs","","",{});RoutingDictionary["privacy-policy-general"] = new RoutingRecord("privacy-policy-general","privacy-policy%2Fgeneral-policy-information","politique-de-confidentialite%2Fpolitique-generales-de-confidentialite","","",{});RoutingDictionary["global-buyers"] = new RoutingRecord("global-buyers","global-buyers","acheteurs-internationaux","","",{});RoutingDictionary["about-us"] = new RoutingRecord("about-us","about-realtorca","a-propos-de-realtorca","","",{});RoutingDictionary["contact-us"] = new RoutingRecord("contact-us","contact-us","nous-joindre","","",{});RoutingDictionary["frequently-asked-questions"] = new RoutingRecord("frequently-asked-questions","frequently-asked-questions","foire-aux-questions","","",{});RoutingDictionary["terms-of-use"] = new RoutingRecord("terms-of-use","terms-of-use","conditions-utilisation","","",{});RoutingDictionary["disclaimer"] = new RoutingRecord("disclaimer","disclaimer","d%C3%A9sistement","","",{});RoutingDictionary["realtor-code-of-ethics"] = new RoutingRecord("realtor-code-of-ethics","realtor-code-of-ethics","code-de-conduite","","",{});RoutingDictionary["my-saved-searches"] = new RoutingRecord("my-saved-searches","my-saved-searches","mes-recherches-sauvegardees","","",{});RoutingDictionary["why-get-account"] = new RoutingRecord("why-get-account","why-get-account","pourquoi-obtenir-un-compte","","",{});RoutingDictionary["my-favourites"] = new RoutingRecord("my-favourites","my-favourites","mes-inscriptions-favourites","","",{});RoutingDictionary["email-a-friend"] = new RoutingRecord("email-a-friend","email-a-friend","courriel-a-un-ami","","",{});RoutingDictionary["email-a-realtor"] = new RoutingRecord("email-a-realtor","email-a-realtor","courriel-au-coutier-ou-a-lagent","","",{});RoutingDictionary["casl"] = new RoutingRecord("casl","casl","lcap","","",{});RoutingDictionary["site-map"] = new RoutingRecord("site-map","site-map","carte-du-site","","",{});RoutingDictionary["ddf-landing"] = new RoutingRecord("ddf-landing","ddf","sdd","","",{});RoutingDictionary["ddf-advertising"] = new RoutingRecord("ddf-advertising","ddf%2Freal-estate-advertising-websites","sdd%2Fsite-web-annonces-immobilieres","","",{});RoutingDictionary["ddf-franchisors"] = new RoutingRecord("ddf-franchisors","ddf%2Ffranchisors","sdd%2Ffranchiseurs","","",{});RoutingDictionary["ddf-technology"] = new RoutingRecord("ddf-technology","ddf%2Ftechnology-providers","sdd%2Ffournisseurs-services-technologiques","","",{});RoutingDictionary["dream-home-checklist"] = new RoutingRecord("dream-home-checklist","localization%2Fen-ca%2Fcontent%2Fdream_home_checklist.pdf","localization%2Ffr-ca%2Fcontent%2Fmaison_de_r%C3%AAve_liste_de_verification.pdf","","",{});RoutingDictionary["house-hunting-checklist"] = new RoutingRecord("house-hunting-checklist","localization%2Fen-ca%2Fcontent%2Fhouse_hunting_checklist.pdf","localization%2Ffr-ca%2Fcontent%2Frecherche_d-une_maison.pdf","","",{});RoutingDictionary["home-buyers-roadmap"] = new RoutingRecord("home-buyers-roadmap","localization%2Fen-ca%2Fcontent%2Fhomebuyers_road_map.pdf","localization%2Ffr-ca%2Fcontent%2Ffeuille_de_route_en_vue_de_lachat_dune_maison.pdf","","",{});RoutingDictionary["commercial-leasers-guide"] = new RoutingRecord("commercial-leasers-guide","localization%2Fen-ca%2Fcontent%2Frealtor.ca_commercial_leasing.pdf","localization%2Ffr-ca%2Fcontent%2Frealtor.ca_commercial_leasing_fr.pdf","","",{});RoutingDictionary["commercial-sellers-guide"] = new RoutingRecord("commercial-sellers-guide","localization%2Fen-ca%2Fcontent%2Frealtor.ca_commercial_selling.pdf","localization%2Ffr-ca%2Fcontent%2Frealtor.ca_commercial_selling_fr.pdf","","",{});RoutingDictionary["commercial-buyers-guide"] = new RoutingRecord("commercial-buyers-guide","localization%2Fen-ca%2Fcontent%2Frealtor.ca_commercial_buying.pdf","localization%2Ffr-ca%2Fcontent%2Frealtor.ca_commercial_buying_fr.pdf","","",{});RoutingDictionary["home-ready-checklist"] = new RoutingRecord("home-ready-checklist","localization%2Fen-ca%2Fcontent%2Fhome_ready_checklist.pdf","localization%2Ffr-ca%2Fcontent%2Fmaison_fin_prete_liste_de_verification.pdf","","",{});RoutingDictionary["realtorcanadaresults"] = new RoutingRecord("realtorcanadaresults","realtors%2Fcanada","courtiers-immobiliers%2Fcanada","","",{});RoutingDictionary["realtorprovinceresults"] = new RoutingRecord("realtorprovinceresults","realtors%2F%7Bprovincecode%7D","courtiers-immobiliers%2F%7Bprovincecode%7D","","",{});RoutingDictionary["realtorcityresults"] = new RoutingRecord("realtorcityresults","realtors%2F%7Bprovincecode%7D%2F%7Bcity%7D","courtiers-immobiliers%2F%7Bprovincecode%7D%2F%7Bcity%7D","","",{});RoutingDictionary["unsubscribe-notification-email"] = new RoutingRecord("unsubscribe-notification-email","unsubscribe-notification","desabonner-notification","","",{});RoutingDictionary["unsubscribe"] = new RoutingRecord("unsubscribe","unsubscribe","se-desabonner","","",{});RoutingDictionary["nac-landing"] = new RoutingRecord("nac-landing","welcomehome","welcomehome","","",{});;
